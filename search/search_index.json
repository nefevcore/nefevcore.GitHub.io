{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ABAP\u5f00\u53d1\u6587\u6863 \u00b6 \u603b\u7ed3\u4e0b\u5f00\u53d1\u7ecf\u9a8c\uff0c\u6574\u7406\u7684\u65b9\u5411\u6709\u4e0b\u9762\u51e0\u70b9 \u5b8c\u6574\u5b9e\u65bd\u6d41\u7a0b \u6587\u6863\u5c06\u6309\u7167ERP\u6807\u51c6\u5b9e\u65bd\u6d41\u7a0b\u6765\u6574\u7406\uff0c\u4ece\u5404\u7c7b\u4e3b\u6570\u636e\u5f55\u5165\uff0c\u5230\u4e1a\u52a1\u5b9e\u65bd\uff0c\u518d\u5230\u8d22\u52a1\u7ed3\u7b97\uff0c\u6700\u7ec8\u5b8c\u6210\u54c1\u4f1a\u662f\u4e00\u4efd\u5f00\u53d1\u5b9e\u65bd\u6307\u5bfc\u3002 TCODE\u592a\u591a\u8bb0\u4e0d\u4f4f\uff1f\u591a\u5229\u7528SAP\u83dc\u5355\uff0c\u4e3b\u8981\u4e1a\u52a1\u90fd\u5728\u5176\u4e0a\u3002 \u793a\u4f8b\u4ee3\u7801\u4e0e\u5f02\u5e38\u60c5\u51b5\u5206\u6790 \u4e0d\u540c\u9879\u76ee\uff0c\u4e0d\u540c\u9700\u6c42\uff0c\u5c11\u6709\u5b8c\u5168\u4e00\u6837\u7684\u4ee3\u7801\u3002\u56e0\u6b64\u8be5\u6587\u6863\u53ea\u80fd\u63d0\u4f9b\u793a\u4f8b\u4ee3\u7801\u4f5c\u4e3a\u53c2\u8003\uff0c\u8f85\u4ee5\u5f02\u5e38\u60c5\u51b5\u5206\u6790\u8bf4\u660e\uff0c\u5f00\u53d1\u4eba\u5458\u5e94\u5f53\u7ed3\u5408\u5b9e\u9645\u60c5\u51b5\u8fdb\u884c\u8c03\u6574\u3002 \u6587\u6863\u6709\u8bef\u6216\u6d41\u7a0b\u4e0d\u5b8c\u5584\uff0c\u6b22\u8fce\u5230 Github \u4e0a\u53cd\u9988","title":"\u6982\u8ff0"},{"location":"#abap","text":"\u603b\u7ed3\u4e0b\u5f00\u53d1\u7ecf\u9a8c\uff0c\u6574\u7406\u7684\u65b9\u5411\u6709\u4e0b\u9762\u51e0\u70b9 \u5b8c\u6574\u5b9e\u65bd\u6d41\u7a0b \u6587\u6863\u5c06\u6309\u7167ERP\u6807\u51c6\u5b9e\u65bd\u6d41\u7a0b\u6765\u6574\u7406\uff0c\u4ece\u5404\u7c7b\u4e3b\u6570\u636e\u5f55\u5165\uff0c\u5230\u4e1a\u52a1\u5b9e\u65bd\uff0c\u518d\u5230\u8d22\u52a1\u7ed3\u7b97\uff0c\u6700\u7ec8\u5b8c\u6210\u54c1\u4f1a\u662f\u4e00\u4efd\u5f00\u53d1\u5b9e\u65bd\u6307\u5bfc\u3002 TCODE\u592a\u591a\u8bb0\u4e0d\u4f4f\uff1f\u591a\u5229\u7528SAP\u83dc\u5355\uff0c\u4e3b\u8981\u4e1a\u52a1\u90fd\u5728\u5176\u4e0a\u3002 \u793a\u4f8b\u4ee3\u7801\u4e0e\u5f02\u5e38\u60c5\u51b5\u5206\u6790 \u4e0d\u540c\u9879\u76ee\uff0c\u4e0d\u540c\u9700\u6c42\uff0c\u5c11\u6709\u5b8c\u5168\u4e00\u6837\u7684\u4ee3\u7801\u3002\u56e0\u6b64\u8be5\u6587\u6863\u53ea\u80fd\u63d0\u4f9b\u793a\u4f8b\u4ee3\u7801\u4f5c\u4e3a\u53c2\u8003\uff0c\u8f85\u4ee5\u5f02\u5e38\u60c5\u51b5\u5206\u6790\u8bf4\u660e\uff0c\u5f00\u53d1\u4eba\u5458\u5e94\u5f53\u7ed3\u5408\u5b9e\u9645\u60c5\u51b5\u8fdb\u884c\u8c03\u6574\u3002 \u6587\u6863\u6709\u8bef\u6216\u6d41\u7a0b\u4e0d\u5b8c\u5584\uff0c\u6b22\u8fce\u5230 Github \u4e0a\u53cd\u9988","title":"ABAP\u5f00\u53d1\u6587\u6863"},{"location":"about/","text":"\u7ed3\u8bed \u00b6 \u8fd8\u6ca1\u7ed3\u675f\u5462\u3002","title":"\u7ed3\u8bed"},{"location":"about/#_1","text":"\u8fd8\u6ca1\u7ed3\u675f\u5462\u3002","title":"\u7ed3\u8bed"},{"location":"log/","text":"\u66f4\u65b0\u65e5\u5fd7 \u00b6 \u7f16\u8f91\u4e2d \u00b6 20220825 \u00b6 \u65b0\u589e \u4e09\u5927\u62a5\u8868","title":"\u66f4\u65b0"},{"location":"log/#_1","text":"","title":"\u66f4\u65b0\u65e5\u5fd7"},{"location":"log/#_2","text":"","title":"\u7f16\u8f91\u4e2d"},{"location":"log/#20220825","text":"\u65b0\u589e \u4e09\u5927\u62a5\u8868","title":"20220825"},{"location":"ex/","text":"\u9644\u5f55 \u00b6 \u4e00\u4e9b\u4e0d\u5728\u5b9e\u65bd\u6d41\u7a0b\u4e2d\u7684\u7b14\u8bb0\uff0c\u6211\u4f1a\u6574\u7406\u5230\u9644\u5f55\u4e2d\u3002","title":"\u9644\u5f55"},{"location":"ex/#_1","text":"\u4e00\u4e9b\u4e0d\u5728\u5b9e\u65bd\u6d41\u7a0b\u4e2d\u7684\u7b14\u8bb0\uff0c\u6211\u4f1a\u6574\u7406\u5230\u9644\u5f55\u4e2d\u3002","title":"\u9644\u5f55"},{"location":"ex/cmod/","text":"CMOD\u589e\u5f3a \u00b6 \u67e5\u627eCMOD\u589e\u5f3a \u00b6 \u5728\u7a0b\u5e8f\u4e2d\u641c\u7d22 CUSTOMER-FUNCTION \u627e\u5230\u540e\u9762\u76843\u4f4d\u6570\u5b57\u7f16\u53f7\uff0c\u51fa\u53e3\u51fd\u6570\u540d\u7684\u89c4\u5219\u4e3aEXIT_< \u7a0b\u5e8f\u540d >_<3\u4f4d\u6570\u5b57>\uff0c\u7136\u540e\u901a\u8fc7\u627e\u5230\u7684\u51fa\u53e3\u51fd\u6570\u540d\u5230 MODSAP \u8868\u91cc\u67e5\u627e\u6240\u5bf9\u5e94\u7684\u51fa\u53e3\u5bf9\u8c61 \uff08\u5373\u589e\u5f3a\u70b9\uff09 \u901a\u8fc7\u8c03\u8bd5\u7cfb\u7edf\u76f8\u5173\u51fd\u6570\uff1aMODX_FUNCTION_ACTIVE_CHECK \u4ee3\u7801\u627e\u589e\u5f3a E\u7c7b\uff1a MODX_FUNCTION_ACTIVE_CHECK \uff08\u68c0\u67e5\u529f\u80fd\u51fa\u53e3\u7c7b\u7528\u6237\u51fa\u53e3\u662f\u5426\u88ab\u6fc0\u6d3b\uff09 C\u7c7b\uff1a MODX_MENUENTRY_ACTIVE_CHECK \uff08\u68c0\u67e5\u83dc\u5355\u5173\u952e\u5b57\u7c7b\u589e\u5f3a\u6fc0\u6d3b\u72b6\u51b5\uff09 S\u7c7b\uff1a MODX_SUBSCREEN_ACTIVE_CHECK \uff08\u68c0\u67e5\u5c4f\u5e55\u7c7b\u589e\u5f3a\u6fc0\u6d3b\u72b6\u51b5\uff09 SAP\u7684\u4efb\u4f55\u4e00\u4e2a\u4e8b\u52a1\u7801 \u5bf9\u5e94\u7684\u6807\u6ce8\u7a0b\u5e8f\u90fd\u7559\u4e0b\u4e86\u5927\u91cf\u7684\u7528\u6237\u51fa\u53e3\uff0c\u6b63\u662fSAP\u7075\u6d3b\u7684\u914d\u7f6e\u548c\u5f3a\u5927\u7684\u7528\u6237\u51fa\u53e3\uff0c\u624d\u4f7f\u5176\u4ea7\u54c1\u8f7b\u677e\u5e94\u5bf9\u5404\u79cd\u590d\u6742\u9700\u6c42\u6210\u4e3a\u53ef\u80fd\uff0c\u7cfb\u7edf\u8fd8\u4e3a\u80fd\u5feb\u901f\u627e\u5230\u548c\u6fc0\u6d3b\u8fd9\u4e9b\u589e\u5f3a\u8fdb\u884c\u4e86\u6709\u6548\u7ec4\u7ec7\uff0c\u5404\u7c7b\u589e\u5f3a\u88ab\u8bb0\u5f55\u5728table\u4e2d\u5e76\u4e14\u63d0\u4f9b\u4e86\u76f8\u5173\u68c0\u67e5\u51fd\u6570\uff0c\u4ece\u800c\u66f4\u65b9\u4fbf\u7cfb\u7edf\u5b9e\u65bd\u8fc7\u7a0b \u3002","title":"CMOD\u589e\u5f3a"},{"location":"ex/cmod/#cmod","text":"","title":"CMOD\u589e\u5f3a"},{"location":"ex/cmod/#cmod_1","text":"\u5728\u7a0b\u5e8f\u4e2d\u641c\u7d22 CUSTOMER-FUNCTION \u627e\u5230\u540e\u9762\u76843\u4f4d\u6570\u5b57\u7f16\u53f7\uff0c\u51fa\u53e3\u51fd\u6570\u540d\u7684\u89c4\u5219\u4e3aEXIT_< \u7a0b\u5e8f\u540d >_<3\u4f4d\u6570\u5b57>\uff0c\u7136\u540e\u901a\u8fc7\u627e\u5230\u7684\u51fa\u53e3\u51fd\u6570\u540d\u5230 MODSAP \u8868\u91cc\u67e5\u627e\u6240\u5bf9\u5e94\u7684\u51fa\u53e3\u5bf9\u8c61 \uff08\u5373\u589e\u5f3a\u70b9\uff09 \u901a\u8fc7\u8c03\u8bd5\u7cfb\u7edf\u76f8\u5173\u51fd\u6570\uff1aMODX_FUNCTION_ACTIVE_CHECK \u4ee3\u7801\u627e\u589e\u5f3a E\u7c7b\uff1a MODX_FUNCTION_ACTIVE_CHECK \uff08\u68c0\u67e5\u529f\u80fd\u51fa\u53e3\u7c7b\u7528\u6237\u51fa\u53e3\u662f\u5426\u88ab\u6fc0\u6d3b\uff09 C\u7c7b\uff1a MODX_MENUENTRY_ACTIVE_CHECK \uff08\u68c0\u67e5\u83dc\u5355\u5173\u952e\u5b57\u7c7b\u589e\u5f3a\u6fc0\u6d3b\u72b6\u51b5\uff09 S\u7c7b\uff1a MODX_SUBSCREEN_ACTIVE_CHECK \uff08\u68c0\u67e5\u5c4f\u5e55\u7c7b\u589e\u5f3a\u6fc0\u6d3b\u72b6\u51b5\uff09 SAP\u7684\u4efb\u4f55\u4e00\u4e2a\u4e8b\u52a1\u7801 \u5bf9\u5e94\u7684\u6807\u6ce8\u7a0b\u5e8f\u90fd\u7559\u4e0b\u4e86\u5927\u91cf\u7684\u7528\u6237\u51fa\u53e3\uff0c\u6b63\u662fSAP\u7075\u6d3b\u7684\u914d\u7f6e\u548c\u5f3a\u5927\u7684\u7528\u6237\u51fa\u53e3\uff0c\u624d\u4f7f\u5176\u4ea7\u54c1\u8f7b\u677e\u5e94\u5bf9\u5404\u79cd\u590d\u6742\u9700\u6c42\u6210\u4e3a\u53ef\u80fd\uff0c\u7cfb\u7edf\u8fd8\u4e3a\u80fd\u5feb\u901f\u627e\u5230\u548c\u6fc0\u6d3b\u8fd9\u4e9b\u589e\u5f3a\u8fdb\u884c\u4e86\u6709\u6548\u7ec4\u7ec7\uff0c\u5404\u7c7b\u589e\u5f3a\u88ab\u8bb0\u5f55\u5728table\u4e2d\u5e76\u4e14\u63d0\u4f9b\u4e86\u76f8\u5173\u68c0\u67e5\u51fd\u6570\uff0c\u4ece\u800c\u66f4\u65b9\u4fbf\u7cfb\u7edf\u5b9e\u65bd\u8fc7\u7a0b \u3002","title":"\u67e5\u627eCMOD\u589e\u5f3a"},{"location":"ex/mdnote/","text":"Markdown\u8bed\u6cd5 \u00b6 \u6587\u672c\u6837\u5f0f \u00b6 \u793a\u4f8b \u8f93\u51fa *\u659c\u4f53* \u659c\u4f53 **\u52a0\u7c97** \u52a0\u7c97 ***\u659c\u4f53\u52a0\u7c97*** \u659c\u4f53\u52a0\u7c97 ~~\u5220\u9664~~ \u5220\u9664 \u5f15\u7528 \u00b6 \u524d\u52a0 > \u5f15\u7528 \u5206\u9694\u7b26\u53f7 \u00b6 \u4e09\u4e2a\u4ee5\u4e0a\u6a2a\u6760 --- \u5217\u8868 \u00b6 \u524d\u7f00 - + * \u6d4b\u8bd5 \u6d4b\u8bd5 \u6d4b\u8bd5 \u5e8f\u53f7 \u00b6 1. 2. 3. \u6d41\u6c34 \u6d4b\u8bd5 \u6d4b\u8bd5 \u56fe\u7247 \u00b6 ![\u63cf\u8ff0] \u8def\u5f84 \u8def\u5f84 \u4ee3\u7801 \u00b6 \u533a\u57df\u524d\u540e```\u5305\u88f9 DATA ( VAR ) = 'DEMO' . \u6298\u53e0 \u00b6 \u5185\u5d4cHTML\u5b9e\u73b0 <details> <summary>\u793a\u4f8b\u4ee3\u7801</summary> </details>","title":"MarkDown\u8bed\u6cd5"},{"location":"ex/mdnote/#markdown","text":"","title":"Markdown\u8bed\u6cd5"},{"location":"ex/mdnote/#_1","text":"\u793a\u4f8b \u8f93\u51fa *\u659c\u4f53* \u659c\u4f53 **\u52a0\u7c97** \u52a0\u7c97 ***\u659c\u4f53\u52a0\u7c97*** \u659c\u4f53\u52a0\u7c97 ~~\u5220\u9664~~ \u5220\u9664","title":"\u6587\u672c\u6837\u5f0f"},{"location":"ex/mdnote/#_2","text":"\u524d\u52a0 > \u5f15\u7528","title":"\u5f15\u7528"},{"location":"ex/mdnote/#_3","text":"\u4e09\u4e2a\u4ee5\u4e0a\u6a2a\u6760 ---","title":"\u5206\u9694\u7b26\u53f7"},{"location":"ex/mdnote/#_4","text":"\u524d\u7f00 - + * \u6d4b\u8bd5 \u6d4b\u8bd5 \u6d4b\u8bd5","title":"\u5217\u8868"},{"location":"ex/mdnote/#_5","text":"1. 2. 3. \u6d41\u6c34 \u6d4b\u8bd5 \u6d4b\u8bd5","title":"\u5e8f\u53f7"},{"location":"ex/mdnote/#_6","text":"![\u63cf\u8ff0] \u8def\u5f84 \u8def\u5f84","title":"\u56fe\u7247"},{"location":"ex/mdnote/#_7","text":"\u533a\u57df\u524d\u540e```\u5305\u88f9 DATA ( VAR ) = 'DEMO' .","title":"\u4ee3\u7801"},{"location":"ex/mdnote/#_8","text":"\u5185\u5d4cHTML\u5b9e\u73b0 <details> <summary>\u793a\u4f8b\u4ee3\u7801</summary> </details>","title":"\u6298\u53e0"},{"location":"ex/nest_loop/","text":"\u5d4c\u5957\u5faa\u73af\u4f18\u5316 \u00b6 \u7f51\u4e0a\u5206\u6790\u633a\u591a\uff0c\u6211\u5c31\u4e0d\u91cd\u590d\u4e86\uff0c\u76f4\u63a5\u4e0a\u4e2a\u6709\u6548\u7684\u4f18\u5316\u65b9\u6848\u3002 \u4e8c\u5206\u67e5\u627e \u00b6 \u793a\u4f8b\u4ee3\u7801 TYPES : BEGIN OF ty_data , field1 TYPE string , field2 TYPE string , END OF ty_data . DATA : lt_head TYPE STANDARD TABLE OF ty_data , ls_head TYPE ty_data , lt_item TYPE STANDARD TABLE OF ty_data , ls_item TYPE ty_data . SORT lt_item BY field1 field2 . LOOP AT lt_head INTO ls_head . \" ABAP\u4e2d\u7684\u4e8c\u5206\u67e5\u627e\uff0c\u4f1a\u627e\u5230\u91cd\u590d\u9879\u7684\u9996\u9879 READ TABLE lt_item TRANSPORTING NO FIELDS WITH KEY field1 = ls_head - field1 BINARY SEARCH . IF sy - subrc = 0 . LOOP AT lt_item INTO ls_item FROM sy - tabix . IF ls_item - field1 <> ls_head - field1 . EXIT . ENDIF . \" write something... ENDLOOP . ENDIF . ENDLOOP .","title":"\u5d4c\u5957\u5faa\u73af"},{"location":"ex/nest_loop/#_1","text":"\u7f51\u4e0a\u5206\u6790\u633a\u591a\uff0c\u6211\u5c31\u4e0d\u91cd\u590d\u4e86\uff0c\u76f4\u63a5\u4e0a\u4e2a\u6709\u6548\u7684\u4f18\u5316\u65b9\u6848\u3002","title":"\u5d4c\u5957\u5faa\u73af\u4f18\u5316"},{"location":"ex/nest_loop/#_2","text":"\u793a\u4f8b\u4ee3\u7801 TYPES : BEGIN OF ty_data , field1 TYPE string , field2 TYPE string , END OF ty_data . DATA : lt_head TYPE STANDARD TABLE OF ty_data , ls_head TYPE ty_data , lt_item TYPE STANDARD TABLE OF ty_data , ls_item TYPE ty_data . SORT lt_item BY field1 field2 . LOOP AT lt_head INTO ls_head . \" ABAP\u4e2d\u7684\u4e8c\u5206\u67e5\u627e\uff0c\u4f1a\u627e\u5230\u91cd\u590d\u9879\u7684\u9996\u9879 READ TABLE lt_item TRANSPORTING NO FIELDS WITH KEY field1 = ls_head - field1 BINARY SEARCH . IF sy - subrc = 0 . LOOP AT lt_item INTO ls_item FROM sy - tabix . IF ls_item - field1 <> ls_head - field1 . EXIT . ENDIF . \" write something... ENDLOOP . ENDIF . ENDLOOP .","title":"\u4e8c\u5206\u67e5\u627e"},{"location":"ex/send_mail/","text":"\u90ae\u4ef6\u53d1\u9001 \u00b6 SBWP\uff0c\u53d1\u9001\u6d4b\u8bd5 SOST\uff0c\u90ae\u7bb1\u7ba1\u7406 SCOT\uff0c\u8282\u70b9\u914d\u7f6e \u90ae\u4ef6\u53d1\u9001\u4ee3\u7801 DATA : send_request TYPE REF TO cl_bcs , document TYPE REF TO cl_document_bcs , fail TYPE REF TO cx_bcs , recipient TYPE REF TO if_recipient_bcs . DATA : ls TYPE string , mailto TYPE ad_smtpadr , main_text TYPE bcsy_text , title TYPE so_obj_des . ls = '\u8be5\u90ae\u4ef6\u7528\u4e8e\u6d4b\u8bd5\u6f14\u793a\u7a0b\u5e8f' . APPEND ls TO main_text . title = '\u90ae\u4ef6\u53d1\u9001\u6d4b\u8bd5' . mailto = 'xxx@xxx.xx' . TRY . \" \u521b\u5efa\u53d1\u9001\u8bf7\u6c42 send_request = cl_bcs => create_persistent ( ). \" \u521b\u5efa\u6574\u7406\u53d1\u9001\u5185\u5bb9 document = cl_document_bcs => create_document ( i_type = 'RAW' i_text = main_text i_subject = title ). \" \u6dfb\u52a0\u90ae\u4ef6\u5185\u5bb9\u5230\u53d1\u9001\u8bf7\u6c42 send_request -> set_document ( document ). \" \u90ae\u4ef6\u5730\u5740\u8f6c\u6362 recipient = cl_cam_address_bcs => create_internet_address ( mailto ). \" \u6dfb\u52a0\u90ae\u4ef6\u5730\u5740\u5230\u53d1\u9001\u8bf7\u6c42 send_request -> add_recipient ( recipient ). \" \u6b63\u5f0f\u53d1\u9001\u5e76\u63d0\u4ea4\u4f5c\u4e1a send_request -> send ( i_with_error_screen = 'X' ). COMMIT WORK AND WAIT . CATCH cx_bcs INTO fail . ENDTRY .","title":"\u90ae\u4ef6\u53d1\u9001"},{"location":"ex/send_mail/#_1","text":"SBWP\uff0c\u53d1\u9001\u6d4b\u8bd5 SOST\uff0c\u90ae\u7bb1\u7ba1\u7406 SCOT\uff0c\u8282\u70b9\u914d\u7f6e \u90ae\u4ef6\u53d1\u9001\u4ee3\u7801 DATA : send_request TYPE REF TO cl_bcs , document TYPE REF TO cl_document_bcs , fail TYPE REF TO cx_bcs , recipient TYPE REF TO if_recipient_bcs . DATA : ls TYPE string , mailto TYPE ad_smtpadr , main_text TYPE bcsy_text , title TYPE so_obj_des . ls = '\u8be5\u90ae\u4ef6\u7528\u4e8e\u6d4b\u8bd5\u6f14\u793a\u7a0b\u5e8f' . APPEND ls TO main_text . title = '\u90ae\u4ef6\u53d1\u9001\u6d4b\u8bd5' . mailto = 'xxx@xxx.xx' . TRY . \" \u521b\u5efa\u53d1\u9001\u8bf7\u6c42 send_request = cl_bcs => create_persistent ( ). \" \u521b\u5efa\u6574\u7406\u53d1\u9001\u5185\u5bb9 document = cl_document_bcs => create_document ( i_type = 'RAW' i_text = main_text i_subject = title ). \" \u6dfb\u52a0\u90ae\u4ef6\u5185\u5bb9\u5230\u53d1\u9001\u8bf7\u6c42 send_request -> set_document ( document ). \" \u90ae\u4ef6\u5730\u5740\u8f6c\u6362 recipient = cl_cam_address_bcs => create_internet_address ( mailto ). \" \u6dfb\u52a0\u90ae\u4ef6\u5730\u5740\u5230\u53d1\u9001\u8bf7\u6c42 send_request -> add_recipient ( recipient ). \" \u6b63\u5f0f\u53d1\u9001\u5e76\u63d0\u4ea4\u4f5c\u4e1a send_request -> send ( i_with_error_screen = 'X' ). COMMIT WORK AND WAIT . CATCH cx_bcs INTO fail . ENDTRY .","title":"\u90ae\u4ef6\u53d1\u9001"},{"location":"fico/","text":"FICO\u6a21\u5757\u6982\u8ff0 \u00b6 \u8d22\u52a1\u7684\u5185\u5bb9\u5f88\u591a\uff0c\u5927\u90e8\u5206\u662f\u62a5\u8868\uff0c\u4e00\u65f6\u534a\u4f1a\u60f3\u4e0d\u8d77\u6765\uff0c\u9047\u5230\u518d\u8865\u5145","title":"FICO\u6a21\u5757\u6982\u8ff0"},{"location":"fico/#fico","text":"\u8d22\u52a1\u7684\u5185\u5bb9\u5f88\u591a\uff0c\u5927\u90e8\u5206\u662f\u62a5\u8868\uff0c\u4e00\u65f6\u534a\u4f1a\u60f3\u4e0d\u8d77\u6765\uff0c\u9047\u5230\u518d\u8865\u5145","title":"FICO\u6a21\u5757\u6982\u8ff0"},{"location":"fico/fi_report/","text":"\u901a\u7528\u53d6\u503c\u6a21\u5757 \u00b6 \u8d22\u52a1\u4e09\u5927\u62a5\u8868\u53d6\u503c\u90e8\u5206\u53ef\u4ee5\u901a\u7528\uff0c\u56e0\u6b64\u4e0b\u9762\u53ea\u5bf9\u53d6\u503c\u90e8\u5206\u8fdb\u884c\u5c01\u88c5\uff0c\u901a\u8fc7\u4f20\u5165\u914d\u7f6e\uff0c\u53ef\u4ee5\u83b7\u53d6\u5404\u9879\u76ee\u7684\u5e74\u521d\u3001\u5e74\u672b\u3001\u5404\u671f\u95f4\u91d1\u989d\u3002 \u5165\u53c2\u7ed3\u6784 \u00b6 \u5b57\u6bb5 \u8bf4\u660e BUKRS \u516c\u53f8\u4ee3\u7801 ZITEM \u9879\u76ee ZITEM_SUB \u5b50\u9879\u76ee ZTEXT \u9879\u76ee\u63cf\u8ff0 REVERSE \u53cd\u5411\u6807\u8bc6\uff0c\u8ba1\u7b97\u6216\u6c47\u603b\u65f6\u4f7f\u7528 T_ACCAT_OPT \u79d1\u76eeRange\u8868 T_FILTER \u9664\u79d1\u76ee\u5916\u7684\u5176\u4ed6Range\u8868\uff0c\u6309\u5b57\u6bb5\u540d\u52a8\u6001\u8fc7\u6ee4 T_COLLECT ZITEM\u9879\u76ee\u5b50\u8868\uff0c\u6c47\u603b\u5176\u4ed6\u9879\u76ee\u7ed3\u679c \u793a\u4f8b\u5165\u53c2 \u00b6 \u5047\u5982\u73b0\u5728\u9700\u8981: \u9879\u76ee[\u8d44\u4ea7\u603b\u503c]\uff0cZITEM=1\uff0c\u6c47\u603b: \u79d1\u76ee1100* \u529f\u80fd\u8303\u56f4100\u3001200 ZITEM=2\u30013 \u79d1\u76ee2*\u4e14\u5229\u6da6\u4e2d\u5fc321* \u9879\u76ee[\u6d41\u52a8\u8d44\u4ea7]\uff0cZITEM=2\uff0c\u6c47\u603b\u79d1\u76ee3*\u30014*\u30015* \u9879\u76ee[\u975e\u6d41\u52a8\u8d44\u4ea7]\uff0cZITEM=3\uff0c\u6c47\u603b\u79d1\u76ee6*\u30017*\u30018* \u53ef\u4ee5\u5f97\u51fa\u5165\u53c2\uff1a BUKRS ZITEM ZITEM_SUB ZTEXT REVERSE T_ACCAT_OPT T_FILTER T_COLLECT 1000 1 1 \u8d44\u4ea7\u603b\u503c 1000 1 2 \u79d1\u76ee\u9879 1100* 1000 1 3 \u8fc7\u6ee4\u9879 \u529f\u80fd\u8303\u56f4=100/200 1000 1 4 \u5176\u4ed6\u9879 ZITEM=\u2154 1000 1 5 \u7ed3\u5408\u4f7f\u7528 2* \u5229\u6da6\u4e2d\u5fc3=21* 1000 2 1 \u6d41\u52a8\u8d44\u4ea7 1000 2 2 3* 1000 2 3 4* 1000 2 4 5* 1000 3 1 \u975e\u6d41\u52a8\u8d44\u4ea7 1000 3 2 6* 1000 3 3 7* 1000 3 4 8* \u51fa\u53c2\u7ed3\u6784 \u00b6 \u51fa\u53c2\u7ed3\u6784\u5305\u62ec\u4e86\u5e74\u521d\u3001\u5e74\u672b\u3001\u672c\u6708\u3001\u622a\u6b62\u672c\u6708\u7d2f\u8ba1\u3001\u5176\u4ed6\u5404\u6708\u6570\u636e\uff0c\u6309\u9700\u4f7f\u7528\u5373\u53ef\uff1a \u5b57\u6bb5 \u8bf4\u660e BUKRS \u516c\u53f8\u4ee3\u7801 YEAR \u5e74\u5ea6 PERIOD \u671f\u95f4 ZITEM \u9879\u76ee ZTEXT \u9879\u76ee\u63cf\u8ff0 YEAR_BEGIN \u5e74\u521d\u4f59\u989d TEAR_END \u5e74\u672b\u4f59\u989d PERIOD_CURRENT \u672c\u6708\u91d1\u989d PERIOD_TOTAL \u622a\u6b62\u672c\u6708\u7d2f\u8ba1\u91d1\u989d PERIOD_01 01\u6708\u4f59\u989d PERIOD_02 02\u6708\u4f59\u989d PERIOD_03 03\u6708\u4f59\u989d PERIOD_04 04\u6708\u4f59\u989d PERIOD_05 05\u6708\u4f59\u989d PERIOD_06 06\u6708\u4f59\u989d PERIOD_07 07\u6708\u4f59\u989d PERIOD_08 08\u6708\u4f59\u989d PERIOD_09 09\u6708\u4f59\u989d PERIOD_10 10\u6708\u4f59\u989d PERIOD_11 11\u6708\u4f59\u989d PERIOD_12 12\u6708\u4f59\u989d PERIOD_13 13\u6708\u4f59\u989d PERIOD_14 14\u6708\u4f59\u989d PERIOD_15 15\u6708\u4f59\u989d PERIOD_16 16\u6708\u4f59\u989d \u6587\u4ef6\u5bfc\u51fa \u00b6 \u4e09\u5927\u62a5\u8868\u683c\u5f0f\u56fa\u5b9a\uff0c\u56e0\u6b64\u53ef\u4ee5\u901a\u8fc7\u6587\u672c\u66ff\u6362\u7684\u65b9\u5f0f\uff0c\u5c06\u6a21\u677f\u4e2d\u7684\u5360\u4f4d\u7b26\u66ff\u6362\u4e3a\u5176\u4ed6\u503c\u3002 XLSX\u683c\u5f0f\u5bfc\u51fa \u00b6 XLSX\u683c\u5f0f\uff0c\u6216\u8005\u8bf4Openxml\u683c\u5f0f\uff0c\u4f1a\u5c06\u6587\u672c\u5168\u90e8\u5b58\u5165\u5230Sharedstrings.xml\u6587\u4ef6\u4e2d\uff0c\u56e0\u6b64\u901a\u8fc7\u66ff\u6362Sharedstrings\u4e2d\u7684\u6587\u672c\u5185\u5bb9\uff0c\u5373\u53ef\u5b9e\u73b0\u6587\u672c\u66ff\u6362\u3002 Openxml\u66ff\u6362Sharedstrings\u5185\u5bb9 *&---------------------------------------------------------------------* *& \u66ff\u6362\u6a21\u677f\u6587\u4ef6\u4e2d\u7684\u6587\u672c\u5185\u5bb9 *&---------------------------------------------------------------------* METHOD replace_texts . \" \u7a0b\u5e8f\u8981\u6c42IT_REPLACE\u81f3\u5c11\u4e24\u5217\uff0c\u4ee3\u7801\u4f1a\u5c06\u5de6\u5217\u5185\u5bb9\u66ff\u6362\u4e3a\u53f3\u5217\u5185\u5bb9 CHECK it_replace IS NOT INITIAL . \" \u6a21\u677f\u6587\u4ef6\u4e0d\u80fd\u4e3a\u7a7a CHECK c_doc IS NOT INITIAL . FIELD-SYMBOLS <fs_replace_t> TYPE ANY TABLE . FIELD-SYMBOLS <fs_replace> TYPE any . FIELD-SYMBOLS <fs_from> TYPE any . FIELD-SYMBOLS <fs_to> TYPE any . TRY . DATA ( lo_doc ) = cl_xlsx_document => load_document ( c_doc ). DATA ( lo_workbook_part ) = lo_doc -> get_workbookpart ( ). DATA ( lo_sharedstrings_part ) = lo_workbook_part -> get_sharedstringspart ( ). DATA ( l_sharedstrings_xml ) = lo_sharedstrings_part -> get_data ( ). DATA ( l_sharedstrings_str ) = cl_openxml_helper => xstring_to_string ( l_sharedstrings_xml ). ASSIGN it_replace TO <fs_replace_t> . LOOP AT <fs_replace_t> ASSIGNING <fs_replace> . ASSIGN COMPONENT 1 OF STRUCTURE <fs_replace> TO <fs_from> . ASSIGN COMPONENT 2 OF STRUCTURE <fs_replace> TO <fs_to> . IF <fs_from> IS ASSIGNED AND <fs_to> IS ASSIGNED . IF <fs_from> IS NOT INITIAL . REPLACE ALL OCCURRENCES OF <fs_from> IN l_sharedstrings_str WITH <fs_to> IN CHARACTER MODE . ENDIF . ENDIF . UNASSIGN <fs_from> . UNASSIGN <fs_to> . ENDLOOP . l_sharedstrings_xml = cl_openxml_helper => string_to_xstring ( l_sharedstrings_str ). lo_sharedstrings_part -> feed_data ( l_sharedstrings_xml ). c_doc = lo_doc -> get_package_data ( ). CATCH cx_openxml_not_found cx_openxml_format cx_openxml_not_allowed INTO DATA ( lx_openxml ). MESSAGE lx_openxml -> get_text ( ) TYPE 'S' DISPLAY LIKE 'E' . CATCH cx_root INTO DATA ( lx_root ). MESSAGE lx_root -> get_text ( ) TYPE 'S' DISPLAY LIKE 'E' . ENDTRY . ENDMETHOD . XLS\u683c\u5f0f\u5bfc\u51fa \u00b6 \u5982\u679c\u6a21\u677f\u662fXLS\u683c\u5f0f\uff0c\u4f7f\u7528OLE\u8fdb\u884c\u66ff\u6362\uff1a OLE\u66ff\u6362\u6587\u672c\u5185\u5bb9 TYPE-POOLS ole2 . DATA : l_app TYPE ole2_object , l_workbooks TYPE ole2_object , l_cells TYPE ole2_object . CREATE OBJECT l_app 'EXCEL.APPLICATION' . SET PROPERTY OF l_app 'DisplayAlerts' = 0 . CALL METHOD OF l_app 'Workbooks' = l_workbooks . CALL METHOD OF l_workbooks 'Open' EXPORTING # 1 = filename . GET PROPERTY OF l_app 'Cells' = l_cells . FIELD-SYMBOLS : <fs_replace> TYPE any , <fs_from> TYPE any , <fs_to> TYPE any . LOOP AT it_replace ASSIGNING <fs_replace> . ASSIGN COMPONENT 1 OF STRUCTURE <fs_replace> TO <fs_from> . ASSIGN COMPONENT 2 OF STRUCTURE <fs_replace> TO <fs_to> . CALL METHOD OF l_cells 'Replace' EXPORTING # 1 = <fs_from> # 2 = <fs_to> . ENDLOOP . SET PROPERTY OF l_app 'Visible' = 1 . Include\u6587\u4ef6 \u00b6 \u793a\u4f8b\u4ee3\u7801 *&---------------------------------------------------------------------* *& Include zfi_report *&---------------------------------------------------------------------* *&---------------------------------------------------------------------* *& \u4e09\u5927\u62a5\u8868\u53d6\u503c\u90e8\u5206\u53ef\u4ee5\u901a\u7528\uff0c\u56e0\u6b64\u62bd\u53d6\u51fa\u6765\u5f62\u6210\u4e00\u4e2a\u6a21\u5757 *&---------------------------------------------------------------------* \" \u8d22\u52a1\u660e\u7ec6\u6570\u636e\u952e\u503c TYPES : BEGIN OF ty_detail_key , rldnr TYPE acdoca - rldnr , rbukrs TYPE acdoca - rbukrs , gjahr TYPE acdoca - gjahr , belnr TYPE acdoca - belnr , docln TYPE acdoca - docln , END OF ty_detail_key . TYPES tt_detail_key TYPE STANDARD TABLE OF ty_detail_key WITH EMPTY KEY . \" \u8d22\u52a1\u660e\u7ec6\u6570\u636e TYPES : BEGIN OF ty_detail , rldnr TYPE acdoca - rldnr , rbukrs TYPE acdoca - rbukrs , gjahr TYPE acdoca - gjahr , belnr TYPE acdoca - belnr , docln TYPE acdoca - docln , ryear TYPE acdoca - ryear , \" \u8d22\u5e74 poper TYPE acdoca - poper , \" \u671f\u95f4 racct TYPE acdoca - racct , \" \u4f1a\u8ba1\u79d1\u76ee rcntr TYPE acdoca - rcntr , \" \u6210\u672c\u4e2d\u5fc3 prctr TYPE acdoca - prctr , \" \u5229\u6da6\u4e2d\u5fc3 rstgr TYPE acdoca - rstgr , \" RSTGR rfarea TYPE acdoca - rfarea , \" \u529f\u80fd\u8303\u56f4 budat TYPE acdoca - budat , hsl TYPE acdoca - hsl , END OF ty_detail . TYPES tt_detail TYPE STANDARD TABLE OF ty_detail WITH EMPTY KEY . \" \u62a5\u8868\u6570\u636e TYPES ty_amount TYPE p LENGTH 16 DECIMALS 2 . \" \u91d1\u989d TYPES : BEGIN OF ty_fi_data , bukrs TYPE bukrs , \" \u516c\u53f8 year TYPE gjahr , \" \u5e74\u5ea6 period TYPE monat , \" \u671f\u95f4 zitem TYPE string , \" \u9879\u76ee ztext TYPE string , \" \u9879\u76ee\u63cf\u8ff0 year_begin TYPE ty_amount , \" \u5e74\u521d\u4f59\u989d year_end TYPE ty_amount , \" \u5e74\u672b\u4f59\u989d period_current TYPE ty_amount , \" \u672c\u6708\u91d1\u989d period_total TYPE ty_amount , \" \u622a\u6b62\u672c\u6708\u7d2f\u8ba1\u91d1\u989d period_01 TYPE ty_amount , \" 01\u6708\u4f59\u989d period_02 TYPE ty_amount , \" 02\u6708\u4f59\u989d period_03 TYPE ty_amount , \" 03\u6708\u4f59\u989d period_04 TYPE ty_amount , \" 04\u6708\u4f59\u989d period_05 TYPE ty_amount , \" 05\u6708\u4f59\u989d period_06 TYPE ty_amount , \" 06\u6708\u4f59\u989d period_07 TYPE ty_amount , \" 07\u6708\u4f59\u989d period_08 TYPE ty_amount , \" 08\u6708\u4f59\u989d period_09 TYPE ty_amount , \" 09\u6708\u4f59\u989d period_10 TYPE ty_amount , \" 10\u6708\u4f59\u989d period_11 TYPE ty_amount , \" 11\u6708\u4f59\u989d period_12 TYPE ty_amount , \" 12\u6708\u4f59\u989d period_13 TYPE ty_amount , \" 13\u6708\u4f59\u989d period_14 TYPE ty_amount , \" 14\u6708\u4f59\u989d period_15 TYPE ty_amount , \" 15\u6708\u4f59\u989d period_16 TYPE ty_amount , \" 16\u6708\u4f59\u989d t_detail_key TYPE tt_detail_key , \" \u660e\u7ec6\u6570\u636e\u952e\u503c END OF ty_fi_data . TYPES tt_fi_data TYPE STANDARD TABLE OF ty_fi_data WITH EMPTY KEY . \" \u7b5b\u9009\u9879 TYPES : BEGIN OF ty_filter , name TYPE string , t_range_opt TYPE RANGE OF char40 , END OF ty_filter . \" \u914d\u7f6e\u6570\u636e TYPES ty_config_key TYPE n LENGTH 3 . TYPES : BEGIN OF ty_config , bukrs TYPE bukrs , \" \u516c\u53f8 zitem TYPE ty_config_key , \" \u9879\u76ee zitem_sub TYPE ty_config_key , \" \u5b50\u9879\u76ee ztext TYPE string , \" \u63cf\u8ff0 reverse TYPE xfeld , \" \u53cd\u5411\u6807\u8bb0\uff0c\u6c47\u603b\u6216\u8ba1\u7b97\u7684\u65f6\u5019\u4f7f\u7528 fi_data TYPE ty_fi_data , t_racct_opt TYPE RANGE OF racct , \" \u79d1\u76ee\u4f5c\u4e3a\u8d22\u52a1\u6570\u636e\u9996\u8981\u7b5b\u9009\u7ef4\u5ea6 t_filter TYPE STANDARD TABLE OF ty_filter WITH EMPTY KEY , \" \u7b5b\u9009\u9879 t_collect TYPE STANDARD TABLE OF ty_config_key WITH EMPTY KEY , \" \u5f15\u7528\u6c47\u603b\u5176\u4ed6\u9879\u76ee\u7ed3\u679c processed TYPE char01 , \" \u5904\u7406\u6807\u8bc6\uff0c\u672a\u5904\u7406[\u7a7a]\uff0c\u5904\u7406\u4e2d[P]\uff0c\u5df2\u5904\u7406[X]\uff0c\u7528\u4e8e\u6b7b\u5faa\u73af\u68c0\u67e5\u548c\u8df3\u8fc7\u5197\u4f59\u8ba1\u7b97 END OF ty_config . TYPES tt_config TYPE STANDARD TABLE OF ty_config WITH EMPTY KEY . *&---------------------------------------------------------------------* *& \u8d22\u52a1\u62a5\u8868\u64cd\u4f5c\u5bf9\u8c61 *&---------------------------------------------------------------------* CLASS lcl_fi_report DEFINITION DEFERRED . *&---------------------------------------------------------------------* *& \u8d22\u52a1\u62a5\u8868\u64cd\u4f5c\u5bf9\u8c61 *&---------------------------------------------------------------------* CLASS lcl_fi_report DEFINITION . PUBLIC SECTION . CLASS-METHODS get_smw0_templete IMPORTING i_objid TYPE w3objid RETURNING VALUE ( r_buffer ) TYPE xstring . CLASS-METHODS replace_texts IMPORTING it_replace TYPE ANY TABLE CHANGING c_doc TYPE xstring . CLASS-METHODS create IMPORTING i_year TYPE gjahr i_period TYPE monat it_config TYPE tt_config RETURNING VALUE ( ro_result ) TYPE REF TO lcl_fi_report . METHODS execute RETURNING VALUE ( rt_fi_data ) TYPE tt_fi_data . PRIVATE SECTION . METHODS get_detail . METHODS get_fi_data IMPORTING ir_config TYPE REF TO ty_config i_depth TYPE i OPTIONAL . DATA m_year TYPE gjahr . DATA m_period TYPE monat . DATA mt_config TYPE tt_config . DATA mt_detail TYPE tt_detail . ENDCLASS . *&---------------------------------------------------------------------* *& \u8d22\u52a1\u62a5\u8868\u64cd\u4f5c\u5bf9\u8c61 *&---------------------------------------------------------------------* CLASS lcl_fi_report IMPLEMENTATION . *&---------------------------------------------------------------------* *& \u8d22\u52a1\u62a5\u8868\u64cd\u4f5c\u5bf9\u8c61 *&---------------------------------------------------------------------* METHOD create . ro_result = NEW # ( ). ro_result -> mt_config = it_config . ro_result -> m_year = i_year . ro_result -> m_period = i_period . ENDMETHOD . *&---------------------------------------------------------------------* *& \u6839\u636e\u914d\u7f6e\u6267\u884c *&---------------------------------------------------------------------* METHOD execute . SORT mt_config BY bukrs zitem zitem_sub . get_detail ( ). \" \u83b7\u53d6\u62a5\u8868\u660e\u7ec6\u6570\u636e LOOP AT mt_config REFERENCE INTO DATA ( lr_config ). get_fi_data ( lr_config ). \" \u751f\u6210\u62a5\u8868\u884c\u6570\u636e ENDLOOP . LOOP AT mt_config REFERENCE INTO lr_config GROUP BY ( bukrs = lr_config -> bukrs zitem = lr_config -> zitem ) INTO DATA ( ls_config_grp ). DATA ls_fi_data TYPE ty_fi_data . ls_fi_data - bukrs = ls_config_grp - bukrs . ls_fi_data - year = m_year . ls_fi_data - period = m_period . ls_fi_data - zitem = ls_config_grp - zitem . LOOP AT GROUP ls_config_grp REFERENCE INTO lr_config . ls_fi_data - year_begin += lr_config -> fi_data - year_begin . \" \u5e74\u521d\u4f59\u989d ls_fi_data - period_01 += lr_config -> fi_data - period_01 . \" 01\u6708\u4f59\u989d ls_fi_data - period_02 += lr_config -> fi_data - period_02 . \" 02\u6708\u4f59\u989d ls_fi_data - period_03 += lr_config -> fi_data - period_03 . \" 03\u6708\u4f59\u989d ls_fi_data - period_04 += lr_config -> fi_data - period_04 . \" 04\u6708\u4f59\u989d ls_fi_data - period_05 += lr_config -> fi_data - period_05 . \" 05\u6708\u4f59\u989d ls_fi_data - period_06 += lr_config -> fi_data - period_06 . \" 06\u6708\u4f59\u989d ls_fi_data - period_07 += lr_config -> fi_data - period_07 . \" 07\u6708\u4f59\u989d ls_fi_data - period_08 += lr_config -> fi_data - period_08 . \" 08\u6708\u4f59\u989d ls_fi_data - period_09 += lr_config -> fi_data - period_09 . \" 09\u6708\u4f59\u989d ls_fi_data - period_10 += lr_config -> fi_data - period_10 . \" 10\u6708\u4f59\u989d ls_fi_data - period_11 += lr_config -> fi_data - period_11 . \" 11\u6708\u4f59\u989d ls_fi_data - period_12 += lr_config -> fi_data - period_12 . \" 12\u6708\u4f59\u989d ls_fi_data - period_13 += lr_config -> fi_data - period_13 . \" 13\u6708\u4f59\u989d ls_fi_data - period_14 += lr_config -> fi_data - period_14 . \" 14\u6708\u4f59\u989d ls_fi_data - period_15 += lr_config -> fi_data - period_15 . \" 15\u6708\u4f59\u989d ls_fi_data - period_16 += lr_config -> fi_data - period_16 . \" 16\u6708\u4f59\u989d INSERT LINES OF lr_config -> fi_data - t_detail_key INTO TABLE ls_fi_data - t_detail_key . \" \u660e\u7ec6\u6570\u636e\u952e\u503c ENDLOOP . ls_fi_data - year_end = ls_fi_data - year_begin . DO 16 TIMES . ASSIGN COMPONENT | PERIOD_ { sy - index ALIGN = RIGHT WIDTH = 2 PAD = '0' }| OF STRUCTURE ls_fi_data TO FIELD - SYMBOL ( <fs_period> ). IF <fs_period> IS ASSIGNED . ls_fi_data - year_end += <fs_period> . \" \u5e74\u672b\u4f59\u989d \" \u622a\u6b62\u672c\u6708\u672b\u7d2f\u8ba1\u91d1\u989d IF ls_fi_data - period <= sy - index . ls_fi_data - period_total += <fs_period> . ENDIF . \" \u672c\u6708\u91d1\u989d IF ls_fi_data - period = sy - index . ls_fi_data - period_current = <fs_period> . ENDIF . ENDIF . ENDDO . INSERT ls_fi_data INTO TABLE rt_fi_data . ENDLOOP . ENDMETHOD . *&---------------------------------------------------------------------* *& \u83b7\u53d6\u8d22\u52a1\u660e\u7ec6\u6570\u636e *&---------------------------------------------------------------------* METHOD get_detail . LOOP AT mt_config REFERENCE INTO DATA ( lr_config ) GROUP BY ( bukrs = lr_config -> bukrs ) INTO DATA ( ls_config_grp ). \" \u79d1\u76ee\u8303\u56f4 DATA lt_racct_opt TYPE RANGE OF racct . CLEAR lt_racct_opt . LOOP AT GROUP ls_config_grp REFERENCE INTO lr_config . INSERT LINES OF lr_config -> t_racct_opt INTO TABLE lt_racct_opt . ENDLOOP . CHECK lt_racct_opt IS NOT INITIAL . SORT lt_racct_opt . DELETE ADJACENT DUPLICATES FROM lt_racct_opt COMPARING ALL FIELDS . \" TODO \u8d85\u8fc7\u5927\u7ea6\u4e00\u4e07\u884c\u6570\u636e\u5c31\u5e94\u8be5\u5206\u6279\u5904\u7406\u4e86 \" \u9884\u67e5\u8be2\u51fa\u5168\u90e8\u76f8\u5173\u7684\u8d22\u52a1\u6570\u636e SELECT rldnr , rbukrs , gjahr , belnr , docln , ryear , \" \u8d22\u5e74 poper , \" \u671f\u95f4 racct , \" \u4f1a\u8ba1\u79d1\u76ee rcntr , \" \u6210\u672c\u4e2d\u5fc3 prctr , \" \u5229\u6da6\u4e2d\u5fc3 rstgr , \" \u539f\u56e0\u4ee3\u7801 rfarea , \" \u529f\u80fd\u8303\u56f4 budat , hsl FROM acdoca WHERE rbukrs = @ ls_config_grp - bukrs AND ryear = @ m_year AND racct IN @ lt_racct_opt APPENDING TABLE @ mt_detail . ENDLOOP . SORT mt_detail BY rldnr rbukrs gjahr belnr docln . ENDMETHOD . *&---------------------------------------------------------------------* *& \u751f\u6210\u62a5\u8868\u884c\u6570\u636e *&---------------------------------------------------------------------* METHOD get_fi_data . IF i_depth > 10 \" \u8fed\u4ee3\u5c42\u7ea7\uff0c\u9632\u6b62\u6808\u6ea2\u51fa OR ir_config IS BOUND \" \u7a7a\u503c\u68c0\u67e5 OR ir_config -> processed IS INITIAL \" \u5904\u7406\u6807\u8bb0\u68c0\u67e5\uff0c\u9632\u6b62\u6b7b\u5faa\u73af\uff0c\u4ee5\u53ca\u8df3\u8fc7\u5197\u4f59\u8ba1\u7b97 . RETURN . ENDIF . ir_config -> processed = 'P' . \" \u5904\u7406\u4e2d \" \u5bf9\u4e8e\u6587\u672c\u9879\uff0c\u5e76\u4e0d\u9700\u8981\u7b5b\u9009 IF ir_config -> t_racct_opt IS NOT INITIAL OR ir_config -> t_filter IS NOT INITIAL . \" \u83b7\u53d6\u5f53\u524d\u914d\u7f6e\u884c\u7684\u6709\u6548\u6570\u636e SELECT * FROM @ mt_detail AS ds WHERE rbukrs = @ ir_config -> bukrs AND racct IN @ ir_config -> t_racct_opt \" \u79d1\u76ee INTO TABLE @ DATA ( lt_detail ). \" \u9664\u79d1\u76ee\u5916\uff0c\u5176\u4ed6\u7b5b\u9009\u9879\u52a8\u6001\u5904\u7406 LOOP AT ir_config -> t_filter INTO DATA ( ls_filter ) WHERE t_range_opt IS NOT INITIAL . IF lt_detail IS NOT INITIAL . DATA ( l_condition ) = |{ ls_filter - name } IN @LS_FILTER-T_RANGE_OPT |. TRY . SELECT * FROM @ lt_detail AS ds WHERE ( l_condition ) INTO TABLE @ lt_detail . CATCH cx_root . ENDTRY . ENDIF . ENDLOOP . ENDIF . \" \u6c47\u603b\u8d22\u52a1\u6570\u636e LOOP AT lt_detail INTO DATA ( ls_detail ). CASE ls_detail - poper . WHEN 0 . ir_config -> fi_data - year_begin += ls_detail - hsl . WHEN 1 . ir_config -> fi_data - period_01 += ls_detail - hsl . WHEN 2 . ir_config -> fi_data - period_02 += ls_detail - hsl . WHEN 3 . ir_config -> fi_data - period_03 += ls_detail - hsl . WHEN 4 . ir_config -> fi_data - period_04 += ls_detail - hsl . WHEN 5 . ir_config -> fi_data - period_05 += ls_detail - hsl . WHEN 6 . ir_config -> fi_data - period_06 += ls_detail - hsl . WHEN 7 . ir_config -> fi_data - period_07 += ls_detail - hsl . WHEN 8 . ir_config -> fi_data - period_08 += ls_detail - hsl . WHEN 9 . ir_config -> fi_data - period_09 += ls_detail - hsl . WHEN 10 . ir_config -> fi_data - period_10 += ls_detail - hsl . WHEN 11 . ir_config -> fi_data - period_11 += ls_detail - hsl . WHEN 12 . ir_config -> fi_data - period_12 += ls_detail - hsl . WHEN 13 . ir_config -> fi_data - period_13 += ls_detail - hsl . WHEN 14 . ir_config -> fi_data - period_14 += ls_detail - hsl . WHEN 15 . ir_config -> fi_data - period_15 += ls_detail - hsl . WHEN 16 . ir_config -> fi_data - period_16 += ls_detail - hsl . WHEN OTHERS . ENDCASE . \" \u5199\u5165\u5230\u660e\u7ec6\u6e05\u5355\u4e2d READ TABLE mt_detail TRANSPORTING NO FIELDS WITH KEY rldnr = ls_detail - rldnr rbukrs = ls_detail - rbukrs gjahr = ls_detail - gjahr belnr = ls_detail - belnr docln = ls_detail - docln BINARY SEARCH . IF sy - subrc = 0 . INSERT CORRESPONDING # ( ls_detail ) INTO TABLE ir_config -> fi_data - t_detail_key . ENDIF . ENDLOOP . \" \u6c47\u603b\u5176\u4ed6\u9879\u7684\u8d22\u52a1\u6570\u636e LOOP AT ir_config -> t_collect INTO DATA ( l_other_zitem ). READ TABLE mt_config REFERENCE INTO DATA ( lr_config ) WITH KEY bukrs = ir_config -> bukrs zitem = l_other_zitem BINARY SEARCH . IF sy - subrc <> 0 . CONTINUE . ENDIF . \" \u9012\u5f52\u53d6\u503c get_fi_data ( ir_config = lr_config i_depth = i_depth + 1 ). \" \u53cd\u5411\u6807\u8bb0 DATA l_factor TYPE i . IF lr_config -> reverse IS INITIAL . l_factor = 1 . ELSE . l_factor = - 1 . ENDIF . ir_config -> fi_data - year_begin += lr_config -> fi_data - year_begin * l_factor . \" \u5e74\u521d\u4f59\u989d ir_config -> fi_data - period_01 += lr_config -> fi_data - period_01 * l_factor . \" 01\u6708\u4f59\u989d ir_config -> fi_data - period_02 += lr_config -> fi_data - period_02 * l_factor . \" 02\u6708\u4f59\u989d ir_config -> fi_data - period_03 += lr_config -> fi_data - period_03 * l_factor . \" 03\u6708\u4f59\u989d ir_config -> fi_data - period_04 += lr_config -> fi_data - period_04 * l_factor . \" 04\u6708\u4f59\u989d ir_config -> fi_data - period_05 += lr_config -> fi_data - period_05 * l_factor . \" 05\u6708\u4f59\u989d ir_config -> fi_data - period_06 += lr_config -> fi_data - period_06 * l_factor . \" 06\u6708\u4f59\u989d ir_config -> fi_data - period_07 += lr_config -> fi_data - period_07 * l_factor . \" 07\u6708\u4f59\u989d ir_config -> fi_data - period_08 += lr_config -> fi_data - period_08 * l_factor . \" 08\u6708\u4f59\u989d ir_config -> fi_data - period_09 += lr_config -> fi_data - period_09 * l_factor . \" 09\u6708\u4f59\u989d ir_config -> fi_data - period_10 += lr_config -> fi_data - period_10 * l_factor . \" 10\u6708\u4f59\u989d ir_config -> fi_data - period_11 += lr_config -> fi_data - period_11 * l_factor . \" 11\u6708\u4f59\u989d ir_config -> fi_data - period_12 += lr_config -> fi_data - period_12 * l_factor . \" 12\u6708\u4f59\u989d ir_config -> fi_data - period_13 += lr_config -> fi_data - period_13 * l_factor . \" 13\u6708\u4f59\u989d ir_config -> fi_data - period_14 += lr_config -> fi_data - period_14 * l_factor . \" 14\u6708\u4f59\u989d ir_config -> fi_data - period_15 += lr_config -> fi_data - period_15 * l_factor . \" 15\u6708\u4f59\u989d ir_config -> fi_data - period_16 += lr_config -> fi_data - period_16 * l_factor . \" 16\u6708\u4f59\u989d INSERT LINES OF lr_config -> fi_data - t_detail_key INTO TABLE ir_config -> fi_data - t_detail_key . \" \u660e\u7ec6\u6570\u636e ENDLOOP . ir_config -> processed = 'X' . \" \u5904\u7406\u5b8c\u6210 ENDMETHOD . *&---------------------------------------------------------------------* *& \u4eceSMW0\u83b7\u53d6\u6a21\u677f\u6587\u4ef6 *&---------------------------------------------------------------------* METHOD get_smw0_templete . DATA : lt_mime TYPE STANDARD TABLE OF w3mime , ls_id TYPE wwwdataid , ls_key TYPE wwwdatatab . ls_key - relid = 'MI' . ls_key - objid = i_objid . CALL FUNCTION 'WWWDATA_IMPORT' EXPORTING key = ls_key TABLES mime = lt_mime EXCEPTIONS wrong_object_type = 1 import_error = 2 OTHERS = 3 . IF sy - subrc <> 0 . MESSAGE | \u6a21\u677f[ { i_objid } ]\u83b7\u53d6\u5931\u8d25 | TYPE 'S' DISPLAY LIKE 'E' . RETURN . ENDIF . SELECT SINGLE value FROM wwwparams WHERE relid = @ ls_key - relid AND objid = @ ls_key - objid AND name EQ 'filesize' INTO @ DATA ( l_param ). DATA l_length TYPE i . l_length = l_param . CALL FUNCTION 'SCMS_BINARY_TO_XSTRING' EXPORTING input_length = l_length IMPORTING buffer = r_buffer TABLES binary_tab = lt_mime EXCEPTIONS failed = 1 OTHERS = 2 . IF sy - subrc <> 0 . CLEAR r_buffer . ENDIF . ENDMETHOD . *&---------------------------------------------------------------------* *& \u66ff\u6362\u6a21\u677f\u6587\u4ef6\u4e2d\u7684\u6587\u672c\u5185\u5bb9 *&---------------------------------------------------------------------* METHOD replace_texts . \" \u7a0b\u5e8f\u8981\u6c42IT_REPLACE\u81f3\u5c11\u4e24\u5217\uff0c\u4ee3\u7801\u4f1a\u5c06\u5de6\u5217\u5185\u5bb9\u66ff\u6362\u4e3a\u53f3\u5217\u5185\u5bb9 CHECK it_replace IS NOT INITIAL . CHECK c_doc IS NOT INITIAL . FIELD-SYMBOLS <fs_replace_t> TYPE ANY TABLE . FIELD-SYMBOLS <fs_replace> TYPE any . FIELD-SYMBOLS <fs_from> TYPE any . FIELD-SYMBOLS <fs_to> TYPE any . TRY . DATA ( lo_doc ) = cl_xlsx_document => load_document ( c_doc ). DATA ( lo_workbook_part ) = lo_doc -> get_workbookpart ( ). DATA ( lo_sharedstrings_part ) = lo_workbook_part -> get_sharedstringspart ( ). DATA ( l_sharedstrings_xml ) = lo_sharedstrings_part -> get_data ( ). DATA ( l_sharedstrings_str ) = cl_openxml_helper => xstring_to_string ( l_sharedstrings_xml ). ASSIGN it_replace TO <fs_replace_t> . LOOP AT <fs_replace_t> ASSIGNING <fs_replace> . ASSIGN COMPONENT 1 OF STRUCTURE <fs_replace> TO <fs_from> . ASSIGN COMPONENT 2 OF STRUCTURE <fs_replace> TO <fs_to> . IF <fs_from> IS ASSIGNED AND <fs_to> IS ASSIGNED . IF <fs_from> IS NOT INITIAL . REPLACE ALL OCCURRENCES OF <fs_from> IN l_sharedstrings_str WITH <fs_to> IN CHARACTER MODE . ENDIF . ENDIF . UNASSIGN <fs_from> . UNASSIGN <fs_to> . ENDLOOP . l_sharedstrings_xml = cl_openxml_helper => string_to_xstring ( l_sharedstrings_str ). lo_sharedstrings_part -> feed_data ( l_sharedstrings_xml ). c_doc = lo_doc -> get_package_data ( ). CATCH cx_openxml_not_found cx_openxml_format cx_openxml_not_allowed INTO DATA ( lx_openxml ). MESSAGE lx_openxml -> get_text ( ) TYPE 'S' DISPLAY LIKE 'E' . CATCH cx_root INTO DATA ( lx_root ). MESSAGE lx_root -> get_text ( ) TYPE 'S' DISPLAY LIKE 'E' . ENDTRY . ENDMETHOD . ENDCLASS .","title":"\u901a\u7528\u53d6\u503c\u6a21\u5757"},{"location":"fico/fi_report/#_1","text":"\u8d22\u52a1\u4e09\u5927\u62a5\u8868\u53d6\u503c\u90e8\u5206\u53ef\u4ee5\u901a\u7528\uff0c\u56e0\u6b64\u4e0b\u9762\u53ea\u5bf9\u53d6\u503c\u90e8\u5206\u8fdb\u884c\u5c01\u88c5\uff0c\u901a\u8fc7\u4f20\u5165\u914d\u7f6e\uff0c\u53ef\u4ee5\u83b7\u53d6\u5404\u9879\u76ee\u7684\u5e74\u521d\u3001\u5e74\u672b\u3001\u5404\u671f\u95f4\u91d1\u989d\u3002","title":"\u901a\u7528\u53d6\u503c\u6a21\u5757"},{"location":"fico/fi_report/#_2","text":"\u5b57\u6bb5 \u8bf4\u660e BUKRS \u516c\u53f8\u4ee3\u7801 ZITEM \u9879\u76ee ZITEM_SUB \u5b50\u9879\u76ee ZTEXT \u9879\u76ee\u63cf\u8ff0 REVERSE \u53cd\u5411\u6807\u8bc6\uff0c\u8ba1\u7b97\u6216\u6c47\u603b\u65f6\u4f7f\u7528 T_ACCAT_OPT \u79d1\u76eeRange\u8868 T_FILTER \u9664\u79d1\u76ee\u5916\u7684\u5176\u4ed6Range\u8868\uff0c\u6309\u5b57\u6bb5\u540d\u52a8\u6001\u8fc7\u6ee4 T_COLLECT ZITEM\u9879\u76ee\u5b50\u8868\uff0c\u6c47\u603b\u5176\u4ed6\u9879\u76ee\u7ed3\u679c","title":"\u5165\u53c2\u7ed3\u6784"},{"location":"fico/fi_report/#_3","text":"\u5047\u5982\u73b0\u5728\u9700\u8981: \u9879\u76ee[\u8d44\u4ea7\u603b\u503c]\uff0cZITEM=1\uff0c\u6c47\u603b: \u79d1\u76ee1100* \u529f\u80fd\u8303\u56f4100\u3001200 ZITEM=2\u30013 \u79d1\u76ee2*\u4e14\u5229\u6da6\u4e2d\u5fc321* \u9879\u76ee[\u6d41\u52a8\u8d44\u4ea7]\uff0cZITEM=2\uff0c\u6c47\u603b\u79d1\u76ee3*\u30014*\u30015* \u9879\u76ee[\u975e\u6d41\u52a8\u8d44\u4ea7]\uff0cZITEM=3\uff0c\u6c47\u603b\u79d1\u76ee6*\u30017*\u30018* \u53ef\u4ee5\u5f97\u51fa\u5165\u53c2\uff1a BUKRS ZITEM ZITEM_SUB ZTEXT REVERSE T_ACCAT_OPT T_FILTER T_COLLECT 1000 1 1 \u8d44\u4ea7\u603b\u503c 1000 1 2 \u79d1\u76ee\u9879 1100* 1000 1 3 \u8fc7\u6ee4\u9879 \u529f\u80fd\u8303\u56f4=100/200 1000 1 4 \u5176\u4ed6\u9879 ZITEM=\u2154 1000 1 5 \u7ed3\u5408\u4f7f\u7528 2* \u5229\u6da6\u4e2d\u5fc3=21* 1000 2 1 \u6d41\u52a8\u8d44\u4ea7 1000 2 2 3* 1000 2 3 4* 1000 2 4 5* 1000 3 1 \u975e\u6d41\u52a8\u8d44\u4ea7 1000 3 2 6* 1000 3 3 7* 1000 3 4 8*","title":"\u793a\u4f8b\u5165\u53c2"},{"location":"fico/fi_report/#_4","text":"\u51fa\u53c2\u7ed3\u6784\u5305\u62ec\u4e86\u5e74\u521d\u3001\u5e74\u672b\u3001\u672c\u6708\u3001\u622a\u6b62\u672c\u6708\u7d2f\u8ba1\u3001\u5176\u4ed6\u5404\u6708\u6570\u636e\uff0c\u6309\u9700\u4f7f\u7528\u5373\u53ef\uff1a \u5b57\u6bb5 \u8bf4\u660e BUKRS \u516c\u53f8\u4ee3\u7801 YEAR \u5e74\u5ea6 PERIOD \u671f\u95f4 ZITEM \u9879\u76ee ZTEXT \u9879\u76ee\u63cf\u8ff0 YEAR_BEGIN \u5e74\u521d\u4f59\u989d TEAR_END \u5e74\u672b\u4f59\u989d PERIOD_CURRENT \u672c\u6708\u91d1\u989d PERIOD_TOTAL \u622a\u6b62\u672c\u6708\u7d2f\u8ba1\u91d1\u989d PERIOD_01 01\u6708\u4f59\u989d PERIOD_02 02\u6708\u4f59\u989d PERIOD_03 03\u6708\u4f59\u989d PERIOD_04 04\u6708\u4f59\u989d PERIOD_05 05\u6708\u4f59\u989d PERIOD_06 06\u6708\u4f59\u989d PERIOD_07 07\u6708\u4f59\u989d PERIOD_08 08\u6708\u4f59\u989d PERIOD_09 09\u6708\u4f59\u989d PERIOD_10 10\u6708\u4f59\u989d PERIOD_11 11\u6708\u4f59\u989d PERIOD_12 12\u6708\u4f59\u989d PERIOD_13 13\u6708\u4f59\u989d PERIOD_14 14\u6708\u4f59\u989d PERIOD_15 15\u6708\u4f59\u989d PERIOD_16 16\u6708\u4f59\u989d","title":"\u51fa\u53c2\u7ed3\u6784"},{"location":"fico/fi_report/#_5","text":"\u4e09\u5927\u62a5\u8868\u683c\u5f0f\u56fa\u5b9a\uff0c\u56e0\u6b64\u53ef\u4ee5\u901a\u8fc7\u6587\u672c\u66ff\u6362\u7684\u65b9\u5f0f\uff0c\u5c06\u6a21\u677f\u4e2d\u7684\u5360\u4f4d\u7b26\u66ff\u6362\u4e3a\u5176\u4ed6\u503c\u3002","title":"\u6587\u4ef6\u5bfc\u51fa"},{"location":"fico/fi_report/#xlsx","text":"XLSX\u683c\u5f0f\uff0c\u6216\u8005\u8bf4Openxml\u683c\u5f0f\uff0c\u4f1a\u5c06\u6587\u672c\u5168\u90e8\u5b58\u5165\u5230Sharedstrings.xml\u6587\u4ef6\u4e2d\uff0c\u56e0\u6b64\u901a\u8fc7\u66ff\u6362Sharedstrings\u4e2d\u7684\u6587\u672c\u5185\u5bb9\uff0c\u5373\u53ef\u5b9e\u73b0\u6587\u672c\u66ff\u6362\u3002 Openxml\u66ff\u6362Sharedstrings\u5185\u5bb9 *&---------------------------------------------------------------------* *& \u66ff\u6362\u6a21\u677f\u6587\u4ef6\u4e2d\u7684\u6587\u672c\u5185\u5bb9 *&---------------------------------------------------------------------* METHOD replace_texts . \" \u7a0b\u5e8f\u8981\u6c42IT_REPLACE\u81f3\u5c11\u4e24\u5217\uff0c\u4ee3\u7801\u4f1a\u5c06\u5de6\u5217\u5185\u5bb9\u66ff\u6362\u4e3a\u53f3\u5217\u5185\u5bb9 CHECK it_replace IS NOT INITIAL . \" \u6a21\u677f\u6587\u4ef6\u4e0d\u80fd\u4e3a\u7a7a CHECK c_doc IS NOT INITIAL . FIELD-SYMBOLS <fs_replace_t> TYPE ANY TABLE . FIELD-SYMBOLS <fs_replace> TYPE any . FIELD-SYMBOLS <fs_from> TYPE any . FIELD-SYMBOLS <fs_to> TYPE any . TRY . DATA ( lo_doc ) = cl_xlsx_document => load_document ( c_doc ). DATA ( lo_workbook_part ) = lo_doc -> get_workbookpart ( ). DATA ( lo_sharedstrings_part ) = lo_workbook_part -> get_sharedstringspart ( ). DATA ( l_sharedstrings_xml ) = lo_sharedstrings_part -> get_data ( ). DATA ( l_sharedstrings_str ) = cl_openxml_helper => xstring_to_string ( l_sharedstrings_xml ). ASSIGN it_replace TO <fs_replace_t> . LOOP AT <fs_replace_t> ASSIGNING <fs_replace> . ASSIGN COMPONENT 1 OF STRUCTURE <fs_replace> TO <fs_from> . ASSIGN COMPONENT 2 OF STRUCTURE <fs_replace> TO <fs_to> . IF <fs_from> IS ASSIGNED AND <fs_to> IS ASSIGNED . IF <fs_from> IS NOT INITIAL . REPLACE ALL OCCURRENCES OF <fs_from> IN l_sharedstrings_str WITH <fs_to> IN CHARACTER MODE . ENDIF . ENDIF . UNASSIGN <fs_from> . UNASSIGN <fs_to> . ENDLOOP . l_sharedstrings_xml = cl_openxml_helper => string_to_xstring ( l_sharedstrings_str ). lo_sharedstrings_part -> feed_data ( l_sharedstrings_xml ). c_doc = lo_doc -> get_package_data ( ). CATCH cx_openxml_not_found cx_openxml_format cx_openxml_not_allowed INTO DATA ( lx_openxml ). MESSAGE lx_openxml -> get_text ( ) TYPE 'S' DISPLAY LIKE 'E' . CATCH cx_root INTO DATA ( lx_root ). MESSAGE lx_root -> get_text ( ) TYPE 'S' DISPLAY LIKE 'E' . ENDTRY . ENDMETHOD .","title":"XLSX\u683c\u5f0f\u5bfc\u51fa"},{"location":"fico/fi_report/#xls","text":"\u5982\u679c\u6a21\u677f\u662fXLS\u683c\u5f0f\uff0c\u4f7f\u7528OLE\u8fdb\u884c\u66ff\u6362\uff1a OLE\u66ff\u6362\u6587\u672c\u5185\u5bb9 TYPE-POOLS ole2 . DATA : l_app TYPE ole2_object , l_workbooks TYPE ole2_object , l_cells TYPE ole2_object . CREATE OBJECT l_app 'EXCEL.APPLICATION' . SET PROPERTY OF l_app 'DisplayAlerts' = 0 . CALL METHOD OF l_app 'Workbooks' = l_workbooks . CALL METHOD OF l_workbooks 'Open' EXPORTING # 1 = filename . GET PROPERTY OF l_app 'Cells' = l_cells . FIELD-SYMBOLS : <fs_replace> TYPE any , <fs_from> TYPE any , <fs_to> TYPE any . LOOP AT it_replace ASSIGNING <fs_replace> . ASSIGN COMPONENT 1 OF STRUCTURE <fs_replace> TO <fs_from> . ASSIGN COMPONENT 2 OF STRUCTURE <fs_replace> TO <fs_to> . CALL METHOD OF l_cells 'Replace' EXPORTING # 1 = <fs_from> # 2 = <fs_to> . ENDLOOP . SET PROPERTY OF l_app 'Visible' = 1 .","title":"XLS\u683c\u5f0f\u5bfc\u51fa"},{"location":"fico/fi_report/#include","text":"\u793a\u4f8b\u4ee3\u7801 *&---------------------------------------------------------------------* *& Include zfi_report *&---------------------------------------------------------------------* *&---------------------------------------------------------------------* *& \u4e09\u5927\u62a5\u8868\u53d6\u503c\u90e8\u5206\u53ef\u4ee5\u901a\u7528\uff0c\u56e0\u6b64\u62bd\u53d6\u51fa\u6765\u5f62\u6210\u4e00\u4e2a\u6a21\u5757 *&---------------------------------------------------------------------* \" \u8d22\u52a1\u660e\u7ec6\u6570\u636e\u952e\u503c TYPES : BEGIN OF ty_detail_key , rldnr TYPE acdoca - rldnr , rbukrs TYPE acdoca - rbukrs , gjahr TYPE acdoca - gjahr , belnr TYPE acdoca - belnr , docln TYPE acdoca - docln , END OF ty_detail_key . TYPES tt_detail_key TYPE STANDARD TABLE OF ty_detail_key WITH EMPTY KEY . \" \u8d22\u52a1\u660e\u7ec6\u6570\u636e TYPES : BEGIN OF ty_detail , rldnr TYPE acdoca - rldnr , rbukrs TYPE acdoca - rbukrs , gjahr TYPE acdoca - gjahr , belnr TYPE acdoca - belnr , docln TYPE acdoca - docln , ryear TYPE acdoca - ryear , \" \u8d22\u5e74 poper TYPE acdoca - poper , \" \u671f\u95f4 racct TYPE acdoca - racct , \" \u4f1a\u8ba1\u79d1\u76ee rcntr TYPE acdoca - rcntr , \" \u6210\u672c\u4e2d\u5fc3 prctr TYPE acdoca - prctr , \" \u5229\u6da6\u4e2d\u5fc3 rstgr TYPE acdoca - rstgr , \" RSTGR rfarea TYPE acdoca - rfarea , \" \u529f\u80fd\u8303\u56f4 budat TYPE acdoca - budat , hsl TYPE acdoca - hsl , END OF ty_detail . TYPES tt_detail TYPE STANDARD TABLE OF ty_detail WITH EMPTY KEY . \" \u62a5\u8868\u6570\u636e TYPES ty_amount TYPE p LENGTH 16 DECIMALS 2 . \" \u91d1\u989d TYPES : BEGIN OF ty_fi_data , bukrs TYPE bukrs , \" \u516c\u53f8 year TYPE gjahr , \" \u5e74\u5ea6 period TYPE monat , \" \u671f\u95f4 zitem TYPE string , \" \u9879\u76ee ztext TYPE string , \" \u9879\u76ee\u63cf\u8ff0 year_begin TYPE ty_amount , \" \u5e74\u521d\u4f59\u989d year_end TYPE ty_amount , \" \u5e74\u672b\u4f59\u989d period_current TYPE ty_amount , \" \u672c\u6708\u91d1\u989d period_total TYPE ty_amount , \" \u622a\u6b62\u672c\u6708\u7d2f\u8ba1\u91d1\u989d period_01 TYPE ty_amount , \" 01\u6708\u4f59\u989d period_02 TYPE ty_amount , \" 02\u6708\u4f59\u989d period_03 TYPE ty_amount , \" 03\u6708\u4f59\u989d period_04 TYPE ty_amount , \" 04\u6708\u4f59\u989d period_05 TYPE ty_amount , \" 05\u6708\u4f59\u989d period_06 TYPE ty_amount , \" 06\u6708\u4f59\u989d period_07 TYPE ty_amount , \" 07\u6708\u4f59\u989d period_08 TYPE ty_amount , \" 08\u6708\u4f59\u989d period_09 TYPE ty_amount , \" 09\u6708\u4f59\u989d period_10 TYPE ty_amount , \" 10\u6708\u4f59\u989d period_11 TYPE ty_amount , \" 11\u6708\u4f59\u989d period_12 TYPE ty_amount , \" 12\u6708\u4f59\u989d period_13 TYPE ty_amount , \" 13\u6708\u4f59\u989d period_14 TYPE ty_amount , \" 14\u6708\u4f59\u989d period_15 TYPE ty_amount , \" 15\u6708\u4f59\u989d period_16 TYPE ty_amount , \" 16\u6708\u4f59\u989d t_detail_key TYPE tt_detail_key , \" \u660e\u7ec6\u6570\u636e\u952e\u503c END OF ty_fi_data . TYPES tt_fi_data TYPE STANDARD TABLE OF ty_fi_data WITH EMPTY KEY . \" \u7b5b\u9009\u9879 TYPES : BEGIN OF ty_filter , name TYPE string , t_range_opt TYPE RANGE OF char40 , END OF ty_filter . \" \u914d\u7f6e\u6570\u636e TYPES ty_config_key TYPE n LENGTH 3 . TYPES : BEGIN OF ty_config , bukrs TYPE bukrs , \" \u516c\u53f8 zitem TYPE ty_config_key , \" \u9879\u76ee zitem_sub TYPE ty_config_key , \" \u5b50\u9879\u76ee ztext TYPE string , \" \u63cf\u8ff0 reverse TYPE xfeld , \" \u53cd\u5411\u6807\u8bb0\uff0c\u6c47\u603b\u6216\u8ba1\u7b97\u7684\u65f6\u5019\u4f7f\u7528 fi_data TYPE ty_fi_data , t_racct_opt TYPE RANGE OF racct , \" \u79d1\u76ee\u4f5c\u4e3a\u8d22\u52a1\u6570\u636e\u9996\u8981\u7b5b\u9009\u7ef4\u5ea6 t_filter TYPE STANDARD TABLE OF ty_filter WITH EMPTY KEY , \" \u7b5b\u9009\u9879 t_collect TYPE STANDARD TABLE OF ty_config_key WITH EMPTY KEY , \" \u5f15\u7528\u6c47\u603b\u5176\u4ed6\u9879\u76ee\u7ed3\u679c processed TYPE char01 , \" \u5904\u7406\u6807\u8bc6\uff0c\u672a\u5904\u7406[\u7a7a]\uff0c\u5904\u7406\u4e2d[P]\uff0c\u5df2\u5904\u7406[X]\uff0c\u7528\u4e8e\u6b7b\u5faa\u73af\u68c0\u67e5\u548c\u8df3\u8fc7\u5197\u4f59\u8ba1\u7b97 END OF ty_config . TYPES tt_config TYPE STANDARD TABLE OF ty_config WITH EMPTY KEY . *&---------------------------------------------------------------------* *& \u8d22\u52a1\u62a5\u8868\u64cd\u4f5c\u5bf9\u8c61 *&---------------------------------------------------------------------* CLASS lcl_fi_report DEFINITION DEFERRED . *&---------------------------------------------------------------------* *& \u8d22\u52a1\u62a5\u8868\u64cd\u4f5c\u5bf9\u8c61 *&---------------------------------------------------------------------* CLASS lcl_fi_report DEFINITION . PUBLIC SECTION . CLASS-METHODS get_smw0_templete IMPORTING i_objid TYPE w3objid RETURNING VALUE ( r_buffer ) TYPE xstring . CLASS-METHODS replace_texts IMPORTING it_replace TYPE ANY TABLE CHANGING c_doc TYPE xstring . CLASS-METHODS create IMPORTING i_year TYPE gjahr i_period TYPE monat it_config TYPE tt_config RETURNING VALUE ( ro_result ) TYPE REF TO lcl_fi_report . METHODS execute RETURNING VALUE ( rt_fi_data ) TYPE tt_fi_data . PRIVATE SECTION . METHODS get_detail . METHODS get_fi_data IMPORTING ir_config TYPE REF TO ty_config i_depth TYPE i OPTIONAL . DATA m_year TYPE gjahr . DATA m_period TYPE monat . DATA mt_config TYPE tt_config . DATA mt_detail TYPE tt_detail . ENDCLASS . *&---------------------------------------------------------------------* *& \u8d22\u52a1\u62a5\u8868\u64cd\u4f5c\u5bf9\u8c61 *&---------------------------------------------------------------------* CLASS lcl_fi_report IMPLEMENTATION . *&---------------------------------------------------------------------* *& \u8d22\u52a1\u62a5\u8868\u64cd\u4f5c\u5bf9\u8c61 *&---------------------------------------------------------------------* METHOD create . ro_result = NEW # ( ). ro_result -> mt_config = it_config . ro_result -> m_year = i_year . ro_result -> m_period = i_period . ENDMETHOD . *&---------------------------------------------------------------------* *& \u6839\u636e\u914d\u7f6e\u6267\u884c *&---------------------------------------------------------------------* METHOD execute . SORT mt_config BY bukrs zitem zitem_sub . get_detail ( ). \" \u83b7\u53d6\u62a5\u8868\u660e\u7ec6\u6570\u636e LOOP AT mt_config REFERENCE INTO DATA ( lr_config ). get_fi_data ( lr_config ). \" \u751f\u6210\u62a5\u8868\u884c\u6570\u636e ENDLOOP . LOOP AT mt_config REFERENCE INTO lr_config GROUP BY ( bukrs = lr_config -> bukrs zitem = lr_config -> zitem ) INTO DATA ( ls_config_grp ). DATA ls_fi_data TYPE ty_fi_data . ls_fi_data - bukrs = ls_config_grp - bukrs . ls_fi_data - year = m_year . ls_fi_data - period = m_period . ls_fi_data - zitem = ls_config_grp - zitem . LOOP AT GROUP ls_config_grp REFERENCE INTO lr_config . ls_fi_data - year_begin += lr_config -> fi_data - year_begin . \" \u5e74\u521d\u4f59\u989d ls_fi_data - period_01 += lr_config -> fi_data - period_01 . \" 01\u6708\u4f59\u989d ls_fi_data - period_02 += lr_config -> fi_data - period_02 . \" 02\u6708\u4f59\u989d ls_fi_data - period_03 += lr_config -> fi_data - period_03 . \" 03\u6708\u4f59\u989d ls_fi_data - period_04 += lr_config -> fi_data - period_04 . \" 04\u6708\u4f59\u989d ls_fi_data - period_05 += lr_config -> fi_data - period_05 . \" 05\u6708\u4f59\u989d ls_fi_data - period_06 += lr_config -> fi_data - period_06 . \" 06\u6708\u4f59\u989d ls_fi_data - period_07 += lr_config -> fi_data - period_07 . \" 07\u6708\u4f59\u989d ls_fi_data - period_08 += lr_config -> fi_data - period_08 . \" 08\u6708\u4f59\u989d ls_fi_data - period_09 += lr_config -> fi_data - period_09 . \" 09\u6708\u4f59\u989d ls_fi_data - period_10 += lr_config -> fi_data - period_10 . \" 10\u6708\u4f59\u989d ls_fi_data - period_11 += lr_config -> fi_data - period_11 . \" 11\u6708\u4f59\u989d ls_fi_data - period_12 += lr_config -> fi_data - period_12 . \" 12\u6708\u4f59\u989d ls_fi_data - period_13 += lr_config -> fi_data - period_13 . \" 13\u6708\u4f59\u989d ls_fi_data - period_14 += lr_config -> fi_data - period_14 . \" 14\u6708\u4f59\u989d ls_fi_data - period_15 += lr_config -> fi_data - period_15 . \" 15\u6708\u4f59\u989d ls_fi_data - period_16 += lr_config -> fi_data - period_16 . \" 16\u6708\u4f59\u989d INSERT LINES OF lr_config -> fi_data - t_detail_key INTO TABLE ls_fi_data - t_detail_key . \" \u660e\u7ec6\u6570\u636e\u952e\u503c ENDLOOP . ls_fi_data - year_end = ls_fi_data - year_begin . DO 16 TIMES . ASSIGN COMPONENT | PERIOD_ { sy - index ALIGN = RIGHT WIDTH = 2 PAD = '0' }| OF STRUCTURE ls_fi_data TO FIELD - SYMBOL ( <fs_period> ). IF <fs_period> IS ASSIGNED . ls_fi_data - year_end += <fs_period> . \" \u5e74\u672b\u4f59\u989d \" \u622a\u6b62\u672c\u6708\u672b\u7d2f\u8ba1\u91d1\u989d IF ls_fi_data - period <= sy - index . ls_fi_data - period_total += <fs_period> . ENDIF . \" \u672c\u6708\u91d1\u989d IF ls_fi_data - period = sy - index . ls_fi_data - period_current = <fs_period> . ENDIF . ENDIF . ENDDO . INSERT ls_fi_data INTO TABLE rt_fi_data . ENDLOOP . ENDMETHOD . *&---------------------------------------------------------------------* *& \u83b7\u53d6\u8d22\u52a1\u660e\u7ec6\u6570\u636e *&---------------------------------------------------------------------* METHOD get_detail . LOOP AT mt_config REFERENCE INTO DATA ( lr_config ) GROUP BY ( bukrs = lr_config -> bukrs ) INTO DATA ( ls_config_grp ). \" \u79d1\u76ee\u8303\u56f4 DATA lt_racct_opt TYPE RANGE OF racct . CLEAR lt_racct_opt . LOOP AT GROUP ls_config_grp REFERENCE INTO lr_config . INSERT LINES OF lr_config -> t_racct_opt INTO TABLE lt_racct_opt . ENDLOOP . CHECK lt_racct_opt IS NOT INITIAL . SORT lt_racct_opt . DELETE ADJACENT DUPLICATES FROM lt_racct_opt COMPARING ALL FIELDS . \" TODO \u8d85\u8fc7\u5927\u7ea6\u4e00\u4e07\u884c\u6570\u636e\u5c31\u5e94\u8be5\u5206\u6279\u5904\u7406\u4e86 \" \u9884\u67e5\u8be2\u51fa\u5168\u90e8\u76f8\u5173\u7684\u8d22\u52a1\u6570\u636e SELECT rldnr , rbukrs , gjahr , belnr , docln , ryear , \" \u8d22\u5e74 poper , \" \u671f\u95f4 racct , \" \u4f1a\u8ba1\u79d1\u76ee rcntr , \" \u6210\u672c\u4e2d\u5fc3 prctr , \" \u5229\u6da6\u4e2d\u5fc3 rstgr , \" \u539f\u56e0\u4ee3\u7801 rfarea , \" \u529f\u80fd\u8303\u56f4 budat , hsl FROM acdoca WHERE rbukrs = @ ls_config_grp - bukrs AND ryear = @ m_year AND racct IN @ lt_racct_opt APPENDING TABLE @ mt_detail . ENDLOOP . SORT mt_detail BY rldnr rbukrs gjahr belnr docln . ENDMETHOD . *&---------------------------------------------------------------------* *& \u751f\u6210\u62a5\u8868\u884c\u6570\u636e *&---------------------------------------------------------------------* METHOD get_fi_data . IF i_depth > 10 \" \u8fed\u4ee3\u5c42\u7ea7\uff0c\u9632\u6b62\u6808\u6ea2\u51fa OR ir_config IS BOUND \" \u7a7a\u503c\u68c0\u67e5 OR ir_config -> processed IS INITIAL \" \u5904\u7406\u6807\u8bb0\u68c0\u67e5\uff0c\u9632\u6b62\u6b7b\u5faa\u73af\uff0c\u4ee5\u53ca\u8df3\u8fc7\u5197\u4f59\u8ba1\u7b97 . RETURN . ENDIF . ir_config -> processed = 'P' . \" \u5904\u7406\u4e2d \" \u5bf9\u4e8e\u6587\u672c\u9879\uff0c\u5e76\u4e0d\u9700\u8981\u7b5b\u9009 IF ir_config -> t_racct_opt IS NOT INITIAL OR ir_config -> t_filter IS NOT INITIAL . \" \u83b7\u53d6\u5f53\u524d\u914d\u7f6e\u884c\u7684\u6709\u6548\u6570\u636e SELECT * FROM @ mt_detail AS ds WHERE rbukrs = @ ir_config -> bukrs AND racct IN @ ir_config -> t_racct_opt \" \u79d1\u76ee INTO TABLE @ DATA ( lt_detail ). \" \u9664\u79d1\u76ee\u5916\uff0c\u5176\u4ed6\u7b5b\u9009\u9879\u52a8\u6001\u5904\u7406 LOOP AT ir_config -> t_filter INTO DATA ( ls_filter ) WHERE t_range_opt IS NOT INITIAL . IF lt_detail IS NOT INITIAL . DATA ( l_condition ) = |{ ls_filter - name } IN @LS_FILTER-T_RANGE_OPT |. TRY . SELECT * FROM @ lt_detail AS ds WHERE ( l_condition ) INTO TABLE @ lt_detail . CATCH cx_root . ENDTRY . ENDIF . ENDLOOP . ENDIF . \" \u6c47\u603b\u8d22\u52a1\u6570\u636e LOOP AT lt_detail INTO DATA ( ls_detail ). CASE ls_detail - poper . WHEN 0 . ir_config -> fi_data - year_begin += ls_detail - hsl . WHEN 1 . ir_config -> fi_data - period_01 += ls_detail - hsl . WHEN 2 . ir_config -> fi_data - period_02 += ls_detail - hsl . WHEN 3 . ir_config -> fi_data - period_03 += ls_detail - hsl . WHEN 4 . ir_config -> fi_data - period_04 += ls_detail - hsl . WHEN 5 . ir_config -> fi_data - period_05 += ls_detail - hsl . WHEN 6 . ir_config -> fi_data - period_06 += ls_detail - hsl . WHEN 7 . ir_config -> fi_data - period_07 += ls_detail - hsl . WHEN 8 . ir_config -> fi_data - period_08 += ls_detail - hsl . WHEN 9 . ir_config -> fi_data - period_09 += ls_detail - hsl . WHEN 10 . ir_config -> fi_data - period_10 += ls_detail - hsl . WHEN 11 . ir_config -> fi_data - period_11 += ls_detail - hsl . WHEN 12 . ir_config -> fi_data - period_12 += ls_detail - hsl . WHEN 13 . ir_config -> fi_data - period_13 += ls_detail - hsl . WHEN 14 . ir_config -> fi_data - period_14 += ls_detail - hsl . WHEN 15 . ir_config -> fi_data - period_15 += ls_detail - hsl . WHEN 16 . ir_config -> fi_data - period_16 += ls_detail - hsl . WHEN OTHERS . ENDCASE . \" \u5199\u5165\u5230\u660e\u7ec6\u6e05\u5355\u4e2d READ TABLE mt_detail TRANSPORTING NO FIELDS WITH KEY rldnr = ls_detail - rldnr rbukrs = ls_detail - rbukrs gjahr = ls_detail - gjahr belnr = ls_detail - belnr docln = ls_detail - docln BINARY SEARCH . IF sy - subrc = 0 . INSERT CORRESPONDING # ( ls_detail ) INTO TABLE ir_config -> fi_data - t_detail_key . ENDIF . ENDLOOP . \" \u6c47\u603b\u5176\u4ed6\u9879\u7684\u8d22\u52a1\u6570\u636e LOOP AT ir_config -> t_collect INTO DATA ( l_other_zitem ). READ TABLE mt_config REFERENCE INTO DATA ( lr_config ) WITH KEY bukrs = ir_config -> bukrs zitem = l_other_zitem BINARY SEARCH . IF sy - subrc <> 0 . CONTINUE . ENDIF . \" \u9012\u5f52\u53d6\u503c get_fi_data ( ir_config = lr_config i_depth = i_depth + 1 ). \" \u53cd\u5411\u6807\u8bb0 DATA l_factor TYPE i . IF lr_config -> reverse IS INITIAL . l_factor = 1 . ELSE . l_factor = - 1 . ENDIF . ir_config -> fi_data - year_begin += lr_config -> fi_data - year_begin * l_factor . \" \u5e74\u521d\u4f59\u989d ir_config -> fi_data - period_01 += lr_config -> fi_data - period_01 * l_factor . \" 01\u6708\u4f59\u989d ir_config -> fi_data - period_02 += lr_config -> fi_data - period_02 * l_factor . \" 02\u6708\u4f59\u989d ir_config -> fi_data - period_03 += lr_config -> fi_data - period_03 * l_factor . \" 03\u6708\u4f59\u989d ir_config -> fi_data - period_04 += lr_config -> fi_data - period_04 * l_factor . \" 04\u6708\u4f59\u989d ir_config -> fi_data - period_05 += lr_config -> fi_data - period_05 * l_factor . \" 05\u6708\u4f59\u989d ir_config -> fi_data - period_06 += lr_config -> fi_data - period_06 * l_factor . \" 06\u6708\u4f59\u989d ir_config -> fi_data - period_07 += lr_config -> fi_data - period_07 * l_factor . \" 07\u6708\u4f59\u989d ir_config -> fi_data - period_08 += lr_config -> fi_data - period_08 * l_factor . \" 08\u6708\u4f59\u989d ir_config -> fi_data - period_09 += lr_config -> fi_data - period_09 * l_factor . \" 09\u6708\u4f59\u989d ir_config -> fi_data - period_10 += lr_config -> fi_data - period_10 * l_factor . \" 10\u6708\u4f59\u989d ir_config -> fi_data - period_11 += lr_config -> fi_data - period_11 * l_factor . \" 11\u6708\u4f59\u989d ir_config -> fi_data - period_12 += lr_config -> fi_data - period_12 * l_factor . \" 12\u6708\u4f59\u989d ir_config -> fi_data - period_13 += lr_config -> fi_data - period_13 * l_factor . \" 13\u6708\u4f59\u989d ir_config -> fi_data - period_14 += lr_config -> fi_data - period_14 * l_factor . \" 14\u6708\u4f59\u989d ir_config -> fi_data - period_15 += lr_config -> fi_data - period_15 * l_factor . \" 15\u6708\u4f59\u989d ir_config -> fi_data - period_16 += lr_config -> fi_data - period_16 * l_factor . \" 16\u6708\u4f59\u989d INSERT LINES OF lr_config -> fi_data - t_detail_key INTO TABLE ir_config -> fi_data - t_detail_key . \" \u660e\u7ec6\u6570\u636e ENDLOOP . ir_config -> processed = 'X' . \" \u5904\u7406\u5b8c\u6210 ENDMETHOD . *&---------------------------------------------------------------------* *& \u4eceSMW0\u83b7\u53d6\u6a21\u677f\u6587\u4ef6 *&---------------------------------------------------------------------* METHOD get_smw0_templete . DATA : lt_mime TYPE STANDARD TABLE OF w3mime , ls_id TYPE wwwdataid , ls_key TYPE wwwdatatab . ls_key - relid = 'MI' . ls_key - objid = i_objid . CALL FUNCTION 'WWWDATA_IMPORT' EXPORTING key = ls_key TABLES mime = lt_mime EXCEPTIONS wrong_object_type = 1 import_error = 2 OTHERS = 3 . IF sy - subrc <> 0 . MESSAGE | \u6a21\u677f[ { i_objid } ]\u83b7\u53d6\u5931\u8d25 | TYPE 'S' DISPLAY LIKE 'E' . RETURN . ENDIF . SELECT SINGLE value FROM wwwparams WHERE relid = @ ls_key - relid AND objid = @ ls_key - objid AND name EQ 'filesize' INTO @ DATA ( l_param ). DATA l_length TYPE i . l_length = l_param . CALL FUNCTION 'SCMS_BINARY_TO_XSTRING' EXPORTING input_length = l_length IMPORTING buffer = r_buffer TABLES binary_tab = lt_mime EXCEPTIONS failed = 1 OTHERS = 2 . IF sy - subrc <> 0 . CLEAR r_buffer . ENDIF . ENDMETHOD . *&---------------------------------------------------------------------* *& \u66ff\u6362\u6a21\u677f\u6587\u4ef6\u4e2d\u7684\u6587\u672c\u5185\u5bb9 *&---------------------------------------------------------------------* METHOD replace_texts . \" \u7a0b\u5e8f\u8981\u6c42IT_REPLACE\u81f3\u5c11\u4e24\u5217\uff0c\u4ee3\u7801\u4f1a\u5c06\u5de6\u5217\u5185\u5bb9\u66ff\u6362\u4e3a\u53f3\u5217\u5185\u5bb9 CHECK it_replace IS NOT INITIAL . CHECK c_doc IS NOT INITIAL . FIELD-SYMBOLS <fs_replace_t> TYPE ANY TABLE . FIELD-SYMBOLS <fs_replace> TYPE any . FIELD-SYMBOLS <fs_from> TYPE any . FIELD-SYMBOLS <fs_to> TYPE any . TRY . DATA ( lo_doc ) = cl_xlsx_document => load_document ( c_doc ). DATA ( lo_workbook_part ) = lo_doc -> get_workbookpart ( ). DATA ( lo_sharedstrings_part ) = lo_workbook_part -> get_sharedstringspart ( ). DATA ( l_sharedstrings_xml ) = lo_sharedstrings_part -> get_data ( ). DATA ( l_sharedstrings_str ) = cl_openxml_helper => xstring_to_string ( l_sharedstrings_xml ). ASSIGN it_replace TO <fs_replace_t> . LOOP AT <fs_replace_t> ASSIGNING <fs_replace> . ASSIGN COMPONENT 1 OF STRUCTURE <fs_replace> TO <fs_from> . ASSIGN COMPONENT 2 OF STRUCTURE <fs_replace> TO <fs_to> . IF <fs_from> IS ASSIGNED AND <fs_to> IS ASSIGNED . IF <fs_from> IS NOT INITIAL . REPLACE ALL OCCURRENCES OF <fs_from> IN l_sharedstrings_str WITH <fs_to> IN CHARACTER MODE . ENDIF . ENDIF . UNASSIGN <fs_from> . UNASSIGN <fs_to> . ENDLOOP . l_sharedstrings_xml = cl_openxml_helper => string_to_xstring ( l_sharedstrings_str ). lo_sharedstrings_part -> feed_data ( l_sharedstrings_xml ). c_doc = lo_doc -> get_package_data ( ). CATCH cx_openxml_not_found cx_openxml_format cx_openxml_not_allowed INTO DATA ( lx_openxml ). MESSAGE lx_openxml -> get_text ( ) TYPE 'S' DISPLAY LIKE 'E' . CATCH cx_root INTO DATA ( lx_root ). MESSAGE lx_root -> get_text ( ) TYPE 'S' DISPLAY LIKE 'E' . ENDTRY . ENDMETHOD . ENDCLASS .","title":"Include\u6587\u4ef6"},{"location":"fico/fi_report_bs/","text":"\u8d44\u4ea7\u8d1f\u503a\u8868 \u00b6 \u8d44\u4ea7\u8d1f\u503a\u8868\u662f \u8d22\u52a1\u53d6\u503c\u6a21\u5757 \u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002\u4e0b\u9762\u4ee3\u7801\u4f7f\u7528\u7684\u914d\u7f6e\u8868\u53ef\u53c2\u8003 \u9875\u9762 \u3002 \u793a\u4f8b\u4ee3\u7801 REPORT zfi_balance . *&---------------------------------------------------------------------* *& Include zfi_balance_top *&---------------------------------------------------------------------* TYPES : BEGIN OF ty_data , bukrs TYPE bukrs , gjahr TYPE gjahr , monat TYPE monat , field1 TYPE string , \" \u8d44\u4ea7 field2 TYPE string , \" \u884c\u6b21 field3 TYPE string , \" \u671f\u672b\u4f59\u989d field4 TYPE string , \" \u5e74\u521d\u4f59\u989d field5 TYPE string , \" \u8d1f\u503a\u548c\u6240\u6709\u8005\u6743\u76ca field6 TYPE string , \" \u884c\u6b21 field7 TYPE string , \" \u671f\u672b\u4f59\u989d field8 TYPE string , \" \u5e74\u521d\u4f59\u989d END OF ty_data . TYPES tt_data TYPE STANDARD TABLE OF ty_data . DATA gt_data TYPE tt_data . DATA gt_bukrs TYPE STANDARD TABLE OF bukrs WITH EMPTY KEY . *&---------------------------------------------------------------------* *& Include zfi_balance_sel *&---------------------------------------------------------------------* TABLES t001 . SELECT-OPTIONS s_bukrs FOR t001 - bukrs NO-EXTENSION NO INTERVALS OBLIGATORY . PARAMETERS p_gjahr TYPE gjahr OBLIGATORY DEFAULT sy - datum ( 4 ). PARAMETERS p_monat TYPE monat OBLIGATORY DEFAULT sy - datum + 4 ( 2 ). *&---------------------------------------------------------------------* *& Include zfir001_frm *&---------------------------------------------------------------------* *&---------------------------------------------------------------------* *& Form frm_main *&---------------------------------------------------------------------* *& \u62a5\u8868\u7a0b\u5e8f\u5165\u53e3 *&---------------------------------------------------------------------* FORM frm_main . PERFORM frm_auth_check . IF gt_bukrs IS INITIAL . RETURN . ENDIF . PERFORM frm_gen_balance_sheet . \" \u8d44\u4ea7\u8d1f\u503a\u8868 PERFORM frm_display TABLES gt_data . \" \u5c55\u793a ENDFORM . *&---------------------------------------------------------------------* *& Form frm_auth_check *&---------------------------------------------------------------------* *& \u6743\u9650\u68c0\u67e5 *&---------------------------------------------------------------------* FORM frm_auth_check . DATA lt_bukrs_opt TYPE RANGE OF bukrs . SELECT 'I' AS sign , 'EQ' AS option , bukrs AS low FROM t001 WHERE bukrs IN @ s_bukrs INTO TABLE @ lt_bukrs_opt . IF lt_bukrs_opt IS INITIAL . l_subrc = 1 . l_msg = | \u516c\u53f8\u4e0d\u5b58\u5728 |. ENDIF . SORT lt_bukrs_opt . DELETE ADJACENT DUPLICATES FROM lt_bukrs_opt COMPARING ALL FIELDS . LOOP AT lt_bukrs_opt INTO DATA ( ls_bukrs_opt ). AUTHORITY-CHECK OBJECT 'F_BKPF_BUK' ID 'BUKRS' FIELD ls_bukrs_opt - low ID 'ACTVT' FIELD i_actvt . IF sy - subrc <> 0 . MESSAGE | \u65e0\u516c\u53f8 { ls_bukrs_opt - low } \u6743\u9650 | TYPE 'S' DISPLAY LIKE 'E' . DELETE lt_bukrs_opt . ENDIF . ENDLOOP . s_bukrs[] = lt_bukrs_opt . IF s_bukrs[] IS INITIAL . LEAVE LIST - PROCESSING . ENDIF . SELECT bukrs FROM t001 WHERE bukrs IN @ s_bukrs INTO TABLE @ gt_bukrs . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_get_config *&---------------------------------------------------------------------* *& \u8bfb\u53d6\u5168\u90e8\u516c\u53f8\u914d\u7f6e *&---------------------------------------------------------------------* FORM frm_get_config_all TABLES et_config TYPE tt_config . DATA lt_config TYPE tt_config . LOOP AT gt_bukrs INTO DATA ( l_bukrs ). PERFORM frm_get_config TABLES lt_config USING '1' \" \u8d44\u4ea7\u8d1f\u503a\u8868 l_bukrs . INSERT LINES OF lt_config INTO TABLE et_config . ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_get_config *&---------------------------------------------------------------------* *& \u8bfb\u53d6\u5355\u4e2a\u516c\u53f8\u914d\u7f6e *&---------------------------------------------------------------------* FORM frm_get_config TABLES et_config TYPE tt_config USING i_fi_report TYPE string i_bukrs TYPE bukrs . \" \u8003\u8651\u9002\u914d\u7b26 DATA lt_bukrs_opt TYPE RANGE OF bukrs . lt_bukrs_opt = VALUE # ( sign = 'I' option = 'EQ' ( low = i_bukrs ) ( low = |{ i_bukrs ( 3 ) } * | ) ( low = |{ i_bukrs ( 2 ) } * | ) ( low = |{ i_bukrs ( 1 ) } * | ) ( low = '*' ) ( low = '' ) ). \" \u53d6\u914d\u7f6e\u6570\u636e SELECT * FROM zfit0001 WHERE zfi_report = @ i_fi_report AND bukrs IN @ lt_bukrs_opt INTO TABLE @ DATA ( lt_zfit0001 ). \" \u89e3\u6790\u914d\u7f6e\u6570\u636e LOOP AT lt_zfit0001 INTO DATA ( ls_zfit0001 ). DATA ls_config TYPE ty_config . CLEAR ls_config . ls_config - bukrs = ls_zfit0001 - bukrs . \" \u516c\u53f8 ls_config - zitem = ls_zfit0001 - zitem . \" \u9879\u76ee ls_config - zitem_sub = ls_zfit0001 - zitem_sub . \" \u5b50\u9879\u76ee CASE ls_zfit0001 - ztype . WHEN '0' . \" \u6587\u672c\u9879 ls_config - ztext = ls_zfit0001 - ztext . \" \u9879\u76ee\u540d\u79f0 WHEN '1' . \" \u7b5b\u9009\u9879 \" \u79d1\u76ee IF ls_zfit0001 - racct_to IS NOT INITIAL . INSERT VALUE # ( sign = 'I' option = 'BT' low = ls_zfit0001 - racct_from high = ls_zfit0001 - racct_to ) INTO TABLE ls_config - t_racct_opt . ELSE . INSERT VALUE # ( sign = 'I' option = 'EQ' low = ls_zfit0001 - racct_from ) INTO TABLE ls_config - t_racct_opt . ENDIF . \" \u539f\u56e0\u4ee3\u7801 INSERT VALUE # ( name = 'RSTGR' \" TY_DATEIL\u5b57\u6bb5\u540d\uff0c\u540e\u7eed\u52a8\u6001\u7b5b\u9009 t_range_opt = VALUE # ( ( sign = 'I' option = 'EQ' low = ls_zfit0001 - rstgr ) ) ) INTO TABLE ls_config - t_filter . \" \u529f\u80fd\u8303\u56f4 INSERT VALUE # ( name = 'RFAREA' \" TY_DATEIL\u5b57\u6bb5\u540d\uff0c\u540e\u7eed\u52a8\u6001\u7b5b\u9009 t_range_opt = VALUE # ( ( sign = 'I' option = 'EQ' low = ls_zfit0001 - rfarea ) ) ) INTO TABLE ls_config - t_filter . WHEN '2' . \" \u6c47\u603b\u9879 IF ls_zfit0001 - zitem_to IS INITIAL OR ls_zfit0001 - zitem_to = '' . ls_zfit0001 - zitem_to = ls_zfit0001 - zitem_from . ENDIF . WHILE ls_zfit0001 - zitem_from <= ls_zfit0001 - zitem_to . INSERT ls_zfit0001 - zitem_from INTO TABLE ls_config - t_collect . ls_zfit0001 - zitem_from = ls_zfit0001 - zitem_from + 1 . ENDWHILE . ls_config - zreverse = ls_zfit0001 - zreverse . \" \u53cd\u5411\u6807\u8bc6 WHEN OTHERS . ENDCASE . \" CASE ls_zfit0001-ztype INSERT ls_config INTO TABLE et_config . ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_gen_balance_sheet *&---------------------------------------------------------------------* *& \u751f\u6210\u8d44\u4ea7\u8d1f\u503a\u8868 *&---------------------------------------------------------------------* FORM frm_gen_balance_sheet . DATA lt_config TYPE tt_config . PERFORM frm_get_config_all TABLES lt_config . \" \u83b7\u53d6\u914d\u7f6e\u6570\u636e \" \u6839\u636e\u914d\u7f6e\u6570\u636e\u751f\u6210\u8d22\u52a1\u62a5\u8868\u6570\u636e\u9879 DATA ( lt_fi_data ) = lcl_fi_report => create ( i_year = p_gjahr i_period = p_monat it_config = lt_config ) -> execute ( ). SORT lt_fi_data BY bukrs year period zitem . \" \u627e\u5230\u8d44\u4ea7\u603b\u8ba1\u884c\uff0c\u7528\u4e8e\u5212\u5206\u4e24\u5217 DATA l_lines TYPE i . LOOP AT lt_fi_data REFERENCE INTO DATA ( lr_fi_data ). l_lines = sy - tabix . IF lr_fi_data -> ztext CS '\u8d44\u4ea7\u603b\u8ba1' . EXIT . ENDIF . ENDLOOP . DATA lt_data TYPE tt_data . DATA ls_data TYPE ty_data . LOOP AT gt_bukrs INTO DATA ( l_bukrs ). CLEAR lt_data . DO l_lines TIMES . CLEAR ls_data . ls_data - bukrs = l_bukrs . ls_data - gjahr = p_gjahr . ls_data - monat = p_monat . ls_data - field2 = sy - index . \" \u8d44\u4ea7\u5217\u884c\u6b21 READ TABLE lt_fi_data REFERENCE INTO lr_fi_data WITH KEY bukrs = l_bukrs year = p_gjahr period = p_monat zitem = ls_data - field2 BINARY SEARCH . IF sy - subrc = 0 . ls_data - field1 = lr_fi_data -> ztext . ls_data - field3 = |{ lr_fi_data -> period_total NUMBER = USER DECIMALS = 2 }|. ls_data - field4 = |{ lr_fi_data -> year_begin NUMBER = USER DECIMALS = 2 }|. ENDIF . ls_data - field6 = sy - index + l_lines . \" \u8d1f\u503a\u548c\u6240\u6709\u8005\u6743\u76ca\u5217\u884c\u6b21 READ TABLE lt_fi_data REFERENCE INTO lr_fi_data WITH KEY bukrs = l_bukrs year = p_gjahr period = p_monat zitem = ls_data - field6 BINARY SEARCH . IF sy - subrc = 0 . ls_data - field5 = lr_fi_data -> ztext . ls_data - field7 = |{ lr_fi_data -> period_total NUMBER = USER DECIMALS = 2 }|. ls_data - field8 = |{ lr_fi_data -> year_begin NUMBER = USER DECIMALS = 2 }|. ENDIF . INSERT ls_data INTO TABLE gt_data . ENDDO . ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_export *&---------------------------------------------------------------------* *& \u5bfc\u51fa\u5230\u672c\u5730 *&---------------------------------------------------------------------* FORM frm_export . TYPES : BEGIN OF ty_replace , from TYPE string , to TYPE string , END OF ty_replace . TYPES tt_replace TYPE STANDARD TABLE OF ty_replace WITH EMPTY KEY . DATA lt_replace TYPE tt_replace . DATA ls_replace TYPE ty_replace . \" \u83b7\u53d6\u4e0b\u8f7d\u76ee\u5f55 DATA l_directory TYPE string . cl_gui_frontend_services => directory_browse ( CHANGING selected_folder = l_directory EXCEPTIONS cntl_error = 1 error_no_gui = 2 not_supported_by_gui = 3 ). IF sy - subrc <> 0 . MESSAGE ID sy - msgid TYPE sy - msgty NUMBER sy - msgno WITH sy - msgv1 sy - msgv2 sy - msgv3 sy - msgv4 . ENDIF . DATA ( l_buffer ) = lcl_fi_report => get_smw0_templete ( CONV # ( sy - tcode ) ). \" \u83b7\u53d6SMW0\u6a21\u677f\u6587\u4ef6 CHECK l_buffer IS NOT INITIAL . \" \u9010\u516c\u53f8\u5904\u7406 LOOP AT gt_data INTO DATA ( ls_data ) GROUP BY ( bukrs = ls_data - bukrs gjahr = ls_data - gjahr monat = ls_data - monat ) INTO DATA ( ls_data_grp ). SELECT SINGLE butxt FROM t001 WHETE bukrs = @ ls_data_grp - bukrs INTO @ DATA ( l_butxt ). \" \u7f16\u5236\u5355\u4f4d CLEAR ls_replace . ls_replace - from = | __BUKRS__ |. ls_replace - to = l_butxt . INSERT ls_replace INTO TABLE lt_replace . \" \u6253\u5370\u65e5\u671f CLEAR ls_replace . ls_replace - from = | __ZDATE__ |. ls_replace - to = |{ sy - datum ( 4 ) } \u5e74 { sy - datum + 4 ( 2 ) } \u6708 { sy - datum + 6 ( 2 ) } \u65e5 |. INSERT ls_replace INTO TABLE lt_replace . LOOP AT GROUP ls_data_grp INTO ls_data . \" \u8d44\u4ea7-\u671f\u672b\u4f59\u989d CLEAR ls_replace . ls_replace - from = | __PEROID_END_Z { ls_data - field2 } __ |. ls_replace - to = ls_data - field3 . INSERT ls_replace INTO TABLE lt_replace . \" \u8d44\u4ea7-\u5e74\u521d\u4f59\u989d CLEAR ls_replace . ls_replace - from = | __YEAR_BEGIN_Z { ls_data - field2 } __ |. ls_replace - to = ls_data - field4 . INSERT ls_replace INTO TABLE lt_replace . \" \u635f\u76ca-\u671f\u672b\u4f59\u989d CLEAR ls_replace . ls_replace - from = | __PEROID_END_Z { ls_data - field6 } __ |. ls_replace - to = ls_data - field7 . INSERT ls_replace INTO TABLE lt_replace . \" \u635f\u76ca-\u5e74\u521d\u4f59\u989d CLEAR ls_replace . ls_replace - from = | __YEAR_BEGIN_Z { ls_data - field6 } __ |. ls_replace - to = ls_data - field8 . INSERT ls_replace INTO TABLE lt_replace . ENDLOOP . \" \u66ff\u6362\u6587\u672c\u5185\u5bb9 DATA ( l_doc ) = l_buffer . lcl_fi_report => replace_texts ( EXPORTING it_replace = lt_replace CHANGING c_doc = l_doc ). CHECK l_doc IS NOT INITIAL . \" \u4e0b\u8f7d\u5230\u672c\u5730 TRY . DATA ( l_filename ) = |{ l_directory } \\\\\u8d44\u4ea7\u8d1f\u503a\u8868_ { l_bukrs_name } _ { sy - datum } .xlsx |. cl_openxml_helper => store_local_file ( im_file_name = l_filename im_data = l_doc ). CATCH cx_openxml_not_found cx_openxml_format cx_openxml_not_allowed INTO DATA ( lx_openxml ). MESSAGE lx_openxml -> get_text ( ) TYPE 'S' DISPLAY LIKE 'E' . RETURN . ENDTRY . ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Include zfi_balance_alv *&---------------------------------------------------------------------* *&---------------------------------------------------------------------* *& Form frm_display *&---------------------------------------------------------------------* *& ALV\u5c55\u793a *&---------------------------------------------------------------------* FORM frm_display TABLES ct_data TYPE STANDARD TABLE . DATA ls_layout TYPE lvc_s_layo . DATA lt_fieldcat TYPE STANDARD TABLE OF lvc_s_fcat . PERFORM frm_set_layout CHANGING ls_layout . PERFORM frm_set_fieldcat TABLES lt_fieldcat . CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY_LVC' EXPORTING i_callback_program = sy - repid * i_callback_pf_status_set = 'FRM_PF_STATUS' * i_callback_user_command = 'FRM_USER_COMMAND' is_layout_lvc = ls_layout it_fieldcat_lvc = lt_fieldcat i_default = abap_true i_save = 'A' TABLES t_outtab = ct_data[] EXCEPTIONS program_error = 1 OTHERS = 2 . IF sy - subrc <> 0 . MESSAGE ID sy - msgid TYPE sy - msgty NUMBER sy - msgno WITH sy - msgv1 sy - msgv2 sy - msgv3 sy - msgv4 . ENDIF . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_set_layout *&---------------------------------------------------------------------* *& \u62a5\u8868\u5e03\u5c40\u8bbe\u7f6e *&---------------------------------------------------------------------* FORM frm_set_layout CHANGING cs_layout TYPE lvc_s_layo . CLEAR cs_layout . cs_layout - zebra = abap_true . \" \u6591\u9a6c\u7ebf cs_layout - cwidth_opt = abap_true . \" \u81ea\u52a8\u8c03\u6574ALVL\u5217\u5bbd cs_layout - sel_mode = 'A' . \" \u9009\u62e9\u6a21\u5f0f * cs_layout-ctab_fname = 'COLTAB'. \" \u5355\u5143\u683c\u989c\u8272\u8bbe\u7f6e ENDFORM . *&---------------------------------------------------------------------* *& Form frm_set_fieldcat *&---------------------------------------------------------------------* *& \u5b57\u6bb5\u76ee\u5f55\u8bbe\u7f6e *&---------------------------------------------------------------------* FORM frm_set_fieldcat TABLES ct_fieldcat TYPE lvc_t_fcat . DATA ls_fieldcat TYPE lvc_s_fcat . DEFINE _init_fieldcat . CLEAR ls_fieldcat . ls_fieldcat - fieldname = &1 . ls_fieldcat - tooltip = ls_fieldcat - coltext = ls_fieldcat - seltext = ls_fieldcat - scrtext_l = ls_fieldcat - scrtext_m = ls_fieldcat - scrtext_s = &2 . ls_fieldcat - ref_table = &3 . ls_fieldcat - ref_field = &4 . INSERT ls_fieldcat INTO TABLE ct_fieldcat . END-OF-DEFINITION . _init_fieldcat 'FIELD1' '\u8d44\u4ea7' '' '' . _init_fieldcat 'FIELD2' '\u884c\u6b21' '' '' . _init_fieldcat 'FIELD3' '\u671f\u672b\u4f59\u989d' '' '' . _init_fieldcat 'FIELD4' '\u5e74\u521d\u4f59\u989d' '' '' . _init_fieldcat 'FIELD5' '\u8d1f\u503a\u548c\u6240\u6709\u8005\u6743\u76ca' '' '' . _init_fieldcat 'FIELD6' '\u884c\u6b21' '' '' . _init_fieldcat 'FIELD7' '\u671f\u672b\u4f59\u989d' '' '' . _init_fieldcat 'FIELD8' '\u5e74\u521d\u4f59\u989d' '' '' . \" \u4e2a\u6027\u5316\u81ea\u5df1\u8f93\u51fa\u6570\u636e\u683c\u5f0f LOOP AT ct_fieldcat REFERENCE INTO DATA ( lr_fieldcat ). \" \u5b57\u6bb5\u663e\u793a\u5c5e\u6027\u8bbe\u7f6e CASE lr_fieldcat -> fieldname . WHEN OTHERS . ENDCASE . ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_pf_status *&---------------------------------------------------------------------* *& \u8bbe\u7f6eGUI\u72b6\u6001 *&---------------------------------------------------------------------* FORM frm_pf_status USING ct_extab TYPE slis_t_extab . SET PF-STATUS 'STATUS' . SET TITLEBAR 'TITLE' . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_user_command *&---------------------------------------------------------------------* *& \u529f\u80fd\u54cd\u5e94 *&---------------------------------------------------------------------* FORM frm_user_command USING cv_ucomm LIKE sy - ucomm cs_selfield TYPE slis_selfield . \" \u5237\u65b0\u5c4f\u5e55\u6570\u636e\u5230\u5185\u8868 DATA : lo_grid TYPE REF TO cl_gui_alv_grid . CALL FUNCTION 'GET_GLOBALS_FROM_SLVC_FULLSCR' IMPORTING e_grid = lo_grid . CALL METHOD lo_grid -> check_changed_data . \" \u6309\u94ae\u529f\u80fd\u5b9e\u73b0 CASE cv_ucomm . WHEN '&IC1' . \" \u53cc\u51fb WHEN 'ZEXPORT' . \" \u5bfc\u51fa PERFORM frm_export . WHEN OTHERS . ENDCASE . \" \u5237\u65b0ALV \u663e\u793a\u503c cs_selfield - refresh = abap_true . cs_selfield - row_stable = abap_true . cs_selfield - col_stable = abap_true . ENDFORM . *&---------------------------------------------------------------------* *& START-OF-SELECTION *&---------------------------------------------------------------------* START-OF-SELECTION . PERFORM frm_main .","title":"\u8d44\u4ea7\u8d1f\u503a\u8868"},{"location":"fico/fi_report_bs/#_1","text":"\u8d44\u4ea7\u8d1f\u503a\u8868\u662f \u8d22\u52a1\u53d6\u503c\u6a21\u5757 \u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002\u4e0b\u9762\u4ee3\u7801\u4f7f\u7528\u7684\u914d\u7f6e\u8868\u53ef\u53c2\u8003 \u9875\u9762 \u3002 \u793a\u4f8b\u4ee3\u7801 REPORT zfi_balance . *&---------------------------------------------------------------------* *& Include zfi_balance_top *&---------------------------------------------------------------------* TYPES : BEGIN OF ty_data , bukrs TYPE bukrs , gjahr TYPE gjahr , monat TYPE monat , field1 TYPE string , \" \u8d44\u4ea7 field2 TYPE string , \" \u884c\u6b21 field3 TYPE string , \" \u671f\u672b\u4f59\u989d field4 TYPE string , \" \u5e74\u521d\u4f59\u989d field5 TYPE string , \" \u8d1f\u503a\u548c\u6240\u6709\u8005\u6743\u76ca field6 TYPE string , \" \u884c\u6b21 field7 TYPE string , \" \u671f\u672b\u4f59\u989d field8 TYPE string , \" \u5e74\u521d\u4f59\u989d END OF ty_data . TYPES tt_data TYPE STANDARD TABLE OF ty_data . DATA gt_data TYPE tt_data . DATA gt_bukrs TYPE STANDARD TABLE OF bukrs WITH EMPTY KEY . *&---------------------------------------------------------------------* *& Include zfi_balance_sel *&---------------------------------------------------------------------* TABLES t001 . SELECT-OPTIONS s_bukrs FOR t001 - bukrs NO-EXTENSION NO INTERVALS OBLIGATORY . PARAMETERS p_gjahr TYPE gjahr OBLIGATORY DEFAULT sy - datum ( 4 ). PARAMETERS p_monat TYPE monat OBLIGATORY DEFAULT sy - datum + 4 ( 2 ). *&---------------------------------------------------------------------* *& Include zfir001_frm *&---------------------------------------------------------------------* *&---------------------------------------------------------------------* *& Form frm_main *&---------------------------------------------------------------------* *& \u62a5\u8868\u7a0b\u5e8f\u5165\u53e3 *&---------------------------------------------------------------------* FORM frm_main . PERFORM frm_auth_check . IF gt_bukrs IS INITIAL . RETURN . ENDIF . PERFORM frm_gen_balance_sheet . \" \u8d44\u4ea7\u8d1f\u503a\u8868 PERFORM frm_display TABLES gt_data . \" \u5c55\u793a ENDFORM . *&---------------------------------------------------------------------* *& Form frm_auth_check *&---------------------------------------------------------------------* *& \u6743\u9650\u68c0\u67e5 *&---------------------------------------------------------------------* FORM frm_auth_check . DATA lt_bukrs_opt TYPE RANGE OF bukrs . SELECT 'I' AS sign , 'EQ' AS option , bukrs AS low FROM t001 WHERE bukrs IN @ s_bukrs INTO TABLE @ lt_bukrs_opt . IF lt_bukrs_opt IS INITIAL . l_subrc = 1 . l_msg = | \u516c\u53f8\u4e0d\u5b58\u5728 |. ENDIF . SORT lt_bukrs_opt . DELETE ADJACENT DUPLICATES FROM lt_bukrs_opt COMPARING ALL FIELDS . LOOP AT lt_bukrs_opt INTO DATA ( ls_bukrs_opt ). AUTHORITY-CHECK OBJECT 'F_BKPF_BUK' ID 'BUKRS' FIELD ls_bukrs_opt - low ID 'ACTVT' FIELD i_actvt . IF sy - subrc <> 0 . MESSAGE | \u65e0\u516c\u53f8 { ls_bukrs_opt - low } \u6743\u9650 | TYPE 'S' DISPLAY LIKE 'E' . DELETE lt_bukrs_opt . ENDIF . ENDLOOP . s_bukrs[] = lt_bukrs_opt . IF s_bukrs[] IS INITIAL . LEAVE LIST - PROCESSING . ENDIF . SELECT bukrs FROM t001 WHERE bukrs IN @ s_bukrs INTO TABLE @ gt_bukrs . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_get_config *&---------------------------------------------------------------------* *& \u8bfb\u53d6\u5168\u90e8\u516c\u53f8\u914d\u7f6e *&---------------------------------------------------------------------* FORM frm_get_config_all TABLES et_config TYPE tt_config . DATA lt_config TYPE tt_config . LOOP AT gt_bukrs INTO DATA ( l_bukrs ). PERFORM frm_get_config TABLES lt_config USING '1' \" \u8d44\u4ea7\u8d1f\u503a\u8868 l_bukrs . INSERT LINES OF lt_config INTO TABLE et_config . ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_get_config *&---------------------------------------------------------------------* *& \u8bfb\u53d6\u5355\u4e2a\u516c\u53f8\u914d\u7f6e *&---------------------------------------------------------------------* FORM frm_get_config TABLES et_config TYPE tt_config USING i_fi_report TYPE string i_bukrs TYPE bukrs . \" \u8003\u8651\u9002\u914d\u7b26 DATA lt_bukrs_opt TYPE RANGE OF bukrs . lt_bukrs_opt = VALUE # ( sign = 'I' option = 'EQ' ( low = i_bukrs ) ( low = |{ i_bukrs ( 3 ) } * | ) ( low = |{ i_bukrs ( 2 ) } * | ) ( low = |{ i_bukrs ( 1 ) } * | ) ( low = '*' ) ( low = '' ) ). \" \u53d6\u914d\u7f6e\u6570\u636e SELECT * FROM zfit0001 WHERE zfi_report = @ i_fi_report AND bukrs IN @ lt_bukrs_opt INTO TABLE @ DATA ( lt_zfit0001 ). \" \u89e3\u6790\u914d\u7f6e\u6570\u636e LOOP AT lt_zfit0001 INTO DATA ( ls_zfit0001 ). DATA ls_config TYPE ty_config . CLEAR ls_config . ls_config - bukrs = ls_zfit0001 - bukrs . \" \u516c\u53f8 ls_config - zitem = ls_zfit0001 - zitem . \" \u9879\u76ee ls_config - zitem_sub = ls_zfit0001 - zitem_sub . \" \u5b50\u9879\u76ee CASE ls_zfit0001 - ztype . WHEN '0' . \" \u6587\u672c\u9879 ls_config - ztext = ls_zfit0001 - ztext . \" \u9879\u76ee\u540d\u79f0 WHEN '1' . \" \u7b5b\u9009\u9879 \" \u79d1\u76ee IF ls_zfit0001 - racct_to IS NOT INITIAL . INSERT VALUE # ( sign = 'I' option = 'BT' low = ls_zfit0001 - racct_from high = ls_zfit0001 - racct_to ) INTO TABLE ls_config - t_racct_opt . ELSE . INSERT VALUE # ( sign = 'I' option = 'EQ' low = ls_zfit0001 - racct_from ) INTO TABLE ls_config - t_racct_opt . ENDIF . \" \u539f\u56e0\u4ee3\u7801 INSERT VALUE # ( name = 'RSTGR' \" TY_DATEIL\u5b57\u6bb5\u540d\uff0c\u540e\u7eed\u52a8\u6001\u7b5b\u9009 t_range_opt = VALUE # ( ( sign = 'I' option = 'EQ' low = ls_zfit0001 - rstgr ) ) ) INTO TABLE ls_config - t_filter . \" \u529f\u80fd\u8303\u56f4 INSERT VALUE # ( name = 'RFAREA' \" TY_DATEIL\u5b57\u6bb5\u540d\uff0c\u540e\u7eed\u52a8\u6001\u7b5b\u9009 t_range_opt = VALUE # ( ( sign = 'I' option = 'EQ' low = ls_zfit0001 - rfarea ) ) ) INTO TABLE ls_config - t_filter . WHEN '2' . \" \u6c47\u603b\u9879 IF ls_zfit0001 - zitem_to IS INITIAL OR ls_zfit0001 - zitem_to = '' . ls_zfit0001 - zitem_to = ls_zfit0001 - zitem_from . ENDIF . WHILE ls_zfit0001 - zitem_from <= ls_zfit0001 - zitem_to . INSERT ls_zfit0001 - zitem_from INTO TABLE ls_config - t_collect . ls_zfit0001 - zitem_from = ls_zfit0001 - zitem_from + 1 . ENDWHILE . ls_config - zreverse = ls_zfit0001 - zreverse . \" \u53cd\u5411\u6807\u8bc6 WHEN OTHERS . ENDCASE . \" CASE ls_zfit0001-ztype INSERT ls_config INTO TABLE et_config . ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_gen_balance_sheet *&---------------------------------------------------------------------* *& \u751f\u6210\u8d44\u4ea7\u8d1f\u503a\u8868 *&---------------------------------------------------------------------* FORM frm_gen_balance_sheet . DATA lt_config TYPE tt_config . PERFORM frm_get_config_all TABLES lt_config . \" \u83b7\u53d6\u914d\u7f6e\u6570\u636e \" \u6839\u636e\u914d\u7f6e\u6570\u636e\u751f\u6210\u8d22\u52a1\u62a5\u8868\u6570\u636e\u9879 DATA ( lt_fi_data ) = lcl_fi_report => create ( i_year = p_gjahr i_period = p_monat it_config = lt_config ) -> execute ( ). SORT lt_fi_data BY bukrs year period zitem . \" \u627e\u5230\u8d44\u4ea7\u603b\u8ba1\u884c\uff0c\u7528\u4e8e\u5212\u5206\u4e24\u5217 DATA l_lines TYPE i . LOOP AT lt_fi_data REFERENCE INTO DATA ( lr_fi_data ). l_lines = sy - tabix . IF lr_fi_data -> ztext CS '\u8d44\u4ea7\u603b\u8ba1' . EXIT . ENDIF . ENDLOOP . DATA lt_data TYPE tt_data . DATA ls_data TYPE ty_data . LOOP AT gt_bukrs INTO DATA ( l_bukrs ). CLEAR lt_data . DO l_lines TIMES . CLEAR ls_data . ls_data - bukrs = l_bukrs . ls_data - gjahr = p_gjahr . ls_data - monat = p_monat . ls_data - field2 = sy - index . \" \u8d44\u4ea7\u5217\u884c\u6b21 READ TABLE lt_fi_data REFERENCE INTO lr_fi_data WITH KEY bukrs = l_bukrs year = p_gjahr period = p_monat zitem = ls_data - field2 BINARY SEARCH . IF sy - subrc = 0 . ls_data - field1 = lr_fi_data -> ztext . ls_data - field3 = |{ lr_fi_data -> period_total NUMBER = USER DECIMALS = 2 }|. ls_data - field4 = |{ lr_fi_data -> year_begin NUMBER = USER DECIMALS = 2 }|. ENDIF . ls_data - field6 = sy - index + l_lines . \" \u8d1f\u503a\u548c\u6240\u6709\u8005\u6743\u76ca\u5217\u884c\u6b21 READ TABLE lt_fi_data REFERENCE INTO lr_fi_data WITH KEY bukrs = l_bukrs year = p_gjahr period = p_monat zitem = ls_data - field6 BINARY SEARCH . IF sy - subrc = 0 . ls_data - field5 = lr_fi_data -> ztext . ls_data - field7 = |{ lr_fi_data -> period_total NUMBER = USER DECIMALS = 2 }|. ls_data - field8 = |{ lr_fi_data -> year_begin NUMBER = USER DECIMALS = 2 }|. ENDIF . INSERT ls_data INTO TABLE gt_data . ENDDO . ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_export *&---------------------------------------------------------------------* *& \u5bfc\u51fa\u5230\u672c\u5730 *&---------------------------------------------------------------------* FORM frm_export . TYPES : BEGIN OF ty_replace , from TYPE string , to TYPE string , END OF ty_replace . TYPES tt_replace TYPE STANDARD TABLE OF ty_replace WITH EMPTY KEY . DATA lt_replace TYPE tt_replace . DATA ls_replace TYPE ty_replace . \" \u83b7\u53d6\u4e0b\u8f7d\u76ee\u5f55 DATA l_directory TYPE string . cl_gui_frontend_services => directory_browse ( CHANGING selected_folder = l_directory EXCEPTIONS cntl_error = 1 error_no_gui = 2 not_supported_by_gui = 3 ). IF sy - subrc <> 0 . MESSAGE ID sy - msgid TYPE sy - msgty NUMBER sy - msgno WITH sy - msgv1 sy - msgv2 sy - msgv3 sy - msgv4 . ENDIF . DATA ( l_buffer ) = lcl_fi_report => get_smw0_templete ( CONV # ( sy - tcode ) ). \" \u83b7\u53d6SMW0\u6a21\u677f\u6587\u4ef6 CHECK l_buffer IS NOT INITIAL . \" \u9010\u516c\u53f8\u5904\u7406 LOOP AT gt_data INTO DATA ( ls_data ) GROUP BY ( bukrs = ls_data - bukrs gjahr = ls_data - gjahr monat = ls_data - monat ) INTO DATA ( ls_data_grp ). SELECT SINGLE butxt FROM t001 WHETE bukrs = @ ls_data_grp - bukrs INTO @ DATA ( l_butxt ). \" \u7f16\u5236\u5355\u4f4d CLEAR ls_replace . ls_replace - from = | __BUKRS__ |. ls_replace - to = l_butxt . INSERT ls_replace INTO TABLE lt_replace . \" \u6253\u5370\u65e5\u671f CLEAR ls_replace . ls_replace - from = | __ZDATE__ |. ls_replace - to = |{ sy - datum ( 4 ) } \u5e74 { sy - datum + 4 ( 2 ) } \u6708 { sy - datum + 6 ( 2 ) } \u65e5 |. INSERT ls_replace INTO TABLE lt_replace . LOOP AT GROUP ls_data_grp INTO ls_data . \" \u8d44\u4ea7-\u671f\u672b\u4f59\u989d CLEAR ls_replace . ls_replace - from = | __PEROID_END_Z { ls_data - field2 } __ |. ls_replace - to = ls_data - field3 . INSERT ls_replace INTO TABLE lt_replace . \" \u8d44\u4ea7-\u5e74\u521d\u4f59\u989d CLEAR ls_replace . ls_replace - from = | __YEAR_BEGIN_Z { ls_data - field2 } __ |. ls_replace - to = ls_data - field4 . INSERT ls_replace INTO TABLE lt_replace . \" \u635f\u76ca-\u671f\u672b\u4f59\u989d CLEAR ls_replace . ls_replace - from = | __PEROID_END_Z { ls_data - field6 } __ |. ls_replace - to = ls_data - field7 . INSERT ls_replace INTO TABLE lt_replace . \" \u635f\u76ca-\u5e74\u521d\u4f59\u989d CLEAR ls_replace . ls_replace - from = | __YEAR_BEGIN_Z { ls_data - field6 } __ |. ls_replace - to = ls_data - field8 . INSERT ls_replace INTO TABLE lt_replace . ENDLOOP . \" \u66ff\u6362\u6587\u672c\u5185\u5bb9 DATA ( l_doc ) = l_buffer . lcl_fi_report => replace_texts ( EXPORTING it_replace = lt_replace CHANGING c_doc = l_doc ). CHECK l_doc IS NOT INITIAL . \" \u4e0b\u8f7d\u5230\u672c\u5730 TRY . DATA ( l_filename ) = |{ l_directory } \\\\\u8d44\u4ea7\u8d1f\u503a\u8868_ { l_bukrs_name } _ { sy - datum } .xlsx |. cl_openxml_helper => store_local_file ( im_file_name = l_filename im_data = l_doc ). CATCH cx_openxml_not_found cx_openxml_format cx_openxml_not_allowed INTO DATA ( lx_openxml ). MESSAGE lx_openxml -> get_text ( ) TYPE 'S' DISPLAY LIKE 'E' . RETURN . ENDTRY . ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Include zfi_balance_alv *&---------------------------------------------------------------------* *&---------------------------------------------------------------------* *& Form frm_display *&---------------------------------------------------------------------* *& ALV\u5c55\u793a *&---------------------------------------------------------------------* FORM frm_display TABLES ct_data TYPE STANDARD TABLE . DATA ls_layout TYPE lvc_s_layo . DATA lt_fieldcat TYPE STANDARD TABLE OF lvc_s_fcat . PERFORM frm_set_layout CHANGING ls_layout . PERFORM frm_set_fieldcat TABLES lt_fieldcat . CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY_LVC' EXPORTING i_callback_program = sy - repid * i_callback_pf_status_set = 'FRM_PF_STATUS' * i_callback_user_command = 'FRM_USER_COMMAND' is_layout_lvc = ls_layout it_fieldcat_lvc = lt_fieldcat i_default = abap_true i_save = 'A' TABLES t_outtab = ct_data[] EXCEPTIONS program_error = 1 OTHERS = 2 . IF sy - subrc <> 0 . MESSAGE ID sy - msgid TYPE sy - msgty NUMBER sy - msgno WITH sy - msgv1 sy - msgv2 sy - msgv3 sy - msgv4 . ENDIF . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_set_layout *&---------------------------------------------------------------------* *& \u62a5\u8868\u5e03\u5c40\u8bbe\u7f6e *&---------------------------------------------------------------------* FORM frm_set_layout CHANGING cs_layout TYPE lvc_s_layo . CLEAR cs_layout . cs_layout - zebra = abap_true . \" \u6591\u9a6c\u7ebf cs_layout - cwidth_opt = abap_true . \" \u81ea\u52a8\u8c03\u6574ALVL\u5217\u5bbd cs_layout - sel_mode = 'A' . \" \u9009\u62e9\u6a21\u5f0f * cs_layout-ctab_fname = 'COLTAB'. \" \u5355\u5143\u683c\u989c\u8272\u8bbe\u7f6e ENDFORM . *&---------------------------------------------------------------------* *& Form frm_set_fieldcat *&---------------------------------------------------------------------* *& \u5b57\u6bb5\u76ee\u5f55\u8bbe\u7f6e *&---------------------------------------------------------------------* FORM frm_set_fieldcat TABLES ct_fieldcat TYPE lvc_t_fcat . DATA ls_fieldcat TYPE lvc_s_fcat . DEFINE _init_fieldcat . CLEAR ls_fieldcat . ls_fieldcat - fieldname = &1 . ls_fieldcat - tooltip = ls_fieldcat - coltext = ls_fieldcat - seltext = ls_fieldcat - scrtext_l = ls_fieldcat - scrtext_m = ls_fieldcat - scrtext_s = &2 . ls_fieldcat - ref_table = &3 . ls_fieldcat - ref_field = &4 . INSERT ls_fieldcat INTO TABLE ct_fieldcat . END-OF-DEFINITION . _init_fieldcat 'FIELD1' '\u8d44\u4ea7' '' '' . _init_fieldcat 'FIELD2' '\u884c\u6b21' '' '' . _init_fieldcat 'FIELD3' '\u671f\u672b\u4f59\u989d' '' '' . _init_fieldcat 'FIELD4' '\u5e74\u521d\u4f59\u989d' '' '' . _init_fieldcat 'FIELD5' '\u8d1f\u503a\u548c\u6240\u6709\u8005\u6743\u76ca' '' '' . _init_fieldcat 'FIELD6' '\u884c\u6b21' '' '' . _init_fieldcat 'FIELD7' '\u671f\u672b\u4f59\u989d' '' '' . _init_fieldcat 'FIELD8' '\u5e74\u521d\u4f59\u989d' '' '' . \" \u4e2a\u6027\u5316\u81ea\u5df1\u8f93\u51fa\u6570\u636e\u683c\u5f0f LOOP AT ct_fieldcat REFERENCE INTO DATA ( lr_fieldcat ). \" \u5b57\u6bb5\u663e\u793a\u5c5e\u6027\u8bbe\u7f6e CASE lr_fieldcat -> fieldname . WHEN OTHERS . ENDCASE . ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_pf_status *&---------------------------------------------------------------------* *& \u8bbe\u7f6eGUI\u72b6\u6001 *&---------------------------------------------------------------------* FORM frm_pf_status USING ct_extab TYPE slis_t_extab . SET PF-STATUS 'STATUS' . SET TITLEBAR 'TITLE' . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_user_command *&---------------------------------------------------------------------* *& \u529f\u80fd\u54cd\u5e94 *&---------------------------------------------------------------------* FORM frm_user_command USING cv_ucomm LIKE sy - ucomm cs_selfield TYPE slis_selfield . \" \u5237\u65b0\u5c4f\u5e55\u6570\u636e\u5230\u5185\u8868 DATA : lo_grid TYPE REF TO cl_gui_alv_grid . CALL FUNCTION 'GET_GLOBALS_FROM_SLVC_FULLSCR' IMPORTING e_grid = lo_grid . CALL METHOD lo_grid -> check_changed_data . \" \u6309\u94ae\u529f\u80fd\u5b9e\u73b0 CASE cv_ucomm . WHEN '&IC1' . \" \u53cc\u51fb WHEN 'ZEXPORT' . \" \u5bfc\u51fa PERFORM frm_export . WHEN OTHERS . ENDCASE . \" \u5237\u65b0ALV \u663e\u793a\u503c cs_selfield - refresh = abap_true . cs_selfield - row_stable = abap_true . cs_selfield - col_stable = abap_true . ENDFORM . *&---------------------------------------------------------------------* *& START-OF-SELECTION *&---------------------------------------------------------------------* START-OF-SELECTION . PERFORM frm_main .","title":"\u8d44\u4ea7\u8d1f\u503a\u8868"},{"location":"fico/fi_report_cf/","text":"\u73b0\u91d1\u6d41\u91cf\u8868 \u00b6 \u73b0\u91d1\u6d41\u91cf\u8868\u662f \u8d22\u52a1\u53d6\u503c\u6a21\u5757 \u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002\u4e0b\u9762\u4ee3\u7801\u4f7f\u7528\u7684\u914d\u7f6e\u8868\u53ef\u53c2\u8003 \u9875\u9762 \u3002 \u793a\u4f8b\u4ee3\u7801 REPORT zfi_balance . *&---------------------------------------------------------------------* *& Include zfi_balance_top *&---------------------------------------------------------------------* TYPES : BEGIN OF ty_data , bukrs TYPE bukrs , gjahr TYPE gjahr , monat TYPE monat , field1 TYPE string , \" \u9879\u76ee field2 TYPE string , \" \u884c\u6b21 field3 TYPE string , \" \u672c\u6708\u91d1\u989d field4 TYPE string , \" \u7d2f\u8ba1\u91d1\u989d END OF ty_data . TYPES tt_data TYPE STANDARD TABLE OF ty_data . DATA gt_data TYPE tt_data . DATA gt_bukrs TYPE STANDARD TABLE OF bukrs WITH EMPTY KEY . *&---------------------------------------------------------------------* *& Include zfi_balance_sel *&---------------------------------------------------------------------* TABLES t001 . SELECT-OPTIONS s_bukrs FOR t001 - bukrs NO-EXTENSION NO INTERVALS OBLIGATORY . PARAMETERS p_gjahr TYPE gjahr OBLIGATORY DEFAULT sy - datum ( 4 ). PARAMETERS p_monat TYPE monat OBLIGATORY DEFAULT sy - datum + 4 ( 2 ). *&---------------------------------------------------------------------* *& Include zfir001_frm *&---------------------------------------------------------------------* *&---------------------------------------------------------------------* *& Form frm_main *&---------------------------------------------------------------------* *& \u62a5\u8868\u7a0b\u5e8f\u5165\u53e3 *&---------------------------------------------------------------------* FORM frm_main . PERFORM frm_auth_check . IF gt_bukrs IS INITIAL . RETURN . ENDIF . PERFORM frm_gen_cash_flow . \" \u73b0\u91d1\u6d41\u91cf\u8868 PERFORM frm_display TABLES gt_data . \" \u5c55\u793a ENDFORM . *&---------------------------------------------------------------------* *& Form frm_auth_check *&---------------------------------------------------------------------* *& \u6743\u9650\u68c0\u67e5 *&---------------------------------------------------------------------* FORM frm_auth_check . DATA lt_bukrs_opt TYPE RANGE OF bukrs . SELECT 'I' AS sign , 'EQ' AS option , bukrs AS low FROM t001 WHERE bukrs IN @ s_bukrs INTO TABLE @ lt_bukrs_opt . IF lt_bukrs_opt IS INITIAL . l_subrc = 1 . l_msg = | \u516c\u53f8\u4e0d\u5b58\u5728 |. ENDIF . SORT lt_bukrs_opt . DELETE ADJACENT DUPLICATES FROM lt_bukrs_opt COMPARING ALL FIELDS . LOOP AT lt_bukrs_opt INTO DATA ( ls_bukrs_opt ). AUTHORITY-CHECK OBJECT 'F_BKPF_BUK' ID 'BUKRS' FIELD ls_bukrs_opt - low ID 'ACTVT' FIELD i_actvt . IF sy - subrc <> 0 . MESSAGE | \u65e0\u516c\u53f8 { ls_bukrs_opt - low } \u6743\u9650 | TYPE 'S' DISPLAY LIKE 'E' . DELETE lt_bukrs_opt . ENDIF . ENDLOOP . s_bukrs[] = lt_bukrs_opt . IF s_bukrs[] IS INITIAL . LEAVE LIST - PROCESSING . ENDIF . SELECT bukrs FROM t001 WHERE bukrs IN @ s_bukrs INTO TABLE @ gt_bukrs . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_get_config *&---------------------------------------------------------------------* *& \u8bfb\u53d6\u5168\u90e8\u516c\u53f8\u914d\u7f6e *&---------------------------------------------------------------------* FORM frm_get_config_all TABLES et_config TYPE tt_config . DATA lt_config TYPE tt_config . LOOP AT gt_bukrs INTO DATA ( l_bukrs ). PERFORM frm_get_config TABLES lt_config USING '3' \" \u73b0\u91d1\u6d41\u91cf\u8868 l_bukrs . INSERT LINES OF lt_config INTO TABLE et_config . ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_get_config *&---------------------------------------------------------------------* *& \u8bfb\u53d6\u5355\u4e2a\u516c\u53f8\u914d\u7f6e *&---------------------------------------------------------------------* FORM frm_get_config TABLES et_config TYPE tt_config USING i_fi_report TYPE string i_bukrs TYPE bukrs . \" \u8003\u8651\u9002\u914d\u7b26 DATA lt_bukrs_opt TYPE RANGE OF bukrs . lt_bukrs_opt = VALUE # ( sign = 'I' option = 'EQ' ( low = i_bukrs ) ( low = |{ i_bukrs ( 3 ) } * | ) ( low = |{ i_bukrs ( 2 ) } * | ) ( low = |{ i_bukrs ( 1 ) } * | ) ( low = '*' ) ( low = '' ) ). \" \u53d6\u914d\u7f6e\u6570\u636e SELECT * FROM zfit0001 WHERE zfi_report = @ i_fi_report AND bukrs IN @ lt_bukrs_opt INTO TABLE @ DATA ( lt_zfit0001 ). \" \u89e3\u6790\u914d\u7f6e\u6570\u636e LOOP AT lt_zfit0001 INTO DATA ( ls_zfit0001 ). DATA ls_config TYPE ty_config . CLEAR ls_config . ls_config - bukrs = ls_zfit0001 - bukrs . \" \u516c\u53f8 ls_config - zitem = ls_zfit0001 - zitem . \" \u9879\u76ee ls_config - zitem_sub = ls_zfit0001 - zitem_sub . \" \u5b50\u9879\u76ee CASE ls_zfit0001 - ztype . WHEN '0' . \" \u6587\u672c\u9879 ls_config - ztext = ls_zfit0001 - ztext . \" \u9879\u76ee\u540d\u79f0 WHEN '1' . \" \u7b5b\u9009\u9879 \" \u79d1\u76ee IF ls_zfit0001 - racct_to IS NOT INITIAL . INSERT VALUE # ( sign = 'I' option = 'BT' low = ls_zfit0001 - racct_from high = ls_zfit0001 - racct_to ) INTO TABLE ls_config - t_racct_opt . ELSE . INSERT VALUE # ( sign = 'I' option = 'EQ' low = ls_zfit0001 - racct_from ) INTO TABLE ls_config - t_racct_opt . ENDIF . \" \u539f\u56e0\u4ee3\u7801 INSERT VALUE # ( name = 'RSTGR' \" TY_DATEIL\u5b57\u6bb5\u540d\uff0c\u540e\u7eed\u52a8\u6001\u7b5b\u9009 t_range_opt = VALUE # ( ( sign = 'I' option = 'EQ' low = ls_zfit0001 - rstgr ) ) ) INTO TABLE ls_config - t_filter . \" \u529f\u80fd\u8303\u56f4 INSERT VALUE # ( name = 'RFAREA' \" TY_DATEIL\u5b57\u6bb5\u540d\uff0c\u540e\u7eed\u52a8\u6001\u7b5b\u9009 t_range_opt = VALUE # ( ( sign = 'I' option = 'EQ' low = ls_zfit0001 - rfarea ) ) ) INTO TABLE ls_config - t_filter . WHEN '2' . \" \u6c47\u603b\u9879 IF ls_zfit0001 - zitem_to IS INITIAL OR ls_zfit0001 - zitem_to = '' . ls_zfit0001 - zitem_to = ls_zfit0001 - zitem_from . ENDIF . WHILE ls_zfit0001 - zitem_from <= ls_zfit0001 - zitem_to . INSERT ls_zfit0001 - zitem_from INTO TABLE ls_config - t_collect . ls_zfit0001 - zitem_from = ls_zfit0001 - zitem_from + 1 . ENDWHILE . ls_config - zreverse = ls_zfit0001 - zreverse . \" \u53cd\u5411\u6807\u8bc6 WHEN OTHERS . ENDCASE . \" CASE ls_zfit0001-ztype INSERT ls_config INTO TABLE et_config . ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_gen_cash_flow *&---------------------------------------------------------------------* *& \u6784\u5efa\u73b0\u91d1\u6d41\u91cf\u8868 *&---------------------------------------------------------------------* FORM frm_gen_cash_flow . DATA lt_config TYPE tt_config . PERFORM frm_get_config_all TABLES lt_config . \" \u83b7\u53d6\u914d\u7f6e\u6570\u636e \" \u6839\u636e\u914d\u7f6e\u6570\u636e\u751f\u6210\u8d22\u52a1\u62a5\u8868\u6570\u636e\u9879 DATA ( lt_fi_data ) = lcl_fi_report => create ( i_year = p_gjahr i_period = p_monat it_config = lt_config ) -> execute ( ). SORT lt_fi_data BY bukrs year period zitem . DATA lt_data TYPE tt_data . DATA ls_data TYPE ty_data . LOOP AT lt_fi_data INTO DATA ( ls_fi_data ) GROUP BY ( bukrs = ls_fi_data - bukrs year = ls_fi_data - year period = ls_fi_data - period ) INTO DATA ( ls_fi_data_grp ). LOOP AT GROUP ls_fi_data_grp INTO ls_fi_data . CLEAR ls_data . ls_data - bukrs = ls_fi_data - bukrs . ls_data - gjahr = ls_fi_data - year . ls_data - monat = ls_fi_data - period . ls_data - field1 = ls_fi_data - ztext . ls_data - field2 = ls_fi_data - zitem . ls_data - field3 = |{ ls_fi_data - period_current NUMBER = USER DECIMALS = 2 }|. ls_data - field4 = |{ ls_fi_data - period_total NUMBER = USER DECIMALS = 2 }|. INSERT ls_data INTO TABLE gt_data . ENDLOOP . ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_export *&---------------------------------------------------------------------* *& \u5bfc\u51fa\u5230\u672c\u5730 *&---------------------------------------------------------------------* FORM frm_export . TYPES : BEGIN OF ty_replace , from TYPE string , to TYPE string , END OF ty_replace . TYPES tt_replace TYPE STANDARD TABLE OF ty_replace WITH EMPTY KEY . DATA lt_replace TYPE tt_replace . DATA ls_replace TYPE ty_replace . \" \u83b7\u53d6\u4e0b\u8f7d\u76ee\u5f55 DATA l_directory TYPE string . cl_gui_frontend_services => directory_browse ( CHANGING selected_folder = l_directory EXCEPTIONS cntl_error = 1 error_no_gui = 2 not_supported_by_gui = 3 ). IF sy - subrc <> 0 . MESSAGE ID sy - msgid TYPE sy - msgty NUMBER sy - msgno WITH sy - msgv1 sy - msgv2 sy - msgv3 sy - msgv4 . ENDIF . DATA ( l_buffer ) = lcl_fi_report => get_smw0_templete ( CONV # ( sy - tcode ) ). \" \u83b7\u53d6SMW0\u6a21\u677f\u6587\u4ef6 CHECK l_buffer IS NOT INITIAL . \" \u9010\u516c\u53f8\u5904\u7406 LOOP AT gt_data INTO DATA ( ls_data ) GROUP BY ( bukrs = ls_data - bukrs gjahr = ls_data - gjahr monat = ls_data - monat ) INTO DATA ( ls_data_grp ). SELECT SINGLE butxt FROM t001 WHETE bukrs = @ ls_data_grp - bukrs INTO @ DATA ( l_butxt ). \" \u7f16\u5236\u5355\u4f4d CLEAR ls_replace . ls_replace - from = | __BUKRS__ |. ls_replace - to = l_butxt . INSERT ls_replace INTO TABLE lt_replace . \" \u6253\u5370\u65e5\u671f CLEAR ls_replace . ls_replace - from = | __ZDATE__ |. ls_replace - to = |{ sy - datum ( 4 ) } \u5e74 { sy - datum + 4 ( 2 ) } \u6708 { sy - datum + 6 ( 2 ) } \u65e5 |. INSERT ls_replace INTO TABLE lt_replace . LOOP AT GROUP ls_data_grp INTO ls_data . \" \u672c\u6708\u91d1\u989d CLEAR ls_replace . ls_replace - from = | __PEROID_CURRENT_Z { ls_data - field2 } __ |. ls_replace - to = ls_data - field3 . INSERT ls_replace INTO TABLE lt_replace . \" \u7d2f\u8ba1\u91d1\u989d CLEAR ls_replace . ls_replace - from = | __PEROID_TOTAL_Z { ls_data - field2 } __ |. ls_replace - to = ls_data - field4 . INSERT ls_replace INTO TABLE lt_replace . ENDLOOP . \" \u66ff\u6362\u6587\u672c\u5185\u5bb9 DATA ( l_doc ) = l_buffer . lcl_fi_report => replace_texts ( EXPORTING it_replace = lt_replace CHANGING c_doc = l_doc ). CHECK l_doc IS NOT INITIAL . \" \u4e0b\u8f7d\u5230\u672c\u5730 TRY . DATA ( l_filename ) = |{ l_directory } \\\\\u73b0\u91d1\u6d41\u91cf\u8868_ { l_bukrs_name } _ { sy - datum } .xlsx |. cl_openxml_helper => store_local_file ( im_file_name = l_filename im_data = l_doc ). CATCH cx_openxml_not_found cx_openxml_format cx_openxml_not_allowed INTO DATA ( lx_openxml ). MESSAGE lx_openxml -> get_text ( ) TYPE 'S' DISPLAY LIKE 'E' . RETURN . ENDTRY . ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Include zfi_balance_alv *&---------------------------------------------------------------------* *&---------------------------------------------------------------------* *& Form frm_display *&---------------------------------------------------------------------* *& ALV\u5c55\u793a *&---------------------------------------------------------------------* FORM frm_display TABLES ct_data TYPE STANDARD TABLE . DATA ls_layout TYPE lvc_s_layo . DATA lt_fieldcat TYPE STANDARD TABLE OF lvc_s_fcat . PERFORM frm_set_layout CHANGING ls_layout . PERFORM frm_set_fieldcat TABLES lt_fieldcat . CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY_LVC' EXPORTING i_callback_program = sy - repid * i_callback_pf_status_set = 'FRM_PF_STATUS' * i_callback_user_command = 'FRM_USER_COMMAND' is_layout_lvc = ls_layout it_fieldcat_lvc = lt_fieldcat i_default = abap_true i_save = 'A' TABLES t_outtab = ct_data[] EXCEPTIONS program_error = 1 OTHERS = 2 . IF sy - subrc <> 0 . MESSAGE ID sy - msgid TYPE sy - msgty NUMBER sy - msgno WITH sy - msgv1 sy - msgv2 sy - msgv3 sy - msgv4 . ENDIF . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_set_layout *&---------------------------------------------------------------------* *& \u62a5\u8868\u5e03\u5c40\u8bbe\u7f6e *&---------------------------------------------------------------------* FORM frm_set_layout CHANGING cs_layout TYPE lvc_s_layo . CLEAR cs_layout . cs_layout - zebra = abap_true . \" \u6591\u9a6c\u7ebf cs_layout - cwidth_opt = abap_true . \" \u81ea\u52a8\u8c03\u6574ALVL\u5217\u5bbd cs_layout - sel_mode = 'A' . \" \u9009\u62e9\u6a21\u5f0f * cs_layout-ctab_fname = 'COLTAB'. \" \u5355\u5143\u683c\u989c\u8272\u8bbe\u7f6e ENDFORM . *&---------------------------------------------------------------------* *& Form frm_set_fieldcat *&---------------------------------------------------------------------* *& \u5b57\u6bb5\u76ee\u5f55\u8bbe\u7f6e *&---------------------------------------------------------------------* FORM frm_set_fieldcat TABLES ct_fieldcat TYPE lvc_t_fcat . DATA ls_fieldcat TYPE lvc_s_fcat . DEFINE _init_fieldcat . CLEAR ls_fieldcat . ls_fieldcat - fieldname = &1 . ls_fieldcat - tooltip = ls_fieldcat - coltext = ls_fieldcat - seltext = ls_fieldcat - scrtext_l = ls_fieldcat - scrtext_m = ls_fieldcat - scrtext_s = &2 . ls_fieldcat - ref_table = &3 . ls_fieldcat - ref_field = &4 . INSERT ls_fieldcat INTO TABLE ct_fieldcat . END-OF-DEFINITION . _init_fieldcat 'FIELD1' '\u9879\u76ee' '' '' . _init_fieldcat 'FIELD2' '\u884c\u6b21' '' '' . _init_fieldcat 'FIELD3' '\u672c\u6708\u91d1\u989d' '' '' . _init_fieldcat 'FIELD4' '\u7d2f\u8ba1\u91d1\u989d' '' '' . \" \u4e2a\u6027\u5316\u81ea\u5df1\u8f93\u51fa\u6570\u636e\u683c\u5f0f LOOP AT ct_fieldcat REFERENCE INTO DATA ( lr_fieldcat ). \" \u5b57\u6bb5\u663e\u793a\u5c5e\u6027\u8bbe\u7f6e CASE lr_fieldcat -> fieldname . WHEN OTHERS . ENDCASE . ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_pf_status *&---------------------------------------------------------------------* *& \u8bbe\u7f6eGUI\u72b6\u6001 *&---------------------------------------------------------------------* FORM frm_pf_status USING ct_extab TYPE slis_t_extab . SET PF-STATUS 'STATUS' . SET TITLEBAR 'TITLE' . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_user_command *&---------------------------------------------------------------------* *& \u529f\u80fd\u54cd\u5e94 *&---------------------------------------------------------------------* FORM frm_user_command USING cv_ucomm LIKE sy - ucomm cs_selfield TYPE slis_selfield . \" \u5237\u65b0\u5c4f\u5e55\u6570\u636e\u5230\u5185\u8868 DATA : lo_grid TYPE REF TO cl_gui_alv_grid . CALL FUNCTION 'GET_GLOBALS_FROM_SLVC_FULLSCR' IMPORTING e_grid = lo_grid . CALL METHOD lo_grid -> check_changed_data . \" \u6309\u94ae\u529f\u80fd\u5b9e\u73b0 CASE cv_ucomm . WHEN '&IC1' . \" \u53cc\u51fb WHEN 'ZEXPORT' . \" \u5bfc\u51fa PERFORM frm_export . WHEN OTHERS . ENDCASE . \" \u5237\u65b0ALV \u663e\u793a\u503c cs_selfield - refresh = abap_true . cs_selfield - row_stable = abap_true . cs_selfield - col_stable = abap_true . ENDFORM . *&---------------------------------------------------------------------* *& START-OF-SELECTION *&---------------------------------------------------------------------* START-OF-SELECTION . PERFORM frm_main .","title":"\u73b0\u91d1\u6d41\u91cf\u8868"},{"location":"fico/fi_report_cf/#_1","text":"\u73b0\u91d1\u6d41\u91cf\u8868\u662f \u8d22\u52a1\u53d6\u503c\u6a21\u5757 \u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002\u4e0b\u9762\u4ee3\u7801\u4f7f\u7528\u7684\u914d\u7f6e\u8868\u53ef\u53c2\u8003 \u9875\u9762 \u3002 \u793a\u4f8b\u4ee3\u7801 REPORT zfi_balance . *&---------------------------------------------------------------------* *& Include zfi_balance_top *&---------------------------------------------------------------------* TYPES : BEGIN OF ty_data , bukrs TYPE bukrs , gjahr TYPE gjahr , monat TYPE monat , field1 TYPE string , \" \u9879\u76ee field2 TYPE string , \" \u884c\u6b21 field3 TYPE string , \" \u672c\u6708\u91d1\u989d field4 TYPE string , \" \u7d2f\u8ba1\u91d1\u989d END OF ty_data . TYPES tt_data TYPE STANDARD TABLE OF ty_data . DATA gt_data TYPE tt_data . DATA gt_bukrs TYPE STANDARD TABLE OF bukrs WITH EMPTY KEY . *&---------------------------------------------------------------------* *& Include zfi_balance_sel *&---------------------------------------------------------------------* TABLES t001 . SELECT-OPTIONS s_bukrs FOR t001 - bukrs NO-EXTENSION NO INTERVALS OBLIGATORY . PARAMETERS p_gjahr TYPE gjahr OBLIGATORY DEFAULT sy - datum ( 4 ). PARAMETERS p_monat TYPE monat OBLIGATORY DEFAULT sy - datum + 4 ( 2 ). *&---------------------------------------------------------------------* *& Include zfir001_frm *&---------------------------------------------------------------------* *&---------------------------------------------------------------------* *& Form frm_main *&---------------------------------------------------------------------* *& \u62a5\u8868\u7a0b\u5e8f\u5165\u53e3 *&---------------------------------------------------------------------* FORM frm_main . PERFORM frm_auth_check . IF gt_bukrs IS INITIAL . RETURN . ENDIF . PERFORM frm_gen_cash_flow . \" \u73b0\u91d1\u6d41\u91cf\u8868 PERFORM frm_display TABLES gt_data . \" \u5c55\u793a ENDFORM . *&---------------------------------------------------------------------* *& Form frm_auth_check *&---------------------------------------------------------------------* *& \u6743\u9650\u68c0\u67e5 *&---------------------------------------------------------------------* FORM frm_auth_check . DATA lt_bukrs_opt TYPE RANGE OF bukrs . SELECT 'I' AS sign , 'EQ' AS option , bukrs AS low FROM t001 WHERE bukrs IN @ s_bukrs INTO TABLE @ lt_bukrs_opt . IF lt_bukrs_opt IS INITIAL . l_subrc = 1 . l_msg = | \u516c\u53f8\u4e0d\u5b58\u5728 |. ENDIF . SORT lt_bukrs_opt . DELETE ADJACENT DUPLICATES FROM lt_bukrs_opt COMPARING ALL FIELDS . LOOP AT lt_bukrs_opt INTO DATA ( ls_bukrs_opt ). AUTHORITY-CHECK OBJECT 'F_BKPF_BUK' ID 'BUKRS' FIELD ls_bukrs_opt - low ID 'ACTVT' FIELD i_actvt . IF sy - subrc <> 0 . MESSAGE | \u65e0\u516c\u53f8 { ls_bukrs_opt - low } \u6743\u9650 | TYPE 'S' DISPLAY LIKE 'E' . DELETE lt_bukrs_opt . ENDIF . ENDLOOP . s_bukrs[] = lt_bukrs_opt . IF s_bukrs[] IS INITIAL . LEAVE LIST - PROCESSING . ENDIF . SELECT bukrs FROM t001 WHERE bukrs IN @ s_bukrs INTO TABLE @ gt_bukrs . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_get_config *&---------------------------------------------------------------------* *& \u8bfb\u53d6\u5168\u90e8\u516c\u53f8\u914d\u7f6e *&---------------------------------------------------------------------* FORM frm_get_config_all TABLES et_config TYPE tt_config . DATA lt_config TYPE tt_config . LOOP AT gt_bukrs INTO DATA ( l_bukrs ). PERFORM frm_get_config TABLES lt_config USING '3' \" \u73b0\u91d1\u6d41\u91cf\u8868 l_bukrs . INSERT LINES OF lt_config INTO TABLE et_config . ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_get_config *&---------------------------------------------------------------------* *& \u8bfb\u53d6\u5355\u4e2a\u516c\u53f8\u914d\u7f6e *&---------------------------------------------------------------------* FORM frm_get_config TABLES et_config TYPE tt_config USING i_fi_report TYPE string i_bukrs TYPE bukrs . \" \u8003\u8651\u9002\u914d\u7b26 DATA lt_bukrs_opt TYPE RANGE OF bukrs . lt_bukrs_opt = VALUE # ( sign = 'I' option = 'EQ' ( low = i_bukrs ) ( low = |{ i_bukrs ( 3 ) } * | ) ( low = |{ i_bukrs ( 2 ) } * | ) ( low = |{ i_bukrs ( 1 ) } * | ) ( low = '*' ) ( low = '' ) ). \" \u53d6\u914d\u7f6e\u6570\u636e SELECT * FROM zfit0001 WHERE zfi_report = @ i_fi_report AND bukrs IN @ lt_bukrs_opt INTO TABLE @ DATA ( lt_zfit0001 ). \" \u89e3\u6790\u914d\u7f6e\u6570\u636e LOOP AT lt_zfit0001 INTO DATA ( ls_zfit0001 ). DATA ls_config TYPE ty_config . CLEAR ls_config . ls_config - bukrs = ls_zfit0001 - bukrs . \" \u516c\u53f8 ls_config - zitem = ls_zfit0001 - zitem . \" \u9879\u76ee ls_config - zitem_sub = ls_zfit0001 - zitem_sub . \" \u5b50\u9879\u76ee CASE ls_zfit0001 - ztype . WHEN '0' . \" \u6587\u672c\u9879 ls_config - ztext = ls_zfit0001 - ztext . \" \u9879\u76ee\u540d\u79f0 WHEN '1' . \" \u7b5b\u9009\u9879 \" \u79d1\u76ee IF ls_zfit0001 - racct_to IS NOT INITIAL . INSERT VALUE # ( sign = 'I' option = 'BT' low = ls_zfit0001 - racct_from high = ls_zfit0001 - racct_to ) INTO TABLE ls_config - t_racct_opt . ELSE . INSERT VALUE # ( sign = 'I' option = 'EQ' low = ls_zfit0001 - racct_from ) INTO TABLE ls_config - t_racct_opt . ENDIF . \" \u539f\u56e0\u4ee3\u7801 INSERT VALUE # ( name = 'RSTGR' \" TY_DATEIL\u5b57\u6bb5\u540d\uff0c\u540e\u7eed\u52a8\u6001\u7b5b\u9009 t_range_opt = VALUE # ( ( sign = 'I' option = 'EQ' low = ls_zfit0001 - rstgr ) ) ) INTO TABLE ls_config - t_filter . \" \u529f\u80fd\u8303\u56f4 INSERT VALUE # ( name = 'RFAREA' \" TY_DATEIL\u5b57\u6bb5\u540d\uff0c\u540e\u7eed\u52a8\u6001\u7b5b\u9009 t_range_opt = VALUE # ( ( sign = 'I' option = 'EQ' low = ls_zfit0001 - rfarea ) ) ) INTO TABLE ls_config - t_filter . WHEN '2' . \" \u6c47\u603b\u9879 IF ls_zfit0001 - zitem_to IS INITIAL OR ls_zfit0001 - zitem_to = '' . ls_zfit0001 - zitem_to = ls_zfit0001 - zitem_from . ENDIF . WHILE ls_zfit0001 - zitem_from <= ls_zfit0001 - zitem_to . INSERT ls_zfit0001 - zitem_from INTO TABLE ls_config - t_collect . ls_zfit0001 - zitem_from = ls_zfit0001 - zitem_from + 1 . ENDWHILE . ls_config - zreverse = ls_zfit0001 - zreverse . \" \u53cd\u5411\u6807\u8bc6 WHEN OTHERS . ENDCASE . \" CASE ls_zfit0001-ztype INSERT ls_config INTO TABLE et_config . ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_gen_cash_flow *&---------------------------------------------------------------------* *& \u6784\u5efa\u73b0\u91d1\u6d41\u91cf\u8868 *&---------------------------------------------------------------------* FORM frm_gen_cash_flow . DATA lt_config TYPE tt_config . PERFORM frm_get_config_all TABLES lt_config . \" \u83b7\u53d6\u914d\u7f6e\u6570\u636e \" \u6839\u636e\u914d\u7f6e\u6570\u636e\u751f\u6210\u8d22\u52a1\u62a5\u8868\u6570\u636e\u9879 DATA ( lt_fi_data ) = lcl_fi_report => create ( i_year = p_gjahr i_period = p_monat it_config = lt_config ) -> execute ( ). SORT lt_fi_data BY bukrs year period zitem . DATA lt_data TYPE tt_data . DATA ls_data TYPE ty_data . LOOP AT lt_fi_data INTO DATA ( ls_fi_data ) GROUP BY ( bukrs = ls_fi_data - bukrs year = ls_fi_data - year period = ls_fi_data - period ) INTO DATA ( ls_fi_data_grp ). LOOP AT GROUP ls_fi_data_grp INTO ls_fi_data . CLEAR ls_data . ls_data - bukrs = ls_fi_data - bukrs . ls_data - gjahr = ls_fi_data - year . ls_data - monat = ls_fi_data - period . ls_data - field1 = ls_fi_data - ztext . ls_data - field2 = ls_fi_data - zitem . ls_data - field3 = |{ ls_fi_data - period_current NUMBER = USER DECIMALS = 2 }|. ls_data - field4 = |{ ls_fi_data - period_total NUMBER = USER DECIMALS = 2 }|. INSERT ls_data INTO TABLE gt_data . ENDLOOP . ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_export *&---------------------------------------------------------------------* *& \u5bfc\u51fa\u5230\u672c\u5730 *&---------------------------------------------------------------------* FORM frm_export . TYPES : BEGIN OF ty_replace , from TYPE string , to TYPE string , END OF ty_replace . TYPES tt_replace TYPE STANDARD TABLE OF ty_replace WITH EMPTY KEY . DATA lt_replace TYPE tt_replace . DATA ls_replace TYPE ty_replace . \" \u83b7\u53d6\u4e0b\u8f7d\u76ee\u5f55 DATA l_directory TYPE string . cl_gui_frontend_services => directory_browse ( CHANGING selected_folder = l_directory EXCEPTIONS cntl_error = 1 error_no_gui = 2 not_supported_by_gui = 3 ). IF sy - subrc <> 0 . MESSAGE ID sy - msgid TYPE sy - msgty NUMBER sy - msgno WITH sy - msgv1 sy - msgv2 sy - msgv3 sy - msgv4 . ENDIF . DATA ( l_buffer ) = lcl_fi_report => get_smw0_templete ( CONV # ( sy - tcode ) ). \" \u83b7\u53d6SMW0\u6a21\u677f\u6587\u4ef6 CHECK l_buffer IS NOT INITIAL . \" \u9010\u516c\u53f8\u5904\u7406 LOOP AT gt_data INTO DATA ( ls_data ) GROUP BY ( bukrs = ls_data - bukrs gjahr = ls_data - gjahr monat = ls_data - monat ) INTO DATA ( ls_data_grp ). SELECT SINGLE butxt FROM t001 WHETE bukrs = @ ls_data_grp - bukrs INTO @ DATA ( l_butxt ). \" \u7f16\u5236\u5355\u4f4d CLEAR ls_replace . ls_replace - from = | __BUKRS__ |. ls_replace - to = l_butxt . INSERT ls_replace INTO TABLE lt_replace . \" \u6253\u5370\u65e5\u671f CLEAR ls_replace . ls_replace - from = | __ZDATE__ |. ls_replace - to = |{ sy - datum ( 4 ) } \u5e74 { sy - datum + 4 ( 2 ) } \u6708 { sy - datum + 6 ( 2 ) } \u65e5 |. INSERT ls_replace INTO TABLE lt_replace . LOOP AT GROUP ls_data_grp INTO ls_data . \" \u672c\u6708\u91d1\u989d CLEAR ls_replace . ls_replace - from = | __PEROID_CURRENT_Z { ls_data - field2 } __ |. ls_replace - to = ls_data - field3 . INSERT ls_replace INTO TABLE lt_replace . \" \u7d2f\u8ba1\u91d1\u989d CLEAR ls_replace . ls_replace - from = | __PEROID_TOTAL_Z { ls_data - field2 } __ |. ls_replace - to = ls_data - field4 . INSERT ls_replace INTO TABLE lt_replace . ENDLOOP . \" \u66ff\u6362\u6587\u672c\u5185\u5bb9 DATA ( l_doc ) = l_buffer . lcl_fi_report => replace_texts ( EXPORTING it_replace = lt_replace CHANGING c_doc = l_doc ). CHECK l_doc IS NOT INITIAL . \" \u4e0b\u8f7d\u5230\u672c\u5730 TRY . DATA ( l_filename ) = |{ l_directory } \\\\\u73b0\u91d1\u6d41\u91cf\u8868_ { l_bukrs_name } _ { sy - datum } .xlsx |. cl_openxml_helper => store_local_file ( im_file_name = l_filename im_data = l_doc ). CATCH cx_openxml_not_found cx_openxml_format cx_openxml_not_allowed INTO DATA ( lx_openxml ). MESSAGE lx_openxml -> get_text ( ) TYPE 'S' DISPLAY LIKE 'E' . RETURN . ENDTRY . ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Include zfi_balance_alv *&---------------------------------------------------------------------* *&---------------------------------------------------------------------* *& Form frm_display *&---------------------------------------------------------------------* *& ALV\u5c55\u793a *&---------------------------------------------------------------------* FORM frm_display TABLES ct_data TYPE STANDARD TABLE . DATA ls_layout TYPE lvc_s_layo . DATA lt_fieldcat TYPE STANDARD TABLE OF lvc_s_fcat . PERFORM frm_set_layout CHANGING ls_layout . PERFORM frm_set_fieldcat TABLES lt_fieldcat . CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY_LVC' EXPORTING i_callback_program = sy - repid * i_callback_pf_status_set = 'FRM_PF_STATUS' * i_callback_user_command = 'FRM_USER_COMMAND' is_layout_lvc = ls_layout it_fieldcat_lvc = lt_fieldcat i_default = abap_true i_save = 'A' TABLES t_outtab = ct_data[] EXCEPTIONS program_error = 1 OTHERS = 2 . IF sy - subrc <> 0 . MESSAGE ID sy - msgid TYPE sy - msgty NUMBER sy - msgno WITH sy - msgv1 sy - msgv2 sy - msgv3 sy - msgv4 . ENDIF . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_set_layout *&---------------------------------------------------------------------* *& \u62a5\u8868\u5e03\u5c40\u8bbe\u7f6e *&---------------------------------------------------------------------* FORM frm_set_layout CHANGING cs_layout TYPE lvc_s_layo . CLEAR cs_layout . cs_layout - zebra = abap_true . \" \u6591\u9a6c\u7ebf cs_layout - cwidth_opt = abap_true . \" \u81ea\u52a8\u8c03\u6574ALVL\u5217\u5bbd cs_layout - sel_mode = 'A' . \" \u9009\u62e9\u6a21\u5f0f * cs_layout-ctab_fname = 'COLTAB'. \" \u5355\u5143\u683c\u989c\u8272\u8bbe\u7f6e ENDFORM . *&---------------------------------------------------------------------* *& Form frm_set_fieldcat *&---------------------------------------------------------------------* *& \u5b57\u6bb5\u76ee\u5f55\u8bbe\u7f6e *&---------------------------------------------------------------------* FORM frm_set_fieldcat TABLES ct_fieldcat TYPE lvc_t_fcat . DATA ls_fieldcat TYPE lvc_s_fcat . DEFINE _init_fieldcat . CLEAR ls_fieldcat . ls_fieldcat - fieldname = &1 . ls_fieldcat - tooltip = ls_fieldcat - coltext = ls_fieldcat - seltext = ls_fieldcat - scrtext_l = ls_fieldcat - scrtext_m = ls_fieldcat - scrtext_s = &2 . ls_fieldcat - ref_table = &3 . ls_fieldcat - ref_field = &4 . INSERT ls_fieldcat INTO TABLE ct_fieldcat . END-OF-DEFINITION . _init_fieldcat 'FIELD1' '\u9879\u76ee' '' '' . _init_fieldcat 'FIELD2' '\u884c\u6b21' '' '' . _init_fieldcat 'FIELD3' '\u672c\u6708\u91d1\u989d' '' '' . _init_fieldcat 'FIELD4' '\u7d2f\u8ba1\u91d1\u989d' '' '' . \" \u4e2a\u6027\u5316\u81ea\u5df1\u8f93\u51fa\u6570\u636e\u683c\u5f0f LOOP AT ct_fieldcat REFERENCE INTO DATA ( lr_fieldcat ). \" \u5b57\u6bb5\u663e\u793a\u5c5e\u6027\u8bbe\u7f6e CASE lr_fieldcat -> fieldname . WHEN OTHERS . ENDCASE . ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_pf_status *&---------------------------------------------------------------------* *& \u8bbe\u7f6eGUI\u72b6\u6001 *&---------------------------------------------------------------------* FORM frm_pf_status USING ct_extab TYPE slis_t_extab . SET PF-STATUS 'STATUS' . SET TITLEBAR 'TITLE' . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_user_command *&---------------------------------------------------------------------* *& \u529f\u80fd\u54cd\u5e94 *&---------------------------------------------------------------------* FORM frm_user_command USING cv_ucomm LIKE sy - ucomm cs_selfield TYPE slis_selfield . \" \u5237\u65b0\u5c4f\u5e55\u6570\u636e\u5230\u5185\u8868 DATA : lo_grid TYPE REF TO cl_gui_alv_grid . CALL FUNCTION 'GET_GLOBALS_FROM_SLVC_FULLSCR' IMPORTING e_grid = lo_grid . CALL METHOD lo_grid -> check_changed_data . \" \u6309\u94ae\u529f\u80fd\u5b9e\u73b0 CASE cv_ucomm . WHEN '&IC1' . \" \u53cc\u51fb WHEN 'ZEXPORT' . \" \u5bfc\u51fa PERFORM frm_export . WHEN OTHERS . ENDCASE . \" \u5237\u65b0ALV \u663e\u793a\u503c cs_selfield - refresh = abap_true . cs_selfield - row_stable = abap_true . cs_selfield - col_stable = abap_true . ENDFORM . *&---------------------------------------------------------------------* *& START-OF-SELECTION *&---------------------------------------------------------------------* START-OF-SELECTION . PERFORM frm_main .","title":"\u73b0\u91d1\u6d41\u91cf\u8868"},{"location":"fico/fi_report_config/","text":"\u4e09\u5927\u62a5\u8868\u914d\u7f6e\u8868\u53c2\u8003 \u00b6 \u5177\u4f53\u914d\u7f6e\u8868\u770b\u81ea\u5df1\u9879\u76ee\u8981\u6c42\uff0c\u53ef\u4ee5\u53c2\u8003\u4e0b\u9762\u914d\u7f6e\u8868\uff08\u65e0\u516c\u5f0f\u914d\u7f6e\uff09\uff1a @ EndUserText . label : '\u4e09\u5927\u62a5\u8868\u914d\u7f6e\u8868' @ AbapCatalog . enhancementCategory : # NOT_CLASSIFIED @ AbapCatalog . tableCategory : # TRANSPARENT @ AbapCatalog . deliveryClass : # A @ AbapCatalog . dataMaintenance : # ALLOWED define table zfit0001 { key mandt : mandt not null ; @ EndUserText . label : '1[\u8d44\u4ea7\u8d1f\u503a\u8868]\uff1b2[\u5229\u6da6\u8868]\uff1b3[\u73b0\u91d1\u6d41\u91cf\u8868]' key zfi_report : abap . char ( 1 ) not null ; @ EndUserText . label : '\u516c\u53f8' key bukrs : bukrs not null ; @ EndUserText . label : '\u9879\u76ee' key zitem : abap . numc ( 3 ) not null ; @ EndUserText . label : '\u5b50\u9879\u76ee' key zitem_sub : abap . numc ( 3 ) not null ; @ EndUserText . label : '\u5b50\u9879\u76ee' ztext : abap . char ( 30 ); @ EndUserText . label : '\u8ba1\u7b97\u7c7b\u578b\uff1b1[\u6587\u672c]\uff0c2[\u79d1\u76ee]\uff0c3[\u4e0b\u7ea7\u6c47\u603b]' ztype : abap . char ( 1 ); @ EndUserText . label : '\u79d1\u76ee\u4ece' racct_from : racct ; @ EndUserText . label : '\u79d1\u76ee\u5230' racct_to : racct ; @ EndUserText . label : '\u9879\u76ee\u4ece' zitem_from : abap . numc ( 3 ); @ EndUserText . label : '\u9879\u76ee\u5230' zitem_to : abap . numc ( 3 ); @ EndUserText . label : '\u53cd\u5411\u6807\u8bc6' zreverse : xfeld ; @ EndUserText . label : '\u539f\u56e0\u4ee3\u7801' rstgr : rstgr ; @ EndUserText . label : '\u529f\u80fd\u8303\u56f4' rfarea : fkber ; upnam : uname ; updat : datum ; uptim : uzeit ; } \u6839\u636ezitem_from\uff0czitem_to\uff0czreverse\u4e09\u4e2a\u5b57\u6bb5\uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u4e0d\u540c\u9879\u76ee\u7684\u52a0\u51cf\u8ba1\u7b97\uff0c\u6bd4\u5982\u9879\u76ee1 = \u9879\u76ee2 - \u9879\u76ee3 + \u9879\u76ee4 - \u9879\u76ee5\uff0c\u6309\u4e0b\u9762\u914d\u7f6e: \u9879\u76ee \u5b50\u9879\u76ee \u9879\u76ee\u6587\u672c \u9879\u76ee\u4ece \u53cd\u5411\u6807\u8bc6 1 1 \u9879\u76ee1 = 1 2 + \u9879\u76ee2 2 1 3 - \u9879\u76ee3 3 X 1 4 + \u9879\u76ee4 4 1 5 - \u9879\u76ee5 4 X","title":"\u914d\u7f6e\u8868\u53c2\u8003"},{"location":"fico/fi_report_config/#_1","text":"\u5177\u4f53\u914d\u7f6e\u8868\u770b\u81ea\u5df1\u9879\u76ee\u8981\u6c42\uff0c\u53ef\u4ee5\u53c2\u8003\u4e0b\u9762\u914d\u7f6e\u8868\uff08\u65e0\u516c\u5f0f\u914d\u7f6e\uff09\uff1a @ EndUserText . label : '\u4e09\u5927\u62a5\u8868\u914d\u7f6e\u8868' @ AbapCatalog . enhancementCategory : # NOT_CLASSIFIED @ AbapCatalog . tableCategory : # TRANSPARENT @ AbapCatalog . deliveryClass : # A @ AbapCatalog . dataMaintenance : # ALLOWED define table zfit0001 { key mandt : mandt not null ; @ EndUserText . label : '1[\u8d44\u4ea7\u8d1f\u503a\u8868]\uff1b2[\u5229\u6da6\u8868]\uff1b3[\u73b0\u91d1\u6d41\u91cf\u8868]' key zfi_report : abap . char ( 1 ) not null ; @ EndUserText . label : '\u516c\u53f8' key bukrs : bukrs not null ; @ EndUserText . label : '\u9879\u76ee' key zitem : abap . numc ( 3 ) not null ; @ EndUserText . label : '\u5b50\u9879\u76ee' key zitem_sub : abap . numc ( 3 ) not null ; @ EndUserText . label : '\u5b50\u9879\u76ee' ztext : abap . char ( 30 ); @ EndUserText . label : '\u8ba1\u7b97\u7c7b\u578b\uff1b1[\u6587\u672c]\uff0c2[\u79d1\u76ee]\uff0c3[\u4e0b\u7ea7\u6c47\u603b]' ztype : abap . char ( 1 ); @ EndUserText . label : '\u79d1\u76ee\u4ece' racct_from : racct ; @ EndUserText . label : '\u79d1\u76ee\u5230' racct_to : racct ; @ EndUserText . label : '\u9879\u76ee\u4ece' zitem_from : abap . numc ( 3 ); @ EndUserText . label : '\u9879\u76ee\u5230' zitem_to : abap . numc ( 3 ); @ EndUserText . label : '\u53cd\u5411\u6807\u8bc6' zreverse : xfeld ; @ EndUserText . label : '\u539f\u56e0\u4ee3\u7801' rstgr : rstgr ; @ EndUserText . label : '\u529f\u80fd\u8303\u56f4' rfarea : fkber ; upnam : uname ; updat : datum ; uptim : uzeit ; } \u6839\u636ezitem_from\uff0czitem_to\uff0czreverse\u4e09\u4e2a\u5b57\u6bb5\uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u4e0d\u540c\u9879\u76ee\u7684\u52a0\u51cf\u8ba1\u7b97\uff0c\u6bd4\u5982\u9879\u76ee1 = \u9879\u76ee2 - \u9879\u76ee3 + \u9879\u76ee4 - \u9879\u76ee5\uff0c\u6309\u4e0b\u9762\u914d\u7f6e: \u9879\u76ee \u5b50\u9879\u76ee \u9879\u76ee\u6587\u672c \u9879\u76ee\u4ece \u53cd\u5411\u6807\u8bc6 1 1 \u9879\u76ee1 = 1 2 + \u9879\u76ee2 2 1 3 - \u9879\u76ee3 3 X 1 4 + \u9879\u76ee4 4 1 5 - \u9879\u76ee5 4 X","title":"\u4e09\u5927\u62a5\u8868\u914d\u7f6e\u8868\u53c2\u8003"},{"location":"fico/fi_report_pl/","text":"\u5229\u6da6\u8868 \u00b6 \u5229\u6da6\u8868\u662f \u8d22\u52a1\u53d6\u503c\u6a21\u5757 \u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002\u4e0b\u9762\u4ee3\u7801\u4f7f\u7528\u7684\u914d\u7f6e\u8868\u53ef\u53c2\u8003 \u9875\u9762 \u3002 \u793a\u4f8b\u4ee3\u7801 REPORT zfi_balance . *&---------------------------------------------------------------------* *& Include zfi_balance_top *&---------------------------------------------------------------------* TYPES : BEGIN OF ty_data , bukrs TYPE bukrs , gjahr TYPE gjahr , monat TYPE monat , field1 TYPE string , \" \u9879\u76ee field2 TYPE string , \" \u884c\u6b21 field3 TYPE string , \" \u672c\u6708\u91d1\u989d field4 TYPE string , \" \u7d2f\u8ba1\u91d1\u989d END OF ty_data . TYPES tt_data TYPE STANDARD TABLE OF ty_data . DATA gt_data TYPE tt_data . DATA gt_bukrs TYPE STANDARD TABLE OF bukrs WITH EMPTY KEY . *&---------------------------------------------------------------------* *& Include zfi_balance_sel *&---------------------------------------------------------------------* TABLES t001 . SELECT-OPTIONS s_bukrs FOR t001 - bukrs NO-EXTENSION NO INTERVALS OBLIGATORY . PARAMETERS p_gjahr TYPE gjahr OBLIGATORY DEFAULT sy - datum ( 4 ). PARAMETERS p_monat TYPE monat OBLIGATORY DEFAULT sy - datum + 4 ( 2 ). *&---------------------------------------------------------------------* *& Include zfir001_frm *&---------------------------------------------------------------------* *&---------------------------------------------------------------------* *& Form frm_main *&---------------------------------------------------------------------* *& \u62a5\u8868\u7a0b\u5e8f\u5165\u53e3 *&---------------------------------------------------------------------* FORM frm_main . PERFORM frm_auth_check . IF gt_bukrs IS INITIAL . RETURN . ENDIF . PERFORM frm_gen_profit_loss . \" \u73b0\u91d1\u6d41\u91cf\u8868 PERFORM frm_display TABLES gt_data . \" \u5c55\u793a ENDFORM . *&---------------------------------------------------------------------* *& Form frm_auth_check *&---------------------------------------------------------------------* *& \u6743\u9650\u68c0\u67e5 *&---------------------------------------------------------------------* FORM frm_auth_check . DATA lt_bukrs_opt TYPE RANGE OF bukrs . SELECT 'I' AS sign , 'EQ' AS option , bukrs AS low FROM t001 WHERE bukrs IN @ s_bukrs INTO TABLE @ lt_bukrs_opt . IF lt_bukrs_opt IS INITIAL . l_subrc = 1 . l_msg = | \u516c\u53f8\u4e0d\u5b58\u5728 |. ENDIF . SORT lt_bukrs_opt . DELETE ADJACENT DUPLICATES FROM lt_bukrs_opt COMPARING ALL FIELDS . LOOP AT lt_bukrs_opt INTO DATA ( ls_bukrs_opt ). AUTHORITY-CHECK OBJECT 'F_BKPF_BUK' ID 'BUKRS' FIELD ls_bukrs_opt - low ID 'ACTVT' FIELD i_actvt . IF sy - subrc <> 0 . MESSAGE | \u65e0\u516c\u53f8 { ls_bukrs_opt - low } \u6743\u9650 | TYPE 'S' DISPLAY LIKE 'E' . DELETE lt_bukrs_opt . ENDIF . ENDLOOP . s_bukrs[] = lt_bukrs_opt . IF s_bukrs[] IS INITIAL . LEAVE LIST - PROCESSING . ENDIF . SELECT bukrs FROM t001 WHERE bukrs IN @ s_bukrs INTO TABLE @ gt_bukrs . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_get_config *&---------------------------------------------------------------------* *& \u8bfb\u53d6\u5168\u90e8\u516c\u53f8\u914d\u7f6e *&---------------------------------------------------------------------* FORM frm_get_config_all TABLES et_config TYPE tt_config . DATA lt_config TYPE tt_config . LOOP AT gt_bukrs INTO DATA ( l_bukrs ). PERFORM frm_get_config TABLES lt_config USING '2' \" \u5229\u6da6\u8868 l_bukrs . INSERT LINES OF lt_config INTO TABLE et_config . ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_get_config *&---------------------------------------------------------------------* *& \u8bfb\u53d6\u5355\u4e2a\u516c\u53f8\u914d\u7f6e *&---------------------------------------------------------------------* FORM frm_get_config TABLES et_config TYPE tt_config USING i_fi_report TYPE string i_bukrs TYPE bukrs . \" \u8003\u8651\u9002\u914d\u7b26 DATA lt_bukrs_opt TYPE RANGE OF bukrs . lt_bukrs_opt = VALUE # ( sign = 'I' option = 'EQ' ( low = i_bukrs ) ( low = |{ i_bukrs ( 3 ) } * | ) ( low = |{ i_bukrs ( 2 ) } * | ) ( low = |{ i_bukrs ( 1 ) } * | ) ( low = '*' ) ( low = '' ) ). \" \u53d6\u914d\u7f6e\u6570\u636e SELECT * FROM zfit0001 WHERE zfi_report = @ i_fi_report AND bukrs IN @ lt_bukrs_opt INTO TABLE @ DATA ( lt_zfit0001 ). \" \u89e3\u6790\u914d\u7f6e\u6570\u636e LOOP AT lt_zfit0001 INTO DATA ( ls_zfit0001 ). DATA ls_config TYPE ty_config . CLEAR ls_config . ls_config - bukrs = ls_zfit0001 - bukrs . \" \u516c\u53f8 ls_config - zitem = ls_zfit0001 - zitem . \" \u9879\u76ee ls_config - zitem_sub = ls_zfit0001 - zitem_sub . \" \u5b50\u9879\u76ee CASE ls_zfit0001 - ztype . WHEN '0' . \" \u6587\u672c\u9879 ls_config - ztext = ls_zfit0001 - ztext . \" \u9879\u76ee\u540d\u79f0 WHEN '1' . \" \u7b5b\u9009\u9879 \" \u79d1\u76ee IF ls_zfit0001 - racct_to IS NOT INITIAL . INSERT VALUE # ( sign = 'I' option = 'BT' low = ls_zfit0001 - racct_from high = ls_zfit0001 - racct_to ) INTO TABLE ls_config - t_racct_opt . ELSE . INSERT VALUE # ( sign = 'I' option = 'EQ' low = ls_zfit0001 - racct_from ) INTO TABLE ls_config - t_racct_opt . ENDIF . \" \u539f\u56e0\u4ee3\u7801 INSERT VALUE # ( name = 'RSTGR' \" TY_DATEIL\u5b57\u6bb5\u540d\uff0c\u540e\u7eed\u52a8\u6001\u7b5b\u9009 t_range_opt = VALUE # ( ( sign = 'I' option = 'EQ' low = ls_zfit0001 - rstgr ) ) ) INTO TABLE ls_config - t_filter . \" \u529f\u80fd\u8303\u56f4 INSERT VALUE # ( name = 'RFAREA' \" TY_DATEIL\u5b57\u6bb5\u540d\uff0c\u540e\u7eed\u52a8\u6001\u7b5b\u9009 t_range_opt = VALUE # ( ( sign = 'I' option = 'EQ' low = ls_zfit0001 - rfarea ) ) ) INTO TABLE ls_config - t_filter . WHEN '2' . \" \u6c47\u603b\u9879 IF ls_zfit0001 - zitem_to IS INITIAL OR ls_zfit0001 - zitem_to = '' . ls_zfit0001 - zitem_to = ls_zfit0001 - zitem_from . ENDIF . WHILE ls_zfit0001 - zitem_from <= ls_zfit0001 - zitem_to . INSERT ls_zfit0001 - zitem_from INTO TABLE ls_config - t_collect . ls_zfit0001 - zitem_from = ls_zfit0001 - zitem_from + 1 . ENDWHILE . ls_config - zreverse = ls_zfit0001 - zreverse . \" \u53cd\u5411\u6807\u8bc6 WHEN OTHERS . ENDCASE . \" CASE ls_zfit0001-ztype INSERT ls_config INTO TABLE et_config . ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_gen_profit_loss *&---------------------------------------------------------------------* *& \u6784\u5efa\u5229\u6da6\u8868 *&---------------------------------------------------------------------* FORM frm_gen_profit_loss . DATA lt_config TYPE tt_config . PERFORM frm_get_config_all TABLES lt_config . \" \u83b7\u53d6\u914d\u7f6e\u6570\u636e \" \u6839\u636e\u914d\u7f6e\u6570\u636e\u751f\u6210\u8d22\u52a1\u62a5\u8868\u6570\u636e\u9879 DATA ( lt_fi_data ) = lcl_fi_report => create ( i_year = p_gjahr i_period = p_monat it_config = lt_config ) -> execute ( ). SORT lt_fi_data BY bukrs year period zitem . DATA lt_data TYPE tt_data . DATA ls_data TYPE ty_data . LOOP AT lt_fi_data INTO DATA ( ls_fi_data ) GROUP BY ( bukrs = ls_fi_data - bukrs year = ls_fi_data - year period = ls_fi_data - period ) INTO DATA ( ls_fi_data_grp ). LOOP AT GROUP ls_fi_data_grp INTO ls_fi_data . CLEAR ls_data . ls_data - bukrs = ls_fi_data - bukrs . ls_data - gjahr = ls_fi_data - year . ls_data - monat = ls_fi_data - period . ls_data - field1 = ls_fi_data - ztext . ls_data - field2 = ls_fi_data - zitem . ls_data - field3 = |{ ls_fi_data - period_current NUMBER = USER DECIMALS = 2 }|. ls_data - field4 = |{ ls_fi_data - period_total NUMBER = USER DECIMALS = 2 }|. INSERT ls_data INTO TABLE gt_data . ENDLOOP . ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_export *&---------------------------------------------------------------------* *& \u5bfc\u51fa\u5230\u672c\u5730 *&---------------------------------------------------------------------* FORM frm_export . TYPES : BEGIN OF ty_replace , from TYPE string , to TYPE string , END OF ty_replace . TYPES tt_replace TYPE STANDARD TABLE OF ty_replace WITH EMPTY KEY . DATA lt_replace TYPE tt_replace . DATA ls_replace TYPE ty_replace . \" \u83b7\u53d6\u4e0b\u8f7d\u76ee\u5f55 DATA l_directory TYPE string . cl_gui_frontend_services => directory_browse ( CHANGING selected_folder = l_directory EXCEPTIONS cntl_error = 1 error_no_gui = 2 not_supported_by_gui = 3 ). IF sy - subrc <> 0 . MESSAGE ID sy - msgid TYPE sy - msgty NUMBER sy - msgno WITH sy - msgv1 sy - msgv2 sy - msgv3 sy - msgv4 . ENDIF . DATA ( l_buffer ) = lcl_fi_report => get_smw0_templete ( CONV # ( sy - tcode ) ). \" \u83b7\u53d6SMW0\u6a21\u677f\u6587\u4ef6 CHECK l_buffer IS NOT INITIAL . \" \u9010\u516c\u53f8\u5904\u7406 LOOP AT gt_data INTO DATA ( ls_data ) GROUP BY ( bukrs = ls_data - bukrs gjahr = ls_data - gjahr monat = ls_data - monat ) INTO DATA ( ls_data_grp ). SELECT SINGLE butxt FROM t001 WHETE bukrs = @ ls_data_grp - bukrs INTO @ DATA ( l_butxt ). \" \u7f16\u5236\u5355\u4f4d CLEAR ls_replace . ls_replace - from = | __BUKRS__ |. ls_replace - to = l_butxt . INSERT ls_replace INTO TABLE lt_replace . \" \u6253\u5370\u65e5\u671f CLEAR ls_replace . ls_replace - from = | __ZDATE__ |. ls_replace - to = |{ sy - datum ( 4 ) } \u5e74 { sy - datum + 4 ( 2 ) } \u6708 { sy - datum + 6 ( 2 ) } \u65e5 |. INSERT ls_replace INTO TABLE lt_replace . LOOP AT GROUP ls_data_grp INTO ls_data . \" \u672c\u6708\u91d1\u989d CLEAR ls_replace . ls_replace - from = | __PEROID_CURRENT_Z { ls_data - field2 } __ |. ls_replace - to = ls_data - field3 . INSERT ls_replace INTO TABLE lt_replace . \" \u7d2f\u8ba1\u91d1\u989d CLEAR ls_replace . ls_replace - from = | __PEROID_TOTAL_Z { ls_data - field2 } __ |. ls_replace - to = ls_data - field4 . INSERT ls_replace INTO TABLE lt_replace . ENDLOOP . \" \u66ff\u6362\u6587\u672c\u5185\u5bb9 DATA ( l_doc ) = l_buffer . lcl_fi_report => replace_texts ( EXPORTING it_replace = lt_replace CHANGING c_doc = l_doc ). CHECK l_doc IS NOT INITIAL . \" \u4e0b\u8f7d\u5230\u672c\u5730 TRY . DATA ( l_filename ) = |{ l_directory } \\\\\u5229\u6da6\u8868_ { l_bukrs_name } _ { sy - datum } .xlsx |. cl_openxml_helper => store_local_file ( im_file_name = l_filename im_data = l_doc ). CATCH cx_openxml_not_found cx_openxml_format cx_openxml_not_allowed INTO DATA ( lx_openxml ). MESSAGE lx_openxml -> get_text ( ) TYPE 'S' DISPLAY LIKE 'E' . RETURN . ENDTRY . ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Include zfi_balance_alv *&---------------------------------------------------------------------* *&---------------------------------------------------------------------* *& Form frm_display *&---------------------------------------------------------------------* *& ALV\u5c55\u793a *&---------------------------------------------------------------------* FORM frm_display TABLES ct_data TYPE STANDARD TABLE . DATA ls_layout TYPE lvc_s_layo . DATA lt_fieldcat TYPE STANDARD TABLE OF lvc_s_fcat . PERFORM frm_set_layout CHANGING ls_layout . PERFORM frm_set_fieldcat TABLES lt_fieldcat . CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY_LVC' EXPORTING i_callback_program = sy - repid * i_callback_pf_status_set = 'FRM_PF_STATUS' * i_callback_user_command = 'FRM_USER_COMMAND' is_layout_lvc = ls_layout it_fieldcat_lvc = lt_fieldcat i_default = abap_true i_save = 'A' TABLES t_outtab = ct_data[] EXCEPTIONS program_error = 1 OTHERS = 2 . IF sy - subrc <> 0 . MESSAGE ID sy - msgid TYPE sy - msgty NUMBER sy - msgno WITH sy - msgv1 sy - msgv2 sy - msgv3 sy - msgv4 . ENDIF . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_set_layout *&---------------------------------------------------------------------* *& \u62a5\u8868\u5e03\u5c40\u8bbe\u7f6e *&---------------------------------------------------------------------* FORM frm_set_layout CHANGING cs_layout TYPE lvc_s_layo . CLEAR cs_layout . cs_layout - zebra = abap_true . \" \u6591\u9a6c\u7ebf cs_layout - cwidth_opt = abap_true . \" \u81ea\u52a8\u8c03\u6574ALVL\u5217\u5bbd cs_layout - sel_mode = 'A' . \" \u9009\u62e9\u6a21\u5f0f * cs_layout-ctab_fname = 'COLTAB'. \" \u5355\u5143\u683c\u989c\u8272\u8bbe\u7f6e ENDFORM . *&---------------------------------------------------------------------* *& Form frm_set_fieldcat *&---------------------------------------------------------------------* *& \u5b57\u6bb5\u76ee\u5f55\u8bbe\u7f6e *&---------------------------------------------------------------------* FORM frm_set_fieldcat TABLES ct_fieldcat TYPE lvc_t_fcat . DATA ls_fieldcat TYPE lvc_s_fcat . DEFINE _init_fieldcat . CLEAR ls_fieldcat . ls_fieldcat - fieldname = &1 . ls_fieldcat - tooltip = ls_fieldcat - coltext = ls_fieldcat - seltext = ls_fieldcat - scrtext_l = ls_fieldcat - scrtext_m = ls_fieldcat - scrtext_s = &2 . ls_fieldcat - ref_table = &3 . ls_fieldcat - ref_field = &4 . INSERT ls_fieldcat INTO TABLE ct_fieldcat . END-OF-DEFINITION . _init_fieldcat 'FIELD1' '\u9879\u76ee' '' '' . _init_fieldcat 'FIELD2' '\u884c\u6b21' '' '' . _init_fieldcat 'FIELD3' '\u672c\u6708\u91d1\u989d' '' '' . _init_fieldcat 'FIELD4' '\u7d2f\u8ba1\u91d1\u989d' '' '' . \" \u4e2a\u6027\u5316\u81ea\u5df1\u8f93\u51fa\u6570\u636e\u683c\u5f0f LOOP AT ct_fieldcat REFERENCE INTO DATA ( lr_fieldcat ). \" \u5b57\u6bb5\u663e\u793a\u5c5e\u6027\u8bbe\u7f6e CASE lr_fieldcat -> fieldname . WHEN OTHERS . ENDCASE . ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_pf_status *&---------------------------------------------------------------------* *& \u8bbe\u7f6eGUI\u72b6\u6001 *&---------------------------------------------------------------------* FORM frm_pf_status USING ct_extab TYPE slis_t_extab . SET PF-STATUS 'STATUS' . SET TITLEBAR 'TITLE' . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_user_command *&---------------------------------------------------------------------* *& \u529f\u80fd\u54cd\u5e94 *&---------------------------------------------------------------------* FORM frm_user_command USING cv_ucomm LIKE sy - ucomm cs_selfield TYPE slis_selfield . \" \u5237\u65b0\u5c4f\u5e55\u6570\u636e\u5230\u5185\u8868 DATA : lo_grid TYPE REF TO cl_gui_alv_grid . CALL FUNCTION 'GET_GLOBALS_FROM_SLVC_FULLSCR' IMPORTING e_grid = lo_grid . CALL METHOD lo_grid -> check_changed_data . \" \u6309\u94ae\u529f\u80fd\u5b9e\u73b0 CASE cv_ucomm . WHEN '&IC1' . \" \u53cc\u51fb WHEN 'ZEXPORT' . \" \u5bfc\u51fa PERFORM frm_export . WHEN OTHERS . ENDCASE . \" \u5237\u65b0ALV \u663e\u793a\u503c cs_selfield - refresh = abap_true . cs_selfield - row_stable = abap_true . cs_selfield - col_stable = abap_true . ENDFORM . *&---------------------------------------------------------------------* *& START-OF-SELECTION *&---------------------------------------------------------------------* START-OF-SELECTION . PERFORM frm_main .","title":"\u5229\u6da6\u8868"},{"location":"fico/fi_report_pl/#_1","text":"\u5229\u6da6\u8868\u662f \u8d22\u52a1\u53d6\u503c\u6a21\u5757 \u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002\u4e0b\u9762\u4ee3\u7801\u4f7f\u7528\u7684\u914d\u7f6e\u8868\u53ef\u53c2\u8003 \u9875\u9762 \u3002 \u793a\u4f8b\u4ee3\u7801 REPORT zfi_balance . *&---------------------------------------------------------------------* *& Include zfi_balance_top *&---------------------------------------------------------------------* TYPES : BEGIN OF ty_data , bukrs TYPE bukrs , gjahr TYPE gjahr , monat TYPE monat , field1 TYPE string , \" \u9879\u76ee field2 TYPE string , \" \u884c\u6b21 field3 TYPE string , \" \u672c\u6708\u91d1\u989d field4 TYPE string , \" \u7d2f\u8ba1\u91d1\u989d END OF ty_data . TYPES tt_data TYPE STANDARD TABLE OF ty_data . DATA gt_data TYPE tt_data . DATA gt_bukrs TYPE STANDARD TABLE OF bukrs WITH EMPTY KEY . *&---------------------------------------------------------------------* *& Include zfi_balance_sel *&---------------------------------------------------------------------* TABLES t001 . SELECT-OPTIONS s_bukrs FOR t001 - bukrs NO-EXTENSION NO INTERVALS OBLIGATORY . PARAMETERS p_gjahr TYPE gjahr OBLIGATORY DEFAULT sy - datum ( 4 ). PARAMETERS p_monat TYPE monat OBLIGATORY DEFAULT sy - datum + 4 ( 2 ). *&---------------------------------------------------------------------* *& Include zfir001_frm *&---------------------------------------------------------------------* *&---------------------------------------------------------------------* *& Form frm_main *&---------------------------------------------------------------------* *& \u62a5\u8868\u7a0b\u5e8f\u5165\u53e3 *&---------------------------------------------------------------------* FORM frm_main . PERFORM frm_auth_check . IF gt_bukrs IS INITIAL . RETURN . ENDIF . PERFORM frm_gen_profit_loss . \" \u73b0\u91d1\u6d41\u91cf\u8868 PERFORM frm_display TABLES gt_data . \" \u5c55\u793a ENDFORM . *&---------------------------------------------------------------------* *& Form frm_auth_check *&---------------------------------------------------------------------* *& \u6743\u9650\u68c0\u67e5 *&---------------------------------------------------------------------* FORM frm_auth_check . DATA lt_bukrs_opt TYPE RANGE OF bukrs . SELECT 'I' AS sign , 'EQ' AS option , bukrs AS low FROM t001 WHERE bukrs IN @ s_bukrs INTO TABLE @ lt_bukrs_opt . IF lt_bukrs_opt IS INITIAL . l_subrc = 1 . l_msg = | \u516c\u53f8\u4e0d\u5b58\u5728 |. ENDIF . SORT lt_bukrs_opt . DELETE ADJACENT DUPLICATES FROM lt_bukrs_opt COMPARING ALL FIELDS . LOOP AT lt_bukrs_opt INTO DATA ( ls_bukrs_opt ). AUTHORITY-CHECK OBJECT 'F_BKPF_BUK' ID 'BUKRS' FIELD ls_bukrs_opt - low ID 'ACTVT' FIELD i_actvt . IF sy - subrc <> 0 . MESSAGE | \u65e0\u516c\u53f8 { ls_bukrs_opt - low } \u6743\u9650 | TYPE 'S' DISPLAY LIKE 'E' . DELETE lt_bukrs_opt . ENDIF . ENDLOOP . s_bukrs[] = lt_bukrs_opt . IF s_bukrs[] IS INITIAL . LEAVE LIST - PROCESSING . ENDIF . SELECT bukrs FROM t001 WHERE bukrs IN @ s_bukrs INTO TABLE @ gt_bukrs . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_get_config *&---------------------------------------------------------------------* *& \u8bfb\u53d6\u5168\u90e8\u516c\u53f8\u914d\u7f6e *&---------------------------------------------------------------------* FORM frm_get_config_all TABLES et_config TYPE tt_config . DATA lt_config TYPE tt_config . LOOP AT gt_bukrs INTO DATA ( l_bukrs ). PERFORM frm_get_config TABLES lt_config USING '2' \" \u5229\u6da6\u8868 l_bukrs . INSERT LINES OF lt_config INTO TABLE et_config . ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_get_config *&---------------------------------------------------------------------* *& \u8bfb\u53d6\u5355\u4e2a\u516c\u53f8\u914d\u7f6e *&---------------------------------------------------------------------* FORM frm_get_config TABLES et_config TYPE tt_config USING i_fi_report TYPE string i_bukrs TYPE bukrs . \" \u8003\u8651\u9002\u914d\u7b26 DATA lt_bukrs_opt TYPE RANGE OF bukrs . lt_bukrs_opt = VALUE # ( sign = 'I' option = 'EQ' ( low = i_bukrs ) ( low = |{ i_bukrs ( 3 ) } * | ) ( low = |{ i_bukrs ( 2 ) } * | ) ( low = |{ i_bukrs ( 1 ) } * | ) ( low = '*' ) ( low = '' ) ). \" \u53d6\u914d\u7f6e\u6570\u636e SELECT * FROM zfit0001 WHERE zfi_report = @ i_fi_report AND bukrs IN @ lt_bukrs_opt INTO TABLE @ DATA ( lt_zfit0001 ). \" \u89e3\u6790\u914d\u7f6e\u6570\u636e LOOP AT lt_zfit0001 INTO DATA ( ls_zfit0001 ). DATA ls_config TYPE ty_config . CLEAR ls_config . ls_config - bukrs = ls_zfit0001 - bukrs . \" \u516c\u53f8 ls_config - zitem = ls_zfit0001 - zitem . \" \u9879\u76ee ls_config - zitem_sub = ls_zfit0001 - zitem_sub . \" \u5b50\u9879\u76ee CASE ls_zfit0001 - ztype . WHEN '0' . \" \u6587\u672c\u9879 ls_config - ztext = ls_zfit0001 - ztext . \" \u9879\u76ee\u540d\u79f0 WHEN '1' . \" \u7b5b\u9009\u9879 \" \u79d1\u76ee IF ls_zfit0001 - racct_to IS NOT INITIAL . INSERT VALUE # ( sign = 'I' option = 'BT' low = ls_zfit0001 - racct_from high = ls_zfit0001 - racct_to ) INTO TABLE ls_config - t_racct_opt . ELSE . INSERT VALUE # ( sign = 'I' option = 'EQ' low = ls_zfit0001 - racct_from ) INTO TABLE ls_config - t_racct_opt . ENDIF . \" \u539f\u56e0\u4ee3\u7801 INSERT VALUE # ( name = 'RSTGR' \" TY_DATEIL\u5b57\u6bb5\u540d\uff0c\u540e\u7eed\u52a8\u6001\u7b5b\u9009 t_range_opt = VALUE # ( ( sign = 'I' option = 'EQ' low = ls_zfit0001 - rstgr ) ) ) INTO TABLE ls_config - t_filter . \" \u529f\u80fd\u8303\u56f4 INSERT VALUE # ( name = 'RFAREA' \" TY_DATEIL\u5b57\u6bb5\u540d\uff0c\u540e\u7eed\u52a8\u6001\u7b5b\u9009 t_range_opt = VALUE # ( ( sign = 'I' option = 'EQ' low = ls_zfit0001 - rfarea ) ) ) INTO TABLE ls_config - t_filter . WHEN '2' . \" \u6c47\u603b\u9879 IF ls_zfit0001 - zitem_to IS INITIAL OR ls_zfit0001 - zitem_to = '' . ls_zfit0001 - zitem_to = ls_zfit0001 - zitem_from . ENDIF . WHILE ls_zfit0001 - zitem_from <= ls_zfit0001 - zitem_to . INSERT ls_zfit0001 - zitem_from INTO TABLE ls_config - t_collect . ls_zfit0001 - zitem_from = ls_zfit0001 - zitem_from + 1 . ENDWHILE . ls_config - zreverse = ls_zfit0001 - zreverse . \" \u53cd\u5411\u6807\u8bc6 WHEN OTHERS . ENDCASE . \" CASE ls_zfit0001-ztype INSERT ls_config INTO TABLE et_config . ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_gen_profit_loss *&---------------------------------------------------------------------* *& \u6784\u5efa\u5229\u6da6\u8868 *&---------------------------------------------------------------------* FORM frm_gen_profit_loss . DATA lt_config TYPE tt_config . PERFORM frm_get_config_all TABLES lt_config . \" \u83b7\u53d6\u914d\u7f6e\u6570\u636e \" \u6839\u636e\u914d\u7f6e\u6570\u636e\u751f\u6210\u8d22\u52a1\u62a5\u8868\u6570\u636e\u9879 DATA ( lt_fi_data ) = lcl_fi_report => create ( i_year = p_gjahr i_period = p_monat it_config = lt_config ) -> execute ( ). SORT lt_fi_data BY bukrs year period zitem . DATA lt_data TYPE tt_data . DATA ls_data TYPE ty_data . LOOP AT lt_fi_data INTO DATA ( ls_fi_data ) GROUP BY ( bukrs = ls_fi_data - bukrs year = ls_fi_data - year period = ls_fi_data - period ) INTO DATA ( ls_fi_data_grp ). LOOP AT GROUP ls_fi_data_grp INTO ls_fi_data . CLEAR ls_data . ls_data - bukrs = ls_fi_data - bukrs . ls_data - gjahr = ls_fi_data - year . ls_data - monat = ls_fi_data - period . ls_data - field1 = ls_fi_data - ztext . ls_data - field2 = ls_fi_data - zitem . ls_data - field3 = |{ ls_fi_data - period_current NUMBER = USER DECIMALS = 2 }|. ls_data - field4 = |{ ls_fi_data - period_total NUMBER = USER DECIMALS = 2 }|. INSERT ls_data INTO TABLE gt_data . ENDLOOP . ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_export *&---------------------------------------------------------------------* *& \u5bfc\u51fa\u5230\u672c\u5730 *&---------------------------------------------------------------------* FORM frm_export . TYPES : BEGIN OF ty_replace , from TYPE string , to TYPE string , END OF ty_replace . TYPES tt_replace TYPE STANDARD TABLE OF ty_replace WITH EMPTY KEY . DATA lt_replace TYPE tt_replace . DATA ls_replace TYPE ty_replace . \" \u83b7\u53d6\u4e0b\u8f7d\u76ee\u5f55 DATA l_directory TYPE string . cl_gui_frontend_services => directory_browse ( CHANGING selected_folder = l_directory EXCEPTIONS cntl_error = 1 error_no_gui = 2 not_supported_by_gui = 3 ). IF sy - subrc <> 0 . MESSAGE ID sy - msgid TYPE sy - msgty NUMBER sy - msgno WITH sy - msgv1 sy - msgv2 sy - msgv3 sy - msgv4 . ENDIF . DATA ( l_buffer ) = lcl_fi_report => get_smw0_templete ( CONV # ( sy - tcode ) ). \" \u83b7\u53d6SMW0\u6a21\u677f\u6587\u4ef6 CHECK l_buffer IS NOT INITIAL . \" \u9010\u516c\u53f8\u5904\u7406 LOOP AT gt_data INTO DATA ( ls_data ) GROUP BY ( bukrs = ls_data - bukrs gjahr = ls_data - gjahr monat = ls_data - monat ) INTO DATA ( ls_data_grp ). SELECT SINGLE butxt FROM t001 WHETE bukrs = @ ls_data_grp - bukrs INTO @ DATA ( l_butxt ). \" \u7f16\u5236\u5355\u4f4d CLEAR ls_replace . ls_replace - from = | __BUKRS__ |. ls_replace - to = l_butxt . INSERT ls_replace INTO TABLE lt_replace . \" \u6253\u5370\u65e5\u671f CLEAR ls_replace . ls_replace - from = | __ZDATE__ |. ls_replace - to = |{ sy - datum ( 4 ) } \u5e74 { sy - datum + 4 ( 2 ) } \u6708 { sy - datum + 6 ( 2 ) } \u65e5 |. INSERT ls_replace INTO TABLE lt_replace . LOOP AT GROUP ls_data_grp INTO ls_data . \" \u672c\u6708\u91d1\u989d CLEAR ls_replace . ls_replace - from = | __PEROID_CURRENT_Z { ls_data - field2 } __ |. ls_replace - to = ls_data - field3 . INSERT ls_replace INTO TABLE lt_replace . \" \u7d2f\u8ba1\u91d1\u989d CLEAR ls_replace . ls_replace - from = | __PEROID_TOTAL_Z { ls_data - field2 } __ |. ls_replace - to = ls_data - field4 . INSERT ls_replace INTO TABLE lt_replace . ENDLOOP . \" \u66ff\u6362\u6587\u672c\u5185\u5bb9 DATA ( l_doc ) = l_buffer . lcl_fi_report => replace_texts ( EXPORTING it_replace = lt_replace CHANGING c_doc = l_doc ). CHECK l_doc IS NOT INITIAL . \" \u4e0b\u8f7d\u5230\u672c\u5730 TRY . DATA ( l_filename ) = |{ l_directory } \\\\\u5229\u6da6\u8868_ { l_bukrs_name } _ { sy - datum } .xlsx |. cl_openxml_helper => store_local_file ( im_file_name = l_filename im_data = l_doc ). CATCH cx_openxml_not_found cx_openxml_format cx_openxml_not_allowed INTO DATA ( lx_openxml ). MESSAGE lx_openxml -> get_text ( ) TYPE 'S' DISPLAY LIKE 'E' . RETURN . ENDTRY . ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Include zfi_balance_alv *&---------------------------------------------------------------------* *&---------------------------------------------------------------------* *& Form frm_display *&---------------------------------------------------------------------* *& ALV\u5c55\u793a *&---------------------------------------------------------------------* FORM frm_display TABLES ct_data TYPE STANDARD TABLE . DATA ls_layout TYPE lvc_s_layo . DATA lt_fieldcat TYPE STANDARD TABLE OF lvc_s_fcat . PERFORM frm_set_layout CHANGING ls_layout . PERFORM frm_set_fieldcat TABLES lt_fieldcat . CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY_LVC' EXPORTING i_callback_program = sy - repid * i_callback_pf_status_set = 'FRM_PF_STATUS' * i_callback_user_command = 'FRM_USER_COMMAND' is_layout_lvc = ls_layout it_fieldcat_lvc = lt_fieldcat i_default = abap_true i_save = 'A' TABLES t_outtab = ct_data[] EXCEPTIONS program_error = 1 OTHERS = 2 . IF sy - subrc <> 0 . MESSAGE ID sy - msgid TYPE sy - msgty NUMBER sy - msgno WITH sy - msgv1 sy - msgv2 sy - msgv3 sy - msgv4 . ENDIF . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_set_layout *&---------------------------------------------------------------------* *& \u62a5\u8868\u5e03\u5c40\u8bbe\u7f6e *&---------------------------------------------------------------------* FORM frm_set_layout CHANGING cs_layout TYPE lvc_s_layo . CLEAR cs_layout . cs_layout - zebra = abap_true . \" \u6591\u9a6c\u7ebf cs_layout - cwidth_opt = abap_true . \" \u81ea\u52a8\u8c03\u6574ALVL\u5217\u5bbd cs_layout - sel_mode = 'A' . \" \u9009\u62e9\u6a21\u5f0f * cs_layout-ctab_fname = 'COLTAB'. \" \u5355\u5143\u683c\u989c\u8272\u8bbe\u7f6e ENDFORM . *&---------------------------------------------------------------------* *& Form frm_set_fieldcat *&---------------------------------------------------------------------* *& \u5b57\u6bb5\u76ee\u5f55\u8bbe\u7f6e *&---------------------------------------------------------------------* FORM frm_set_fieldcat TABLES ct_fieldcat TYPE lvc_t_fcat . DATA ls_fieldcat TYPE lvc_s_fcat . DEFINE _init_fieldcat . CLEAR ls_fieldcat . ls_fieldcat - fieldname = &1 . ls_fieldcat - tooltip = ls_fieldcat - coltext = ls_fieldcat - seltext = ls_fieldcat - scrtext_l = ls_fieldcat - scrtext_m = ls_fieldcat - scrtext_s = &2 . ls_fieldcat - ref_table = &3 . ls_fieldcat - ref_field = &4 . INSERT ls_fieldcat INTO TABLE ct_fieldcat . END-OF-DEFINITION . _init_fieldcat 'FIELD1' '\u9879\u76ee' '' '' . _init_fieldcat 'FIELD2' '\u884c\u6b21' '' '' . _init_fieldcat 'FIELD3' '\u672c\u6708\u91d1\u989d' '' '' . _init_fieldcat 'FIELD4' '\u7d2f\u8ba1\u91d1\u989d' '' '' . \" \u4e2a\u6027\u5316\u81ea\u5df1\u8f93\u51fa\u6570\u636e\u683c\u5f0f LOOP AT ct_fieldcat REFERENCE INTO DATA ( lr_fieldcat ). \" \u5b57\u6bb5\u663e\u793a\u5c5e\u6027\u8bbe\u7f6e CASE lr_fieldcat -> fieldname . WHEN OTHERS . ENDCASE . ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_pf_status *&---------------------------------------------------------------------* *& \u8bbe\u7f6eGUI\u72b6\u6001 *&---------------------------------------------------------------------* FORM frm_pf_status USING ct_extab TYPE slis_t_extab . SET PF-STATUS 'STATUS' . SET TITLEBAR 'TITLE' . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_user_command *&---------------------------------------------------------------------* *& \u529f\u80fd\u54cd\u5e94 *&---------------------------------------------------------------------* FORM frm_user_command USING cv_ucomm LIKE sy - ucomm cs_selfield TYPE slis_selfield . \" \u5237\u65b0\u5c4f\u5e55\u6570\u636e\u5230\u5185\u8868 DATA : lo_grid TYPE REF TO cl_gui_alv_grid . CALL FUNCTION 'GET_GLOBALS_FROM_SLVC_FULLSCR' IMPORTING e_grid = lo_grid . CALL METHOD lo_grid -> check_changed_data . \" \u6309\u94ae\u529f\u80fd\u5b9e\u73b0 CASE cv_ucomm . WHEN '&IC1' . \" \u53cc\u51fb WHEN 'ZEXPORT' . \" \u5bfc\u51fa PERFORM frm_export . WHEN OTHERS . ENDCASE . \" \u5237\u65b0ALV \u663e\u793a\u503c cs_selfield - refresh = abap_true . cs_selfield - row_stable = abap_true . cs_selfield - col_stable = abap_true . ENDFORM . *&---------------------------------------------------------------------* *& START-OF-SELECTION *&---------------------------------------------------------------------* START-OF-SELECTION . PERFORM frm_main .","title":"\u5229\u6da6\u8868"},{"location":"fico/invoice_check/","text":"\u53d1\u7968\u6821\u9a8c \u00b6","title":"\u53d1\u7968\u6821\u9a8c"},{"location":"fico/invoice_check/#_1","text":"","title":"\u53d1\u7968\u6821\u9a8c"},{"location":"fico/invoice_park/","text":"\u53d1\u7968\u9884\u5236 \u00b6","title":"\u53d1\u7968\u9884\u5236"},{"location":"fico/invoice_park/#_1","text":"","title":"\u53d1\u7968\u9884\u5236"},{"location":"fico/invoice_post/","text":"\u53d1\u7968\u8fc7\u8d26 \u00b6","title":"\u53d1\u7968\u8fc7\u8d26"},{"location":"fico/invoice_post/#_1","text":"","title":"\u53d1\u7968\u8fc7\u8d26"},{"location":"gtm/","text":"\u8d38\u6613\u7ba1\u7406\u6a21\u5757 \u00b6 \u4ece\u6280\u672f\u89d2\u5ea6\u4e0a\u770bGTM\uff0c\u8d38\u6613\u5408\u540c\u975e\u5fc5\u987b\uff0c\u4f46\u8d38\u6613\u5408\u540c\u5173\u8054\u91c7\u9500\uff0c\u4f7f\u5f97\u4e1a\u52a1\u96c6\u4e2d\uff0c\u5bf9\u5b9e\u65bd\u8fc7\u7a0b\u6709\u63d0\u5347\uff0c\u4e0d\u59a8\u4e86\u89e3\u4e0b\u3002 \u4e0b\u9762\u5c06\u8bb2\u8ff0WTEW\u5de5\u4f5c\u53f0\u914d\u7f6e\u3001\u5408\u540c\u521b\u5efa\u4e0e\u7ef4\u62a4\u3001\u5408\u540c\u5173\u8054\u3001\u5408\u540c\u5ba1\u6279\u7b49\u4e3b\u8981\u529f\u80fd\u3002","title":"GTM\u6a21\u5757\u6982\u8ff0"},{"location":"gtm/#_1","text":"\u4ece\u6280\u672f\u89d2\u5ea6\u4e0a\u770bGTM\uff0c\u8d38\u6613\u5408\u540c\u975e\u5fc5\u987b\uff0c\u4f46\u8d38\u6613\u5408\u540c\u5173\u8054\u91c7\u9500\uff0c\u4f7f\u5f97\u4e1a\u52a1\u96c6\u4e2d\uff0c\u5bf9\u5b9e\u65bd\u8fc7\u7a0b\u6709\u63d0\u5347\uff0c\u4e0d\u59a8\u4e86\u89e3\u4e0b\u3002 \u4e0b\u9762\u5c06\u8bb2\u8ff0WTEW\u5de5\u4f5c\u53f0\u914d\u7f6e\u3001\u5408\u540c\u521b\u5efa\u4e0e\u7ef4\u62a4\u3001\u5408\u540c\u5173\u8054\u3001\u5408\u540c\u5ba1\u6279\u7b49\u4e3b\u8981\u529f\u80fd\u3002","title":"\u8d38\u6613\u7ba1\u7406\u6a21\u5757"},{"location":"gtm/contract/","text":"\u8d38\u6613\u5408\u540c \u00b6 \u6ce8\u610f\uff0c\u5982\u679c\u662f\u5408\u540c\u53c2\u8003\u521b\u5efa\u7684\u8ba2\u5355\uff0c\u901a\u5e38\u4f1a\u8981\u6c42\u901a\u8fc7\u5de5\u4f5c\u53f0\u5904\u7406\uff0c\u8fd9\u65f6\u9700\u8981\u5728\u4e1a\u52a1\u6267\u884c\u524d\u52a0\u5165\u4ee5\u4e0b\u4ee3\u7801\uff1a \u793a\u4f8b\u4ee3\u7801 CALL FUNCTION 'WB2_RESET_EXTERNAL_DATA' . CALL FUNCTION 'WB2_CHECK_TEW_ACTIVE' EXCEPTIONS not_active = 1 OTHERS = 2 . DATA l_tew_type TYPE wb2_tew_type . CALL FUNCTION 'WB2_TRADE_GET_INIT_DATA' IMPORTING e_tew_type = l_tew_type . CALL FUNCTION 'WB2_TEW_ACTION_SET_PARAMETER' EXPORTING i_tew_type = i_tew_type i_step = i_step i_mode = i_mode i_pre_step = i_pre_step i_catt_active = 'X' . WTEW\u914d\u7f6e \u00b6 SPRO\\\u540e\u52e4\\\u5168\u7403\u8d38\u6613\u7ba1\u7406 \u8d38\u6613\u5408\u540c\u521b\u5efa\u4e0e\u4fee\u6539 \u00b6 \u901a\u5e38\uff0c\u6d41\u7a0b\u9996\u5148\u521b\u5efa\u8d2d\u9500\u5408\u540c\uff0c\u7136\u540e\u518d\u53c2\u8003\u8be5\u5408\u540c\uff0c\u521b\u5efa\u540e\u7eed\u7684\u91c7\u8d2d\u5408\u540c\u548c\u9500\u552e\u5408\u540c\u3002\u8fd9\u4e09\u79cd\u5408\u540c\u6309\u5408\u540c\u7c7b\u578b\u52a0\u4ee5\u533a\u5206\uff0c\u53ef\u7531\u4e1a\u52a1\u914d\u7f6e\u3002 BAPI_TRADINGCONTRACT_CREATE \uff1a\u521b\u5efa\u8d38\u6613\u5408\u540c BAPI_TRADINGCONTRACT_CHANGE \uff1a\u4fee\u6539\u8d38\u6613\u5408\u540c WB2_DELETE_TRADING_CONT_ALL \uff1a\u5408\u540c\u6279\u91cf\u5220\u9664 \u793a\u4f8b\u4ee3\u7801 *----------------------------------------------------------------------* ***INCLUDE LZGTM001P01. *----------------------------------------------------------------------* *&---------------------------------------------------------------------* *& Class (Implementation) lcl_wb2_ctr_data *&---------------------------------------------------------------------* *& *&---------------------------------------------------------------------* CLASS lcl_wb2_ctr_data IMPLEMENTATION . METHOD read . IF contract_id IS SUPPLIED AND m_contract <> contract_id . m_contract = contract_id . mo_instance = NEW # ( ). DATA l_tkonn TYPE komwbhk - tkonn . DATA ls_t180 TYPE t180 . l_tkonn = contract_id . ls_t180 = VALUE # ( trtyp = 'A' ). CALL FUNCTION 'WB2_CONTRACT_READ' EXPORTING i_tkonn = l_tkonn i_t180 = ls_t180 IMPORTING e_komwbhk = mo_instance -> ms_komwbhk TABLES t_komwbhk = mo_instance -> mt_komwbhk t_komwbhi = mo_instance -> mt_komwbhi t_komwbhd = mo_instance -> mt_komwbhd t_komwbhe = mo_instance -> mt_komwbhe t_komwbhp = mo_instance -> mt_komwbhp EXCEPTIONS application_data_error = 1 lock_error = 2 customizing_error = 3 OTHERS = 4 . IF sy - subrc <> 0 . * Implement suitable error handling here ENDIF . ENDIF . \" \u81f3\u5c11\u4fdd\u8bc1\u4e0ddump IF mo_instance IS NOT BOUND . mo_instance = NEW # ( ). ENDIF . result = mo_instance . ENDMETHOD . METHOD get_fiori_head . \" \u62ac\u5934 result - tkonn = ms_komwbhk - tkonn . result - tkonn_ex = ms_komwbhk - tkonn_ex . result - tew_type = ms_komwbhk - tew_type . result - zframe_tkonn = ms_komwbhk - zframe_tkonn . result - zzsign_platfrom = ms_komwbhk - vkorg . result - vtweg = ms_komwbhk - vtweg . result - spart = ms_komwbhk - spart . result - zzsndat = ms_komwbhk - zzsndat . result - btbsta = ms_komwbhk - btbsta . result - zprictp = ms_komwbhk - zprictp . result - zzlsch_mm = ms_komwbhk - zzlsch_mm . result - zzlsch_mm_ex = ms_komwbhk - zzlsch_txt_mm_n . result - zzlsch_sd = ms_komwbhk - zzlsch_sd . result - zzlsch_sd_ex = ms_komwbhk - zzlsch_txt_sd_n . result - zzrpdate_end = ms_komwbhk - zzrpdate_end . result - zzamt01_mm = ms_komwbhk - zzamt01_mm . result - zzcur01_mm = ms_komwbhk - zzcur01_mm . result - zzpcode_src = ms_komwbhk - zzpcode_src . result - zzland1_src = ms_komwbhk - zzland1_src . result - zzpname_src = ms_komwbhk - zzpname_src . result - zzpcode_des = ms_komwbhk - zzpcode_des . result - zzland1_des = ms_komwbhk - zzland1_des . result - zzpname_des = ms_komwbhk - zzpname_des . result - zzpcode_tra = ms_komwbhk - zzpcode_tra . result - zzland1_tra = ms_komwbhk - zzland1_tra . result - zzpname_tra = ms_komwbhk - zzpname_tra . result - zzis_preins = ms_komwbhk - zzis_preins . result - zzreceived_data_last = |{ ms_komwbhk - zzzcdh_date DATE = RAW }|. result - zzlaycan_from = ms_komwbhk - zzlaycanq . result - zzlaycan_to = ms_komwbhk - zzlaycanz . result - tctyp = ms_komwbhk - tctyp . result - zzbusst = ms_komwbhk - zzbusst . result - zzsnfile = ms_komwbhk - zzsnfile . result - zzsnflg = ms_komwbhk - zzsnflg . result - zzwd_tcdoc_flg = ms_komwbhk - zzwd_tcdoc_flg . result - zzyqd = ms_komwbhk - zzyqd . result - zzstpga_flg = ms_komwbhk - zzstpga_flg . result - zzgmyw_flg = ms_komwbhk - zzgmyw_flg . result - zzflexible = ms_komwbhk - zzflexible . result - zzwtcgp = ms_komwbhk - zzwtcgp . result - zzwtcgp_rt = ms_komwbhk - zzwtcgp_rt . result - guarantee_f = ms_komwbhk - guarantee_f . result - ciq_lastdt = ms_komwbhk - ciq_lastdt . result - consnno = ms_komwbhk - consnno . result - remark1_p = ms_komwbhk - remark1_p . result - remark2_p = ms_komwbhk - remark2_p . result - remark3_p = ms_komwbhk - remark3_p . result - zzwtc_fvdate = ms_komwbhk - zzwtc_fvdate . result - zzwtc_fvtime = ms_komwbhk - zzwtc_fvtime . result - zzwtc_fvapper = ms_komwbhk - zzwtc_fvapper . result - zzefeupt_date = ms_komwbhk - zzefeupt_date . result - zzpreclo_date = ms_komwbhk - zzpreclo_date . result - zznatclo_date = ms_komwbhk - zznatclo_date . \" \u62ac\u59342 LOOP AT mt_komwbhd REFERENCE INTO DATA ( lr_komwbhd ). result - bstkd = lr_komwbhd -> bstkd . result - waers = lr_komwbhd -> waers_purch . result - tkrate_mm = lr_komwbhd -> tkrate_mm . result - kurst_mm = lr_komwbhd -> kurst_mm . result - ekorg = lr_komwbhd -> ekorg . result - ekgrp = lr_komwbhd -> ekgrp . result - inco1_mm = lr_komwbhd -> inco1_mm . result - inco1_mm_ex = lr_komwbhd -> inco2_l_mm . result - inco1_sd = lr_komwbhd -> inco1_sd . result - inco1_sd_ex = lr_komwbhd -> inco2_l_sd . result - zterm = lr_komwbhd -> zterm . result - zzshipping_data_last = lr_komwbhd -> edatu_vbak . result - zzreceived_data_last = lr_komwbhd -> eindt . EXIT . ENDLOOP . \" \u62ac\u5934\u91d1\u989d\u6c47\u603b LOOP AT mt_komwbhi REFERENCE INTO DATA ( lr_komwbhi ). result - zamount_sum = result - zamount_sum + lr_komwbhi -> netpr_mm * lr_komwbhi -> menge . result - zcurrency_sum = lr_komwbhi -> waers_mm . ENDLOOP . \" \u62ac\u59343 LOOP AT mt_komwbhp REFERENCE INTO DATA ( lr_komwbhp ). CASE lr_komwbhp -> parvw . WHEN 'LF' OR 'VN' . result - lifnr = lr_komwbhp -> lifnr . WHEN 'RS' OR 'PI' . WHEN 'Z4' . result - lifnr2 = lr_komwbhp -> lifnr . WHEN 'Z1' . result - lifnr3 = lr_komwbhp -> lifnr . WHEN 'ER' OR 'ZM' . result - lifnr4 = lr_komwbhp -> lifnr . WHEN 'SP' OR 'AG' . WHEN 'WE' OR 'SH' . WHEN OTHERS . ENDCASE . ENDLOOP . ENDMETHOD . METHOD get_fiori_partner . DATA ls_partner LIKE LINE OF result . LOOP AT mt_komwbhp REFERENCE INTO DATA ( lr_komwbhp ). CLEAR ls_partner . ls_partner - tkonn = lr_komwbhp -> tkonn . ls_partner - tposn = lr_komwbhp -> tposn . ls_partner - tposn_sub = lr_komwbhp -> tposn_sub . ls_partner - parvw = lr_komwbhp -> parvw . ls_partner - lifnr = lr_komwbhp -> lifnr . ls_partner - kunnr = lr_komwbhp -> kunnr . ls_partner - adrnr = lr_komwbhp -> adrnr . ls_partner - land = lr_komwbhp -> land . ls_partner - pstlz = lr_komwbhp -> pstlz . ls_partner - regio = lr_komwbhp -> regio . ls_partner - ort01 = lr_komwbhp -> ort01 . ls_partner - name1 = lr_komwbhp -> name1 . INSERT ls_partner INTO TABLE result . ENDLOOP . ENDMETHOD . METHOD get_fiori_item . DATA ls_item LIKE LINE OF result . LOOP AT mt_komwbhi REFERENCE INTO DATA ( lr_komwbhi ). CLEAR ls_item . ls_item - tkonn = lr_komwbhi -> tkonn . ls_item - tposn = lr_komwbhi -> tposn . ls_item - tposn_sub = lr_komwbhi -> tposn_sub . ls_item - matnr = lr_komwbhi -> matnr . ls_item - arktx = lr_komwbhi -> arktx . ls_item - menge = lr_komwbhi -> menge . ls_item - meins = lr_komwbhi -> meins . ls_item - uebto_mm = lr_komwbhi -> uebto_mm . ls_item - untto_mm = lr_komwbhi -> untto_mm . ls_item - netpr_mm = lr_komwbhi -> netpr_mm . ls_item - peinh_mm = lr_komwbhi -> peinh_mm . ls_item - waers_mm = lr_komwbhi -> waers_mm . ls_item - zzsubtotal = ls_item - netpr_mm * ls_item - menge . * ls_item-zzunit_price = lr_komwbhi->zzunit_price. ls_item - lgort = lr_komwbhi -> lgort . ls_item - zpcmark = lr_komwbhi -> zpcmark . \" \u7279\u6027\u53d6\u503c DATA allocvaluesnum TYPE STANDARD TABLE OF bapi1003_alloc_values_num . DATA allocvalueschar TYPE STANDARD TABLE OF bapi1003_alloc_values_char . DATA allocvaluescurr TYPE STANDARD TABLE OF bapi1003_alloc_values_curr . DATA return TYPE STANDARD TABLE OF bapiret2 . CLEAR allocvaluesnum . CLEAR allocvalueschar . CLEAR allocvaluescurr . CLEAR return . CALL FUNCTION 'BAPI_OBJCL_GETDETAIL' EXPORTING objectkey = CONV bapi1003_key - object ( ls_item - matnr ) objecttable = 'MARA' classnum = 'C_01' classtype = '023' TABLES allocvaluesnum = allocvaluesnum allocvalueschar = allocvalueschar allocvaluescurr = allocvaluescurr return = return . LOOP AT allocvalueschar REFERENCE INTO DATA ( lr_allocvalueschar ). CASE lr_allocvalueschar -> charact . WHEN 'B_0001' . \" \u9884\u7b97\u53f7 WHEN 'B_0002' . \" \u5916\u90e8\u5408\u540c\u53f7 WHEN 'B_0003' . \" \u91c7\u8d2d\u8ba2\u5355\u53f7 WHEN 'B_0004' . \" \u91c7\u8d2d\u8ba2\u5355\u7c7b\u578b WHEN 'B_0005' . \" \u4e1a\u52a1\u5f62\u5f0f WHEN 'B_0006' . \" \u91c7\u8d2d\u7ec4 WHEN 'B_0007' . \" \u4e1a\u52a1\u5458 WHEN 'B_0008' . \" \u5165\u5e93\u65f6\u95f4 WHEN 'B_0009' . \" \u89c4\u683c\u5c5e\u60271 WHEN 'B_0010' . \" \u89c4\u683c\u5c5e\u60272 WHEN 'B_0011' . \" \u4ea7\u54c1\u79cd\u7c7b/\u6750\u8d28 ls_item - zprdcat = lr_allocvalueschar -> value_char . WHEN 'B_0012' . \" \u5546\u54c1\u7b49\u7ea7 ls_item - zoland = lr_allocvalueschar -> value_char . WHEN 'B_0013' . \" \u5382\u5bb6/\u54c1\u724c ls_item - zfactory = lr_allocvalueschar -> value_char . WHEN 'B_0014' . \" \u5de5\u827a/\u6280\u672f\u6807\u51c6 ls_item - ztechstd = lr_allocvalueschar -> value_char . WHEN 'B_0015' . \" \u578b\u53f7/\u7b49\u7ea7 ls_item - zprdcat = lr_allocvalueschar -> value_char . WHEN 'B_0016' . \" \u5907\u6ce8 WHEN 'B_0018' . \" \u5c3a\u5bf8/\u5305\u88c5 ls_item - zccbz = lr_allocvalueschar -> value_char . WHEN 'B_0019' . \" \u8fd0\u8f93\u8f7d\u5177\u53f7 ls_item - zyszjh = lr_allocvalueschar -> value_char . WHEN 'B_0020' . \" \u8fd0\u8f93\u65b9\u5f0f WHEN 'B_0021' . \" \u91c7\u8d2d\u8ba2\u5355\u884c\u9879\u76ee WHEN 'B_0030' . \" \u7b2c\u4e8c\u8ba1\u91cf\u5355\u4f4d WHEN 'B_0031' . \" \u7b2c\u4e8c\u5355\u4f4d\u8f6c\u6362\u7cfb\u6570 WHEN 'B_0032' . \" \u7b2c\u4e8c\u5355\u4f4d\u53ef\u53d8\u53c2\u6570 WHEN 'B_0017' . \" \u539f\u4ea7\u5730 WHEN 'B_0022' . \" \u6027\u80fd/\u7528\u9014 WHEN 'B_0023' . \" \u8fd0\u8f93\u5355\u636e\u53f7 ls_item - zysdjh = lr_allocvalueschar -> value_char . WHEN 'B_0024' . \" \u62a5\u5173\u5355\u53f7 ls_item - zbgdh = lr_allocvalueschar -> value_char . WHEN 'B_0025' . \" \u5e93\u4f4d\uff08\u533a\uff09\u53f7 ls_item - zkwh = lr_allocvalueschar -> value_char . WHEN 'B_0026' . \" \u751f\u4ea7\u65e5\u671f ls_item - zscrq = lr_allocvalueschar -> value_char . WHEN 'B_0027' . \" \u81ea\u5b9a\u4e49\u5c5e\u60271 ls_item - zzdysx1 = lr_allocvalueschar -> value_char . WHEN 'B_0028' . \" \u81ea\u5b9a\u4e49\u5c5e\u60272 ls_item - zzdysx2 = lr_allocvalueschar -> value_char . WHEN 'B_0029' . \" \u81ea\u5b9a\u4e49\u5c5e\u60273 ls_item - zzdysx3 = lr_allocvalueschar -> value_char . WHEN OTHERS . ENDCASE . ENDLOOP . INSERT ls_item INTO TABLE result . ENDLOOP . ENDMETHOD . METHOD get_fiori_condition . DATA ls_condition LIKE LINE OF result . \" \u5b9a\u4ef7 DATA ( lt_komwbhd ) = mt_komwbhd . IF ms_komwbhk - knumv_sd IS NOT INITIAL . INSERT VALUE # ( knumv_mm = ms_komwbhk - knumv_sd ) INTO TABLE lt_komwbhd . ENDIF . LOOP AT lt_komwbhd REFERENCE INTO DATA ( lr_komwbhd ). SELECT SINGLE knumv , kposn , stunr , zaehk , kschl , kbetr , waers , kpein , kmein , kwert FROM prcd_elements WHERE knumv = @ lr_komwbhd -> knumv_mm INTO @ DATA ( ls_prcd_elements ). IF sy - subrc <> 0 . CONTINUE . ENDIF . CLEAR ls_condition . ls_condition - tkonn = lr_komwbhd -> tkonn . ls_condition - tposn = lr_komwbhd -> tposn . ls_condition - tposn_sub = lr_komwbhd -> tposn_sub . ls_condition - knumv = ls_prcd_elements - knumv . ls_condition - kposn = ls_prcd_elements - kposn . ls_condition - stunr = ls_prcd_elements - stunr . ls_condition - zaehk = ls_prcd_elements - zaehk . ls_condition - kschl = ls_prcd_elements - kschl . * LS_CONDITION-kschl_text = ls_prcd_elements-kschl_text . * LS_CONDITION-zzto_cost = ls_prcd_elements-zzto_cost . ls_condition - kbetr = ls_prcd_elements - kbetr . ls_condition - waers = ls_prcd_elements - waers . ls_condition - kpein = ls_prcd_elements - kpein . ls_condition - kmein = ls_prcd_elements - kmein . * LS_CONDITION-zzconvertion = ls_prcd_elements-zzconvertion. ls_condition - kwert = ls_prcd_elements - kwert . INSERT ls_condition INTO TABLE result . ENDLOOP . ENDMETHOD . METHOD get_fiori_related . ENDMETHOD . METHOD get_fiori_text . ENDMETHOD . ENDCLASS . *&---------------------------------------------------------------------* *& Class (Implementation) lcl_fiori_ctr_data *&---------------------------------------------------------------------* *& *&---------------------------------------------------------------------* CLASS lcl_fiori_ctr_data IMPLEMENTATION . METHOD read . IF contract_id IS SUPPLIED AND m_contract <> contract_id . m_contract = contract_id . mo_instance = NEW # ( ). DATA ( lo_wb2_ctr_data ) = lcl_wb2_ctr_data => read ( m_contract ). mo_instance -> ms_head = lo_wb2_ctr_data -> get_fiori_head ( ). mo_instance -> mt_partner = lo_wb2_ctr_data -> get_fiori_partner ( ). mo_instance -> mt_item = lo_wb2_ctr_data -> get_fiori_item ( ). mo_instance -> mt_condition = lo_wb2_ctr_data -> get_fiori_condition ( ). mo_instance -> mt_related = lo_wb2_ctr_data -> get_fiori_related ( ). mo_instance -> mt_text = lo_wb2_ctr_data -> get_fiori_text ( ). mo_instance -> mt_payment = mo_instance -> read_payment ( ). ENDIF . \" \u81f3\u5c11\u4fdd\u8bc1\u4e0ddump IF mo_instance IS NOT BOUND . mo_instance = NEW # ( ). ENDIF . result = mo_instance . ENDMETHOD . METHOD save_payment . DATA lt_zttcpt TYPE STANDARD TABLE OF zttcpt WITH EMPTY KEY . DATA ls_zttcpt TYPE zttcpt . LOOP AT mt_payment REFERENCE INTO DATA ( lr_payment ). CLEAR ls_zttcpt . ls_zttcpt - tkonn = m_contract . ls_zttcpt - zzxh = sy - tabix . ls_zttcpt - zzfktj = lr_payment -> zzterm . ls_zttcpt - zzsfkrq = lr_payment -> zzdate_last . ls_zttcpt - zzysfkje = lr_payment -> zzamount . ls_zttcpt - zwaers_purch = lr_payment -> zzcurrency . ls_zttcpt - zzsfk_remark = lr_payment -> zzpay_ex . INSERT ls_zttcpt INTO TABLE lt_zttcpt . ENDLOOP . DELETE FROM zttcpt WHERE tkonn = ms_head - tkonn . MODIFY zttcpt FROM TABLE lt_zttcpt . COMMIT WORK AND WAIT . ENDMETHOD . METHOD read_payment . DATA ( l_tkonn ) = contract_id . IF contract_id IS NOT SUPPLIED . l_tkonn = ms_head - tkonn . ENDIF . SELECT tkonn , zzxh , zzfktj AS zzterm , CAST ( zzsfkrq AS CHAR ( 10 ) ) AS zzdate_last , zzysfkje AS zzamount , zwaers_purch AS zzcurrency , zzsfk_remark AS zzpay_ex FROM zttcpt WHERE tkonn = @ l_tkonn INTO CORRESPONDING FIELDS OF TABLE @ mt_payment . result = mt_payment . ENDMETHOD . ENDCLASS . *&---------------------------------------------------------------------* *& Class (Implementation) lcl_bapi_ctr_create *&---------------------------------------------------------------------* *& *&---------------------------------------------------------------------* CLASS lcl_bapi_ctr_create IMPLEMENTATION . METHOD lif_bapi~execute . result = me . \" \u589e\u5f3a\u5b57\u6bb5\u957f\u5ea6\u5927\u4e8e960\uff0c\u65e0\u6cd5\u4f7f\u7528extensionin\u5b57\u6bb5 \" \u56e0\u6b64\u901a\u8fc7BAPI\u589e\u5f3a\u7684\u65b9\u5f0f\uff0c\u5c06\u503c\u4f20\u5165 \" \u7531\u4e8e\u662f\u9759\u6001\u53c2\u6570\uff0c\u7b49\u4ef7\u4e8e\u5185\u5b58\u4f20\u503c\uff0c\u800c\u4e14\u66f4\u597d\u7684\u6eaf\u6e90 zcl_im__wb2_bapi_enhance_ex => set_extension ( EXPORTING bapi_te_wbhk = ms_bapi_te_wbhk t_bapi_te_wbhi = mt_bapi_te_wbhi t_bapi_te_wbhd = mt_bapi_te_wbhd t_bapi_te_wbhe = mt_bapi_te_wbhe t_bapi_te_wbhp = mt_bapi_te_wbhp bapi_te_wbhkx = ms_bapi_te_wbhkx t_bapi_te_wbhix = mt_bapi_te_wbhix t_bapi_te_wbhdx = mt_bapi_te_wbhdx t_bapi_te_wbhex = mt_bapi_te_wbhex t_bapi_te_wbhpx = mt_bapi_te_wbhpx ). headdatain - testrun = testrun . SET PARAMETER ID 'BAPIHT' FIELD 'X' . \" BAPI\u521b\u5efa\u5408\u540c\uff0c\u7528\u4e8e\u8df3\u8fc7\u90e8\u5206\u6821\u9a8c CALL FUNCTION 'BAPI_TRADINGCONTRACT_CREATE' EXPORTING headdatain = headdatain IMPORTING headdataout = headdataout tradingcontractno = tradingcontractno TABLES itemdatain = itemdatain scheduledatain = scheduledatain businessdatain = businessdatain buspartyin = buspartyin extensionin = extensionin headtextin = headtextin itemtextin = itemtextin itemdataout = itemdataout scheduledataout = scheduledataout businessdataout = businessdataout buspartyout = buspartyout headtextout = headtextout itemtextout = itemtextout extensionout = extensionout return = return partneraddresses = partneraddresses vendorcondin = vendorcondin customercondin = customercondin conditionkeydatain = conditionkeydatain conditionkeydatainx = conditionkeydatainx conditionitemdatain = conditionitemdatain conditionitemdatainx = conditionitemdatainx conditionkeydataout = conditionkeydataout conditionitemdataout = conditionitemdataout scaledatain = scaledatain scaledataout = scaledataout vendorcondout = vendorcondout customercondout = customercondout . SET PARAMETER ID 'BAPIHT' FIELD '' . lif_bapi~document = tradingcontractno . lif_bapi~mt_bapiret2 = CORRESPONDING # ( return ). CALL FUNCTION 'Z_MESSAGE_TABLE_TO_FIELD' EXPORTING t_bapiret2 = lif_bapi~mt_bapiret2 IMPORTING status = lif_bapi~status message = lif_bapi~message . \" \u53d1\u751f\u9519\u8bef\u6216\u6d4b\u8bd5\u6267\u884c\u7684\u60c5\u51b5\uff0c\u4e0d\u63d0\u4ea4 IF lif_bapi~status = 'E' OR testrun = abap_true . CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK' . CLEAR lif_bapi~document . RETURN . ENDIF . \" \u6b63\u5f0f\u63d0\u4ea4 CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = abap_true . ENDMETHOD . METHOD set_head . DATA ( ls_head ) = input -> ms_head . \" \u62ac\u5934\u6570\u636e headdatain - tkonn_ex = ls_head - tkonn_ex . headdatain - trcont_type = ls_head - tctyp . headdatain - tew_type = ls_head - tew_type . headdatain - trcont_stat = ls_head - btbsta . headdatain - trcont_currency = ls_head - waers . headdatain - currency = ls_head - waers . headdatain - purch_no = ls_head - bstkd . headdatain - comp_code = ls_head - zzsign_platfrom . headdatain - sales_grp = ls_head - ekgrp . headdatain - sales_off = ls_head - ekorg . headdatain - sales_org = ls_head - zzsign_platfrom . headdatain - distr_chan = ls_head - vtweg . headdatain - division = ls_head - spart . IF headdatain - tew_type IS INITIAL . headdatain - tew_type = 'Z001' . ENDIF . IF headdatain - distr_chan IS INITIAL . headdatain - distr_chan = '10' . ENDIF . IF headdatain - division IS INITIAL . headdatain - division = '11' . ENDIF . \" \u62ac\u5934\u6570\u636e\u6269\u5c55\u5b57\u6bb5 ms_bapi_te_wbhk - vkgrp = ls_head - ekgrp . ms_bapi_te_wbhk - vkbur = ls_head - ekorg . ms_bapi_te_wbhk - tkonn_ex = ls_head - tkonn_ex . ms_bapi_te_wbhk - guarantee_f = ls_head - guarantee_f . ms_bapi_te_wbhk - ciq_lastdt = ls_head - ciq_lastdt . ms_bapi_te_wbhk - consnno = ls_head - consnno . ms_bapi_te_wbhk - zframe_tkonn = ls_head - zframe_tkonn . ms_bapi_te_wbhk - zzsndat = ls_head - zzsndat . ms_bapi_te_wbhk - zprictp = ls_head - zprictp . ms_bapi_te_wbhk - zzlsch_mm = ls_head - zzlsch_mm . ms_bapi_te_wbhk - zzlsch_txt_mm_n = ls_head - zzlsch_mm_ex . ms_bapi_te_wbhk - zzlsch_sd = ls_head - zzlsch_sd . ms_bapi_te_wbhk - zzlsch_txt_sd_n = ls_head - zzlsch_sd_ex . ms_bapi_te_wbhk - zzrpdate_end = ls_head - zzrpdate_end . * ms_bapi_te_wbhk-zzrpdate_end_ex = ls_head-zzrpdate_end_ex . ms_bapi_te_wbhk - zzamt01_mm = ls_head - zzamt01_mm . ms_bapi_te_wbhk - zzcur01_mm = ls_head - zzcur01_mm . * ms_bapi_te_wbhk-zzamt01_mm_ex = ls_head-zzamt01_mm_ex . ms_bapi_te_wbhk - zzpcode_src = ls_head - zzpcode_src . ms_bapi_te_wbhk - zzland1_src = ls_head - zzland1_src . ms_bapi_te_wbhk - zzpname_src = ls_head - zzpname_src . ms_bapi_te_wbhk - zzpcode_des = ls_head - zzpcode_des . ms_bapi_te_wbhk - zzland1_des = ls_head - zzland1_des . ms_bapi_te_wbhk - zzpname_des = ls_head - zzpname_des . ms_bapi_te_wbhk - zzpcode_tra = ls_head - zzpcode_tra . ms_bapi_te_wbhk - zzland1_tra = ls_head - zzland1_tra . ms_bapi_te_wbhk - zzpname_tra = ls_head - zzpname_tra . ms_bapi_te_wbhk - zzis_preins = ls_head - zzis_preins . ms_bapi_te_wbhk - zzzcdh_date = ls_head - zzreceived_data_last . ms_bapi_te_wbhk - zzlaycanq = ls_head - zzlaycan_from . ms_bapi_te_wbhk - zzlaycanz = ls_head - zzlaycan_to . * ms_bapi_te_wbhk-zzlogistics_ex = ls_head-zzlogistics_ex . ms_bapi_te_wbhk - zzbusst = ls_head - zzbusst . ms_bapi_te_wbhk - zzsnfile = ls_head - zzsnfile . ms_bapi_te_wbhk - zzsnflg = ls_head - zzsnflg . ms_bapi_te_wbhk - zzwd_tcdoc_flg = ls_head - zzwd_tcdoc_flg . ms_bapi_te_wbhk - zzyqd = ls_head - zzyqd . ms_bapi_te_wbhk - zzstpga_flg = ls_head - zzstpga_flg . ms_bapi_te_wbhk - zzgmyw_flg = ls_head - zzgmyw_flg . ms_bapi_te_wbhk - zzflexible = ls_head - zzflexible . ms_bapi_te_wbhk - zzwtcgp = ls_head - zzwtcgp . ms_bapi_te_wbhk - zzwtcgp_rt = ls_head - zzwtcgp_rt . * ms_bapi_te_wbhk-zzwtcgp_rt_ex = ls_head-zzwtcgp_rt_ex . * ms_bapi_te_wbhk-zztext1 = ls_head-zztext1 . * ms_bapi_te_wbhk-zztext2 = ls_head-zztext2 . ms_bapi_te_wbhk - zzwtc_fvdate = ls_head - zzwtc_fvdate . ms_bapi_te_wbhk - zzwtc_fvtime = ls_head - zzwtc_fvtime . ms_bapi_te_wbhk - zzwtc_fvapper = ls_head - zzwtc_fvapper . ms_bapi_te_wbhk - zzefeupt_date = ls_head - zzefeupt_date . ms_bapi_te_wbhk - zzefeupt_time = ls_head - zzefeupt_time . ms_bapi_te_wbhk - zzefeupt_name = ls_head - zzefeupt_apper . ms_bapi_te_wbhk - zzpreclo_date = ls_head - zzpreclo_date . ms_bapi_te_wbhk - zzpreclo_time = ls_head - zzpreclo_time . ms_bapi_te_wbhk - zzpreclo_name = ls_head - zzpreclo_apper . ms_bapi_te_wbhk - zznatclo_date = ls_head - zznatclo_date . ms_bapi_te_wbhk - zznatclo_time = ls_head - zznatclo_time . ms_bapi_te_wbhk - zznatclo_name = ls_head - zznatclo_apper . ms_bapi_te_wbhk - zzfdclo_date = ls_head - zzcancel_date . ms_bapi_te_wbhk - zzfdclo_time = ls_head - zzcancel_time . ms_bapi_te_wbhk - zzfdclo_name = ls_head - zzcancel_apper . * ms_bapi_te_wbhk-zzfield1 = ls_head-zzfield1 . * ms_bapi_te_wbhk-zzfield2 = ls_head-zzfield2 . * ms_bapi_te_wbhk-zzfield3 = ls_head-zzfield3 . * ms_bapi_te_wbhk-zzfield4 = ls_head-zzfield4 . * ms_bapi_te_wbhk-zzfield5 = ls_head-zzfield5 . * ms_bapi_te_wbhk-zzfield6 = ls_head-zzfield6 . * ms_bapi_te_wbhk-zzfield7 = ls_head-zzfield7 . * ms_bapi_te_wbhk-zzfield8 = ls_head-zzfield8 . * ms_bapi_te_wbhk-zzfield9 = ls_head-zzfield9 . ENDMETHOD . METHOD set_bussiness . DATA ( ls_head ) = input -> ms_head . \" \u4e1a\u52a1\u6570\u636e\u9996\u884c\u662f\u62ac\u5934\u7528\u7684 DATA ls_businessdatain TYPE bapitcbus . CLEAR ls_businessdatain . ls_businessdatain - vendor = ls_head - lifnr . ls_businessdatain - pmnttrms = ls_head - zterm . ls_businessdatain - currency = ls_head - waers . ls_businessdatain - exch_rate_p = ls_head - tkrate_mm . ls_businessdatain - exchg_rate = ls_head - kurst_mm . ls_businessdatain - exch_rate_v = ls_head - tkrate_sd . * ls_businessdatain-kurst_sd = ls_head-kurst_sd . ls_businessdatain - incoterms1 = ls_head - inco1_mm . ls_businessdatain - incoterms2 = ls_head - inco1_mm_ex . ls_businessdatain - incoterms1_sd = ls_head - inco1_sd . ls_businessdatain - incoterms2_sd = ls_head - inco1_sd_ex . ls_businessdatain - purch_org = ls_head - ekorg . ls_businessdatain - pur_group = ls_head - ekgrp . INSERT ls_businessdatain INTO TABLE businessdatain . \" \u65e5\u671f\u5904\u7406 DEFINE _clean_date . REPLACE ALL OCCURRENCES OF '[^0-9]' IN &1 WITH '' . IF &1 IS INITIAL . &1 = '00000000' . ENDIF . END-OF-DEFINITION . _clean_date ls_head - zzshipping_data_last . _clean_date ls_head - zzreceived_data_last . \" \u884c\u9879\u76ee\u589e\u5f3a\u7ed3\u6784 DATA ls_bapi_te_wbhd TYPE bapi_te_wbhd . CLEAR ls_bapi_te_wbhd . ls_bapi_te_wbhd - bstdk = ls_head - bstkd . ls_bapi_te_wbhd - edatu_vbak = ls_head - zzshipping_data_last . ls_bapi_te_wbhd - eindt = ls_head - zzreceived_data_last . INSERT ls_bapi_te_wbhd INTO TABLE mt_bapi_te_wbhd . ENDMETHOD . METHOD set_item . DATA ( ls_head ) = input -> ms_head . DATA ( lt_item ) = input -> mt_item . DATA ls_itemdatain TYPE bapitcitem . DATA ls_bapi_te_wbhi TYPE bapi_te_wbhi . \" \u884c\u9879\u76ee LOOP AT lt_item INTO DATA ( ls_item ). IF ls_item - tposn IS INITIAL . ls_item - tposn = sy - tabix * 10 . ENDIF . CLEAR ls_itemdatain . ls_itemdatain - trcont_item = ls_item - tposn . ls_itemdatain - trcont_subitem = ls_item - tposn_sub . ls_itemdatain - plant = ls_head - zzsign_platfrom . ls_itemdatain - material = ls_item - matnr . ls_itemdatain - material_long = ls_item - matnr . ls_itemdatain - short_text = ls_item - arktx . ls_itemdatain - req_qty = ls_item - menge . ls_itemdatain - ordered = ls_item - menge . ls_itemdatain - po_unit = ls_item - meins . ls_itemdatain - sales_price = ls_item - netpr_mm . ls_itemdatain - sales_unit = ls_item - meins . ls_itemdatain - currency = ls_item - waers_mm . ls_itemdatain - pur_price = ls_item - netpr_mm . ls_itemdatain - pur_currency = ls_item - waers_mm . ls_itemdatain - price_unit = ls_item - peinh_mm . ls_itemdatain - stge_loc = ls_item - lgort . INSERT ls_itemdatain INTO TABLE itemdatain . \" \u884c\u9879\u76ee\u589e\u5f3a\u7ed3\u6784 CLEAR ls_bapi_te_wbhi . ls_bapi_te_wbhi - trcont_item = ls_item - tposn . ls_bapi_te_wbhi - trcont_subitem = ls_item - tposn_sub . ls_bapi_te_wbhi - uebto_mm = ls_item - uebto_mm . ls_bapi_te_wbhi - untto_mm = ls_item - untto_mm . ls_bapi_te_wbhi - zprdcat = ls_item - zprdcat . ls_bapi_te_wbhi - zgrade = ls_item - zgrade . ls_bapi_te_wbhi - zzoland = ls_item - zoland . ls_bapi_te_wbhi - zfactory = ls_item - zfactory . ls_bapi_te_wbhi - ztechstd = ls_item - ztechstd . ls_bapi_te_wbhi - zccbz = ls_item - zccbz . ls_bapi_te_wbhi - zxnyy = ls_item - zxnyy . ls_bapi_te_wbhi - zyszjh = ls_item - zyszjh . ls_bapi_te_wbhi - zysdjh = ls_item - zysdjh . ls_bapi_te_wbhi - zbgdh = ls_item - zbgdh . ls_bapi_te_wbhi - zkwh = ls_item - zkwh . ls_bapi_te_wbhi - zscrq = ls_item - zscrq . ls_bapi_te_wbhi - zzdysx1 = ls_item - zzdysx1 . ls_bapi_te_wbhi - zzdysx2 = ls_item - zzdysx2 . ls_bapi_te_wbhi - zzdysx3 = ls_item - zzdysx3 . ls_bapi_te_wbhi - zpcmark = ls_item - zpcmark . INSERT ls_bapi_te_wbhi INTO TABLE mt_bapi_te_wbhi . ENDLOOP . ENDMETHOD . METHOD set_partner . DATA ( ls_head ) = input -> ms_head . DATA ( lt_partner ) = input -> mt_partner . DATA ls_buspartyin TYPE bapitcparty . DATA lr_buspartyin TYPE REF TO bapitcparty . DATA ls_bapi_te_wbhp TYPE bapi_te_wbhp . \" \u5408\u4f5c\u4f19\u4f34\u6570\u636e LOOP AT lt_partner INTO DATA ( ls_partner ). CLEAR ls_buspartyin . ls_buspartyin - trcont_item = ls_partner - tposn . ls_buspartyin - trcont_subitem = ls_partner - tposn_sub . ls_buspartyin - partn_role = ls_partner - parvw . ls_buspartyin - partcount = ls_partner - pstlz . ls_buspartyin - vendor_no = ls_partner - lifnr . ls_buspartyin - cust_no = ls_partner - kunnr . ls_buspartyin - address = ls_partner - adrnr . INSERT ls_buspartyin INTO TABLE buspartyin . ENDLOOP . \" \u91cd\u590d\u4ee3\u7801 \" &1: \u5408\u4f5c\u4f19\u4f34\u89d2\u8272 \" &2: \u4f9b\u5e94\u5546\u7f16\u7801 DEFINE _add_partner . IF &3 IS NOT INITIAL . READ TABLE buspartyin REFERENCE INTO lr_buspartyin WITH KEY partn_role = &2 . IF sy - subrc <> 0 . INSERT VALUE # ( partn_role = &2 ) INTO TABLE buspartyin REFERENCE INTO lr_buspartyin . ENDIF . lr_buspartyin -> &1 = &3 . ENDIF . END-OF-DEFINITION . DEFINE _add_partner_vendor . _add_partner vendor_no &1 &2 . END-OF-DEFINITION . \" \u5982\u679c\u5408\u540c\u4f19\u4f34\u4e2d\u6ca1\u8fd9\u4e9b\u5bf9\u8c61\uff0c\u5219\u6839\u636e\u62ac\u5934\u53d6\u503c _add_partner_vendor 'LF' ls_head - lifnr . _add_partner_vendor 'Z4' ls_head - lifnr2 . _add_partner_vendor 'Z1' ls_head - lifnr3 . _add_partner_vendor 'ZM' ls_head - lifnr4 . ENDMETHOD . METHOD set_condition . DATA ( ls_head ) = input -> ms_head . DATA ( lt_condition ) = input -> mt_condition . \" \u67e5\u8be2\u91c7\u8d2d\u5b9a\u4ef7\u8fc7\u7a0b SELECT SINGLE kalsk FROM lfm1 WHERE lifnr = @ ls_head - lifnr AND ekorg = @ ls_head - ekorg INTO @ DATA ( l_kalsk ). SELECT SINGLE kalsm FROM tmks WHERE kalse = '1000' AND kalsk = @ l_kalsk INTO @ DATA ( l_kalsm ). SELECT * FROM t683s WHERE kalsm = @ l_kalsm INTO TABLE @ DATA ( lt_pricing_process ). SORT lt_pricing_process BY kschl . \" \u91c7\u8d2d\uff08\u4f9b\u5e94\u5546\uff09\u5b9a\u4ef7 DATA ls_vendorcondin TYPE bapitccond . LOOP AT lt_condition INTO DATA ( ls_condition ). \" \u8865\u5168\u7f16\u7801 IF ls_condition - tposn IS INITIAL . ls_condition - tposn = sy - tabix * 10 . ENDIF . IF ls_condition - zaehk IS INITIAL . ls_condition - zaehk = '001' . ENDIF . \" \u83b7\u53d6\u6761\u4ef6\u7c7b\u578b\u5bf9\u5e94\u6761\u4ef6\u8fc7\u7a0b\u4e2d\u7684\u987a\u5e8f READ TABLE lt_pricing_process INTO DATA ( ls_pricing_process ) WITH KEY kschl = ls_condition - kschl BINARY SEARCH . IF sy - subrc <> 0 . CLEAR ls_pricing_process . ENDIF . CLEAR ls_vendorcondin . ls_vendorcondin - trcont_item = ls_condition - tposn . ls_vendorcondin - trcont_subitem = ls_condition - tposn_sub . ls_vendorcondin - cond_st_no = ls_pricing_process - stunr . ls_vendorcondin - cond_count = '001' . ls_vendorcondin - applicatio = ls_pricing_process - kappl . ls_vendorcondin - cond_type = ls_condition - kschl . ls_vendorcondin - cond_base = ls_condition - kbetr . ls_vendorcondin - currency = ls_condition - waers . ls_vendorcondin - cond_p_unt = ls_condition - kpein . ls_vendorcondin - cond_unit = ls_condition - kmein . INSERT ls_vendorcondin INTO TABLE vendorcondin . ENDLOOP . * \" \u8d39\u7528\u5b9a\u4ef7 * DATA ls_conditionkeydatain TYPE bapitcconditionkey. * DATA ls_conditionitemdatain TYPE bapitcconditionitem. * LOOP AT mt_condition INTO DATA(ls_condition). * DATA(l_order_key) = sy-tabix * 10. * * CLEAR ls_conditionkeydatain. * ls_conditionkeydatain-order_key = l_order_key. * ls_conditionkeydatain-application = 'M'. ** ls_conditionkeydatain-cond_group_no = 'G002'. * ls_conditionkeydatain-cond_type = ls_condition-kschl. * ls_conditionkeydatain-purch_org = ms_head-ekorg. * ls_conditionkeydatain-vendor = ms_head-lifnr. * INSERT ls_conditionkeydatain INTO TABLE conditionkeydatain. * * CLEAR ls_conditionitemdatain. * ls_conditionitemdatain-order_key = l_order_key. * ls_conditionitemdatain-cond_count = ls_condition-kposn. * ls_conditionitemdatain-amount = ls_condition-kbetr. * ls_conditionitemdatain-condcurr = ls_condition-waers. * ls_conditionitemdatain-cond_p_unt = ls_condition-kpein. * ls_conditionitemdatain-cond_unit = ls_condition-kmein. * INSERT ls_conditionitemdatain INTO TABLE conditionitemdatain. * ENDLOOP. ENDMETHOD . METHOD set_text . ENDMETHOD . ENDCLASS . *&---------------------------------------------------------------------* *& Class (Implementation) lcl_bapi_ctr_change *&---------------------------------------------------------------------* *& *&---------------------------------------------------------------------* CLASS lcl_bapi_ctr_change IMPLEMENTATION . METHOD lif_bapi~execute . result = me . \" \u589e\u5f3a\u5b57\u6bb5\u957f\u5ea6\u5927\u4e8e960\uff0c\u65e0\u6cd5\u4f7f\u7528extensionin\u5b57\u6bb5 \" \u56e0\u6b64\u901a\u8fc7BAPI\u589e\u5f3a\u7684\u65b9\u5f0f\uff0c\u5c06\u503c\u4f20\u5165 \" \u7531\u4e8e\u662f\u9759\u6001\u53c2\u6570\uff0c\u7b49\u4ef7\u4e8e\u5185\u5b58\u4f20\u503c\uff0c\u800c\u4e14\u66f4\u597d\u7684\u6eaf\u6e90 zcl_im__wb2_bapi_enhance_ex => set_extension ( EXPORTING bapi_te_wbhk = ms_bapi_te_wbhk t_bapi_te_wbhi = mt_bapi_te_wbhi t_bapi_te_wbhd = mt_bapi_te_wbhd t_bapi_te_wbhe = mt_bapi_te_wbhe t_bapi_te_wbhp = mt_bapi_te_wbhp bapi_te_wbhkx = ms_bapi_te_wbhkx t_bapi_te_wbhix = mt_bapi_te_wbhix t_bapi_te_wbhdx = mt_bapi_te_wbhdx t_bapi_te_wbhex = mt_bapi_te_wbhex t_bapi_te_wbhpx = mt_bapi_te_wbhpx ). headdatain - testrun = testrun . SET PARAMETER ID 'BAPIHT' FIELD 'X' . \" BAPI\u521b\u5efa\u5408\u540c\uff0c\u7528\u4e8e\u8df3\u8fc7\u90e8\u5206\u6821\u9a8c CALL FUNCTION 'BAPI_TRADINGCONTRACT_CHANGE' EXPORTING tradingcontractno = tradingcontractno headdatain = headdatain headdatainx = headdatainx IMPORTING headdataout = headdataout TABLES itemdatain = itemdatain itemdatainx = itemdatainx scheduledatain = scheduledatain scheduledatainx = scheduledatainx businessdatain = businessdatain businessdatainx = businessdatainx buspartyin = buspartyin buspartyinx = buspartyinx extensionin = extensionin headtextin = headtextin itemtextin = itemtextin itemdataout = itemdataout scheduledataout = scheduledataout businessdataout = businessdataout buspartyout = buspartyout headtextout = headtextout itemtextout = itemtextout extensionout = extensionout return = return partneraddresses = partneraddresses partnerchanges = partnerchanges vendorcondin = vendorcondin vendorcondinx = vendorcondinx customercondin = customercondin customercondinx = customercondinx conditionkeydatain = conditionkeydatain conditionkeydatainx = conditionkeydatainx conditionitemdatain = conditionitemdatain conditionitemdatainx = conditionitemdatainx conditionkeydataout = conditionkeydataout conditionitemdataout = conditionitemdataout scaledatain = scaledatain scaledataout = scaledataout vendorcondout = vendorcondout customercondout = customercondout . SET PARAMETER ID 'BAPIHT' FIELD '' . lif_bapi~document = tradingcontractno . lif_bapi~mt_bapiret2 = CORRESPONDING # ( return ). CALL FUNCTION 'Z_MESSAGE_TABLE_TO_FIELD' EXPORTING t_bapiret2 = lif_bapi~mt_bapiret2 IMPORTING status = lif_bapi~status message = lif_bapi~message . \" \u53d1\u751f\u9519\u8bef\u6216\u6d4b\u8bd5\u6267\u884c\u7684\u60c5\u51b5\uff0c\u4e0d\u63d0\u4ea4 IF lif_bapi~status = 'E' OR testrun = abap_true . CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK' . CLEAR lif_bapi~document . RETURN . ENDIF . \" \u6b63\u5f0f\u63d0\u4ea4 CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = abap_true . ENDMETHOD . METHOD set_head . \" \u83b7\u53d6\u65e7\u6570\u636e DATA ( lo_old ) = lcl_fiori_ctr_data => read ( input -> ms_head - tkonn ). DATA ( lo_new ) = input . \" \u6bd4\u8f83\u5dee\u5f02 DATA lt_compare TYPE STANDARD TABLE OF zscompare_result . CALL FUNCTION 'Z_COMPARE_STRUCTURE' EXPORTING old = lo_old -> ms_head new = lo_new -> ms_head TABLES result = lt_compare . LOOP AT lt_compare REFERENCE INTO DATA ( lr_compare ) WHERE valid = abap_true AND changed = abap_true . CASE lr_compare -> name . WHEN 'BTBSTA ' . MOVE lr_compare -> value_new TO headdatain - trcont_stat . WHEN 'WAERS ' . MOVE lr_compare -> value_new TO headdatain - trcont_currency . MOVE lr_compare -> value_new TO headdatain - currency . WHEN 'BSTKD ' . MOVE lr_compare -> value_new TO headdatain - purch_no . * WHEN 'ZZSIGN_PLATFROM'. * MOVE lr_compare->value_new TO headdatain-comp_code . * MOVE lr_compare->value_new TO headdatain-sales_org . * WHEN 'EKGRP '. * MOVE lr_compare->value_new TO headdatain-sales_grp . * WHEN 'EKORG '. * MOVE lr_compare->value_new TO headdatain-sales_off . * WHEN 'VTWEG '. * MOVE lr_compare->value_new TO headdatain-distr_chan . * WHEN 'SPART '. * MOVE lr_compare->value_new TO headdatain-division . WHEN OTHERS . ENDCASE . ENDLOOP . \" BAPIX\u7ed3\u6784\u81ea\u52a8\u6253X CALL FUNCTION 'Z_SAME_FIELD_MARK' CHANGING data = headdatain datax = headdatainx . ENDMETHOD . METHOD set_bussiness . \" \u83b7\u53d6\u65e7\u6570\u636e DATA ( lo_old ) = lcl_fiori_ctr_data => read ( input -> ms_head - tkonn ). DATA ( lo_new ) = input . \" \u6bd4\u8f83\u5dee\u5f02 DATA lt_compare TYPE STANDARD TABLE OF zscompare_result . CALL FUNCTION 'Z_COMPARE_STRUCTURE' EXPORTING old = lo_old -> ms_head new = lo_new -> ms_head TABLES result = lt_compare . DATA ls_businessdatain LIKE LINE OF businessdatain . DATA ls_businessdatainx LIKE LINE OF businessdatainx . LOOP AT lt_compare REFERENCE INTO DATA ( lr_compare ) WHERE valid = abap_true AND changed = abap_true . CASE lr_compare -> name . WHEN 'LIFNR ' . MOVE lr_compare -> value_new TO ls_businessdatain - vendor . WHEN 'ZTERM ' . MOVE lr_compare -> value_new TO ls_businessdatain - pmnttrms . WHEN 'WAERS ' . MOVE lr_compare -> value_new TO ls_businessdatain - currency . WHEN 'TKRATE_MM ' . MOVE lr_compare -> value_new TO ls_businessdatain - exch_rate_p . WHEN 'KURST_MM ' . MOVE lr_compare -> value_new TO ls_businessdatain - exchg_rate . WHEN 'TKRATE_SD ' . MOVE lr_compare -> value_new TO ls_businessdatain - exch_rate_v . WHEN 'INCO1_MM ' . MOVE lr_compare -> value_new TO ls_businessdatain - incoterms1 . WHEN 'INCO1_MM_EX' . MOVE lr_compare -> value_new TO ls_businessdatain - incoterms2 . WHEN 'INCO1_SD ' . MOVE lr_compare -> value_new TO ls_businessdatain - incoterms1_sd . WHEN 'INCO1_SD_EX' . MOVE lr_compare -> value_new TO ls_businessdatain - incoterms2_sd . * WHEN 'EKORG '. * MOVE lr_compare->value_new TO ls_businessdatain-purch_org . * WHEN 'EKGRP '. * MOVE lr_compare->value_new TO ls_businessdatain-pur_group . WHEN OTHERS . ENDCASE . ENDLOOP . \" BAPIX\u7ed3\u6784\u81ea\u52a8\u6253X CALL FUNCTION 'Z_SAME_FIELD_MARK' CHANGING data = ls_businessdatain datax = ls_businessdatainx . INSERT ls_businessdatain INTO TABLE businessdatain . INSERT ls_businessdatainx INTO TABLE businessdatainx . ENDMETHOD . METHOD set_item . \" \u83b7\u53d6\u65e7\u6570\u636e DATA ( lo_old ) = lcl_fiori_ctr_data => read ( input -> ms_head - tkonn ). DATA ( lo_new ) = input . DATA lt_compare TYPE STANDARD TABLE OF zscompare_result . DATA ls_itemdatain LIKE LINE OF itemdatain . DATA ls_itemdatainx LIKE LINE OF itemdatainx . LOOP AT lo_new -> mt_item INTO DATA ( ls_item_new ). READ TABLE lo_old -> mt_item INTO DATA ( ls_item_old ) WITH KEY tposn = ls_item_new - tposn tposn_sub = ls_item_new - tposn_sub . \" \u65b0\u589e\u884c IF sy - subrc <> 0 . ls_item_new - updateflag = 'I' . CLEAR ls_item_old . ENDIF . * \" \u65e7\u884c\u5df2\u5220\u9664\uff0c\u65b0\u589e\u4e00\u884c * IF ls_item_old-updateflag = 'D'. * ls_item_new-updateflag = 'I'. * CLEAR ls_item_old. * ENDIF. \" \u6bd4\u8f83\u5dee\u5f02 CLEAR lt_compare . CALL FUNCTION 'Z_COMPARE_STRUCTURE' EXPORTING old = ls_item_old new = ls_item_new TABLES result = lt_compare . ls_itemdatain - trcont_item = ls_item_new - tposn . ls_itemdatain - trcont_subitem = ls_item_new - tposn_sub . IF lo_old -> ms_head - zzsign_platfrom <> lo_new -> ms_head - zzsign_platfrom . ls_itemdatain - plant = lo_new -> ms_head - zzsign_platfrom . ENDIF . LOOP AT lt_compare REFERENCE INTO DATA ( lr_compare ) WHERE valid = abap_true AND changed = abap_true . CASE lr_compare -> name . WHEN 'MATNR ' . MOVE lr_compare -> value_new TO ls_itemdatain - material . WHEN 'ARKTX ' . MOVE lr_compare -> value_new TO ls_itemdatain - short_text . WHEN 'MENGE ' . MOVE lr_compare -> value_new TO ls_itemdatain - req_qty . WHEN 'MENGE ' . MOVE lr_compare -> value_new TO ls_itemdatain - ordered . WHEN 'MEINS ' . MOVE lr_compare -> value_new TO ls_itemdatain - po_unit . WHEN 'NETPR_MM' . MOVE lr_compare -> value_new TO ls_itemdatain - sales_price . WHEN 'MEINS ' . MOVE lr_compare -> value_new TO ls_itemdatain - sales_unit . WHEN 'WAERS_MM' . MOVE lr_compare -> value_new TO ls_itemdatain - currency . WHEN 'NETPR_MM' . MOVE lr_compare -> value_new TO ls_itemdatain - pur_price . WHEN 'WAERS_MM' . MOVE lr_compare -> value_new TO ls_itemdatain - pur_currency . WHEN 'PEINH_MM' . MOVE lr_compare -> value_new TO ls_itemdatain - price_unit . WHEN 'LGORT ' . MOVE lr_compare -> value_new TO ls_itemdatain - stge_loc . WHEN OTHERS . ENDCASE . ENDLOOP . \" \u81ea\u52a8\u6253X CALL FUNCTION 'Z_SAME_FIELD_MARK' CHANGING data = ls_itemdatain datax = ls_itemdatainx . ls_itemdatainx - updateflag = ls_item_new - updateflag . INSERT ls_itemdatain INTO TABLE itemdatain . INSERT ls_itemdatainx INTO TABLE itemdatainx . ENDLOOP . ENDMETHOD . METHOD set_condition . \" \u83b7\u53d6\u65e7\u6570\u636e DATA ( lo_old ) = lcl_fiori_ctr_data => read ( input -> ms_head - tkonn ). DATA ( lo_new ) = input . DATA lt_compare TYPE STANDARD TABLE OF zscompare_result . DATA ls_vendorcondin LIKE LINE OF vendorcondin . DATA ls_vendorcondinx LIKE LINE OF vendorcondinx . \" \u67e5\u8be2\u91c7\u8d2d\u5b9a\u4ef7\u8fc7\u7a0b SELECT SINGLE kalsk FROM lfm1 WHERE lifnr = @ lo_old -> ms_head - lifnr AND ekorg = @ lo_old -> ms_head - ekorg INTO @ DATA ( l_kalsk ). SELECT SINGLE kalsm FROM tmks WHERE kalse = '1000' AND kalsk = @ l_kalsk INTO @ DATA ( l_kalsm ). SELECT * FROM t683s WHERE kalsm = @ l_kalsm INTO TABLE @ DATA ( lt_pricing_process ). SORT lt_pricing_process BY kschl . \" \u91c7\u8d2d\uff08\u4f9b\u5e94\u5546\uff09\u5b9a\u4ef7 LOOP AT lo_new -> mt_condition INTO DATA ( ls_condition_new ). READ TABLE lo_old -> mt_condition INTO DATA ( ls_condition_old ) WITH KEY tposn = ls_condition_new - tposn tposn_sub = ls_condition_new - tposn_sub knumv = ls_condition_new - knumv kposn = ls_condition_new - kposn stunr = ls_condition_new - stunr zaehk = ls_condition_new - zaehk . \" \u65b0\u589e\u884c IF sy - subrc <> 0 . ls_condition_new - updateflag = 'I' . CLEAR ls_condition_new . ENDIF . ls_vendorcondin - trcont_item = ls_condition_new - tposn . ls_vendorcondin - trcont_subitem = ls_condition_new - tposn_sub . ls_vendorcondin - cond_st_no = ls_condition_new - stunr . ls_vendorcondin - cond_count = ls_condition_new - zaehk . LOOP AT lt_compare REFERENCE INTO DATA ( lr_compare ) WHERE valid = abap_true AND changed = abap_true . CASE lr_compare -> name . WHEN 'KBETR' . MOVE lr_compare -> value_new TO ls_vendorcondin - cond_base . WHEN 'WAERS' . MOVE lr_compare -> value_new TO ls_vendorcondin - currency . WHEN 'KPEIN' . MOVE lr_compare -> value_new TO ls_vendorcondin - cond_p_unt . WHEN 'KMEIN' . MOVE lr_compare -> value_new TO ls_vendorcondin - cond_unit . WHEN OTHERS . ENDCASE . ENDLOOP . CALL FUNCTION 'Z_SAME_FIELD_MARK' CHANGING data = ls_vendorcondin datax = ls_vendorcondinx . ls_vendorcondinx - updateflag = ls_condition_new - updateflag . INSERT ls_vendorcondin INTO TABLE vendorcondin . INSERT ls_vendorcondinx INTO TABLE vendorcondinx . ENDLOOP . ENDMETHOD . METHOD set_partner . \" \u83b7\u53d6\u65e7\u6570\u636e DATA ( lo_old ) = lcl_fiori_ctr_data => read ( input -> ms_head - tkonn ). DATA ( lo_new ) = input . DATA lt_compare TYPE STANDARD TABLE OF zscompare_result . DATA ls_partner_old LIKE LINE OF lo_old -> mt_partner . DATA ls_partner_new LIKE LINE OF lo_new -> mt_partner . DATA ls_buspartyin LIKE LINE OF buspartyin . DATA ls_buspartyinx LIKE LINE OF buspartyinx . \" \u5408\u4f5c\u4f19\u4f34\u6570\u636e DEFINE _to_partner . READ TABLE lo_new -> mt_partner INTO ls_partner_new WITH KEY parvw = &1 . IF sy - subrc <> 0 . ls_partner_new = VALUE # ( parvw = &1 updateflag = 'I' lifnr = lo_new -> ms_head - &2 ). ENDIF . READ TABLE lo_old -> mt_partner INTO ls_partner_old WITH KEY parvw = &1 . IF sy - subrc = 0 . ls_partner_new - updateflag = 'U' . ENDIF . END-OF-DEFINITION . \" \u5982\u679c\u5408\u540c\u4f19\u4f34\u4e2d\u6ca1\u8fd9\u4e9b\u5bf9\u8c61\uff0c\u5219\u6839\u636e\u62ac\u5934\u53d6\u503c _to_partner 'LF' lifnr . _to_partner 'Z4' lifnr2 . _to_partner 'Z1' lifnr3 . _to_partner 'ZM' lifnr4 . LOOP AT lo_new -> mt_partner INTO ls_partner_new . READ TABLE lo_old -> mt_partner INTO ls_partner_old WITH KEY tposn = ls_partner_new - tposn tposn_sub = ls_partner_new - tposn_sub parvw = ls_partner_new - parvw . \" \u65b0\u589e\u884c IF sy - subrc <> 0 . ls_partner_new - updateflag = 'I' . CLEAR ls_partner_old . ENDIF . \" \u6bd4\u8f83\u5dee\u5f02 CLEAR lt_compare . CALL FUNCTION 'Z_COMPARE_STRUCTURE' EXPORTING old = ls_partner_old new = ls_partner_new TABLES result = lt_compare . ls_buspartyin - trcont_item = ls_partner_new - tposn . ls_buspartyin - trcont_subitem = ls_partner_new - tposn_sub . ls_buspartyin - partn_role = ls_partner_new - parvw . ls_buspartyin - partcount = ls_partner_new - pstlz . LOOP AT lt_compare REFERENCE INTO DATA ( lr_compare ) WHERE valid = abap_true AND changed = abap_true . CASE lr_compare -> name . WHEN 'LIFNR ' . MOVE lr_compare -> value_new TO ls_buspartyin - vendor_no . WHEN 'KUNNR ' . MOVE lr_compare -> value_new TO ls_buspartyin - cust_no . WHEN OTHERS . ENDCASE . ENDLOOP . CALL FUNCTION 'Z_SAME_FIELD_MARK' CHANGING data = ls_buspartyin datax = ls_buspartyinx . ls_buspartyinx - updateflag = ls_partner_new - updateflag . INSERT ls_buspartyin INTO TABLE buspartyin . INSERT ls_buspartyinx INTO TABLE buspartyinx . ENDLOOP . ENDMETHOD . METHOD set_text . ENDMETHOD . ENDCLASS . *&---------------------------------------------------------------------* *& Class (Implementation) lcl_contract_service *&---------------------------------------------------------------------* *& *&---------------------------------------------------------------------* CLASS lcl_contract_service IMPLEMENTATION . METHOD create . DATA ( lo_fiori_ctr_data ) = data . DATA ( lo_bapi_ctr_create ) = NEW lcl_bapi_ctr_create ( ). lo_bapi_ctr_create -> set_head ( lo_fiori_ctr_data ). lo_bapi_ctr_create -> set_item ( lo_fiori_ctr_data ). lo_bapi_ctr_create -> set_bussiness ( lo_fiori_ctr_data ). lo_bapi_ctr_create -> set_partner ( lo_fiori_ctr_data ). lo_bapi_ctr_create -> set_condition ( lo_fiori_ctr_data ). lo_bapi_ctr_create -> set_text ( lo_fiori_ctr_data ). \" \u6267\u884c\u521b\u5efabapi DATA ( lo_bapi ) = lo_bapi_ctr_create -> lif_bapi~execute ( testrun = abap_true ). IF lo_bapi -> status <> 'E' . lo_bapi = lo_bapi -> execute ( ). ENDIF . \" \u66f4\u65b0\u4ed8\u6b3e\u4fe1\u606f IF lo_bapi -> status = 'S' . lo_fiori_ctr_data -> save_payment ( ). ENDIF . contract = lo_bapi -> document . status = lo_bapi -> status . message = lo_bapi -> message . ENDMETHOD . METHOD change . DATA ( lo_fiori_ctr_data ) = data . DATA ( lo_bapi_ctr_change ) = NEW lcl_bapi_ctr_change ( ). lo_bapi_ctr_change -> set_head ( lo_fiori_ctr_data ). lo_bapi_ctr_change -> set_item ( lo_fiori_ctr_data ). lo_bapi_ctr_change -> set_bussiness ( lo_fiori_ctr_data ). lo_bapi_ctr_change -> set_partner ( lo_fiori_ctr_data ). lo_bapi_ctr_change -> set_condition ( lo_fiori_ctr_data ). lo_bapi_ctr_change -> set_text ( lo_fiori_ctr_data ). \" \u6267\u884c\u521b\u5efabapi DATA ( lo_bapi ) = lo_bapi_ctr_change -> lif_bapi~execute ( testrun = abap_true ). IF lo_bapi -> status <> 'E' . lo_bapi = lo_bapi -> execute ( ). ENDIF . \" \u66f4\u65b0\u4ed8\u6b3e\u4fe1\u606f IF lo_bapi -> status = 'S' . lo_fiori_ctr_data -> save_payment ( ). ENDIF . contract = lo_bapi -> document . status = lo_bapi -> status . message = lo_bapi -> message . ENDMETHOD . ENDCLASS . WB2_BAPI_ENHANCE_EX \uff1a\u5408\u540c\u589e\u5f3a WB2_TC_INCOMP_LOG \uff0c\u5408\u540c\u4e0d\u5b8c\u6574\u65e5\u5fd7\u589e\u5f3a \u5408\u540c\u5173\u95ed \u00b6","title":"\u5408\u540c"},{"location":"gtm/contract/#_1","text":"\u6ce8\u610f\uff0c\u5982\u679c\u662f\u5408\u540c\u53c2\u8003\u521b\u5efa\u7684\u8ba2\u5355\uff0c\u901a\u5e38\u4f1a\u8981\u6c42\u901a\u8fc7\u5de5\u4f5c\u53f0\u5904\u7406\uff0c\u8fd9\u65f6\u9700\u8981\u5728\u4e1a\u52a1\u6267\u884c\u524d\u52a0\u5165\u4ee5\u4e0b\u4ee3\u7801\uff1a \u793a\u4f8b\u4ee3\u7801 CALL FUNCTION 'WB2_RESET_EXTERNAL_DATA' . CALL FUNCTION 'WB2_CHECK_TEW_ACTIVE' EXCEPTIONS not_active = 1 OTHERS = 2 . DATA l_tew_type TYPE wb2_tew_type . CALL FUNCTION 'WB2_TRADE_GET_INIT_DATA' IMPORTING e_tew_type = l_tew_type . CALL FUNCTION 'WB2_TEW_ACTION_SET_PARAMETER' EXPORTING i_tew_type = i_tew_type i_step = i_step i_mode = i_mode i_pre_step = i_pre_step i_catt_active = 'X' .","title":"\u8d38\u6613\u5408\u540c"},{"location":"gtm/contract/#wtew","text":"SPRO\\\u540e\u52e4\\\u5168\u7403\u8d38\u6613\u7ba1\u7406","title":"WTEW\u914d\u7f6e"},{"location":"gtm/contract/#_2","text":"\u901a\u5e38\uff0c\u6d41\u7a0b\u9996\u5148\u521b\u5efa\u8d2d\u9500\u5408\u540c\uff0c\u7136\u540e\u518d\u53c2\u8003\u8be5\u5408\u540c\uff0c\u521b\u5efa\u540e\u7eed\u7684\u91c7\u8d2d\u5408\u540c\u548c\u9500\u552e\u5408\u540c\u3002\u8fd9\u4e09\u79cd\u5408\u540c\u6309\u5408\u540c\u7c7b\u578b\u52a0\u4ee5\u533a\u5206\uff0c\u53ef\u7531\u4e1a\u52a1\u914d\u7f6e\u3002 BAPI_TRADINGCONTRACT_CREATE \uff1a\u521b\u5efa\u8d38\u6613\u5408\u540c BAPI_TRADINGCONTRACT_CHANGE \uff1a\u4fee\u6539\u8d38\u6613\u5408\u540c WB2_DELETE_TRADING_CONT_ALL \uff1a\u5408\u540c\u6279\u91cf\u5220\u9664 \u793a\u4f8b\u4ee3\u7801 *----------------------------------------------------------------------* ***INCLUDE LZGTM001P01. *----------------------------------------------------------------------* *&---------------------------------------------------------------------* *& Class (Implementation) lcl_wb2_ctr_data *&---------------------------------------------------------------------* *& *&---------------------------------------------------------------------* CLASS lcl_wb2_ctr_data IMPLEMENTATION . METHOD read . IF contract_id IS SUPPLIED AND m_contract <> contract_id . m_contract = contract_id . mo_instance = NEW # ( ). DATA l_tkonn TYPE komwbhk - tkonn . DATA ls_t180 TYPE t180 . l_tkonn = contract_id . ls_t180 = VALUE # ( trtyp = 'A' ). CALL FUNCTION 'WB2_CONTRACT_READ' EXPORTING i_tkonn = l_tkonn i_t180 = ls_t180 IMPORTING e_komwbhk = mo_instance -> ms_komwbhk TABLES t_komwbhk = mo_instance -> mt_komwbhk t_komwbhi = mo_instance -> mt_komwbhi t_komwbhd = mo_instance -> mt_komwbhd t_komwbhe = mo_instance -> mt_komwbhe t_komwbhp = mo_instance -> mt_komwbhp EXCEPTIONS application_data_error = 1 lock_error = 2 customizing_error = 3 OTHERS = 4 . IF sy - subrc <> 0 . * Implement suitable error handling here ENDIF . ENDIF . \" \u81f3\u5c11\u4fdd\u8bc1\u4e0ddump IF mo_instance IS NOT BOUND . mo_instance = NEW # ( ). ENDIF . result = mo_instance . ENDMETHOD . METHOD get_fiori_head . \" \u62ac\u5934 result - tkonn = ms_komwbhk - tkonn . result - tkonn_ex = ms_komwbhk - tkonn_ex . result - tew_type = ms_komwbhk - tew_type . result - zframe_tkonn = ms_komwbhk - zframe_tkonn . result - zzsign_platfrom = ms_komwbhk - vkorg . result - vtweg = ms_komwbhk - vtweg . result - spart = ms_komwbhk - spart . result - zzsndat = ms_komwbhk - zzsndat . result - btbsta = ms_komwbhk - btbsta . result - zprictp = ms_komwbhk - zprictp . result - zzlsch_mm = ms_komwbhk - zzlsch_mm . result - zzlsch_mm_ex = ms_komwbhk - zzlsch_txt_mm_n . result - zzlsch_sd = ms_komwbhk - zzlsch_sd . result - zzlsch_sd_ex = ms_komwbhk - zzlsch_txt_sd_n . result - zzrpdate_end = ms_komwbhk - zzrpdate_end . result - zzamt01_mm = ms_komwbhk - zzamt01_mm . result - zzcur01_mm = ms_komwbhk - zzcur01_mm . result - zzpcode_src = ms_komwbhk - zzpcode_src . result - zzland1_src = ms_komwbhk - zzland1_src . result - zzpname_src = ms_komwbhk - zzpname_src . result - zzpcode_des = ms_komwbhk - zzpcode_des . result - zzland1_des = ms_komwbhk - zzland1_des . result - zzpname_des = ms_komwbhk - zzpname_des . result - zzpcode_tra = ms_komwbhk - zzpcode_tra . result - zzland1_tra = ms_komwbhk - zzland1_tra . result - zzpname_tra = ms_komwbhk - zzpname_tra . result - zzis_preins = ms_komwbhk - zzis_preins . result - zzreceived_data_last = |{ ms_komwbhk - zzzcdh_date DATE = RAW }|. result - zzlaycan_from = ms_komwbhk - zzlaycanq . result - zzlaycan_to = ms_komwbhk - zzlaycanz . result - tctyp = ms_komwbhk - tctyp . result - zzbusst = ms_komwbhk - zzbusst . result - zzsnfile = ms_komwbhk - zzsnfile . result - zzsnflg = ms_komwbhk - zzsnflg . result - zzwd_tcdoc_flg = ms_komwbhk - zzwd_tcdoc_flg . result - zzyqd = ms_komwbhk - zzyqd . result - zzstpga_flg = ms_komwbhk - zzstpga_flg . result - zzgmyw_flg = ms_komwbhk - zzgmyw_flg . result - zzflexible = ms_komwbhk - zzflexible . result - zzwtcgp = ms_komwbhk - zzwtcgp . result - zzwtcgp_rt = ms_komwbhk - zzwtcgp_rt . result - guarantee_f = ms_komwbhk - guarantee_f . result - ciq_lastdt = ms_komwbhk - ciq_lastdt . result - consnno = ms_komwbhk - consnno . result - remark1_p = ms_komwbhk - remark1_p . result - remark2_p = ms_komwbhk - remark2_p . result - remark3_p = ms_komwbhk - remark3_p . result - zzwtc_fvdate = ms_komwbhk - zzwtc_fvdate . result - zzwtc_fvtime = ms_komwbhk - zzwtc_fvtime . result - zzwtc_fvapper = ms_komwbhk - zzwtc_fvapper . result - zzefeupt_date = ms_komwbhk - zzefeupt_date . result - zzpreclo_date = ms_komwbhk - zzpreclo_date . result - zznatclo_date = ms_komwbhk - zznatclo_date . \" \u62ac\u59342 LOOP AT mt_komwbhd REFERENCE INTO DATA ( lr_komwbhd ). result - bstkd = lr_komwbhd -> bstkd . result - waers = lr_komwbhd -> waers_purch . result - tkrate_mm = lr_komwbhd -> tkrate_mm . result - kurst_mm = lr_komwbhd -> kurst_mm . result - ekorg = lr_komwbhd -> ekorg . result - ekgrp = lr_komwbhd -> ekgrp . result - inco1_mm = lr_komwbhd -> inco1_mm . result - inco1_mm_ex = lr_komwbhd -> inco2_l_mm . result - inco1_sd = lr_komwbhd -> inco1_sd . result - inco1_sd_ex = lr_komwbhd -> inco2_l_sd . result - zterm = lr_komwbhd -> zterm . result - zzshipping_data_last = lr_komwbhd -> edatu_vbak . result - zzreceived_data_last = lr_komwbhd -> eindt . EXIT . ENDLOOP . \" \u62ac\u5934\u91d1\u989d\u6c47\u603b LOOP AT mt_komwbhi REFERENCE INTO DATA ( lr_komwbhi ). result - zamount_sum = result - zamount_sum + lr_komwbhi -> netpr_mm * lr_komwbhi -> menge . result - zcurrency_sum = lr_komwbhi -> waers_mm . ENDLOOP . \" \u62ac\u59343 LOOP AT mt_komwbhp REFERENCE INTO DATA ( lr_komwbhp ). CASE lr_komwbhp -> parvw . WHEN 'LF' OR 'VN' . result - lifnr = lr_komwbhp -> lifnr . WHEN 'RS' OR 'PI' . WHEN 'Z4' . result - lifnr2 = lr_komwbhp -> lifnr . WHEN 'Z1' . result - lifnr3 = lr_komwbhp -> lifnr . WHEN 'ER' OR 'ZM' . result - lifnr4 = lr_komwbhp -> lifnr . WHEN 'SP' OR 'AG' . WHEN 'WE' OR 'SH' . WHEN OTHERS . ENDCASE . ENDLOOP . ENDMETHOD . METHOD get_fiori_partner . DATA ls_partner LIKE LINE OF result . LOOP AT mt_komwbhp REFERENCE INTO DATA ( lr_komwbhp ). CLEAR ls_partner . ls_partner - tkonn = lr_komwbhp -> tkonn . ls_partner - tposn = lr_komwbhp -> tposn . ls_partner - tposn_sub = lr_komwbhp -> tposn_sub . ls_partner - parvw = lr_komwbhp -> parvw . ls_partner - lifnr = lr_komwbhp -> lifnr . ls_partner - kunnr = lr_komwbhp -> kunnr . ls_partner - adrnr = lr_komwbhp -> adrnr . ls_partner - land = lr_komwbhp -> land . ls_partner - pstlz = lr_komwbhp -> pstlz . ls_partner - regio = lr_komwbhp -> regio . ls_partner - ort01 = lr_komwbhp -> ort01 . ls_partner - name1 = lr_komwbhp -> name1 . INSERT ls_partner INTO TABLE result . ENDLOOP . ENDMETHOD . METHOD get_fiori_item . DATA ls_item LIKE LINE OF result . LOOP AT mt_komwbhi REFERENCE INTO DATA ( lr_komwbhi ). CLEAR ls_item . ls_item - tkonn = lr_komwbhi -> tkonn . ls_item - tposn = lr_komwbhi -> tposn . ls_item - tposn_sub = lr_komwbhi -> tposn_sub . ls_item - matnr = lr_komwbhi -> matnr . ls_item - arktx = lr_komwbhi -> arktx . ls_item - menge = lr_komwbhi -> menge . ls_item - meins = lr_komwbhi -> meins . ls_item - uebto_mm = lr_komwbhi -> uebto_mm . ls_item - untto_mm = lr_komwbhi -> untto_mm . ls_item - netpr_mm = lr_komwbhi -> netpr_mm . ls_item - peinh_mm = lr_komwbhi -> peinh_mm . ls_item - waers_mm = lr_komwbhi -> waers_mm . ls_item - zzsubtotal = ls_item - netpr_mm * ls_item - menge . * ls_item-zzunit_price = lr_komwbhi->zzunit_price. ls_item - lgort = lr_komwbhi -> lgort . ls_item - zpcmark = lr_komwbhi -> zpcmark . \" \u7279\u6027\u53d6\u503c DATA allocvaluesnum TYPE STANDARD TABLE OF bapi1003_alloc_values_num . DATA allocvalueschar TYPE STANDARD TABLE OF bapi1003_alloc_values_char . DATA allocvaluescurr TYPE STANDARD TABLE OF bapi1003_alloc_values_curr . DATA return TYPE STANDARD TABLE OF bapiret2 . CLEAR allocvaluesnum . CLEAR allocvalueschar . CLEAR allocvaluescurr . CLEAR return . CALL FUNCTION 'BAPI_OBJCL_GETDETAIL' EXPORTING objectkey = CONV bapi1003_key - object ( ls_item - matnr ) objecttable = 'MARA' classnum = 'C_01' classtype = '023' TABLES allocvaluesnum = allocvaluesnum allocvalueschar = allocvalueschar allocvaluescurr = allocvaluescurr return = return . LOOP AT allocvalueschar REFERENCE INTO DATA ( lr_allocvalueschar ). CASE lr_allocvalueschar -> charact . WHEN 'B_0001' . \" \u9884\u7b97\u53f7 WHEN 'B_0002' . \" \u5916\u90e8\u5408\u540c\u53f7 WHEN 'B_0003' . \" \u91c7\u8d2d\u8ba2\u5355\u53f7 WHEN 'B_0004' . \" \u91c7\u8d2d\u8ba2\u5355\u7c7b\u578b WHEN 'B_0005' . \" \u4e1a\u52a1\u5f62\u5f0f WHEN 'B_0006' . \" \u91c7\u8d2d\u7ec4 WHEN 'B_0007' . \" \u4e1a\u52a1\u5458 WHEN 'B_0008' . \" \u5165\u5e93\u65f6\u95f4 WHEN 'B_0009' . \" \u89c4\u683c\u5c5e\u60271 WHEN 'B_0010' . \" \u89c4\u683c\u5c5e\u60272 WHEN 'B_0011' . \" \u4ea7\u54c1\u79cd\u7c7b/\u6750\u8d28 ls_item - zprdcat = lr_allocvalueschar -> value_char . WHEN 'B_0012' . \" \u5546\u54c1\u7b49\u7ea7 ls_item - zoland = lr_allocvalueschar -> value_char . WHEN 'B_0013' . \" \u5382\u5bb6/\u54c1\u724c ls_item - zfactory = lr_allocvalueschar -> value_char . WHEN 'B_0014' . \" \u5de5\u827a/\u6280\u672f\u6807\u51c6 ls_item - ztechstd = lr_allocvalueschar -> value_char . WHEN 'B_0015' . \" \u578b\u53f7/\u7b49\u7ea7 ls_item - zprdcat = lr_allocvalueschar -> value_char . WHEN 'B_0016' . \" \u5907\u6ce8 WHEN 'B_0018' . \" \u5c3a\u5bf8/\u5305\u88c5 ls_item - zccbz = lr_allocvalueschar -> value_char . WHEN 'B_0019' . \" \u8fd0\u8f93\u8f7d\u5177\u53f7 ls_item - zyszjh = lr_allocvalueschar -> value_char . WHEN 'B_0020' . \" \u8fd0\u8f93\u65b9\u5f0f WHEN 'B_0021' . \" \u91c7\u8d2d\u8ba2\u5355\u884c\u9879\u76ee WHEN 'B_0030' . \" \u7b2c\u4e8c\u8ba1\u91cf\u5355\u4f4d WHEN 'B_0031' . \" \u7b2c\u4e8c\u5355\u4f4d\u8f6c\u6362\u7cfb\u6570 WHEN 'B_0032' . \" \u7b2c\u4e8c\u5355\u4f4d\u53ef\u53d8\u53c2\u6570 WHEN 'B_0017' . \" \u539f\u4ea7\u5730 WHEN 'B_0022' . \" \u6027\u80fd/\u7528\u9014 WHEN 'B_0023' . \" \u8fd0\u8f93\u5355\u636e\u53f7 ls_item - zysdjh = lr_allocvalueschar -> value_char . WHEN 'B_0024' . \" \u62a5\u5173\u5355\u53f7 ls_item - zbgdh = lr_allocvalueschar -> value_char . WHEN 'B_0025' . \" \u5e93\u4f4d\uff08\u533a\uff09\u53f7 ls_item - zkwh = lr_allocvalueschar -> value_char . WHEN 'B_0026' . \" \u751f\u4ea7\u65e5\u671f ls_item - zscrq = lr_allocvalueschar -> value_char . WHEN 'B_0027' . \" \u81ea\u5b9a\u4e49\u5c5e\u60271 ls_item - zzdysx1 = lr_allocvalueschar -> value_char . WHEN 'B_0028' . \" \u81ea\u5b9a\u4e49\u5c5e\u60272 ls_item - zzdysx2 = lr_allocvalueschar -> value_char . WHEN 'B_0029' . \" \u81ea\u5b9a\u4e49\u5c5e\u60273 ls_item - zzdysx3 = lr_allocvalueschar -> value_char . WHEN OTHERS . ENDCASE . ENDLOOP . INSERT ls_item INTO TABLE result . ENDLOOP . ENDMETHOD . METHOD get_fiori_condition . DATA ls_condition LIKE LINE OF result . \" \u5b9a\u4ef7 DATA ( lt_komwbhd ) = mt_komwbhd . IF ms_komwbhk - knumv_sd IS NOT INITIAL . INSERT VALUE # ( knumv_mm = ms_komwbhk - knumv_sd ) INTO TABLE lt_komwbhd . ENDIF . LOOP AT lt_komwbhd REFERENCE INTO DATA ( lr_komwbhd ). SELECT SINGLE knumv , kposn , stunr , zaehk , kschl , kbetr , waers , kpein , kmein , kwert FROM prcd_elements WHERE knumv = @ lr_komwbhd -> knumv_mm INTO @ DATA ( ls_prcd_elements ). IF sy - subrc <> 0 . CONTINUE . ENDIF . CLEAR ls_condition . ls_condition - tkonn = lr_komwbhd -> tkonn . ls_condition - tposn = lr_komwbhd -> tposn . ls_condition - tposn_sub = lr_komwbhd -> tposn_sub . ls_condition - knumv = ls_prcd_elements - knumv . ls_condition - kposn = ls_prcd_elements - kposn . ls_condition - stunr = ls_prcd_elements - stunr . ls_condition - zaehk = ls_prcd_elements - zaehk . ls_condition - kschl = ls_prcd_elements - kschl . * LS_CONDITION-kschl_text = ls_prcd_elements-kschl_text . * LS_CONDITION-zzto_cost = ls_prcd_elements-zzto_cost . ls_condition - kbetr = ls_prcd_elements - kbetr . ls_condition - waers = ls_prcd_elements - waers . ls_condition - kpein = ls_prcd_elements - kpein . ls_condition - kmein = ls_prcd_elements - kmein . * LS_CONDITION-zzconvertion = ls_prcd_elements-zzconvertion. ls_condition - kwert = ls_prcd_elements - kwert . INSERT ls_condition INTO TABLE result . ENDLOOP . ENDMETHOD . METHOD get_fiori_related . ENDMETHOD . METHOD get_fiori_text . ENDMETHOD . ENDCLASS . *&---------------------------------------------------------------------* *& Class (Implementation) lcl_fiori_ctr_data *&---------------------------------------------------------------------* *& *&---------------------------------------------------------------------* CLASS lcl_fiori_ctr_data IMPLEMENTATION . METHOD read . IF contract_id IS SUPPLIED AND m_contract <> contract_id . m_contract = contract_id . mo_instance = NEW # ( ). DATA ( lo_wb2_ctr_data ) = lcl_wb2_ctr_data => read ( m_contract ). mo_instance -> ms_head = lo_wb2_ctr_data -> get_fiori_head ( ). mo_instance -> mt_partner = lo_wb2_ctr_data -> get_fiori_partner ( ). mo_instance -> mt_item = lo_wb2_ctr_data -> get_fiori_item ( ). mo_instance -> mt_condition = lo_wb2_ctr_data -> get_fiori_condition ( ). mo_instance -> mt_related = lo_wb2_ctr_data -> get_fiori_related ( ). mo_instance -> mt_text = lo_wb2_ctr_data -> get_fiori_text ( ). mo_instance -> mt_payment = mo_instance -> read_payment ( ). ENDIF . \" \u81f3\u5c11\u4fdd\u8bc1\u4e0ddump IF mo_instance IS NOT BOUND . mo_instance = NEW # ( ). ENDIF . result = mo_instance . ENDMETHOD . METHOD save_payment . DATA lt_zttcpt TYPE STANDARD TABLE OF zttcpt WITH EMPTY KEY . DATA ls_zttcpt TYPE zttcpt . LOOP AT mt_payment REFERENCE INTO DATA ( lr_payment ). CLEAR ls_zttcpt . ls_zttcpt - tkonn = m_contract . ls_zttcpt - zzxh = sy - tabix . ls_zttcpt - zzfktj = lr_payment -> zzterm . ls_zttcpt - zzsfkrq = lr_payment -> zzdate_last . ls_zttcpt - zzysfkje = lr_payment -> zzamount . ls_zttcpt - zwaers_purch = lr_payment -> zzcurrency . ls_zttcpt - zzsfk_remark = lr_payment -> zzpay_ex . INSERT ls_zttcpt INTO TABLE lt_zttcpt . ENDLOOP . DELETE FROM zttcpt WHERE tkonn = ms_head - tkonn . MODIFY zttcpt FROM TABLE lt_zttcpt . COMMIT WORK AND WAIT . ENDMETHOD . METHOD read_payment . DATA ( l_tkonn ) = contract_id . IF contract_id IS NOT SUPPLIED . l_tkonn = ms_head - tkonn . ENDIF . SELECT tkonn , zzxh , zzfktj AS zzterm , CAST ( zzsfkrq AS CHAR ( 10 ) ) AS zzdate_last , zzysfkje AS zzamount , zwaers_purch AS zzcurrency , zzsfk_remark AS zzpay_ex FROM zttcpt WHERE tkonn = @ l_tkonn INTO CORRESPONDING FIELDS OF TABLE @ mt_payment . result = mt_payment . ENDMETHOD . ENDCLASS . *&---------------------------------------------------------------------* *& Class (Implementation) lcl_bapi_ctr_create *&---------------------------------------------------------------------* *& *&---------------------------------------------------------------------* CLASS lcl_bapi_ctr_create IMPLEMENTATION . METHOD lif_bapi~execute . result = me . \" \u589e\u5f3a\u5b57\u6bb5\u957f\u5ea6\u5927\u4e8e960\uff0c\u65e0\u6cd5\u4f7f\u7528extensionin\u5b57\u6bb5 \" \u56e0\u6b64\u901a\u8fc7BAPI\u589e\u5f3a\u7684\u65b9\u5f0f\uff0c\u5c06\u503c\u4f20\u5165 \" \u7531\u4e8e\u662f\u9759\u6001\u53c2\u6570\uff0c\u7b49\u4ef7\u4e8e\u5185\u5b58\u4f20\u503c\uff0c\u800c\u4e14\u66f4\u597d\u7684\u6eaf\u6e90 zcl_im__wb2_bapi_enhance_ex => set_extension ( EXPORTING bapi_te_wbhk = ms_bapi_te_wbhk t_bapi_te_wbhi = mt_bapi_te_wbhi t_bapi_te_wbhd = mt_bapi_te_wbhd t_bapi_te_wbhe = mt_bapi_te_wbhe t_bapi_te_wbhp = mt_bapi_te_wbhp bapi_te_wbhkx = ms_bapi_te_wbhkx t_bapi_te_wbhix = mt_bapi_te_wbhix t_bapi_te_wbhdx = mt_bapi_te_wbhdx t_bapi_te_wbhex = mt_bapi_te_wbhex t_bapi_te_wbhpx = mt_bapi_te_wbhpx ). headdatain - testrun = testrun . SET PARAMETER ID 'BAPIHT' FIELD 'X' . \" BAPI\u521b\u5efa\u5408\u540c\uff0c\u7528\u4e8e\u8df3\u8fc7\u90e8\u5206\u6821\u9a8c CALL FUNCTION 'BAPI_TRADINGCONTRACT_CREATE' EXPORTING headdatain = headdatain IMPORTING headdataout = headdataout tradingcontractno = tradingcontractno TABLES itemdatain = itemdatain scheduledatain = scheduledatain businessdatain = businessdatain buspartyin = buspartyin extensionin = extensionin headtextin = headtextin itemtextin = itemtextin itemdataout = itemdataout scheduledataout = scheduledataout businessdataout = businessdataout buspartyout = buspartyout headtextout = headtextout itemtextout = itemtextout extensionout = extensionout return = return partneraddresses = partneraddresses vendorcondin = vendorcondin customercondin = customercondin conditionkeydatain = conditionkeydatain conditionkeydatainx = conditionkeydatainx conditionitemdatain = conditionitemdatain conditionitemdatainx = conditionitemdatainx conditionkeydataout = conditionkeydataout conditionitemdataout = conditionitemdataout scaledatain = scaledatain scaledataout = scaledataout vendorcondout = vendorcondout customercondout = customercondout . SET PARAMETER ID 'BAPIHT' FIELD '' . lif_bapi~document = tradingcontractno . lif_bapi~mt_bapiret2 = CORRESPONDING # ( return ). CALL FUNCTION 'Z_MESSAGE_TABLE_TO_FIELD' EXPORTING t_bapiret2 = lif_bapi~mt_bapiret2 IMPORTING status = lif_bapi~status message = lif_bapi~message . \" \u53d1\u751f\u9519\u8bef\u6216\u6d4b\u8bd5\u6267\u884c\u7684\u60c5\u51b5\uff0c\u4e0d\u63d0\u4ea4 IF lif_bapi~status = 'E' OR testrun = abap_true . CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK' . CLEAR lif_bapi~document . RETURN . ENDIF . \" \u6b63\u5f0f\u63d0\u4ea4 CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = abap_true . ENDMETHOD . METHOD set_head . DATA ( ls_head ) = input -> ms_head . \" \u62ac\u5934\u6570\u636e headdatain - tkonn_ex = ls_head - tkonn_ex . headdatain - trcont_type = ls_head - tctyp . headdatain - tew_type = ls_head - tew_type . headdatain - trcont_stat = ls_head - btbsta . headdatain - trcont_currency = ls_head - waers . headdatain - currency = ls_head - waers . headdatain - purch_no = ls_head - bstkd . headdatain - comp_code = ls_head - zzsign_platfrom . headdatain - sales_grp = ls_head - ekgrp . headdatain - sales_off = ls_head - ekorg . headdatain - sales_org = ls_head - zzsign_platfrom . headdatain - distr_chan = ls_head - vtweg . headdatain - division = ls_head - spart . IF headdatain - tew_type IS INITIAL . headdatain - tew_type = 'Z001' . ENDIF . IF headdatain - distr_chan IS INITIAL . headdatain - distr_chan = '10' . ENDIF . IF headdatain - division IS INITIAL . headdatain - division = '11' . ENDIF . \" \u62ac\u5934\u6570\u636e\u6269\u5c55\u5b57\u6bb5 ms_bapi_te_wbhk - vkgrp = ls_head - ekgrp . ms_bapi_te_wbhk - vkbur = ls_head - ekorg . ms_bapi_te_wbhk - tkonn_ex = ls_head - tkonn_ex . ms_bapi_te_wbhk - guarantee_f = ls_head - guarantee_f . ms_bapi_te_wbhk - ciq_lastdt = ls_head - ciq_lastdt . ms_bapi_te_wbhk - consnno = ls_head - consnno . ms_bapi_te_wbhk - zframe_tkonn = ls_head - zframe_tkonn . ms_bapi_te_wbhk - zzsndat = ls_head - zzsndat . ms_bapi_te_wbhk - zprictp = ls_head - zprictp . ms_bapi_te_wbhk - zzlsch_mm = ls_head - zzlsch_mm . ms_bapi_te_wbhk - zzlsch_txt_mm_n = ls_head - zzlsch_mm_ex . ms_bapi_te_wbhk - zzlsch_sd = ls_head - zzlsch_sd . ms_bapi_te_wbhk - zzlsch_txt_sd_n = ls_head - zzlsch_sd_ex . ms_bapi_te_wbhk - zzrpdate_end = ls_head - zzrpdate_end . * ms_bapi_te_wbhk-zzrpdate_end_ex = ls_head-zzrpdate_end_ex . ms_bapi_te_wbhk - zzamt01_mm = ls_head - zzamt01_mm . ms_bapi_te_wbhk - zzcur01_mm = ls_head - zzcur01_mm . * ms_bapi_te_wbhk-zzamt01_mm_ex = ls_head-zzamt01_mm_ex . ms_bapi_te_wbhk - zzpcode_src = ls_head - zzpcode_src . ms_bapi_te_wbhk - zzland1_src = ls_head - zzland1_src . ms_bapi_te_wbhk - zzpname_src = ls_head - zzpname_src . ms_bapi_te_wbhk - zzpcode_des = ls_head - zzpcode_des . ms_bapi_te_wbhk - zzland1_des = ls_head - zzland1_des . ms_bapi_te_wbhk - zzpname_des = ls_head - zzpname_des . ms_bapi_te_wbhk - zzpcode_tra = ls_head - zzpcode_tra . ms_bapi_te_wbhk - zzland1_tra = ls_head - zzland1_tra . ms_bapi_te_wbhk - zzpname_tra = ls_head - zzpname_tra . ms_bapi_te_wbhk - zzis_preins = ls_head - zzis_preins . ms_bapi_te_wbhk - zzzcdh_date = ls_head - zzreceived_data_last . ms_bapi_te_wbhk - zzlaycanq = ls_head - zzlaycan_from . ms_bapi_te_wbhk - zzlaycanz = ls_head - zzlaycan_to . * ms_bapi_te_wbhk-zzlogistics_ex = ls_head-zzlogistics_ex . ms_bapi_te_wbhk - zzbusst = ls_head - zzbusst . ms_bapi_te_wbhk - zzsnfile = ls_head - zzsnfile . ms_bapi_te_wbhk - zzsnflg = ls_head - zzsnflg . ms_bapi_te_wbhk - zzwd_tcdoc_flg = ls_head - zzwd_tcdoc_flg . ms_bapi_te_wbhk - zzyqd = ls_head - zzyqd . ms_bapi_te_wbhk - zzstpga_flg = ls_head - zzstpga_flg . ms_bapi_te_wbhk - zzgmyw_flg = ls_head - zzgmyw_flg . ms_bapi_te_wbhk - zzflexible = ls_head - zzflexible . ms_bapi_te_wbhk - zzwtcgp = ls_head - zzwtcgp . ms_bapi_te_wbhk - zzwtcgp_rt = ls_head - zzwtcgp_rt . * ms_bapi_te_wbhk-zzwtcgp_rt_ex = ls_head-zzwtcgp_rt_ex . * ms_bapi_te_wbhk-zztext1 = ls_head-zztext1 . * ms_bapi_te_wbhk-zztext2 = ls_head-zztext2 . ms_bapi_te_wbhk - zzwtc_fvdate = ls_head - zzwtc_fvdate . ms_bapi_te_wbhk - zzwtc_fvtime = ls_head - zzwtc_fvtime . ms_bapi_te_wbhk - zzwtc_fvapper = ls_head - zzwtc_fvapper . ms_bapi_te_wbhk - zzefeupt_date = ls_head - zzefeupt_date . ms_bapi_te_wbhk - zzefeupt_time = ls_head - zzefeupt_time . ms_bapi_te_wbhk - zzefeupt_name = ls_head - zzefeupt_apper . ms_bapi_te_wbhk - zzpreclo_date = ls_head - zzpreclo_date . ms_bapi_te_wbhk - zzpreclo_time = ls_head - zzpreclo_time . ms_bapi_te_wbhk - zzpreclo_name = ls_head - zzpreclo_apper . ms_bapi_te_wbhk - zznatclo_date = ls_head - zznatclo_date . ms_bapi_te_wbhk - zznatclo_time = ls_head - zznatclo_time . ms_bapi_te_wbhk - zznatclo_name = ls_head - zznatclo_apper . ms_bapi_te_wbhk - zzfdclo_date = ls_head - zzcancel_date . ms_bapi_te_wbhk - zzfdclo_time = ls_head - zzcancel_time . ms_bapi_te_wbhk - zzfdclo_name = ls_head - zzcancel_apper . * ms_bapi_te_wbhk-zzfield1 = ls_head-zzfield1 . * ms_bapi_te_wbhk-zzfield2 = ls_head-zzfield2 . * ms_bapi_te_wbhk-zzfield3 = ls_head-zzfield3 . * ms_bapi_te_wbhk-zzfield4 = ls_head-zzfield4 . * ms_bapi_te_wbhk-zzfield5 = ls_head-zzfield5 . * ms_bapi_te_wbhk-zzfield6 = ls_head-zzfield6 . * ms_bapi_te_wbhk-zzfield7 = ls_head-zzfield7 . * ms_bapi_te_wbhk-zzfield8 = ls_head-zzfield8 . * ms_bapi_te_wbhk-zzfield9 = ls_head-zzfield9 . ENDMETHOD . METHOD set_bussiness . DATA ( ls_head ) = input -> ms_head . \" \u4e1a\u52a1\u6570\u636e\u9996\u884c\u662f\u62ac\u5934\u7528\u7684 DATA ls_businessdatain TYPE bapitcbus . CLEAR ls_businessdatain . ls_businessdatain - vendor = ls_head - lifnr . ls_businessdatain - pmnttrms = ls_head - zterm . ls_businessdatain - currency = ls_head - waers . ls_businessdatain - exch_rate_p = ls_head - tkrate_mm . ls_businessdatain - exchg_rate = ls_head - kurst_mm . ls_businessdatain - exch_rate_v = ls_head - tkrate_sd . * ls_businessdatain-kurst_sd = ls_head-kurst_sd . ls_businessdatain - incoterms1 = ls_head - inco1_mm . ls_businessdatain - incoterms2 = ls_head - inco1_mm_ex . ls_businessdatain - incoterms1_sd = ls_head - inco1_sd . ls_businessdatain - incoterms2_sd = ls_head - inco1_sd_ex . ls_businessdatain - purch_org = ls_head - ekorg . ls_businessdatain - pur_group = ls_head - ekgrp . INSERT ls_businessdatain INTO TABLE businessdatain . \" \u65e5\u671f\u5904\u7406 DEFINE _clean_date . REPLACE ALL OCCURRENCES OF '[^0-9]' IN &1 WITH '' . IF &1 IS INITIAL . &1 = '00000000' . ENDIF . END-OF-DEFINITION . _clean_date ls_head - zzshipping_data_last . _clean_date ls_head - zzreceived_data_last . \" \u884c\u9879\u76ee\u589e\u5f3a\u7ed3\u6784 DATA ls_bapi_te_wbhd TYPE bapi_te_wbhd . CLEAR ls_bapi_te_wbhd . ls_bapi_te_wbhd - bstdk = ls_head - bstkd . ls_bapi_te_wbhd - edatu_vbak = ls_head - zzshipping_data_last . ls_bapi_te_wbhd - eindt = ls_head - zzreceived_data_last . INSERT ls_bapi_te_wbhd INTO TABLE mt_bapi_te_wbhd . ENDMETHOD . METHOD set_item . DATA ( ls_head ) = input -> ms_head . DATA ( lt_item ) = input -> mt_item . DATA ls_itemdatain TYPE bapitcitem . DATA ls_bapi_te_wbhi TYPE bapi_te_wbhi . \" \u884c\u9879\u76ee LOOP AT lt_item INTO DATA ( ls_item ). IF ls_item - tposn IS INITIAL . ls_item - tposn = sy - tabix * 10 . ENDIF . CLEAR ls_itemdatain . ls_itemdatain - trcont_item = ls_item - tposn . ls_itemdatain - trcont_subitem = ls_item - tposn_sub . ls_itemdatain - plant = ls_head - zzsign_platfrom . ls_itemdatain - material = ls_item - matnr . ls_itemdatain - material_long = ls_item - matnr . ls_itemdatain - short_text = ls_item - arktx . ls_itemdatain - req_qty = ls_item - menge . ls_itemdatain - ordered = ls_item - menge . ls_itemdatain - po_unit = ls_item - meins . ls_itemdatain - sales_price = ls_item - netpr_mm . ls_itemdatain - sales_unit = ls_item - meins . ls_itemdatain - currency = ls_item - waers_mm . ls_itemdatain - pur_price = ls_item - netpr_mm . ls_itemdatain - pur_currency = ls_item - waers_mm . ls_itemdatain - price_unit = ls_item - peinh_mm . ls_itemdatain - stge_loc = ls_item - lgort . INSERT ls_itemdatain INTO TABLE itemdatain . \" \u884c\u9879\u76ee\u589e\u5f3a\u7ed3\u6784 CLEAR ls_bapi_te_wbhi . ls_bapi_te_wbhi - trcont_item = ls_item - tposn . ls_bapi_te_wbhi - trcont_subitem = ls_item - tposn_sub . ls_bapi_te_wbhi - uebto_mm = ls_item - uebto_mm . ls_bapi_te_wbhi - untto_mm = ls_item - untto_mm . ls_bapi_te_wbhi - zprdcat = ls_item - zprdcat . ls_bapi_te_wbhi - zgrade = ls_item - zgrade . ls_bapi_te_wbhi - zzoland = ls_item - zoland . ls_bapi_te_wbhi - zfactory = ls_item - zfactory . ls_bapi_te_wbhi - ztechstd = ls_item - ztechstd . ls_bapi_te_wbhi - zccbz = ls_item - zccbz . ls_bapi_te_wbhi - zxnyy = ls_item - zxnyy . ls_bapi_te_wbhi - zyszjh = ls_item - zyszjh . ls_bapi_te_wbhi - zysdjh = ls_item - zysdjh . ls_bapi_te_wbhi - zbgdh = ls_item - zbgdh . ls_bapi_te_wbhi - zkwh = ls_item - zkwh . ls_bapi_te_wbhi - zscrq = ls_item - zscrq . ls_bapi_te_wbhi - zzdysx1 = ls_item - zzdysx1 . ls_bapi_te_wbhi - zzdysx2 = ls_item - zzdysx2 . ls_bapi_te_wbhi - zzdysx3 = ls_item - zzdysx3 . ls_bapi_te_wbhi - zpcmark = ls_item - zpcmark . INSERT ls_bapi_te_wbhi INTO TABLE mt_bapi_te_wbhi . ENDLOOP . ENDMETHOD . METHOD set_partner . DATA ( ls_head ) = input -> ms_head . DATA ( lt_partner ) = input -> mt_partner . DATA ls_buspartyin TYPE bapitcparty . DATA lr_buspartyin TYPE REF TO bapitcparty . DATA ls_bapi_te_wbhp TYPE bapi_te_wbhp . \" \u5408\u4f5c\u4f19\u4f34\u6570\u636e LOOP AT lt_partner INTO DATA ( ls_partner ). CLEAR ls_buspartyin . ls_buspartyin - trcont_item = ls_partner - tposn . ls_buspartyin - trcont_subitem = ls_partner - tposn_sub . ls_buspartyin - partn_role = ls_partner - parvw . ls_buspartyin - partcount = ls_partner - pstlz . ls_buspartyin - vendor_no = ls_partner - lifnr . ls_buspartyin - cust_no = ls_partner - kunnr . ls_buspartyin - address = ls_partner - adrnr . INSERT ls_buspartyin INTO TABLE buspartyin . ENDLOOP . \" \u91cd\u590d\u4ee3\u7801 \" &1: \u5408\u4f5c\u4f19\u4f34\u89d2\u8272 \" &2: \u4f9b\u5e94\u5546\u7f16\u7801 DEFINE _add_partner . IF &3 IS NOT INITIAL . READ TABLE buspartyin REFERENCE INTO lr_buspartyin WITH KEY partn_role = &2 . IF sy - subrc <> 0 . INSERT VALUE # ( partn_role = &2 ) INTO TABLE buspartyin REFERENCE INTO lr_buspartyin . ENDIF . lr_buspartyin -> &1 = &3 . ENDIF . END-OF-DEFINITION . DEFINE _add_partner_vendor . _add_partner vendor_no &1 &2 . END-OF-DEFINITION . \" \u5982\u679c\u5408\u540c\u4f19\u4f34\u4e2d\u6ca1\u8fd9\u4e9b\u5bf9\u8c61\uff0c\u5219\u6839\u636e\u62ac\u5934\u53d6\u503c _add_partner_vendor 'LF' ls_head - lifnr . _add_partner_vendor 'Z4' ls_head - lifnr2 . _add_partner_vendor 'Z1' ls_head - lifnr3 . _add_partner_vendor 'ZM' ls_head - lifnr4 . ENDMETHOD . METHOD set_condition . DATA ( ls_head ) = input -> ms_head . DATA ( lt_condition ) = input -> mt_condition . \" \u67e5\u8be2\u91c7\u8d2d\u5b9a\u4ef7\u8fc7\u7a0b SELECT SINGLE kalsk FROM lfm1 WHERE lifnr = @ ls_head - lifnr AND ekorg = @ ls_head - ekorg INTO @ DATA ( l_kalsk ). SELECT SINGLE kalsm FROM tmks WHERE kalse = '1000' AND kalsk = @ l_kalsk INTO @ DATA ( l_kalsm ). SELECT * FROM t683s WHERE kalsm = @ l_kalsm INTO TABLE @ DATA ( lt_pricing_process ). SORT lt_pricing_process BY kschl . \" \u91c7\u8d2d\uff08\u4f9b\u5e94\u5546\uff09\u5b9a\u4ef7 DATA ls_vendorcondin TYPE bapitccond . LOOP AT lt_condition INTO DATA ( ls_condition ). \" \u8865\u5168\u7f16\u7801 IF ls_condition - tposn IS INITIAL . ls_condition - tposn = sy - tabix * 10 . ENDIF . IF ls_condition - zaehk IS INITIAL . ls_condition - zaehk = '001' . ENDIF . \" \u83b7\u53d6\u6761\u4ef6\u7c7b\u578b\u5bf9\u5e94\u6761\u4ef6\u8fc7\u7a0b\u4e2d\u7684\u987a\u5e8f READ TABLE lt_pricing_process INTO DATA ( ls_pricing_process ) WITH KEY kschl = ls_condition - kschl BINARY SEARCH . IF sy - subrc <> 0 . CLEAR ls_pricing_process . ENDIF . CLEAR ls_vendorcondin . ls_vendorcondin - trcont_item = ls_condition - tposn . ls_vendorcondin - trcont_subitem = ls_condition - tposn_sub . ls_vendorcondin - cond_st_no = ls_pricing_process - stunr . ls_vendorcondin - cond_count = '001' . ls_vendorcondin - applicatio = ls_pricing_process - kappl . ls_vendorcondin - cond_type = ls_condition - kschl . ls_vendorcondin - cond_base = ls_condition - kbetr . ls_vendorcondin - currency = ls_condition - waers . ls_vendorcondin - cond_p_unt = ls_condition - kpein . ls_vendorcondin - cond_unit = ls_condition - kmein . INSERT ls_vendorcondin INTO TABLE vendorcondin . ENDLOOP . * \" \u8d39\u7528\u5b9a\u4ef7 * DATA ls_conditionkeydatain TYPE bapitcconditionkey. * DATA ls_conditionitemdatain TYPE bapitcconditionitem. * LOOP AT mt_condition INTO DATA(ls_condition). * DATA(l_order_key) = sy-tabix * 10. * * CLEAR ls_conditionkeydatain. * ls_conditionkeydatain-order_key = l_order_key. * ls_conditionkeydatain-application = 'M'. ** ls_conditionkeydatain-cond_group_no = 'G002'. * ls_conditionkeydatain-cond_type = ls_condition-kschl. * ls_conditionkeydatain-purch_org = ms_head-ekorg. * ls_conditionkeydatain-vendor = ms_head-lifnr. * INSERT ls_conditionkeydatain INTO TABLE conditionkeydatain. * * CLEAR ls_conditionitemdatain. * ls_conditionitemdatain-order_key = l_order_key. * ls_conditionitemdatain-cond_count = ls_condition-kposn. * ls_conditionitemdatain-amount = ls_condition-kbetr. * ls_conditionitemdatain-condcurr = ls_condition-waers. * ls_conditionitemdatain-cond_p_unt = ls_condition-kpein. * ls_conditionitemdatain-cond_unit = ls_condition-kmein. * INSERT ls_conditionitemdatain INTO TABLE conditionitemdatain. * ENDLOOP. ENDMETHOD . METHOD set_text . ENDMETHOD . ENDCLASS . *&---------------------------------------------------------------------* *& Class (Implementation) lcl_bapi_ctr_change *&---------------------------------------------------------------------* *& *&---------------------------------------------------------------------* CLASS lcl_bapi_ctr_change IMPLEMENTATION . METHOD lif_bapi~execute . result = me . \" \u589e\u5f3a\u5b57\u6bb5\u957f\u5ea6\u5927\u4e8e960\uff0c\u65e0\u6cd5\u4f7f\u7528extensionin\u5b57\u6bb5 \" \u56e0\u6b64\u901a\u8fc7BAPI\u589e\u5f3a\u7684\u65b9\u5f0f\uff0c\u5c06\u503c\u4f20\u5165 \" \u7531\u4e8e\u662f\u9759\u6001\u53c2\u6570\uff0c\u7b49\u4ef7\u4e8e\u5185\u5b58\u4f20\u503c\uff0c\u800c\u4e14\u66f4\u597d\u7684\u6eaf\u6e90 zcl_im__wb2_bapi_enhance_ex => set_extension ( EXPORTING bapi_te_wbhk = ms_bapi_te_wbhk t_bapi_te_wbhi = mt_bapi_te_wbhi t_bapi_te_wbhd = mt_bapi_te_wbhd t_bapi_te_wbhe = mt_bapi_te_wbhe t_bapi_te_wbhp = mt_bapi_te_wbhp bapi_te_wbhkx = ms_bapi_te_wbhkx t_bapi_te_wbhix = mt_bapi_te_wbhix t_bapi_te_wbhdx = mt_bapi_te_wbhdx t_bapi_te_wbhex = mt_bapi_te_wbhex t_bapi_te_wbhpx = mt_bapi_te_wbhpx ). headdatain - testrun = testrun . SET PARAMETER ID 'BAPIHT' FIELD 'X' . \" BAPI\u521b\u5efa\u5408\u540c\uff0c\u7528\u4e8e\u8df3\u8fc7\u90e8\u5206\u6821\u9a8c CALL FUNCTION 'BAPI_TRADINGCONTRACT_CHANGE' EXPORTING tradingcontractno = tradingcontractno headdatain = headdatain headdatainx = headdatainx IMPORTING headdataout = headdataout TABLES itemdatain = itemdatain itemdatainx = itemdatainx scheduledatain = scheduledatain scheduledatainx = scheduledatainx businessdatain = businessdatain businessdatainx = businessdatainx buspartyin = buspartyin buspartyinx = buspartyinx extensionin = extensionin headtextin = headtextin itemtextin = itemtextin itemdataout = itemdataout scheduledataout = scheduledataout businessdataout = businessdataout buspartyout = buspartyout headtextout = headtextout itemtextout = itemtextout extensionout = extensionout return = return partneraddresses = partneraddresses partnerchanges = partnerchanges vendorcondin = vendorcondin vendorcondinx = vendorcondinx customercondin = customercondin customercondinx = customercondinx conditionkeydatain = conditionkeydatain conditionkeydatainx = conditionkeydatainx conditionitemdatain = conditionitemdatain conditionitemdatainx = conditionitemdatainx conditionkeydataout = conditionkeydataout conditionitemdataout = conditionitemdataout scaledatain = scaledatain scaledataout = scaledataout vendorcondout = vendorcondout customercondout = customercondout . SET PARAMETER ID 'BAPIHT' FIELD '' . lif_bapi~document = tradingcontractno . lif_bapi~mt_bapiret2 = CORRESPONDING # ( return ). CALL FUNCTION 'Z_MESSAGE_TABLE_TO_FIELD' EXPORTING t_bapiret2 = lif_bapi~mt_bapiret2 IMPORTING status = lif_bapi~status message = lif_bapi~message . \" \u53d1\u751f\u9519\u8bef\u6216\u6d4b\u8bd5\u6267\u884c\u7684\u60c5\u51b5\uff0c\u4e0d\u63d0\u4ea4 IF lif_bapi~status = 'E' OR testrun = abap_true . CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK' . CLEAR lif_bapi~document . RETURN . ENDIF . \" \u6b63\u5f0f\u63d0\u4ea4 CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = abap_true . ENDMETHOD . METHOD set_head . \" \u83b7\u53d6\u65e7\u6570\u636e DATA ( lo_old ) = lcl_fiori_ctr_data => read ( input -> ms_head - tkonn ). DATA ( lo_new ) = input . \" \u6bd4\u8f83\u5dee\u5f02 DATA lt_compare TYPE STANDARD TABLE OF zscompare_result . CALL FUNCTION 'Z_COMPARE_STRUCTURE' EXPORTING old = lo_old -> ms_head new = lo_new -> ms_head TABLES result = lt_compare . LOOP AT lt_compare REFERENCE INTO DATA ( lr_compare ) WHERE valid = abap_true AND changed = abap_true . CASE lr_compare -> name . WHEN 'BTBSTA ' . MOVE lr_compare -> value_new TO headdatain - trcont_stat . WHEN 'WAERS ' . MOVE lr_compare -> value_new TO headdatain - trcont_currency . MOVE lr_compare -> value_new TO headdatain - currency . WHEN 'BSTKD ' . MOVE lr_compare -> value_new TO headdatain - purch_no . * WHEN 'ZZSIGN_PLATFROM'. * MOVE lr_compare->value_new TO headdatain-comp_code . * MOVE lr_compare->value_new TO headdatain-sales_org . * WHEN 'EKGRP '. * MOVE lr_compare->value_new TO headdatain-sales_grp . * WHEN 'EKORG '. * MOVE lr_compare->value_new TO headdatain-sales_off . * WHEN 'VTWEG '. * MOVE lr_compare->value_new TO headdatain-distr_chan . * WHEN 'SPART '. * MOVE lr_compare->value_new TO headdatain-division . WHEN OTHERS . ENDCASE . ENDLOOP . \" BAPIX\u7ed3\u6784\u81ea\u52a8\u6253X CALL FUNCTION 'Z_SAME_FIELD_MARK' CHANGING data = headdatain datax = headdatainx . ENDMETHOD . METHOD set_bussiness . \" \u83b7\u53d6\u65e7\u6570\u636e DATA ( lo_old ) = lcl_fiori_ctr_data => read ( input -> ms_head - tkonn ). DATA ( lo_new ) = input . \" \u6bd4\u8f83\u5dee\u5f02 DATA lt_compare TYPE STANDARD TABLE OF zscompare_result . CALL FUNCTION 'Z_COMPARE_STRUCTURE' EXPORTING old = lo_old -> ms_head new = lo_new -> ms_head TABLES result = lt_compare . DATA ls_businessdatain LIKE LINE OF businessdatain . DATA ls_businessdatainx LIKE LINE OF businessdatainx . LOOP AT lt_compare REFERENCE INTO DATA ( lr_compare ) WHERE valid = abap_true AND changed = abap_true . CASE lr_compare -> name . WHEN 'LIFNR ' . MOVE lr_compare -> value_new TO ls_businessdatain - vendor . WHEN 'ZTERM ' . MOVE lr_compare -> value_new TO ls_businessdatain - pmnttrms . WHEN 'WAERS ' . MOVE lr_compare -> value_new TO ls_businessdatain - currency . WHEN 'TKRATE_MM ' . MOVE lr_compare -> value_new TO ls_businessdatain - exch_rate_p . WHEN 'KURST_MM ' . MOVE lr_compare -> value_new TO ls_businessdatain - exchg_rate . WHEN 'TKRATE_SD ' . MOVE lr_compare -> value_new TO ls_businessdatain - exch_rate_v . WHEN 'INCO1_MM ' . MOVE lr_compare -> value_new TO ls_businessdatain - incoterms1 . WHEN 'INCO1_MM_EX' . MOVE lr_compare -> value_new TO ls_businessdatain - incoterms2 . WHEN 'INCO1_SD ' . MOVE lr_compare -> value_new TO ls_businessdatain - incoterms1_sd . WHEN 'INCO1_SD_EX' . MOVE lr_compare -> value_new TO ls_businessdatain - incoterms2_sd . * WHEN 'EKORG '. * MOVE lr_compare->value_new TO ls_businessdatain-purch_org . * WHEN 'EKGRP '. * MOVE lr_compare->value_new TO ls_businessdatain-pur_group . WHEN OTHERS . ENDCASE . ENDLOOP . \" BAPIX\u7ed3\u6784\u81ea\u52a8\u6253X CALL FUNCTION 'Z_SAME_FIELD_MARK' CHANGING data = ls_businessdatain datax = ls_businessdatainx . INSERT ls_businessdatain INTO TABLE businessdatain . INSERT ls_businessdatainx INTO TABLE businessdatainx . ENDMETHOD . METHOD set_item . \" \u83b7\u53d6\u65e7\u6570\u636e DATA ( lo_old ) = lcl_fiori_ctr_data => read ( input -> ms_head - tkonn ). DATA ( lo_new ) = input . DATA lt_compare TYPE STANDARD TABLE OF zscompare_result . DATA ls_itemdatain LIKE LINE OF itemdatain . DATA ls_itemdatainx LIKE LINE OF itemdatainx . LOOP AT lo_new -> mt_item INTO DATA ( ls_item_new ). READ TABLE lo_old -> mt_item INTO DATA ( ls_item_old ) WITH KEY tposn = ls_item_new - tposn tposn_sub = ls_item_new - tposn_sub . \" \u65b0\u589e\u884c IF sy - subrc <> 0 . ls_item_new - updateflag = 'I' . CLEAR ls_item_old . ENDIF . * \" \u65e7\u884c\u5df2\u5220\u9664\uff0c\u65b0\u589e\u4e00\u884c * IF ls_item_old-updateflag = 'D'. * ls_item_new-updateflag = 'I'. * CLEAR ls_item_old. * ENDIF. \" \u6bd4\u8f83\u5dee\u5f02 CLEAR lt_compare . CALL FUNCTION 'Z_COMPARE_STRUCTURE' EXPORTING old = ls_item_old new = ls_item_new TABLES result = lt_compare . ls_itemdatain - trcont_item = ls_item_new - tposn . ls_itemdatain - trcont_subitem = ls_item_new - tposn_sub . IF lo_old -> ms_head - zzsign_platfrom <> lo_new -> ms_head - zzsign_platfrom . ls_itemdatain - plant = lo_new -> ms_head - zzsign_platfrom . ENDIF . LOOP AT lt_compare REFERENCE INTO DATA ( lr_compare ) WHERE valid = abap_true AND changed = abap_true . CASE lr_compare -> name . WHEN 'MATNR ' . MOVE lr_compare -> value_new TO ls_itemdatain - material . WHEN 'ARKTX ' . MOVE lr_compare -> value_new TO ls_itemdatain - short_text . WHEN 'MENGE ' . MOVE lr_compare -> value_new TO ls_itemdatain - req_qty . WHEN 'MENGE ' . MOVE lr_compare -> value_new TO ls_itemdatain - ordered . WHEN 'MEINS ' . MOVE lr_compare -> value_new TO ls_itemdatain - po_unit . WHEN 'NETPR_MM' . MOVE lr_compare -> value_new TO ls_itemdatain - sales_price . WHEN 'MEINS ' . MOVE lr_compare -> value_new TO ls_itemdatain - sales_unit . WHEN 'WAERS_MM' . MOVE lr_compare -> value_new TO ls_itemdatain - currency . WHEN 'NETPR_MM' . MOVE lr_compare -> value_new TO ls_itemdatain - pur_price . WHEN 'WAERS_MM' . MOVE lr_compare -> value_new TO ls_itemdatain - pur_currency . WHEN 'PEINH_MM' . MOVE lr_compare -> value_new TO ls_itemdatain - price_unit . WHEN 'LGORT ' . MOVE lr_compare -> value_new TO ls_itemdatain - stge_loc . WHEN OTHERS . ENDCASE . ENDLOOP . \" \u81ea\u52a8\u6253X CALL FUNCTION 'Z_SAME_FIELD_MARK' CHANGING data = ls_itemdatain datax = ls_itemdatainx . ls_itemdatainx - updateflag = ls_item_new - updateflag . INSERT ls_itemdatain INTO TABLE itemdatain . INSERT ls_itemdatainx INTO TABLE itemdatainx . ENDLOOP . ENDMETHOD . METHOD set_condition . \" \u83b7\u53d6\u65e7\u6570\u636e DATA ( lo_old ) = lcl_fiori_ctr_data => read ( input -> ms_head - tkonn ). DATA ( lo_new ) = input . DATA lt_compare TYPE STANDARD TABLE OF zscompare_result . DATA ls_vendorcondin LIKE LINE OF vendorcondin . DATA ls_vendorcondinx LIKE LINE OF vendorcondinx . \" \u67e5\u8be2\u91c7\u8d2d\u5b9a\u4ef7\u8fc7\u7a0b SELECT SINGLE kalsk FROM lfm1 WHERE lifnr = @ lo_old -> ms_head - lifnr AND ekorg = @ lo_old -> ms_head - ekorg INTO @ DATA ( l_kalsk ). SELECT SINGLE kalsm FROM tmks WHERE kalse = '1000' AND kalsk = @ l_kalsk INTO @ DATA ( l_kalsm ). SELECT * FROM t683s WHERE kalsm = @ l_kalsm INTO TABLE @ DATA ( lt_pricing_process ). SORT lt_pricing_process BY kschl . \" \u91c7\u8d2d\uff08\u4f9b\u5e94\u5546\uff09\u5b9a\u4ef7 LOOP AT lo_new -> mt_condition INTO DATA ( ls_condition_new ). READ TABLE lo_old -> mt_condition INTO DATA ( ls_condition_old ) WITH KEY tposn = ls_condition_new - tposn tposn_sub = ls_condition_new - tposn_sub knumv = ls_condition_new - knumv kposn = ls_condition_new - kposn stunr = ls_condition_new - stunr zaehk = ls_condition_new - zaehk . \" \u65b0\u589e\u884c IF sy - subrc <> 0 . ls_condition_new - updateflag = 'I' . CLEAR ls_condition_new . ENDIF . ls_vendorcondin - trcont_item = ls_condition_new - tposn . ls_vendorcondin - trcont_subitem = ls_condition_new - tposn_sub . ls_vendorcondin - cond_st_no = ls_condition_new - stunr . ls_vendorcondin - cond_count = ls_condition_new - zaehk . LOOP AT lt_compare REFERENCE INTO DATA ( lr_compare ) WHERE valid = abap_true AND changed = abap_true . CASE lr_compare -> name . WHEN 'KBETR' . MOVE lr_compare -> value_new TO ls_vendorcondin - cond_base . WHEN 'WAERS' . MOVE lr_compare -> value_new TO ls_vendorcondin - currency . WHEN 'KPEIN' . MOVE lr_compare -> value_new TO ls_vendorcondin - cond_p_unt . WHEN 'KMEIN' . MOVE lr_compare -> value_new TO ls_vendorcondin - cond_unit . WHEN OTHERS . ENDCASE . ENDLOOP . CALL FUNCTION 'Z_SAME_FIELD_MARK' CHANGING data = ls_vendorcondin datax = ls_vendorcondinx . ls_vendorcondinx - updateflag = ls_condition_new - updateflag . INSERT ls_vendorcondin INTO TABLE vendorcondin . INSERT ls_vendorcondinx INTO TABLE vendorcondinx . ENDLOOP . ENDMETHOD . METHOD set_partner . \" \u83b7\u53d6\u65e7\u6570\u636e DATA ( lo_old ) = lcl_fiori_ctr_data => read ( input -> ms_head - tkonn ). DATA ( lo_new ) = input . DATA lt_compare TYPE STANDARD TABLE OF zscompare_result . DATA ls_partner_old LIKE LINE OF lo_old -> mt_partner . DATA ls_partner_new LIKE LINE OF lo_new -> mt_partner . DATA ls_buspartyin LIKE LINE OF buspartyin . DATA ls_buspartyinx LIKE LINE OF buspartyinx . \" \u5408\u4f5c\u4f19\u4f34\u6570\u636e DEFINE _to_partner . READ TABLE lo_new -> mt_partner INTO ls_partner_new WITH KEY parvw = &1 . IF sy - subrc <> 0 . ls_partner_new = VALUE # ( parvw = &1 updateflag = 'I' lifnr = lo_new -> ms_head - &2 ). ENDIF . READ TABLE lo_old -> mt_partner INTO ls_partner_old WITH KEY parvw = &1 . IF sy - subrc = 0 . ls_partner_new - updateflag = 'U' . ENDIF . END-OF-DEFINITION . \" \u5982\u679c\u5408\u540c\u4f19\u4f34\u4e2d\u6ca1\u8fd9\u4e9b\u5bf9\u8c61\uff0c\u5219\u6839\u636e\u62ac\u5934\u53d6\u503c _to_partner 'LF' lifnr . _to_partner 'Z4' lifnr2 . _to_partner 'Z1' lifnr3 . _to_partner 'ZM' lifnr4 . LOOP AT lo_new -> mt_partner INTO ls_partner_new . READ TABLE lo_old -> mt_partner INTO ls_partner_old WITH KEY tposn = ls_partner_new - tposn tposn_sub = ls_partner_new - tposn_sub parvw = ls_partner_new - parvw . \" \u65b0\u589e\u884c IF sy - subrc <> 0 . ls_partner_new - updateflag = 'I' . CLEAR ls_partner_old . ENDIF . \" \u6bd4\u8f83\u5dee\u5f02 CLEAR lt_compare . CALL FUNCTION 'Z_COMPARE_STRUCTURE' EXPORTING old = ls_partner_old new = ls_partner_new TABLES result = lt_compare . ls_buspartyin - trcont_item = ls_partner_new - tposn . ls_buspartyin - trcont_subitem = ls_partner_new - tposn_sub . ls_buspartyin - partn_role = ls_partner_new - parvw . ls_buspartyin - partcount = ls_partner_new - pstlz . LOOP AT lt_compare REFERENCE INTO DATA ( lr_compare ) WHERE valid = abap_true AND changed = abap_true . CASE lr_compare -> name . WHEN 'LIFNR ' . MOVE lr_compare -> value_new TO ls_buspartyin - vendor_no . WHEN 'KUNNR ' . MOVE lr_compare -> value_new TO ls_buspartyin - cust_no . WHEN OTHERS . ENDCASE . ENDLOOP . CALL FUNCTION 'Z_SAME_FIELD_MARK' CHANGING data = ls_buspartyin datax = ls_buspartyinx . ls_buspartyinx - updateflag = ls_partner_new - updateflag . INSERT ls_buspartyin INTO TABLE buspartyin . INSERT ls_buspartyinx INTO TABLE buspartyinx . ENDLOOP . ENDMETHOD . METHOD set_text . ENDMETHOD . ENDCLASS . *&---------------------------------------------------------------------* *& Class (Implementation) lcl_contract_service *&---------------------------------------------------------------------* *& *&---------------------------------------------------------------------* CLASS lcl_contract_service IMPLEMENTATION . METHOD create . DATA ( lo_fiori_ctr_data ) = data . DATA ( lo_bapi_ctr_create ) = NEW lcl_bapi_ctr_create ( ). lo_bapi_ctr_create -> set_head ( lo_fiori_ctr_data ). lo_bapi_ctr_create -> set_item ( lo_fiori_ctr_data ). lo_bapi_ctr_create -> set_bussiness ( lo_fiori_ctr_data ). lo_bapi_ctr_create -> set_partner ( lo_fiori_ctr_data ). lo_bapi_ctr_create -> set_condition ( lo_fiori_ctr_data ). lo_bapi_ctr_create -> set_text ( lo_fiori_ctr_data ). \" \u6267\u884c\u521b\u5efabapi DATA ( lo_bapi ) = lo_bapi_ctr_create -> lif_bapi~execute ( testrun = abap_true ). IF lo_bapi -> status <> 'E' . lo_bapi = lo_bapi -> execute ( ). ENDIF . \" \u66f4\u65b0\u4ed8\u6b3e\u4fe1\u606f IF lo_bapi -> status = 'S' . lo_fiori_ctr_data -> save_payment ( ). ENDIF . contract = lo_bapi -> document . status = lo_bapi -> status . message = lo_bapi -> message . ENDMETHOD . METHOD change . DATA ( lo_fiori_ctr_data ) = data . DATA ( lo_bapi_ctr_change ) = NEW lcl_bapi_ctr_change ( ). lo_bapi_ctr_change -> set_head ( lo_fiori_ctr_data ). lo_bapi_ctr_change -> set_item ( lo_fiori_ctr_data ). lo_bapi_ctr_change -> set_bussiness ( lo_fiori_ctr_data ). lo_bapi_ctr_change -> set_partner ( lo_fiori_ctr_data ). lo_bapi_ctr_change -> set_condition ( lo_fiori_ctr_data ). lo_bapi_ctr_change -> set_text ( lo_fiori_ctr_data ). \" \u6267\u884c\u521b\u5efabapi DATA ( lo_bapi ) = lo_bapi_ctr_change -> lif_bapi~execute ( testrun = abap_true ). IF lo_bapi -> status <> 'E' . lo_bapi = lo_bapi -> execute ( ). ENDIF . \" \u66f4\u65b0\u4ed8\u6b3e\u4fe1\u606f IF lo_bapi -> status = 'S' . lo_fiori_ctr_data -> save_payment ( ). ENDIF . contract = lo_bapi -> document . status = lo_bapi -> status . message = lo_bapi -> message . ENDMETHOD . ENDCLASS . WB2_BAPI_ENHANCE_EX \uff1a\u5408\u540c\u589e\u5f3a WB2_TC_INCOMP_LOG \uff0c\u5408\u540c\u4e0d\u5b8c\u6574\u65e5\u5fd7\u589e\u5f3a","title":"\u8d38\u6613\u5408\u540c\u521b\u5efa\u4e0e\u4fee\u6539"},{"location":"gtm/contract/#_3","text":"","title":"\u5408\u540c\u5173\u95ed"},{"location":"gtm/contract_approval/","text":"\u5408\u540c\u5ba1\u6279 \u00b6 \u5408\u540c\u5ba1\u6279 \u00b6 WB2_CONTRACT_RELEASE \uff1a\u5408\u540c\u5ba1\u6279\uff0c\u5408\u540c\u5ba1\u6279\u540e\u4f1a\u81ea\u52a8\u521b\u5efa\u540e\u7eed\u8ba2\u5355\uff08\u91c7\u8d2d\u8ba2\u5355\u548c\u9500\u552e\u8ba2\u5355\uff09","title":"\u5408\u540c\u5ba1\u6279"},{"location":"gtm/contract_approval/#_1","text":"","title":"\u5408\u540c\u5ba1\u6279"},{"location":"gtm/contract_approval/#_2","text":"WB2_CONTRACT_RELEASE \uff1a\u5408\u540c\u5ba1\u6279\uff0c\u5408\u540c\u5ba1\u6279\u540e\u4f1a\u81ea\u52a8\u521b\u5efa\u540e\u7eed\u8ba2\u5355\uff08\u91c7\u8d2d\u8ba2\u5355\u548c\u9500\u552e\u8ba2\u5355\uff09","title":"\u5408\u540c\u5ba1\u6279"},{"location":"gtm/contract_assoc/","text":"\u5408\u540c\u5173\u8054 \u00b6 \u5728\u5408\u540c\u521b\u5efa\u6216\u4fee\u6539\u540e\uff0c\u7acb\u5373\u8fdb\u884c\u5408\u540c\u5173\u8054\uff0c\u6709\u65f6\u4f1a\u62a5\u9519\uff0c\u4f46\u4e0d\u80fd\u7a33\u5b9a\u590d\u73b0\uff0c\u81f3\u4eca\u6ca1\u6ca1\u627e\u5230\u539f\u56e0\u3002","title":"\u5408\u540c\u5173\u8054"},{"location":"gtm/contract_assoc/#_1","text":"\u5728\u5408\u540c\u521b\u5efa\u6216\u4fee\u6539\u540e\uff0c\u7acb\u5373\u8fdb\u884c\u5408\u540c\u5173\u8054\uff0c\u6709\u65f6\u4f1a\u62a5\u9519\uff0c\u4f46\u4e0d\u80fd\u7a33\u5b9a\u590d\u73b0\uff0c\u81f3\u4eca\u6ca1\u6ca1\u627e\u5230\u539f\u56e0\u3002","title":"\u5408\u540c\u5173\u8054"},{"location":"gtm/wtew/","text":"WTEW\u5de5\u4f5c\u53f0 \u00b6","title":"WTEW"},{"location":"gtm/wtew/#wtew","text":"","title":"WTEW\u5de5\u4f5c\u53f0"},{"location":"master_data/","text":"\u4e3b\u6570\u636e\u6982\u8ff0 \u00b6 \u8bb2\u8ff0\u5404\u7c7b\u4e3b\u6570\u636e\u7684\u7ef4\u62a4\u3002 \u5148\u8868\u660e\uff0c\u9664\u901a\u5e38\u5bfc\u5165\u65b9\u6848\u5916\uff0c\u6211\u8fd8\u5c06\u8bbe\u8ba1\u4e00\u79cd\u53e6\u4e00\u79cd\u5bfc\u5165\u65b9\u6848\uff0c\u611f\u5174\u8da3\u53ef\u4ee5\u7ee7\u7eed\u9605\u8bfb\u672c\u9875\u3002 \u6709\u4ec0\u4e48\u7279\u6b8a\uff1f \u00b6 \u505a\u4e2a\u601d\u7ef4\u5b9e\u9a8c\uff0c\u73b0\u6709\u4e00\u7ec4\u6570\u636e\uff0c\u8981\u5bfc\u5165\u5bf9\u5e94\u6570\u636e\u5e93\u8868\u3002 \u7528\u6237\u63d0\u51fa\u7b2c\u4e00\u4e2a\u9700\u6c42\uff1a\u201c \u4ec5\u9700 \u8fd9\u4e9b\u5b57\u6bb5\u201d\uff0c\u4e0d\u96be\uff0c\u4e0d\u5199\u6216\u6ce8\u91ca\u5176\u4ed6\u5b57\u6bb5\u5373\u53ef\u3002 \u7528\u6237\u63d0\u51fa\u7b2c\u4e8c\u4e2a\u9700\u6c42\uff1a\u201c \u67d0\u79cd\u60c5\u51b5\u4e0b \u624d\u5bfc\u5165\u8fd9\u4e9b\u5b57\u6bb5\u201d\uff0c\u4e5f\u4e0d\u96be\uff0c\u591a\u52a0\u51e0\u4e2a\u5224\u65ad\u5373\u53ef\u3002 \u53ef\u4ee5\u53d1\u73b0\uff0c\u4e3b\u6570\u636e\u5bfc\u5165\u7684\u9ebb\u70e6\u4e0d\u5728\u4e8e\u5bfc\u5165\uff0c\u800c\u662f\u63a7\u5236\u5b57\u6bb5\u662f\u5426\u5bfc\u5165\u3002\u56e0\u6b64\u8bbe\u8ba1\u7684\u65f6\u5019\uff0c\u4e5f\u5e94\u8be5\u4ee5 \u63a7\u5236\u5b57\u6bb5\u662f\u5426\u5bfc\u5165 \u4e3a\u6838\u5fc3\u3002 \u4e3b\u6570\u636e\u5bfc\u5165\uff0c\u591a\u6570\u90fd\u4f1a\u8981\u6c42\u65e5\u5fd7\u4fe1\u606f\uff0c\u8fd9\u4e2a\u4e0d\u662f\u6587\u6863\u8981\u6574\u7406\u7684\uff0c\u770b\u81ea\u5df1\u8bbe\u8ba1\u3002","title":"\u4e3b\u6570\u636e\u6982\u8ff0"},{"location":"master_data/#_1","text":"\u8bb2\u8ff0\u5404\u7c7b\u4e3b\u6570\u636e\u7684\u7ef4\u62a4\u3002 \u5148\u8868\u660e\uff0c\u9664\u901a\u5e38\u5bfc\u5165\u65b9\u6848\u5916\uff0c\u6211\u8fd8\u5c06\u8bbe\u8ba1\u4e00\u79cd\u53e6\u4e00\u79cd\u5bfc\u5165\u65b9\u6848\uff0c\u611f\u5174\u8da3\u53ef\u4ee5\u7ee7\u7eed\u9605\u8bfb\u672c\u9875\u3002","title":"\u4e3b\u6570\u636e\u6982\u8ff0"},{"location":"master_data/#_2","text":"\u505a\u4e2a\u601d\u7ef4\u5b9e\u9a8c\uff0c\u73b0\u6709\u4e00\u7ec4\u6570\u636e\uff0c\u8981\u5bfc\u5165\u5bf9\u5e94\u6570\u636e\u5e93\u8868\u3002 \u7528\u6237\u63d0\u51fa\u7b2c\u4e00\u4e2a\u9700\u6c42\uff1a\u201c \u4ec5\u9700 \u8fd9\u4e9b\u5b57\u6bb5\u201d\uff0c\u4e0d\u96be\uff0c\u4e0d\u5199\u6216\u6ce8\u91ca\u5176\u4ed6\u5b57\u6bb5\u5373\u53ef\u3002 \u7528\u6237\u63d0\u51fa\u7b2c\u4e8c\u4e2a\u9700\u6c42\uff1a\u201c \u67d0\u79cd\u60c5\u51b5\u4e0b \u624d\u5bfc\u5165\u8fd9\u4e9b\u5b57\u6bb5\u201d\uff0c\u4e5f\u4e0d\u96be\uff0c\u591a\u52a0\u51e0\u4e2a\u5224\u65ad\u5373\u53ef\u3002 \u53ef\u4ee5\u53d1\u73b0\uff0c\u4e3b\u6570\u636e\u5bfc\u5165\u7684\u9ebb\u70e6\u4e0d\u5728\u4e8e\u5bfc\u5165\uff0c\u800c\u662f\u63a7\u5236\u5b57\u6bb5\u662f\u5426\u5bfc\u5165\u3002\u56e0\u6b64\u8bbe\u8ba1\u7684\u65f6\u5019\uff0c\u4e5f\u5e94\u8be5\u4ee5 \u63a7\u5236\u5b57\u6bb5\u662f\u5426\u5bfc\u5165 \u4e3a\u6838\u5fc3\u3002 \u4e3b\u6570\u636e\u5bfc\u5165\uff0c\u591a\u6570\u90fd\u4f1a\u8981\u6c42\u65e5\u5fd7\u4fe1\u606f\uff0c\u8fd9\u4e2a\u4e0d\u662f\u6587\u6863\u8981\u6574\u7406\u7684\uff0c\u770b\u81ea\u5df1\u8bbe\u8ba1\u3002","title":"\u6709\u4ec0\u4e48\u7279\u6b8a\uff1f"},{"location":"master_data/bom/","text":"BOM \u00b6 \\SAP\u83dc\u5355\\\u540e\u52e4\\\u751f\u4ea7\\\u4e3b\u6570\u636e\\\u7269\u6599\u6e05\u5355\\BOM BOM\u79cd\u7c7b\u4e0d\u5c11\uff0c\u8be6\u89c1\u7269\u6599\u6e05\u5355\u7c7b\u522b\u503c\u57df\uff1a STLTY \u8bf4\u660e1 \u8bf4\u660e2 M Material BOM \u7269\u6599 BOM E Equipment BOM \u8bbe\u5907 BOM P Work Breakdown Structure BOM WBS BOM S Standard BOM \u6807\u51c6\u7269\u6599\u6e05\u5355 K Order BOM \u8ba2\u5355\u7269\u6599\u6e05\u5355 D Document Structure \u51ed\u8bc1\u7ed3\u6784 T Functional Location BOM \u529f\u80fd\u4f4d\u7f6e BOM BOM\u7ef4\u62a4 \u00b6 \u521b\u5efa\u53d8\u66f4\u53f7 \u00b6 CCAP_ECN_CREATE \uff1a\u521b\u5efa\u53d8\u66f4\u53f7 \u793a\u4f8b\u4ee3\u7801 FUNCTION zfm_ecn_check IMPORTING i_datuv TYPE datuv i_verid TYPE verid EXPORTING e_change_no TYPE aennr e_mtype TYPE bapi_mtype e_msg TYPE bapi_msg . IF i_datuv IS INITIAL OR i_datuv = '' . e_mtype = 'E' . e_msg = | [\u7248\u672c\u542f\u7528\u65f6\u95f4]\u4e3a\u7a7a |. RETURN . ENDIF . IF i_verid IS INITIAL . e_mtype = 'E' . e_msg = | [\u751f\u4ea7\u7248\u672c]\u4e3a\u7a7a |. RETURN . ENDIF . \" \u66f4\u6539\u53f7\u53ef\u4ee5\u968f\u610f\u7f16\u5199\uff0c\u4e00\u822c\u7528\u65e5\u671f+\u7248\u672c\u751f\u6210 DATA l_change_no TYPE aenr_api01 - change_no . l_change_no = |{ i_datuv }{ i_verid }|. CALL FUNCTION 'CONVERSION_EXIT_AENNR_INPUT' EXPORTING input = l_change_no IMPORTING output = l_change_no EXCEPTIONS length_error = 1 . \" \u68c0\u67e5\u66f4\u6539\u53f7\u662f\u5426\u5b58\u5728 SELECT SINGLE COUNT ( * ) FROM aenr WHERE aennr = @ l_change_no . IF sy - subrc = 0 . e_change_no = l_change_no . e_mtype = 'S' . RETURN . ENDIF . \" \u4e0d\u5b58\u5728\u5219\u521b\u5efa DATA : ls_header TYPE aenr_api01 , ls_object_bom TYPE aenv_api01 , ls_object_bom_mat TYPE aenv_api01 , ls_object_bom_psp TYPE aenv_api01 , ls_object_tlist_n TYPE aenv_api01 , ls_object_tlist_q TYPE aenv_api01 , ls_object_char TYPE aenv_api01 , ls_object_cls TYPE aenv_api01 , lv_number TYPE aenrb - aennr . ls_header - change_no = l_change_no . ls_header - status = '01' . ls_header - valid_from = |{ i_datuv DATE = USER }|. \" \u4e0b\u9762FM\u9700\u8981\u5916\u90e8\u683c\u5f0f ls_header - descript = | BOM/\u5de5\u827a\u6570\u636e\u7ef4\u62a4 |. ls_object_bom - active = 'X' . ls_object_bom_mat - active = 'X' . ls_object_bom_mat - obj_requ = 'X' . ls_object_bom_mat - mgtrec_gen = 'X' . ls_object_bom_psp - active = 'X' . ls_object_bom_psp - obj_requ = 'X' . ls_object_bom_psp - mgtrec_gen = 'X' . ls_object_tlist_n - active = 'X' . ls_object_tlist_n - obj_requ = 'X' . ls_object_tlist_n - mgtrec_gen = 'X' . ls_object_tlist_q - active = 'X' . ls_object_tlist_q - obj_requ = 'X' . ls_object_tlist_q - mgtrec_gen = 'X' . ls_object_char - active = 'X' . ls_object_cls - active = 'X' . SET UPDATE TASK LOCAL . \" \u521b\u5efaECN CLEAR l_change_no . CALL FUNCTION 'CCAP_ECN_CREATE' EXPORTING change_header = ls_header object_bom = ls_object_bom object_bom_mat = ls_object_bom_mat object_bom_psp = ls_object_bom_psp object_tlist_n = ls_object_tlist_n object_tlist_q = ls_object_tlist_q object_char = ls_object_char object_cls = ls_object_cls fl_commit_and_wait = 'X' IMPORTING change_no = l_change_no EXCEPTIONS change_no_already_exists = 1 error = 2 OTHERS = 3 . IF sy - subrc <> 0 . e_mtype = 'E' . MESSAGE ID sy - msgid TYPE sy - msgty NUMBER sy - msgno WITH sy - msgv1 sy - msgv2 sy - msgv3 sy - msgv4 INTO e_msg . RETURN . ENDIF . CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = 'X' . e_change_no = l_change_no . e_mtype = 'S' . ENDFUNCTION . (M) \u7269\u6599BOM \u00b6 CSAP_MAT_BOM_CREATE \uff1a\u521b\u5efa\u7269\u6599BOM CSAP_MAT_BOM_MAINTAIN \uff1a\u7ef4\u62a4\u7269\u6599BOM CSAP_MAT_BOM_READ \uff1a\u8bfb\u53d6\u7269\u6599BOM \u521b\u5efa\u548c\u7ef4\u62a4\u7684\u51fd\u6570\u4e0d\u652f\u6301\u6269\u5c55\u5907\u9009\u6e05\u5355(STLAL)\uff0c\u5982\u9700\u6269\u5c55\uff0c\u4f7f\u7528 BAPI_MATERIAL_BOM_GROUP_CREATE \u3002 \u793a\u4f8b\u4ee3\u7801 FUNCTION zfm_mat_bom_maintain IMPORTING i_mast TYPE mast i_stko TYPE stko EXPORTING e_mtype TYPE bapi_mtype e_msg TYPE bapi_msg et_bapiret2 TYPE bapiret2_t TABLES it_stpo LIKE stpo . \" \u9700\u8981\u6ce8\u610f\uff0cCSAP_MAT_BOM_MAINTAIN\u8981\u6c42\u53c2\u6570\u90fd\u662f\u5916\u90e8\u683c\u5f0f DATA l_mtype TYPE bapi_mtype . DATA l_msg TYPE bapi_msg . DATA : ls_csap_mbom TYPE csap_mbom , ls_stko_api01 TYPE stko_api01 , ls_stko_api02 TYPE stko_api02 , lt_stpo_api01 TYPE STANDARD TABLE OF stpo_api01 , ls_stpo_api01 TYPE stpo_api01 . CLEAR ls_csap_mbom . ls_csap_mbom - matnr = i_mast - matnr . ls_csap_mbom - werks = i_mast - werks . ls_csap_mbom - stlan = i_mast - stlan . ls_csap_mbom - stlal = i_mast - stlal . ls_csap_mbom - datuv = |{ i_stko - datuv DATE = USER }|. \" \u5916\u90e8\u65e5\u671f\u683c\u5f0f ls_csap_mbom - aennr = i_stko - aennr . CLEAR ls_stko_api01 . IF i_stko - bmeng IS NOT INITIAL . ls_stko_api01 - base_quan = |{ i_stko - bmeng NUMBER = USER }|. ELSE . ls_stko_api01 - base_quan = 1 . ENDIF . ls_stko_api01 - alt_text = i_stko - stktx . ls_stko_api01 - bom_status = i_stko - stlst . LOOP AT it_stpo INTO DATA ( ls_stpo ). CLEAR ls_stpo_api01 . ls_stpo_api01 - item_no = ls_stpo - posnr . \" \u884c\u53f7 ls_stpo_api01 - item_categ = 'L' . ls_stpo_api01 - component = ls_stpo - idnrk . \" \u7ec4\u4ef6\u7269\u6599 ls_stpo_api01 - comp_qty = ls_stpo - menge . \" \u7ec4\u4ef6\u6570\u91cf * ls_stpo_api03-comp_unit = ls_stpo-meins. \" \u7ec4\u4ef6\u8ba1\u91cf\u5355\u4f4d CALL FUNCTION 'CONVERSION_EXIT_CUNIT_OUTPUT' EXPORTING input = ls_stpo - meins IMPORTING output = ls_stpo_api01 - comp_unit EXCEPTIONS unit_not_found = 1 . ls_stpo_api01 - valid_from = ls_stpo - datuv . \" \u6709\u6548\u671f\u4ece ls_stpo_api01 - change_no = ls_stpo - aennr . \" \u53d8\u66f4\u53f7 ls_stpo_api01 - sortstring = ls_stpo - sortf . \" \u5de5\u5e8f\uff08\u6392\u5e8f\u5b57\u6bb5\uff09 ls_stpo_api01 - rel_prod = 'X' . ls_stpo_api01 - rel_cost = 'X' . \" \u589e\u5f3a\u5b57\u6bb5 ls_stpo_api01 - zspec1 = ls_stpo - zspec1 . ls_stpo_api01 - zspec3 = ls_stpo - zspec2 . ls_stpo_api01 - zspec2 = ls_stpo - zspec3 . INSERT ls_stpo_api01 INTO TABLE lt_stpo_api01 . ENDLOOP . * \" CSAP_MAT_BOM_MAINTAIN\u9650\u5236\uff0c\u65e0\u6cd5\u6269\u5c55\u5907\u9009BOM * \" \u8df3\u8f6c\u5230\u53e6\u4e00\u4e2a\u65b9\u6cd5\uff0c\u901a\u8fc7BAPI_MATERIAL_BOM_GROUP_CREATE\u521b\u5efa * IF ls_csap_mbom-stlal <> '01'. * CALL FUNCTION 'ZFM_MAT_BGR_CREATE' * EXPORTING * i_mast = i_mast * i_stko = i_stko * IMPORTING * e_mtype = e_mtype * e_msg = e_msg * TABLES * it_stpo = it_stpo[]. * IF e_mtype = 'E'. * RETURN. * ENDIF. * ENDIF. \" \u68c0\u67e5\u662f\u5426\u5df2\u5b58\u5728 DATA : lt_stko_api02_old TYPE STANDARD TABLE OF stko_api02 , lt_stpo_api02_old TYPE STANDARD TABLE OF stpo_api02 . CALL FUNCTION 'CSAP_MAT_BOM_READ' EXPORTING material = ls_csap_mbom - matnr plant = ls_csap_mbom - werks bom_usage = ls_csap_mbom - stlan alternative = ls_csap_mbom - stlal valid_from = ls_csap_mbom - datuv change_no = ls_csap_mbom - aennr TABLES t_stpo = lt_stpo_api02_old t_stko = lt_stko_api02_old EXCEPTIONS error = 1 OTHERS = 2 . IF sy - subrc = 0 . READ TABLE lt_stko_api02_old INTO DATA ( ls_stko_api02_upd ) INDEX 1 . \" \u89c1LCSDIFEH\u4e2d\u7684rc29k_stko_compare\u5b50\u4f8b\u7a0b\uff0c\u62ac\u5934\u53ea\u6709\u90e8\u5206\u5b57\u6bb5\u53ef\u4fee\u6539 \" \u6570\u91cf\u3001\u5355\u4f4d\u3001\u62ac\u5934\u6587\u672c\u90fd\u4e0d\u5728\u4fee\u6539\u8303\u56f4\u5185 * ls_stko_api02_upd-alt_text = ls_stko_api01-alt_text. ls_stko_api01 = CORRESPONDING # ( ls_stko_api02_upd ). DATA lt_stpo_api03 TYPE STANDARD TABLE OF stpo_api03 . SORT lt_stpo_api01 BY item_no . SORT lt_stpo_api02_old BY item_no . \" \u4fee\u6539 LOOP AT lt_stpo_api01 INTO ls_stpo_api01 . READ TABLE lt_stpo_api02_old INTO DATA ( ls_stpo_api02_upd ) WITH KEY item_no = ls_stpo_api01 - item_no BINARY SEARCH . IF sy - subrc = 0 . DELETE lt_stpo_api02_old INDEX sy - tabix . ls_stpo_api02_upd - item_no = ls_stpo_api01 - item_no . ls_stpo_api02_upd - item_categ = ls_stpo_api01 - item_categ . ls_stpo_api02_upd - component = ls_stpo_api01 - component . ls_stpo_api02_upd - comp_qty = ls_stpo_api01 - comp_qty . ls_stpo_api02_upd - comp_unit = ls_stpo_api01 - comp_unit . ls_stpo_api02_upd - valid_from = ls_stpo_api01 - valid_from . ls_stpo_api02_upd - change_no = ls_stpo_api01 - change_no . ls_stpo_api02_upd - rel_prod = ls_stpo_api01 - rel_prod . ls_stpo_api02_upd - rel_cost = ls_stpo_api01 - rel_cost . ls_stpo_api02_upd - zspec1 = ls_stpo_api01 - zspec1 . ls_stpo_api02_upd - zspec2 = ls_stpo_api01 - zspec2 . ls_stpo_api02_upd - zspec3 = ls_stpo_api01 - zspec3 . INSERT CORRESPONDING # ( ls_stpo_api02_upd ) INTO TABLE lt_stpo_api03 . ELSE . INSERT CORRESPONDING # ( ls_stpo_api01 ) INTO TABLE lt_stpo_api03 . ENDIF . ENDLOOP . \" \u5220\u9664\u591a\u4f59\u7684\u65e7\u9879\u76ee LOOP AT lt_stpo_api02_old INTO DATA ( ls_stpo_api02_del ). ls_stpo_api02_del - fldelete = abap_true . INSERT CORRESPONDING # ( ls_stpo_api02_del ) INTO TABLE lt_stpo_api03 . ENDLOOP . SORT lt_stpo_api03 BY item_no . SET UPDATE TASK LOCAL . CALL FUNCTION 'CSAP_MAT_BOM_MAINTAIN' EXPORTING material = ls_csap_mbom - matnr plant = ls_csap_mbom - werks bom_usage = ls_csap_mbom - stlan alternative = ls_csap_mbom - stlal valid_from = ls_csap_mbom - datuv change_no = ls_csap_mbom - aennr i_stko = ls_stko_api01 fl_bom_create = 'X' fl_new_item = 'X' IMPORTING o_stko = ls_stko_api02 TABLES t_stpo = lt_stpo_api03 EXCEPTIONS error = 1 OTHERS = 2 . ELSE . SET UPDATE TASK LOCAL . CALL FUNCTION 'CSAP_MAT_BOM_CREATE' EXPORTING material = ls_csap_mbom - matnr plant = ls_csap_mbom - werks bom_usage = ls_csap_mbom - stlan alternative = ls_csap_mbom - stlal valid_from = ls_csap_mbom - datuv change_no = ls_csap_mbom - aennr i_stko = ls_stko_api01 IMPORTING bom_no = ls_stko_api02 - bom_no TABLES t_stpo = lt_stpo_api01 EXCEPTIONS error = 1 OTHERS = 2 . ENDIF . IF sy - subrc <> 0 . e_mtype = 'E' . MESSAGE ID sy - msgid TYPE sy - msgty NUMBER sy - msgno WITH sy - msgv1 sy - msgv2 sy - msgv3 sy - msgv4 INTO e_msg . MESSAGE e_msg TYPE 'S' DISPLAY LIKE 'E' . CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK' . ELSE . e_mtype = 'S' . e_msg = | \u5df2\u5904\u7406 |. MESSAGE e_msg TYPE 'S' . CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = 'X' . ENDIF . ENDFUNCTION . (M) \u7269\u6599BOM\u7ec4 \u00b6 \u901a\u8fc7 BAPI_MATERIAL_BOM_GROUP_CREATE \u5b9e\u73b0\u591a\u4e2a\u5907\u9009BOM\u7684\u521b\u5efa\u3002 \u793a\u4f8b\u4ee3\u7801 FUNCTION zfm_mat_bgr_create IMPORTING i_mast TYPE mast i_stko TYPE stko EXPORTING e_mtype TYPE bapi_mtype e_msg TYPE bapi_msg et_bapiret2 TYPE bapiret2_t TABLES it_stpo LIKE stpo . DATA l_mtype TYPE bapi_mtype . DATA l_msg TYPE bapi_msg . DATA : testrun TYPE bapiflag , lt_bomgroup TYPE STANDARD TABLE OF bapi1080_bgr_c , ls_bomgroup TYPE bapi1080_bgr_c , lt_variants TYPE STANDARD TABLE OF bapi1080_bom_c , ls_variants TYPE bapi1080_bom_c , lt_materialrelations TYPE STANDARD TABLE OF bapi1080_mbm_c , ls_materialrelations TYPE bapi1080_mbm_c , lt_items TYPE STANDARD TABLE OF bapi1080_itm_c , ls_items TYPE bapi1080_itm_c , lt_itemassignments TYPE STANDARD TABLE OF bapi1080_rel_itm_bom_c , ls_itemassignments TYPE bapi1080_rel_itm_bom_c , lt_bomsubitems TYPE STANDARD TABLE OF bapi1080_sui_c , lt_bomsubitemas TYPE STANDARD TABLE OF bapi1080_rel_sui_itm_c , lt_texts TYPE STANDARD TABLE OF bapi1080_txt_c . \" \u6807\u8bc6 DATA l_uuid TYPE sysuuid_c32 . TRY . l_uuid = cl_system_uuid => create_uuid_c32_static ( ). CATCH cx_uuid_error . l_uuid = sy - datum && sy - uzeit && sy - uname . ENDTRY . \" \u65b0\u589e/\u7ef4\u62a4 DATA l_funciton TYPE cs_function . SELECT SINGLE COUNT ( * ) FROM mast WHERE matnr = @ i_mast - matnr AND werks = @ i_mast - werks AND stlan = @ i_mast - stlan AND stlal = @ i_mast - stlal . IF sy - subrc = 0 . \" \u4fee\u6539\u7528CSAP_MAT_BOM_MAINTAIN\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u662f\u4e3a\u4e86\u6269\u5c55\u5907\u9009BOM e_mtype = 'S' . e_msg = '\u5df2\u5904\u7406' . RETURN . ELSE . l_funciton = 'NEW' . ENDIF . \" OBJECT_TYPE\u7684\u57df\u503c\uff0c\u4e5f\u5907\u6ce8\u4e0b\uff0c\u514d\u5f97\u770b\u4e0d\u61c2 \" BGR - Bill of material group \" BOM - Material BOM assembly variant/alternative \" ITM - BOM item \" SUI - BOM Sub-Item \" OBJECT ID DATA l_head_object_id TYPE cs_object_id . l_head_object_id = 'HEAD' . CLEAR ls_bomgroup . ls_bomgroup - bom_group_identification = l_uuid . ls_bomgroup - object_type = 'BGR' . ls_bomgroup - object_id = l_head_object_id . ls_bomgroup - bom_usage = i_mast - stlan . \" BOM\u7528\u9014 ls_bomgroup - created_in_plant = i_mast - werks . \" \u5de5\u5382 INSERT ls_bomgroup INTO TABLE lt_bomgroup . \" \uff1f\uff1f\uff1f\u4e3a\u4ec0\u4e48\u6ca1\u6709STLTY\u53c2\u6570 CLEAR ls_variants . ls_variants - bom_group_identification = l_uuid . ls_variants - object_type = 'BOM' . ls_variants - object_id = l_head_object_id . ls_variants - alternative_bom = i_mast - stlal . \" \u5907\u9009\u7269\u6599\u6e05\u5355 ls_variants - alt_text = i_stko - stktx . \" \u6587\u672c ls_variants - bom_status = i_stko - stlst . \" BOM\u72b6\u6001 ls_variants - change_no = i_stko - aennr . \" \u53d8\u66f4\u53f7 ls_variants - valid_from_date = i_stko - datuv . ls_variants - function = l_funciton . INSERT ls_variants INTO TABLE lt_variants . CLEAR ls_materialrelations . ls_materialrelations - bom_group_identification = l_uuid . ls_materialrelations - material = ls_materialrelations - material_guid = ls_materialrelations - material_external = ls_materialrelations - material_long = i_mast - matnr . \" \u7269\u6599\u7f16\u7801 ls_materialrelations - plant = i_mast - werks . \" \u5de5\u5382 ls_materialrelations - bom_usage = i_mast - stlan . \" BOM\u7528\u9014 ls_materialrelations - alternative_bom = i_mast - stlal . \" \u5907\u9009\u7269\u6599\u6e05\u5355 INSERT ls_materialrelations INTO TABLE lt_materialrelations . LOOP AT it_stpo INTO DATA ( ls_stpo ). DATA ( l_tabix ) = sy - tabix * 10 . \" OBJECT ID DATA l_item_object_id TYPE cs_object_id . l_item_object_id = | ITEM { l_tabix }|. CLEAR ls_items . ls_items - bom_group_identification = l_uuid . ls_items - object_type = 'ITM' . ls_items - object_id = l_item_object_id . ls_items - item_no = |{ ls_stpo - posnr ALPHA = IN }|. \" \u884c\u53f7 ls_items - component = ls_stpo - idnrk . \" \u7ec4\u4ef6\u7269\u6599 ls_items - comp_qty = ls_stpo - menge . \" \u7ec4\u4ef6\u6570\u91cf ls_items - comp_unit = ls_stpo - meins . \" \u7ec4\u4ef6\u8ba1\u91cf\u5355\u4f4d ls_items - ltxt_lang = '1' . ls_items - valid_from_date = ls_stpo - datuv . \" \u6709\u6548\u8d77\u59cb\u65e5\u671f ls_items - change_no = ls_stpo - aennr . \" \u53d8\u66f4\u53f7 INSERT ls_items INTO TABLE lt_items . CLEAR ls_itemassignments . ls_itemassignments - bom_group_identification = l_uuid . ls_itemassignments - sub_object_type = 'ITM' . ls_itemassignments - sub_object_id = l_item_object_id . ls_itemassignments - super_object_type = 'BOM' . ls_itemassignments - super_object_id = l_head_object_id . ls_itemassignments - valid_from_date = sy - datum . ls_itemassignments - function = l_funciton . INSERT ls_itemassignments INTO TABLE lt_itemassignments . ENDLOOP . CALL FUNCTION 'BAPI_MATERIAL_BOM_GROUP_CREATE' EXPORTING all_error = 'X' TABLES bomgroup = lt_bomgroup variants = lt_variants items = lt_items materialrelations = lt_materialrelations itemassignments = lt_itemassignments return = et_bapiret2[] . CLEAR l_mtype . CLEAR l_msg . LOOP AT et_bapiret2 INTO DATA ( ls_return ) WHERE type CA 'AXE' . MESSAGE ID ls_return - id TYPE ls_return - type NUMBER ls_return - number WITH ls_return - message_v1 ls_return - message_v2 ls_return - message_v3 ls_return - message_v4 INTO l_msg . e_msg = |{ e_msg }{ l_msg } ; |. ENDLOOP . IF sy - subrc = 0 . e_mtype = 'E' . MESSAGE ID sy - msgid TYPE sy - msgty NUMBER sy - msgno WITH sy - msgv1 sy - msgv2 sy - msgv3 sy - msgv4 INTO e_msg . MESSAGE e_msg TYPE 'S' DISPLAY LIKE 'E' . CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK' . ELSE . e_mtype = 'S' . e_msg = | \u5df2\u5904\u7406 |. MESSAGE e_msg TYPE 'S' . CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = 'X' . ENDIF . ENDFUNCTION . (P) WBS BOM \u00b6 CSAP_BOM_CREATE \u521b\u5efa CSAP_BOM_MAINTAIN \u7ef4\u62a4 CSAP_BOM_READ \u8bfb\u53d6 \u793a\u4f8b\u4ee3\u7801 FUNCTION zfm_wbs_bom_maintain IMPORTING i_prps TYPE prps i_prst TYPE prst i_stko TYPE stko EXPORTING e_mtype TYPE bapi_mtype e_msg TYPE bapi_msg et_bapiret2 TYPE bapiret2_t TABLES it_stpo LIKE stpo . DATA : ls_ecsin TYPE csin , ls_stzub TYPE stzub , lt_stkob TYPE STANDARD TABLE OF stkob , ls_stkob TYPE stkob , lt_stpob TYPE STANDARD TABLE OF stpob , ls_stpob TYPE stpob . CLEAR ls_ecsin . ls_ecsin - matnr = i_prst - matnr . ls_ecsin - werks = i_prst - werks . ls_ecsin - pspnr = i_prps - pspnr . \" WBS\u7f16\u53f7 ls_ecsin - stlty = i_stko - stlty . \" BOM\u7c7b\u578b ls_ecsin - stlan = i_prst - stlan . \" BOM\u7528\u9014 \" \u6570\u91cf IF i_stko - bmeng IS NOT INITIAL . ls_ecsin - emeng = i_stko - bmeng . ELSE . ls_ecsin - emeng = 1 . ENDIF . ls_ecsin - aennr = i_prps - aennr . \" \u53d8\u66f4\u53f7 CLEAR ls_stkob . ls_stkob - stlty = i_stko - stlty . \" BOM\u7c7b\u578b ls_stkob - bmeng = i_stko - bmeng . ls_stkob - stktx = i_stko - stktx . CLEAR lt_stpob . LOOP AT it_stpo INTO DATA ( ls_stpo ). CLEAR ls_stpob . ls_stpob - posnr = ls_stpo - posnr . ls_stpob - datuv = ls_stpo - datuv . ls_stpob - stlty = ls_stpo - stlty . ls_stpob - postp = 'L' . ls_stpob - idnrk = ls_stpo - idnrk . ls_stpob - menge = ls_stpo - menge . ls_stpob - meins = ls_stpo - meins . ls_stpob - aennr = ls_stpo - aennr . ls_stpob - sortf = ls_stpo - sortf . \" \u5de5\u5e8f ls_stpob - zspec1 = ls_stpo - zspec1 . ls_stpob - zspec2 = ls_stpo - zspec2 . ls_stpob - zspec3 = ls_stpo - zspec3 . \" \u4f9b\u5e94\u5546/\u724c\u53f7/\u4ea7\u5730\u4e0d\u4e3a\u7a7a\u7684\u65f6\u5019 IF ls_stpo - zspec1 IS NOT INITIAL OR ls_stpo - zspec2 IS NOT INITIAL OR ls_stpo - zspec3 IS NOT INITIAL . ls_stpob - dspst = '1' . ENDIF . INSERT ls_stpob INTO TABLE lt_stpob . ENDLOOP . \" \u68c0\u67e5\u662f\u5426\u5df2\u5b58\u5728 DATA : lt_stkob_old TYPE STANDARD TABLE OF stkob , lt_stpob_old TYPE STANDARD TABLE OF stpob . CALL FUNCTION 'CSAI_BOM_READ' EXPORTING ecsin = ls_ecsin TABLES t_stkob = lt_stkob_old t_stpob = lt_stpob_old EXCEPTIONS error = 1 OTHERS = 2 . IF sy - subrc = 0 . \" \u62ac\u5934\u53ea\u6709\u63cf\u8ff0\u5141\u8bb8\u88ab\u4fee\u6539 READ TABLE lt_stkob_old INTO DATA ( ls_stkob_old ) INDEX 1 . ls_stkob_old - stktx = ls_stkob - stktx . ls_stkob = ls_stkob_old . SORT lt_stpob BY posnr . SORT lt_stpob_old BY posnr . \" \u4fee\u6539 LOOP AT lt_stpob REFERENCE INTO DATA ( lr_stpob ). lr_stpob -> vbkz = lr_stpob -> mvbkz = 'I' . \" \u65b0\u589e READ TABLE lt_stpob_old INTO DATA ( ls_stpob_upd ) WITH KEY posnr = lr_stpob -> posnr BINARY SEARCH . IF sy - subrc = 0 . DELETE lt_stpob_old INDEX sy - tabix . ls_stpob_upd - vbkz = ls_stpob_upd - mvbkz = 'U' . \" \u4fee\u6539 ls_stpob_upd - posnr = lr_stpob -> posnr . ls_stpob_upd - stlty = lr_stpob -> stlty . ls_stpob_upd - datuv = lr_stpob -> datuv . ls_stpob_upd - postp = lr_stpob -> postp . ls_stpob_upd - idnrk = lr_stpob -> idnrk . ls_stpob_upd - menge = lr_stpob -> menge . ls_stpob_upd - meins = lr_stpob -> meins . ls_stpob_upd - aennr = lr_stpob -> aennr . ls_stpob_upd - sortf = lr_stpob -> sortf . ls_stpob_upd - zspec1 = lr_stpob -> zspec1 . ls_stpob_upd - zspec2 = lr_stpob -> zspec2 . ls_stpob_upd - zspec3 = lr_stpob -> zspec3 . ls_stpob_upd - dspst = lr_stpob -> dspst . lr_stpob->* = ls_stpob_upd . * \" \u7528\u5b50\u9879\u76ee\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u4fee\u6539 * ls_stpob_upd-vgknt = ls_stpob_upd-stlkn. * ls_stpob_upd-vgpzl = ls_stpob_upd-stpoz. * CLEAR ls_stpob_upd-stlkn. * CLEAR ls_stpob_upd-stpoz. ENDIF . ENDLOOP . \" \u5220\u9664\u591a\u4f59\u7684\u65e7\u9879\u76ee LOOP AT lt_stpob_old INTO DATA ( ls_stpob_del ). ls_stpob_del - lkenz = abap_true . ls_stpob_del - vbkz = ls_stpob_upd - mvbkz = 'D' . \" \u5220\u9664\u6807\u8bc6 INSERT ls_stpob_del INTO TABLE lt_stpob . ENDLOOP . SORT lt_stpob BY posnr . \" \u7ef4\u62a4BOM CALL FUNCTION 'CSAI_BOM_MAINTAIN' EXPORTING ecsin = ls_ecsin estkob = ls_stkob estzub = ls_stzub IMPORTING astzub = ls_stzub TABLES t_stpob = lt_stpob EXCEPTIONS error = 1 OTHERS = 2 . ELSE . \" \u65b0\u589eBOM CALL FUNCTION 'CSAI_BOM_CREATE' EXPORTING ecsin = ls_ecsin estkob = ls_stkob estzub = ls_stzub IMPORTING astlnr = ls_stzub - stlnr TABLES t_stpob = lt_stpob EXCEPTIONS error = 1 OTHERS = 2 . ENDIF . IF sy - subrc <> 0 OR sy - msgty = 'E' . e_mtype = 'E' . MESSAGE ID sy - msgid TYPE sy - msgty NUMBER sy - msgno INTO e_msg WITH sy - msgv1 sy - msgv2 sy - msgv3 sy - msgv4 . CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK' . ELSE . e_mtype = 'S' . e_msg = | \u5df2\u5904\u7406 |. MESSAGE e_msg TYPE 'S' . CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = 'X' . ENDIF . ENDFUNCTION . BOM\u5c55\u5f00 \u00b6 \u7f51\u4e0a\u67e5\u5230BOM\u5c55\u793a\u6709\u591a\u79cd\u65b9\u6cd5\uff0c\u5927\u90e8\u5206\u6211\u90fd\u6ca1\u7528\u8fc7\uff0c\u53ea\u80fd\u6162\u6162\u8865\u5145\u4e86 \u51fd\u6570 \u8bf4\u660e CS_BOM_EXPLOSION \u901a\u7528BOM\u5c55\u5f00 CS_BOM_EXPL_MAT_V2 \u7269\u6599BOM\u5c55\u5f00 CS_BOM_EXPL_PSP_V1 WBS BOM\u5c55\u5f00 CS_BOM_EXPL_EQU_V2 \u8bbe\u5907BOM\u5c55\u5f00 CS_BOM_EXPL_KND_V1 \u8ba2\u5355BOM\u5c55\u5f00 \u901a\u7528BOM\u5c55\u5f00 \u00b6 \u7269\u6599BOM\u5c55\u5f00 \u00b6 WBS BOM\u5c55\u5f00 \u00b6 \u8bbe\u5907BOM\u5c55\u5f00 \u00b6 \u8ba2\u5355BOM\u5c55\u5f00 \u00b6 \u6027\u80fd\u4f18\u5316 \u00b6 BOM\u5c55\u793a\u6700\u5927\u7684\u95ee\u9898\u5e94\u8be5\u662f\u6027\u80fd\u4e86\uff0c\u4e00\u822c\u7528\u5e76\u53d1\u7684\u65b9\u6cd5\u6765\u52a0\u901f\u3002","title":"BOM"},{"location":"master_data/bom/#bom","text":"\\SAP\u83dc\u5355\\\u540e\u52e4\\\u751f\u4ea7\\\u4e3b\u6570\u636e\\\u7269\u6599\u6e05\u5355\\BOM BOM\u79cd\u7c7b\u4e0d\u5c11\uff0c\u8be6\u89c1\u7269\u6599\u6e05\u5355\u7c7b\u522b\u503c\u57df\uff1a STLTY \u8bf4\u660e1 \u8bf4\u660e2 M Material BOM \u7269\u6599 BOM E Equipment BOM \u8bbe\u5907 BOM P Work Breakdown Structure BOM WBS BOM S Standard BOM \u6807\u51c6\u7269\u6599\u6e05\u5355 K Order BOM \u8ba2\u5355\u7269\u6599\u6e05\u5355 D Document Structure \u51ed\u8bc1\u7ed3\u6784 T Functional Location BOM \u529f\u80fd\u4f4d\u7f6e BOM","title":"BOM"},{"location":"master_data/bom/#bom_1","text":"","title":"BOM\u7ef4\u62a4"},{"location":"master_data/bom/#_1","text":"CCAP_ECN_CREATE \uff1a\u521b\u5efa\u53d8\u66f4\u53f7 \u793a\u4f8b\u4ee3\u7801 FUNCTION zfm_ecn_check IMPORTING i_datuv TYPE datuv i_verid TYPE verid EXPORTING e_change_no TYPE aennr e_mtype TYPE bapi_mtype e_msg TYPE bapi_msg . IF i_datuv IS INITIAL OR i_datuv = '' . e_mtype = 'E' . e_msg = | [\u7248\u672c\u542f\u7528\u65f6\u95f4]\u4e3a\u7a7a |. RETURN . ENDIF . IF i_verid IS INITIAL . e_mtype = 'E' . e_msg = | [\u751f\u4ea7\u7248\u672c]\u4e3a\u7a7a |. RETURN . ENDIF . \" \u66f4\u6539\u53f7\u53ef\u4ee5\u968f\u610f\u7f16\u5199\uff0c\u4e00\u822c\u7528\u65e5\u671f+\u7248\u672c\u751f\u6210 DATA l_change_no TYPE aenr_api01 - change_no . l_change_no = |{ i_datuv }{ i_verid }|. CALL FUNCTION 'CONVERSION_EXIT_AENNR_INPUT' EXPORTING input = l_change_no IMPORTING output = l_change_no EXCEPTIONS length_error = 1 . \" \u68c0\u67e5\u66f4\u6539\u53f7\u662f\u5426\u5b58\u5728 SELECT SINGLE COUNT ( * ) FROM aenr WHERE aennr = @ l_change_no . IF sy - subrc = 0 . e_change_no = l_change_no . e_mtype = 'S' . RETURN . ENDIF . \" \u4e0d\u5b58\u5728\u5219\u521b\u5efa DATA : ls_header TYPE aenr_api01 , ls_object_bom TYPE aenv_api01 , ls_object_bom_mat TYPE aenv_api01 , ls_object_bom_psp TYPE aenv_api01 , ls_object_tlist_n TYPE aenv_api01 , ls_object_tlist_q TYPE aenv_api01 , ls_object_char TYPE aenv_api01 , ls_object_cls TYPE aenv_api01 , lv_number TYPE aenrb - aennr . ls_header - change_no = l_change_no . ls_header - status = '01' . ls_header - valid_from = |{ i_datuv DATE = USER }|. \" \u4e0b\u9762FM\u9700\u8981\u5916\u90e8\u683c\u5f0f ls_header - descript = | BOM/\u5de5\u827a\u6570\u636e\u7ef4\u62a4 |. ls_object_bom - active = 'X' . ls_object_bom_mat - active = 'X' . ls_object_bom_mat - obj_requ = 'X' . ls_object_bom_mat - mgtrec_gen = 'X' . ls_object_bom_psp - active = 'X' . ls_object_bom_psp - obj_requ = 'X' . ls_object_bom_psp - mgtrec_gen = 'X' . ls_object_tlist_n - active = 'X' . ls_object_tlist_n - obj_requ = 'X' . ls_object_tlist_n - mgtrec_gen = 'X' . ls_object_tlist_q - active = 'X' . ls_object_tlist_q - obj_requ = 'X' . ls_object_tlist_q - mgtrec_gen = 'X' . ls_object_char - active = 'X' . ls_object_cls - active = 'X' . SET UPDATE TASK LOCAL . \" \u521b\u5efaECN CLEAR l_change_no . CALL FUNCTION 'CCAP_ECN_CREATE' EXPORTING change_header = ls_header object_bom = ls_object_bom object_bom_mat = ls_object_bom_mat object_bom_psp = ls_object_bom_psp object_tlist_n = ls_object_tlist_n object_tlist_q = ls_object_tlist_q object_char = ls_object_char object_cls = ls_object_cls fl_commit_and_wait = 'X' IMPORTING change_no = l_change_no EXCEPTIONS change_no_already_exists = 1 error = 2 OTHERS = 3 . IF sy - subrc <> 0 . e_mtype = 'E' . MESSAGE ID sy - msgid TYPE sy - msgty NUMBER sy - msgno WITH sy - msgv1 sy - msgv2 sy - msgv3 sy - msgv4 INTO e_msg . RETURN . ENDIF . CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = 'X' . e_change_no = l_change_no . e_mtype = 'S' . ENDFUNCTION .","title":"\u521b\u5efa\u53d8\u66f4\u53f7"},{"location":"master_data/bom/#m-bom","text":"CSAP_MAT_BOM_CREATE \uff1a\u521b\u5efa\u7269\u6599BOM CSAP_MAT_BOM_MAINTAIN \uff1a\u7ef4\u62a4\u7269\u6599BOM CSAP_MAT_BOM_READ \uff1a\u8bfb\u53d6\u7269\u6599BOM \u521b\u5efa\u548c\u7ef4\u62a4\u7684\u51fd\u6570\u4e0d\u652f\u6301\u6269\u5c55\u5907\u9009\u6e05\u5355(STLAL)\uff0c\u5982\u9700\u6269\u5c55\uff0c\u4f7f\u7528 BAPI_MATERIAL_BOM_GROUP_CREATE \u3002 \u793a\u4f8b\u4ee3\u7801 FUNCTION zfm_mat_bom_maintain IMPORTING i_mast TYPE mast i_stko TYPE stko EXPORTING e_mtype TYPE bapi_mtype e_msg TYPE bapi_msg et_bapiret2 TYPE bapiret2_t TABLES it_stpo LIKE stpo . \" \u9700\u8981\u6ce8\u610f\uff0cCSAP_MAT_BOM_MAINTAIN\u8981\u6c42\u53c2\u6570\u90fd\u662f\u5916\u90e8\u683c\u5f0f DATA l_mtype TYPE bapi_mtype . DATA l_msg TYPE bapi_msg . DATA : ls_csap_mbom TYPE csap_mbom , ls_stko_api01 TYPE stko_api01 , ls_stko_api02 TYPE stko_api02 , lt_stpo_api01 TYPE STANDARD TABLE OF stpo_api01 , ls_stpo_api01 TYPE stpo_api01 . CLEAR ls_csap_mbom . ls_csap_mbom - matnr = i_mast - matnr . ls_csap_mbom - werks = i_mast - werks . ls_csap_mbom - stlan = i_mast - stlan . ls_csap_mbom - stlal = i_mast - stlal . ls_csap_mbom - datuv = |{ i_stko - datuv DATE = USER }|. \" \u5916\u90e8\u65e5\u671f\u683c\u5f0f ls_csap_mbom - aennr = i_stko - aennr . CLEAR ls_stko_api01 . IF i_stko - bmeng IS NOT INITIAL . ls_stko_api01 - base_quan = |{ i_stko - bmeng NUMBER = USER }|. ELSE . ls_stko_api01 - base_quan = 1 . ENDIF . ls_stko_api01 - alt_text = i_stko - stktx . ls_stko_api01 - bom_status = i_stko - stlst . LOOP AT it_stpo INTO DATA ( ls_stpo ). CLEAR ls_stpo_api01 . ls_stpo_api01 - item_no = ls_stpo - posnr . \" \u884c\u53f7 ls_stpo_api01 - item_categ = 'L' . ls_stpo_api01 - component = ls_stpo - idnrk . \" \u7ec4\u4ef6\u7269\u6599 ls_stpo_api01 - comp_qty = ls_stpo - menge . \" \u7ec4\u4ef6\u6570\u91cf * ls_stpo_api03-comp_unit = ls_stpo-meins. \" \u7ec4\u4ef6\u8ba1\u91cf\u5355\u4f4d CALL FUNCTION 'CONVERSION_EXIT_CUNIT_OUTPUT' EXPORTING input = ls_stpo - meins IMPORTING output = ls_stpo_api01 - comp_unit EXCEPTIONS unit_not_found = 1 . ls_stpo_api01 - valid_from = ls_stpo - datuv . \" \u6709\u6548\u671f\u4ece ls_stpo_api01 - change_no = ls_stpo - aennr . \" \u53d8\u66f4\u53f7 ls_stpo_api01 - sortstring = ls_stpo - sortf . \" \u5de5\u5e8f\uff08\u6392\u5e8f\u5b57\u6bb5\uff09 ls_stpo_api01 - rel_prod = 'X' . ls_stpo_api01 - rel_cost = 'X' . \" \u589e\u5f3a\u5b57\u6bb5 ls_stpo_api01 - zspec1 = ls_stpo - zspec1 . ls_stpo_api01 - zspec3 = ls_stpo - zspec2 . ls_stpo_api01 - zspec2 = ls_stpo - zspec3 . INSERT ls_stpo_api01 INTO TABLE lt_stpo_api01 . ENDLOOP . * \" CSAP_MAT_BOM_MAINTAIN\u9650\u5236\uff0c\u65e0\u6cd5\u6269\u5c55\u5907\u9009BOM * \" \u8df3\u8f6c\u5230\u53e6\u4e00\u4e2a\u65b9\u6cd5\uff0c\u901a\u8fc7BAPI_MATERIAL_BOM_GROUP_CREATE\u521b\u5efa * IF ls_csap_mbom-stlal <> '01'. * CALL FUNCTION 'ZFM_MAT_BGR_CREATE' * EXPORTING * i_mast = i_mast * i_stko = i_stko * IMPORTING * e_mtype = e_mtype * e_msg = e_msg * TABLES * it_stpo = it_stpo[]. * IF e_mtype = 'E'. * RETURN. * ENDIF. * ENDIF. \" \u68c0\u67e5\u662f\u5426\u5df2\u5b58\u5728 DATA : lt_stko_api02_old TYPE STANDARD TABLE OF stko_api02 , lt_stpo_api02_old TYPE STANDARD TABLE OF stpo_api02 . CALL FUNCTION 'CSAP_MAT_BOM_READ' EXPORTING material = ls_csap_mbom - matnr plant = ls_csap_mbom - werks bom_usage = ls_csap_mbom - stlan alternative = ls_csap_mbom - stlal valid_from = ls_csap_mbom - datuv change_no = ls_csap_mbom - aennr TABLES t_stpo = lt_stpo_api02_old t_stko = lt_stko_api02_old EXCEPTIONS error = 1 OTHERS = 2 . IF sy - subrc = 0 . READ TABLE lt_stko_api02_old INTO DATA ( ls_stko_api02_upd ) INDEX 1 . \" \u89c1LCSDIFEH\u4e2d\u7684rc29k_stko_compare\u5b50\u4f8b\u7a0b\uff0c\u62ac\u5934\u53ea\u6709\u90e8\u5206\u5b57\u6bb5\u53ef\u4fee\u6539 \" \u6570\u91cf\u3001\u5355\u4f4d\u3001\u62ac\u5934\u6587\u672c\u90fd\u4e0d\u5728\u4fee\u6539\u8303\u56f4\u5185 * ls_stko_api02_upd-alt_text = ls_stko_api01-alt_text. ls_stko_api01 = CORRESPONDING # ( ls_stko_api02_upd ). DATA lt_stpo_api03 TYPE STANDARD TABLE OF stpo_api03 . SORT lt_stpo_api01 BY item_no . SORT lt_stpo_api02_old BY item_no . \" \u4fee\u6539 LOOP AT lt_stpo_api01 INTO ls_stpo_api01 . READ TABLE lt_stpo_api02_old INTO DATA ( ls_stpo_api02_upd ) WITH KEY item_no = ls_stpo_api01 - item_no BINARY SEARCH . IF sy - subrc = 0 . DELETE lt_stpo_api02_old INDEX sy - tabix . ls_stpo_api02_upd - item_no = ls_stpo_api01 - item_no . ls_stpo_api02_upd - item_categ = ls_stpo_api01 - item_categ . ls_stpo_api02_upd - component = ls_stpo_api01 - component . ls_stpo_api02_upd - comp_qty = ls_stpo_api01 - comp_qty . ls_stpo_api02_upd - comp_unit = ls_stpo_api01 - comp_unit . ls_stpo_api02_upd - valid_from = ls_stpo_api01 - valid_from . ls_stpo_api02_upd - change_no = ls_stpo_api01 - change_no . ls_stpo_api02_upd - rel_prod = ls_stpo_api01 - rel_prod . ls_stpo_api02_upd - rel_cost = ls_stpo_api01 - rel_cost . ls_stpo_api02_upd - zspec1 = ls_stpo_api01 - zspec1 . ls_stpo_api02_upd - zspec2 = ls_stpo_api01 - zspec2 . ls_stpo_api02_upd - zspec3 = ls_stpo_api01 - zspec3 . INSERT CORRESPONDING # ( ls_stpo_api02_upd ) INTO TABLE lt_stpo_api03 . ELSE . INSERT CORRESPONDING # ( ls_stpo_api01 ) INTO TABLE lt_stpo_api03 . ENDIF . ENDLOOP . \" \u5220\u9664\u591a\u4f59\u7684\u65e7\u9879\u76ee LOOP AT lt_stpo_api02_old INTO DATA ( ls_stpo_api02_del ). ls_stpo_api02_del - fldelete = abap_true . INSERT CORRESPONDING # ( ls_stpo_api02_del ) INTO TABLE lt_stpo_api03 . ENDLOOP . SORT lt_stpo_api03 BY item_no . SET UPDATE TASK LOCAL . CALL FUNCTION 'CSAP_MAT_BOM_MAINTAIN' EXPORTING material = ls_csap_mbom - matnr plant = ls_csap_mbom - werks bom_usage = ls_csap_mbom - stlan alternative = ls_csap_mbom - stlal valid_from = ls_csap_mbom - datuv change_no = ls_csap_mbom - aennr i_stko = ls_stko_api01 fl_bom_create = 'X' fl_new_item = 'X' IMPORTING o_stko = ls_stko_api02 TABLES t_stpo = lt_stpo_api03 EXCEPTIONS error = 1 OTHERS = 2 . ELSE . SET UPDATE TASK LOCAL . CALL FUNCTION 'CSAP_MAT_BOM_CREATE' EXPORTING material = ls_csap_mbom - matnr plant = ls_csap_mbom - werks bom_usage = ls_csap_mbom - stlan alternative = ls_csap_mbom - stlal valid_from = ls_csap_mbom - datuv change_no = ls_csap_mbom - aennr i_stko = ls_stko_api01 IMPORTING bom_no = ls_stko_api02 - bom_no TABLES t_stpo = lt_stpo_api01 EXCEPTIONS error = 1 OTHERS = 2 . ENDIF . IF sy - subrc <> 0 . e_mtype = 'E' . MESSAGE ID sy - msgid TYPE sy - msgty NUMBER sy - msgno WITH sy - msgv1 sy - msgv2 sy - msgv3 sy - msgv4 INTO e_msg . MESSAGE e_msg TYPE 'S' DISPLAY LIKE 'E' . CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK' . ELSE . e_mtype = 'S' . e_msg = | \u5df2\u5904\u7406 |. MESSAGE e_msg TYPE 'S' . CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = 'X' . ENDIF . ENDFUNCTION .","title":"(M) \u7269\u6599BOM"},{"location":"master_data/bom/#m-bom_1","text":"\u901a\u8fc7 BAPI_MATERIAL_BOM_GROUP_CREATE \u5b9e\u73b0\u591a\u4e2a\u5907\u9009BOM\u7684\u521b\u5efa\u3002 \u793a\u4f8b\u4ee3\u7801 FUNCTION zfm_mat_bgr_create IMPORTING i_mast TYPE mast i_stko TYPE stko EXPORTING e_mtype TYPE bapi_mtype e_msg TYPE bapi_msg et_bapiret2 TYPE bapiret2_t TABLES it_stpo LIKE stpo . DATA l_mtype TYPE bapi_mtype . DATA l_msg TYPE bapi_msg . DATA : testrun TYPE bapiflag , lt_bomgroup TYPE STANDARD TABLE OF bapi1080_bgr_c , ls_bomgroup TYPE bapi1080_bgr_c , lt_variants TYPE STANDARD TABLE OF bapi1080_bom_c , ls_variants TYPE bapi1080_bom_c , lt_materialrelations TYPE STANDARD TABLE OF bapi1080_mbm_c , ls_materialrelations TYPE bapi1080_mbm_c , lt_items TYPE STANDARD TABLE OF bapi1080_itm_c , ls_items TYPE bapi1080_itm_c , lt_itemassignments TYPE STANDARD TABLE OF bapi1080_rel_itm_bom_c , ls_itemassignments TYPE bapi1080_rel_itm_bom_c , lt_bomsubitems TYPE STANDARD TABLE OF bapi1080_sui_c , lt_bomsubitemas TYPE STANDARD TABLE OF bapi1080_rel_sui_itm_c , lt_texts TYPE STANDARD TABLE OF bapi1080_txt_c . \" \u6807\u8bc6 DATA l_uuid TYPE sysuuid_c32 . TRY . l_uuid = cl_system_uuid => create_uuid_c32_static ( ). CATCH cx_uuid_error . l_uuid = sy - datum && sy - uzeit && sy - uname . ENDTRY . \" \u65b0\u589e/\u7ef4\u62a4 DATA l_funciton TYPE cs_function . SELECT SINGLE COUNT ( * ) FROM mast WHERE matnr = @ i_mast - matnr AND werks = @ i_mast - werks AND stlan = @ i_mast - stlan AND stlal = @ i_mast - stlal . IF sy - subrc = 0 . \" \u4fee\u6539\u7528CSAP_MAT_BOM_MAINTAIN\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u662f\u4e3a\u4e86\u6269\u5c55\u5907\u9009BOM e_mtype = 'S' . e_msg = '\u5df2\u5904\u7406' . RETURN . ELSE . l_funciton = 'NEW' . ENDIF . \" OBJECT_TYPE\u7684\u57df\u503c\uff0c\u4e5f\u5907\u6ce8\u4e0b\uff0c\u514d\u5f97\u770b\u4e0d\u61c2 \" BGR - Bill of material group \" BOM - Material BOM assembly variant/alternative \" ITM - BOM item \" SUI - BOM Sub-Item \" OBJECT ID DATA l_head_object_id TYPE cs_object_id . l_head_object_id = 'HEAD' . CLEAR ls_bomgroup . ls_bomgroup - bom_group_identification = l_uuid . ls_bomgroup - object_type = 'BGR' . ls_bomgroup - object_id = l_head_object_id . ls_bomgroup - bom_usage = i_mast - stlan . \" BOM\u7528\u9014 ls_bomgroup - created_in_plant = i_mast - werks . \" \u5de5\u5382 INSERT ls_bomgroup INTO TABLE lt_bomgroup . \" \uff1f\uff1f\uff1f\u4e3a\u4ec0\u4e48\u6ca1\u6709STLTY\u53c2\u6570 CLEAR ls_variants . ls_variants - bom_group_identification = l_uuid . ls_variants - object_type = 'BOM' . ls_variants - object_id = l_head_object_id . ls_variants - alternative_bom = i_mast - stlal . \" \u5907\u9009\u7269\u6599\u6e05\u5355 ls_variants - alt_text = i_stko - stktx . \" \u6587\u672c ls_variants - bom_status = i_stko - stlst . \" BOM\u72b6\u6001 ls_variants - change_no = i_stko - aennr . \" \u53d8\u66f4\u53f7 ls_variants - valid_from_date = i_stko - datuv . ls_variants - function = l_funciton . INSERT ls_variants INTO TABLE lt_variants . CLEAR ls_materialrelations . ls_materialrelations - bom_group_identification = l_uuid . ls_materialrelations - material = ls_materialrelations - material_guid = ls_materialrelations - material_external = ls_materialrelations - material_long = i_mast - matnr . \" \u7269\u6599\u7f16\u7801 ls_materialrelations - plant = i_mast - werks . \" \u5de5\u5382 ls_materialrelations - bom_usage = i_mast - stlan . \" BOM\u7528\u9014 ls_materialrelations - alternative_bom = i_mast - stlal . \" \u5907\u9009\u7269\u6599\u6e05\u5355 INSERT ls_materialrelations INTO TABLE lt_materialrelations . LOOP AT it_stpo INTO DATA ( ls_stpo ). DATA ( l_tabix ) = sy - tabix * 10 . \" OBJECT ID DATA l_item_object_id TYPE cs_object_id . l_item_object_id = | ITEM { l_tabix }|. CLEAR ls_items . ls_items - bom_group_identification = l_uuid . ls_items - object_type = 'ITM' . ls_items - object_id = l_item_object_id . ls_items - item_no = |{ ls_stpo - posnr ALPHA = IN }|. \" \u884c\u53f7 ls_items - component = ls_stpo - idnrk . \" \u7ec4\u4ef6\u7269\u6599 ls_items - comp_qty = ls_stpo - menge . \" \u7ec4\u4ef6\u6570\u91cf ls_items - comp_unit = ls_stpo - meins . \" \u7ec4\u4ef6\u8ba1\u91cf\u5355\u4f4d ls_items - ltxt_lang = '1' . ls_items - valid_from_date = ls_stpo - datuv . \" \u6709\u6548\u8d77\u59cb\u65e5\u671f ls_items - change_no = ls_stpo - aennr . \" \u53d8\u66f4\u53f7 INSERT ls_items INTO TABLE lt_items . CLEAR ls_itemassignments . ls_itemassignments - bom_group_identification = l_uuid . ls_itemassignments - sub_object_type = 'ITM' . ls_itemassignments - sub_object_id = l_item_object_id . ls_itemassignments - super_object_type = 'BOM' . ls_itemassignments - super_object_id = l_head_object_id . ls_itemassignments - valid_from_date = sy - datum . ls_itemassignments - function = l_funciton . INSERT ls_itemassignments INTO TABLE lt_itemassignments . ENDLOOP . CALL FUNCTION 'BAPI_MATERIAL_BOM_GROUP_CREATE' EXPORTING all_error = 'X' TABLES bomgroup = lt_bomgroup variants = lt_variants items = lt_items materialrelations = lt_materialrelations itemassignments = lt_itemassignments return = et_bapiret2[] . CLEAR l_mtype . CLEAR l_msg . LOOP AT et_bapiret2 INTO DATA ( ls_return ) WHERE type CA 'AXE' . MESSAGE ID ls_return - id TYPE ls_return - type NUMBER ls_return - number WITH ls_return - message_v1 ls_return - message_v2 ls_return - message_v3 ls_return - message_v4 INTO l_msg . e_msg = |{ e_msg }{ l_msg } ; |. ENDLOOP . IF sy - subrc = 0 . e_mtype = 'E' . MESSAGE ID sy - msgid TYPE sy - msgty NUMBER sy - msgno WITH sy - msgv1 sy - msgv2 sy - msgv3 sy - msgv4 INTO e_msg . MESSAGE e_msg TYPE 'S' DISPLAY LIKE 'E' . CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK' . ELSE . e_mtype = 'S' . e_msg = | \u5df2\u5904\u7406 |. MESSAGE e_msg TYPE 'S' . CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = 'X' . ENDIF . ENDFUNCTION .","title":"(M) \u7269\u6599BOM\u7ec4"},{"location":"master_data/bom/#p-wbs-bom","text":"CSAP_BOM_CREATE \u521b\u5efa CSAP_BOM_MAINTAIN \u7ef4\u62a4 CSAP_BOM_READ \u8bfb\u53d6 \u793a\u4f8b\u4ee3\u7801 FUNCTION zfm_wbs_bom_maintain IMPORTING i_prps TYPE prps i_prst TYPE prst i_stko TYPE stko EXPORTING e_mtype TYPE bapi_mtype e_msg TYPE bapi_msg et_bapiret2 TYPE bapiret2_t TABLES it_stpo LIKE stpo . DATA : ls_ecsin TYPE csin , ls_stzub TYPE stzub , lt_stkob TYPE STANDARD TABLE OF stkob , ls_stkob TYPE stkob , lt_stpob TYPE STANDARD TABLE OF stpob , ls_stpob TYPE stpob . CLEAR ls_ecsin . ls_ecsin - matnr = i_prst - matnr . ls_ecsin - werks = i_prst - werks . ls_ecsin - pspnr = i_prps - pspnr . \" WBS\u7f16\u53f7 ls_ecsin - stlty = i_stko - stlty . \" BOM\u7c7b\u578b ls_ecsin - stlan = i_prst - stlan . \" BOM\u7528\u9014 \" \u6570\u91cf IF i_stko - bmeng IS NOT INITIAL . ls_ecsin - emeng = i_stko - bmeng . ELSE . ls_ecsin - emeng = 1 . ENDIF . ls_ecsin - aennr = i_prps - aennr . \" \u53d8\u66f4\u53f7 CLEAR ls_stkob . ls_stkob - stlty = i_stko - stlty . \" BOM\u7c7b\u578b ls_stkob - bmeng = i_stko - bmeng . ls_stkob - stktx = i_stko - stktx . CLEAR lt_stpob . LOOP AT it_stpo INTO DATA ( ls_stpo ). CLEAR ls_stpob . ls_stpob - posnr = ls_stpo - posnr . ls_stpob - datuv = ls_stpo - datuv . ls_stpob - stlty = ls_stpo - stlty . ls_stpob - postp = 'L' . ls_stpob - idnrk = ls_stpo - idnrk . ls_stpob - menge = ls_stpo - menge . ls_stpob - meins = ls_stpo - meins . ls_stpob - aennr = ls_stpo - aennr . ls_stpob - sortf = ls_stpo - sortf . \" \u5de5\u5e8f ls_stpob - zspec1 = ls_stpo - zspec1 . ls_stpob - zspec2 = ls_stpo - zspec2 . ls_stpob - zspec3 = ls_stpo - zspec3 . \" \u4f9b\u5e94\u5546/\u724c\u53f7/\u4ea7\u5730\u4e0d\u4e3a\u7a7a\u7684\u65f6\u5019 IF ls_stpo - zspec1 IS NOT INITIAL OR ls_stpo - zspec2 IS NOT INITIAL OR ls_stpo - zspec3 IS NOT INITIAL . ls_stpob - dspst = '1' . ENDIF . INSERT ls_stpob INTO TABLE lt_stpob . ENDLOOP . \" \u68c0\u67e5\u662f\u5426\u5df2\u5b58\u5728 DATA : lt_stkob_old TYPE STANDARD TABLE OF stkob , lt_stpob_old TYPE STANDARD TABLE OF stpob . CALL FUNCTION 'CSAI_BOM_READ' EXPORTING ecsin = ls_ecsin TABLES t_stkob = lt_stkob_old t_stpob = lt_stpob_old EXCEPTIONS error = 1 OTHERS = 2 . IF sy - subrc = 0 . \" \u62ac\u5934\u53ea\u6709\u63cf\u8ff0\u5141\u8bb8\u88ab\u4fee\u6539 READ TABLE lt_stkob_old INTO DATA ( ls_stkob_old ) INDEX 1 . ls_stkob_old - stktx = ls_stkob - stktx . ls_stkob = ls_stkob_old . SORT lt_stpob BY posnr . SORT lt_stpob_old BY posnr . \" \u4fee\u6539 LOOP AT lt_stpob REFERENCE INTO DATA ( lr_stpob ). lr_stpob -> vbkz = lr_stpob -> mvbkz = 'I' . \" \u65b0\u589e READ TABLE lt_stpob_old INTO DATA ( ls_stpob_upd ) WITH KEY posnr = lr_stpob -> posnr BINARY SEARCH . IF sy - subrc = 0 . DELETE lt_stpob_old INDEX sy - tabix . ls_stpob_upd - vbkz = ls_stpob_upd - mvbkz = 'U' . \" \u4fee\u6539 ls_stpob_upd - posnr = lr_stpob -> posnr . ls_stpob_upd - stlty = lr_stpob -> stlty . ls_stpob_upd - datuv = lr_stpob -> datuv . ls_stpob_upd - postp = lr_stpob -> postp . ls_stpob_upd - idnrk = lr_stpob -> idnrk . ls_stpob_upd - menge = lr_stpob -> menge . ls_stpob_upd - meins = lr_stpob -> meins . ls_stpob_upd - aennr = lr_stpob -> aennr . ls_stpob_upd - sortf = lr_stpob -> sortf . ls_stpob_upd - zspec1 = lr_stpob -> zspec1 . ls_stpob_upd - zspec2 = lr_stpob -> zspec2 . ls_stpob_upd - zspec3 = lr_stpob -> zspec3 . ls_stpob_upd - dspst = lr_stpob -> dspst . lr_stpob->* = ls_stpob_upd . * \" \u7528\u5b50\u9879\u76ee\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u4fee\u6539 * ls_stpob_upd-vgknt = ls_stpob_upd-stlkn. * ls_stpob_upd-vgpzl = ls_stpob_upd-stpoz. * CLEAR ls_stpob_upd-stlkn. * CLEAR ls_stpob_upd-stpoz. ENDIF . ENDLOOP . \" \u5220\u9664\u591a\u4f59\u7684\u65e7\u9879\u76ee LOOP AT lt_stpob_old INTO DATA ( ls_stpob_del ). ls_stpob_del - lkenz = abap_true . ls_stpob_del - vbkz = ls_stpob_upd - mvbkz = 'D' . \" \u5220\u9664\u6807\u8bc6 INSERT ls_stpob_del INTO TABLE lt_stpob . ENDLOOP . SORT lt_stpob BY posnr . \" \u7ef4\u62a4BOM CALL FUNCTION 'CSAI_BOM_MAINTAIN' EXPORTING ecsin = ls_ecsin estkob = ls_stkob estzub = ls_stzub IMPORTING astzub = ls_stzub TABLES t_stpob = lt_stpob EXCEPTIONS error = 1 OTHERS = 2 . ELSE . \" \u65b0\u589eBOM CALL FUNCTION 'CSAI_BOM_CREATE' EXPORTING ecsin = ls_ecsin estkob = ls_stkob estzub = ls_stzub IMPORTING astlnr = ls_stzub - stlnr TABLES t_stpob = lt_stpob EXCEPTIONS error = 1 OTHERS = 2 . ENDIF . IF sy - subrc <> 0 OR sy - msgty = 'E' . e_mtype = 'E' . MESSAGE ID sy - msgid TYPE sy - msgty NUMBER sy - msgno INTO e_msg WITH sy - msgv1 sy - msgv2 sy - msgv3 sy - msgv4 . CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK' . ELSE . e_mtype = 'S' . e_msg = | \u5df2\u5904\u7406 |. MESSAGE e_msg TYPE 'S' . CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = 'X' . ENDIF . ENDFUNCTION .","title":"(P) WBS BOM"},{"location":"master_data/bom/#bom_2","text":"\u7f51\u4e0a\u67e5\u5230BOM\u5c55\u793a\u6709\u591a\u79cd\u65b9\u6cd5\uff0c\u5927\u90e8\u5206\u6211\u90fd\u6ca1\u7528\u8fc7\uff0c\u53ea\u80fd\u6162\u6162\u8865\u5145\u4e86 \u51fd\u6570 \u8bf4\u660e CS_BOM_EXPLOSION \u901a\u7528BOM\u5c55\u5f00 CS_BOM_EXPL_MAT_V2 \u7269\u6599BOM\u5c55\u5f00 CS_BOM_EXPL_PSP_V1 WBS BOM\u5c55\u5f00 CS_BOM_EXPL_EQU_V2 \u8bbe\u5907BOM\u5c55\u5f00 CS_BOM_EXPL_KND_V1 \u8ba2\u5355BOM\u5c55\u5f00","title":"BOM\u5c55\u5f00"},{"location":"master_data/bom/#bom_3","text":"","title":"\u901a\u7528BOM\u5c55\u5f00"},{"location":"master_data/bom/#bom_4","text":"","title":"\u7269\u6599BOM\u5c55\u5f00"},{"location":"master_data/bom/#wbs-bom","text":"","title":"WBS BOM\u5c55\u5f00"},{"location":"master_data/bom/#bom_5","text":"","title":"\u8bbe\u5907BOM\u5c55\u5f00"},{"location":"master_data/bom/#bom_6","text":"","title":"\u8ba2\u5355BOM\u5c55\u5f00"},{"location":"master_data/bom/#_2","text":"BOM\u5c55\u793a\u6700\u5927\u7684\u95ee\u9898\u5e94\u8be5\u662f\u6027\u80fd\u4e86\uff0c\u4e00\u822c\u7528\u5e76\u53d1\u7684\u65b9\u6cd5\u6765\u52a0\u901f\u3002","title":"\u6027\u80fd\u4f18\u5316"},{"location":"master_data/bp/","text":"BP \u00b6 \u4e1a\u52a1\u4f19\u4f34\u7531\u591a\u4e2a\u90e8\u5206\u7ec4\u6210\uff0c\u53ef\u4ee5\u5206\u6b65\u6267\u884c\uff0c\u66f4\u53ef\u63a7\u3002 \u57fa\u7840\u4fe1\u606f \u00b6 BAPI_BUPA_CREATE_FROM_DATA \uff0c\u521b\u5efa\u4e1a\u52a1\u4f19\u4f34\u3002 BAPI_BUPA_CENTRAL_CHANGE \uff0c\u66f4\u6539\u4e1a\u52a1\u4f19\u4f34\u3002 \u89d2\u8272 \u00b6 BAPI_BUPA_ROLE_ADD_2 \uff0c\u65b0\u589e\u4e1a\u52a1\u4f19\u4f34\u89d2\u8272\u3002 \u5730\u5740 \u00b6 BAPI_BUPA_ADDRESS_ADD \uff0c\u65b0\u589e\u4e1a\u52a1\u4f19\u4f34\u5730\u5740\u3002 \u94f6\u884c \u00b6 BAPI_BUPA_BANKDETAIL_ADD \uff0c\u65b0\u589e\u4e1a\u52a1\u4f19\u4f34\u94f6\u884c\u660e\u7ec6\u3002 \u5982\u679c\u94f6\u884c\u4e0d\u5b58\u5728\uff0c\u53ef\u4ee5\u5148\u4f7f\u7528 BAPI_BANK_CREATE \u521b\u5efa\u94f6\u884c\u3002 \u4f9b\u5e94\u5546 \u00b6 VMD_EI_API \uff0c\u65b0\u589e\u5ba2\u6237\uff0c\u5e76\u5173\u8054\u4e1a\u52a1\u4f19\u4f34\u3002 \u5ba2\u6237 \u00b6 CMD_EI_API \uff0c\u65b0\u589e\u4f9b\u5e94\u5546\uff0c\u5e76\u5173\u8054\u4e1a\u52a1\u4f19\u4f34\u3002 \u5ba2\u5546 \u00b6 \u793a\u4f8b\u4ee3\u7801 TYPES : BEGIN OF ty_input , partner TYPE but000 - partner , bu_group TYPE string , partner_kind TYPE string , name_org1 TYPE string , name_org2 TYPE string , name_org3 TYPE string , name_org4 TYPE string , street TYPE string , \" \u6ce8\u518c\u5730\u5740 country TYPE string , tel_number TYPE string , langu TYPE string , idnumber TYPE string , banks TYPE string , \" \u94f6\u884c\u6240\u5728\u56fd\u5bb6 bankl TYPE string , \" \u94f6\u884c\u4ee3\u7801 bankn TYPE string , \" \u94f6\u884c\u8d26\u6237 koinh TYPE string , \" \u94f6\u884c\u6301\u6709\u4eba bukrs TYPE string , \" \u516c\u53f8 akont TYPE string , \" \u7edf\u9a6d\u79d1\u76ee waers TYPE string , \" \u8d27\u5e01 END OF ty_input . TYPES tt_input TYPE STANDARD TABLE OF ty_input WITH EMPTY KEY . DATA lt_input TYPE tt_input . DATA lt_bapi_data TYPE cvis_ei_extern_t . DATA ls_bapi_data TYPE cvis_ei_extern . DATA l_task TYPE cmd_ei_object_task VALUE 'M' . SELECT ds~partner , but000~partner_guid FROM @ lt_input AS ds LEFT JOIN but000 ON ds~partner = but000~partner INTO TABLE @ DATA ( lt_but000 ). SORT lt_but000 BY partner . DELETE ADJACENT DUPLICATES FROM lt_but000 COMPARING partner . \" \u8003\u8651\u4e00\u4e2a\u5ba2\u5546\u53ef\u80fd\u4f1a\u6709\u591a\u884c\uff0c\u5148\u96c6\u4e2d\u5206\u914dGUID DATA l_partner_guid TYPE abap_bool . LOOP AT lt_but000 REFERENCE INTO DATA ( lr_but000 ) WHERE partner_guid IS INITIAL . TRY . l_partner_guid = cl_system_uuid => if_system_uuid_static~create_uuid_x16 ( ). CATCH cx_root . CONTINUE . ENDTRY . ENDLOOP . \" BAPI\u5b57\u6bb5\u5199\u5165 LOOP AT lt_input INTO DATA ( ls_input ). CLEAR ls_bapi_data . \" \u6807\u8bc6\u9700\u8981\u66f4\u65b0\u7684\u533a\u57df DATA l_customer TYPE abap_bool . DATA l_vender TYPE abap_bool . CLEAR l_customer . CLEAR l_vender . CASE ls_input - partner_kind . WHEN '1' . l_customer = abap_true . WHEN '2' . l_vender = abap_true . WHEN '3' . l_customer = abap_true . l_vender = abap_true . WHEN OTHERS . CONTINUE . ENDCASE . ls_input - partner = |{ ls_input - partner ALPHA = IN }|. \" \u83b7\u53d6\u5206\u914d\u7684GUID\u5b57\u6bb5 READ TABLE lt_but000 INTO DATA ( ls_but000 ) WITH KEY partner = ls_input - partner BINARY SEARCH . IF sy - subrc <> 0 . CONTINUE . ENDIF . IF ls_but000 - partner_guid IS INITIAL . CONTINUE . ENDIF . \" \u9ed8\u8ba4\u503c ls_input - langu = '1' . \" 1\uff0cZH \" \u62ac\u5934\u6570\u636e ls_bapi_data - partner - header - object_task = l_task . ls_bapi_data - partner - header - object_instance - bpartner = ls_but000 - partner . ls_bapi_data - partner - header - object_instance - bpartnerguid = ls_but000 - partner_guid . \" \u5206\u7ec4 ls_bapi_data - partner - central_data - common - data - bp_control - category = '2' . \" \u9ed8\u8ba4\u7ec4\u7ec7 ls_bapi_data - partner - central_data - common - data - bp_control - grouping = ls_input - bu_group . \" \u89d2\u8272 DATA ls_role TYPE bus_ei_bupa_roles . CLEAR ls_role . ls_role - task = l_task . ls_role - data - valid_from = sy - datum . ls_role - datax - valid_from = 'X' . ls_role - data - valid_to = '99991231' . ls_role - datax - valid_to = 'X' . IF l_customer = abap_true . ls_role - data_key = 'FLCU00' . ls_role - data - rolecategory = ls_role - data_key . INSERT ls_role INTO TABLE ls_bapi_data - partner - central_data - role - roles . ls_role - data_key = 'FLCU01' . ls_role - data - rolecategory = ls_role - data_key . INSERT ls_role INTO TABLE ls_bapi_data - partner - central_data - role - roles . ENDIF . IF l_vender = abap_true . ls_role - data_key = 'FLVN00' . ls_role - data - rolecategory = ls_role - data_key . INSERT ls_role INTO TABLE ls_bapi_data - partner - central_data - role - roles . ls_role - data_key = 'FLVN01' . ls_role - data - rolecategory = ls_role - data_key . INSERT ls_role INTO TABLE ls_bapi_data - partner - central_data - role - roles . ENDIF . \" \u540d\u79f0 ls_bapi_data - partner - central_data - common - data - bp_organization - name1 = ls_input - name_org1 . ls_bapi_data - partner - central_data - common - data - bp_organization - name2 = ls_input - name_org2 . ls_bapi_data - partner - central_data - common - data - bp_organization - name3 = ls_input - name_org3 . ls_bapi_data - partner - central_data - common - data - bp_organization - name4 = ls_input - name_org4 . ls_bapi_data - partner - central_data - common - datax - bp_organization - name1 = abap_true . ls_bapi_data - partner - central_data - common - datax - bp_organization - name2 = abap_true . ls_bapi_data - partner - central_data - common - datax - bp_organization - name3 = abap_true . ls_bapi_data - partner - central_data - common - datax - bp_organization - name4 = abap_true . \" \u8054\u7cfb\u65b9\u6cd5 DATA ls_address TYPE bus_ei_bupa_address . DATA ls_phone TYPE bus_ei_bupa_telephone . CLEAR ls_address . CLEAR ls_phone . ls_address - task = l_task . ls_address - data_key - operation = 'XXDFLT' . \" \u6807\u51c6 ls_address - data - postal - data - street = ls_input - street . ls_address - data - postal - data - country = ls_input - country . ls_address - data - postal - data - langu = ls_input - langu . IF ls_input - tel_number IS NOT INITIAL . ls_phone - contact - task = l_task . ls_phone - contact - data - country = ls_input - country . ls_phone - contact - data - telephone = ls_input - tel_number . ls_phone - contact - datax - country = abap_true . ls_phone - contact - datax - telephone = abap_true . INSERT ls_phone INTO TABLE ls_address - data - communication - phone - phone . ENDIF . INSERT ls_address INTO TABLE ls_bapi_data - partner - central_data - address - addresses . \" \u6807\u8bc6 DATA ls_identification TYPE bus_ei_bupa_identification . CLEAR ls_identification . ls_identification - task = l_task . ls_identification - data_key - identificationcategory = 'Z00001' . ls_identification - data_key - identificationnumber = ls_input - idnumber . INSERT ls_identification INTO TABLE ls_bapi_data - partner - central_data - ident_number - ident_numbers . \" \u94f6\u884c DATA ls_bank TYPE bus_ei_bupa_bankdetail . CLEAR ls_bank . ls_bank - task = l_task . ls_bank - data_key = '0001' . \" \u56fa\u5b9a\uff0c\u4e0d\u4f1a\u4f20\u4e24\u4e2a\u94f6\u884c\u6570\u636e\u5427\uff1f ls_bank - data - bank_ctry = ls_input - banks . ls_bank - datax - bank_ctry = abap_true . ls_bank - data - bank_key = ls_input - bankl . ls_bank - datax - bank_key = abap_true . ls_bank - data - bank_acct = ls_input - bankn . ls_bank - datax - bank_acct = abap_true . ls_bank - data - accountholder = ls_input - koinh . ls_bank - datax - accountholder = abap_true . INSERT ls_bank INTO TABLE ls_bapi_data - partner - central_data - bankdetail - bankdetails . \" \u4f9b\u5e94\u5546\u91c7\u8d2d\u7ec4\u7ec7\u6570\u636e IF l_customer = abap_true . ls_bapi_data - customer - header - object_task = l_task . ls_bapi_data - customer - header - object_instance - kunnr = ls_but000 - partner . DATA ls_company_custoner TYPE cmds_ei_company . DATA ls_sale TYPE cmds_ei_sales . \" \u5ba2\u6237\u516c\u53f8\u6570\u636e CLEAR ls_company_custoner . ls_company_custoner - task = l_task . ls_company_custoner - data_key - bukrs = ls_input - bukrs . ls_company_custoner - data - zterm = 'Z001' . ls_company_custoner - datax - zterm = abap_true . ls_company_custoner - data - zuawa = '0009' . ls_company_custoner - datax - zuawa = abap_true . ls_company_custoner - data - akont = ls_input - akont . ls_company_custoner - datax - akont = abap_true . INSERT ls_company_custoner INTO TABLE ls_bapi_data - customer - company_data - company . \" \u5ba2\u6237\u9500\u552e\u6570\u636e CLEAR ls_sale . ls_sale - task = l_task . ls_sale - data_key - vkorg = ls_input - bukrs . ls_sale - data_key - spart = '10' . ls_sale - data_key - vtweg = '10' . ls_sale - data - kalks = 'B' . ls_sale - datax - kalks = abap_true . ls_sale - data - versg = '1' . ls_sale - datax - versg = abap_true . ls_sale - data - vsbed = '1' . ls_sale - datax - vsbed = abap_true . ls_sale - data - waers = ls_input - waers . ls_sale - datax - waers = abap_true . INSERT ls_sale INTO TABLE ls_bapi_data - customer - sales_data - sales . ENDIF . IF l_vender = abap_true . ls_bapi_data - vendor - header - object_task = l_task . ls_bapi_data - vendor - header - object_instance - lifnr = ls_but000 - partner . DATA ls_company_vendor TYPE vmds_ei_company . DATA ls_purchasing TYPE vmds_ei_purchasing . \" \u4f9b\u5e94\u5546\u516c\u53f8\u6570\u636e CLEAR ls_company_vendor . ls_company_vendor - task = l_task . ls_company_vendor - data_key - bukrs = ls_input - bukrs . ls_company_vendor - data - zterm = 'Z001' . ls_company_vendor - datax - zterm = abap_true . ls_company_vendor - data - zuawa = '0009' . ls_company_vendor - datax - zuawa = abap_true . ls_company_vendor - data - akont = ls_input - akont . ls_company_vendor - datax - akont = abap_true . INSERT ls_company_vendor INTO TABLE ls_bapi_data - vendor - company_data - company . \" \u4f9b\u5e94\u5546\u91c7\u8d2d\u6570\u636e CLEAR ls_purchasing . ls_purchasing - task = l_task . ls_purchasing - data_key - ekorg = ls_input - bukrs . ls_purchasing - data - zterm = 'Z001' . ls_purchasing - data - kalsk = 'Z8' . ls_purchasing - datax - kalsk = abap_true . ls_purchasing - data - webre = 'X' . ls_purchasing - datax - webre = abap_true . * ls_purchasing-data-zterm = 'X'. * ls_purchasing-datax-zterm = abap_true. ls_purchasing - data - waers = ls_input - waers . ls_purchasing - datax - waers = abap_true . INSERT ls_purchasing INTO TABLE ls_bapi_data - vendor - purchasing_data - purchasing . ENDIF . INSERT ls_bapi_data INTO TABLE lt_bapi_data . ENDLOOP . DATA lt_bapiretm TYPE bapiretm . CALL METHOD cl_md_bp_maintain => maintain EXPORTING i_data = lt_bapi_data IMPORTING e_return = lt_bapiretm . IF sy - subrc = 0 . CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK' . ELSE . CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = 'X' . ENDIF .","title":"\u4e1a\u52a1\u4f19\u4f34"},{"location":"master_data/bp/#bp","text":"\u4e1a\u52a1\u4f19\u4f34\u7531\u591a\u4e2a\u90e8\u5206\u7ec4\u6210\uff0c\u53ef\u4ee5\u5206\u6b65\u6267\u884c\uff0c\u66f4\u53ef\u63a7\u3002","title":"BP"},{"location":"master_data/bp/#_1","text":"BAPI_BUPA_CREATE_FROM_DATA \uff0c\u521b\u5efa\u4e1a\u52a1\u4f19\u4f34\u3002 BAPI_BUPA_CENTRAL_CHANGE \uff0c\u66f4\u6539\u4e1a\u52a1\u4f19\u4f34\u3002","title":"\u57fa\u7840\u4fe1\u606f"},{"location":"master_data/bp/#_2","text":"BAPI_BUPA_ROLE_ADD_2 \uff0c\u65b0\u589e\u4e1a\u52a1\u4f19\u4f34\u89d2\u8272\u3002","title":"\u89d2\u8272"},{"location":"master_data/bp/#_3","text":"BAPI_BUPA_ADDRESS_ADD \uff0c\u65b0\u589e\u4e1a\u52a1\u4f19\u4f34\u5730\u5740\u3002","title":"\u5730\u5740"},{"location":"master_data/bp/#_4","text":"BAPI_BUPA_BANKDETAIL_ADD \uff0c\u65b0\u589e\u4e1a\u52a1\u4f19\u4f34\u94f6\u884c\u660e\u7ec6\u3002 \u5982\u679c\u94f6\u884c\u4e0d\u5b58\u5728\uff0c\u53ef\u4ee5\u5148\u4f7f\u7528 BAPI_BANK_CREATE \u521b\u5efa\u94f6\u884c\u3002","title":"\u94f6\u884c"},{"location":"master_data/bp/#_5","text":"VMD_EI_API \uff0c\u65b0\u589e\u5ba2\u6237\uff0c\u5e76\u5173\u8054\u4e1a\u52a1\u4f19\u4f34\u3002","title":"\u4f9b\u5e94\u5546"},{"location":"master_data/bp/#_6","text":"CMD_EI_API \uff0c\u65b0\u589e\u4f9b\u5e94\u5546\uff0c\u5e76\u5173\u8054\u4e1a\u52a1\u4f19\u4f34\u3002","title":"\u5ba2\u6237"},{"location":"master_data/bp/#_7","text":"\u793a\u4f8b\u4ee3\u7801 TYPES : BEGIN OF ty_input , partner TYPE but000 - partner , bu_group TYPE string , partner_kind TYPE string , name_org1 TYPE string , name_org2 TYPE string , name_org3 TYPE string , name_org4 TYPE string , street TYPE string , \" \u6ce8\u518c\u5730\u5740 country TYPE string , tel_number TYPE string , langu TYPE string , idnumber TYPE string , banks TYPE string , \" \u94f6\u884c\u6240\u5728\u56fd\u5bb6 bankl TYPE string , \" \u94f6\u884c\u4ee3\u7801 bankn TYPE string , \" \u94f6\u884c\u8d26\u6237 koinh TYPE string , \" \u94f6\u884c\u6301\u6709\u4eba bukrs TYPE string , \" \u516c\u53f8 akont TYPE string , \" \u7edf\u9a6d\u79d1\u76ee waers TYPE string , \" \u8d27\u5e01 END OF ty_input . TYPES tt_input TYPE STANDARD TABLE OF ty_input WITH EMPTY KEY . DATA lt_input TYPE tt_input . DATA lt_bapi_data TYPE cvis_ei_extern_t . DATA ls_bapi_data TYPE cvis_ei_extern . DATA l_task TYPE cmd_ei_object_task VALUE 'M' . SELECT ds~partner , but000~partner_guid FROM @ lt_input AS ds LEFT JOIN but000 ON ds~partner = but000~partner INTO TABLE @ DATA ( lt_but000 ). SORT lt_but000 BY partner . DELETE ADJACENT DUPLICATES FROM lt_but000 COMPARING partner . \" \u8003\u8651\u4e00\u4e2a\u5ba2\u5546\u53ef\u80fd\u4f1a\u6709\u591a\u884c\uff0c\u5148\u96c6\u4e2d\u5206\u914dGUID DATA l_partner_guid TYPE abap_bool . LOOP AT lt_but000 REFERENCE INTO DATA ( lr_but000 ) WHERE partner_guid IS INITIAL . TRY . l_partner_guid = cl_system_uuid => if_system_uuid_static~create_uuid_x16 ( ). CATCH cx_root . CONTINUE . ENDTRY . ENDLOOP . \" BAPI\u5b57\u6bb5\u5199\u5165 LOOP AT lt_input INTO DATA ( ls_input ). CLEAR ls_bapi_data . \" \u6807\u8bc6\u9700\u8981\u66f4\u65b0\u7684\u533a\u57df DATA l_customer TYPE abap_bool . DATA l_vender TYPE abap_bool . CLEAR l_customer . CLEAR l_vender . CASE ls_input - partner_kind . WHEN '1' . l_customer = abap_true . WHEN '2' . l_vender = abap_true . WHEN '3' . l_customer = abap_true . l_vender = abap_true . WHEN OTHERS . CONTINUE . ENDCASE . ls_input - partner = |{ ls_input - partner ALPHA = IN }|. \" \u83b7\u53d6\u5206\u914d\u7684GUID\u5b57\u6bb5 READ TABLE lt_but000 INTO DATA ( ls_but000 ) WITH KEY partner = ls_input - partner BINARY SEARCH . IF sy - subrc <> 0 . CONTINUE . ENDIF . IF ls_but000 - partner_guid IS INITIAL . CONTINUE . ENDIF . \" \u9ed8\u8ba4\u503c ls_input - langu = '1' . \" 1\uff0cZH \" \u62ac\u5934\u6570\u636e ls_bapi_data - partner - header - object_task = l_task . ls_bapi_data - partner - header - object_instance - bpartner = ls_but000 - partner . ls_bapi_data - partner - header - object_instance - bpartnerguid = ls_but000 - partner_guid . \" \u5206\u7ec4 ls_bapi_data - partner - central_data - common - data - bp_control - category = '2' . \" \u9ed8\u8ba4\u7ec4\u7ec7 ls_bapi_data - partner - central_data - common - data - bp_control - grouping = ls_input - bu_group . \" \u89d2\u8272 DATA ls_role TYPE bus_ei_bupa_roles . CLEAR ls_role . ls_role - task = l_task . ls_role - data - valid_from = sy - datum . ls_role - datax - valid_from = 'X' . ls_role - data - valid_to = '99991231' . ls_role - datax - valid_to = 'X' . IF l_customer = abap_true . ls_role - data_key = 'FLCU00' . ls_role - data - rolecategory = ls_role - data_key . INSERT ls_role INTO TABLE ls_bapi_data - partner - central_data - role - roles . ls_role - data_key = 'FLCU01' . ls_role - data - rolecategory = ls_role - data_key . INSERT ls_role INTO TABLE ls_bapi_data - partner - central_data - role - roles . ENDIF . IF l_vender = abap_true . ls_role - data_key = 'FLVN00' . ls_role - data - rolecategory = ls_role - data_key . INSERT ls_role INTO TABLE ls_bapi_data - partner - central_data - role - roles . ls_role - data_key = 'FLVN01' . ls_role - data - rolecategory = ls_role - data_key . INSERT ls_role INTO TABLE ls_bapi_data - partner - central_data - role - roles . ENDIF . \" \u540d\u79f0 ls_bapi_data - partner - central_data - common - data - bp_organization - name1 = ls_input - name_org1 . ls_bapi_data - partner - central_data - common - data - bp_organization - name2 = ls_input - name_org2 . ls_bapi_data - partner - central_data - common - data - bp_organization - name3 = ls_input - name_org3 . ls_bapi_data - partner - central_data - common - data - bp_organization - name4 = ls_input - name_org4 . ls_bapi_data - partner - central_data - common - datax - bp_organization - name1 = abap_true . ls_bapi_data - partner - central_data - common - datax - bp_organization - name2 = abap_true . ls_bapi_data - partner - central_data - common - datax - bp_organization - name3 = abap_true . ls_bapi_data - partner - central_data - common - datax - bp_organization - name4 = abap_true . \" \u8054\u7cfb\u65b9\u6cd5 DATA ls_address TYPE bus_ei_bupa_address . DATA ls_phone TYPE bus_ei_bupa_telephone . CLEAR ls_address . CLEAR ls_phone . ls_address - task = l_task . ls_address - data_key - operation = 'XXDFLT' . \" \u6807\u51c6 ls_address - data - postal - data - street = ls_input - street . ls_address - data - postal - data - country = ls_input - country . ls_address - data - postal - data - langu = ls_input - langu . IF ls_input - tel_number IS NOT INITIAL . ls_phone - contact - task = l_task . ls_phone - contact - data - country = ls_input - country . ls_phone - contact - data - telephone = ls_input - tel_number . ls_phone - contact - datax - country = abap_true . ls_phone - contact - datax - telephone = abap_true . INSERT ls_phone INTO TABLE ls_address - data - communication - phone - phone . ENDIF . INSERT ls_address INTO TABLE ls_bapi_data - partner - central_data - address - addresses . \" \u6807\u8bc6 DATA ls_identification TYPE bus_ei_bupa_identification . CLEAR ls_identification . ls_identification - task = l_task . ls_identification - data_key - identificationcategory = 'Z00001' . ls_identification - data_key - identificationnumber = ls_input - idnumber . INSERT ls_identification INTO TABLE ls_bapi_data - partner - central_data - ident_number - ident_numbers . \" \u94f6\u884c DATA ls_bank TYPE bus_ei_bupa_bankdetail . CLEAR ls_bank . ls_bank - task = l_task . ls_bank - data_key = '0001' . \" \u56fa\u5b9a\uff0c\u4e0d\u4f1a\u4f20\u4e24\u4e2a\u94f6\u884c\u6570\u636e\u5427\uff1f ls_bank - data - bank_ctry = ls_input - banks . ls_bank - datax - bank_ctry = abap_true . ls_bank - data - bank_key = ls_input - bankl . ls_bank - datax - bank_key = abap_true . ls_bank - data - bank_acct = ls_input - bankn . ls_bank - datax - bank_acct = abap_true . ls_bank - data - accountholder = ls_input - koinh . ls_bank - datax - accountholder = abap_true . INSERT ls_bank INTO TABLE ls_bapi_data - partner - central_data - bankdetail - bankdetails . \" \u4f9b\u5e94\u5546\u91c7\u8d2d\u7ec4\u7ec7\u6570\u636e IF l_customer = abap_true . ls_bapi_data - customer - header - object_task = l_task . ls_bapi_data - customer - header - object_instance - kunnr = ls_but000 - partner . DATA ls_company_custoner TYPE cmds_ei_company . DATA ls_sale TYPE cmds_ei_sales . \" \u5ba2\u6237\u516c\u53f8\u6570\u636e CLEAR ls_company_custoner . ls_company_custoner - task = l_task . ls_company_custoner - data_key - bukrs = ls_input - bukrs . ls_company_custoner - data - zterm = 'Z001' . ls_company_custoner - datax - zterm = abap_true . ls_company_custoner - data - zuawa = '0009' . ls_company_custoner - datax - zuawa = abap_true . ls_company_custoner - data - akont = ls_input - akont . ls_company_custoner - datax - akont = abap_true . INSERT ls_company_custoner INTO TABLE ls_bapi_data - customer - company_data - company . \" \u5ba2\u6237\u9500\u552e\u6570\u636e CLEAR ls_sale . ls_sale - task = l_task . ls_sale - data_key - vkorg = ls_input - bukrs . ls_sale - data_key - spart = '10' . ls_sale - data_key - vtweg = '10' . ls_sale - data - kalks = 'B' . ls_sale - datax - kalks = abap_true . ls_sale - data - versg = '1' . ls_sale - datax - versg = abap_true . ls_sale - data - vsbed = '1' . ls_sale - datax - vsbed = abap_true . ls_sale - data - waers = ls_input - waers . ls_sale - datax - waers = abap_true . INSERT ls_sale INTO TABLE ls_bapi_data - customer - sales_data - sales . ENDIF . IF l_vender = abap_true . ls_bapi_data - vendor - header - object_task = l_task . ls_bapi_data - vendor - header - object_instance - lifnr = ls_but000 - partner . DATA ls_company_vendor TYPE vmds_ei_company . DATA ls_purchasing TYPE vmds_ei_purchasing . \" \u4f9b\u5e94\u5546\u516c\u53f8\u6570\u636e CLEAR ls_company_vendor . ls_company_vendor - task = l_task . ls_company_vendor - data_key - bukrs = ls_input - bukrs . ls_company_vendor - data - zterm = 'Z001' . ls_company_vendor - datax - zterm = abap_true . ls_company_vendor - data - zuawa = '0009' . ls_company_vendor - datax - zuawa = abap_true . ls_company_vendor - data - akont = ls_input - akont . ls_company_vendor - datax - akont = abap_true . INSERT ls_company_vendor INTO TABLE ls_bapi_data - vendor - company_data - company . \" \u4f9b\u5e94\u5546\u91c7\u8d2d\u6570\u636e CLEAR ls_purchasing . ls_purchasing - task = l_task . ls_purchasing - data_key - ekorg = ls_input - bukrs . ls_purchasing - data - zterm = 'Z001' . ls_purchasing - data - kalsk = 'Z8' . ls_purchasing - datax - kalsk = abap_true . ls_purchasing - data - webre = 'X' . ls_purchasing - datax - webre = abap_true . * ls_purchasing-data-zterm = 'X'. * ls_purchasing-datax-zterm = abap_true. ls_purchasing - data - waers = ls_input - waers . ls_purchasing - datax - waers = abap_true . INSERT ls_purchasing INTO TABLE ls_bapi_data - vendor - purchasing_data - purchasing . ENDIF . INSERT ls_bapi_data INTO TABLE lt_bapi_data . ENDLOOP . DATA lt_bapiretm TYPE bapiretm . CALL METHOD cl_md_bp_maintain => maintain EXPORTING i_data = lt_bapi_data IMPORTING e_return = lt_bapiretm . IF sy - subrc = 0 . CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK' . ELSE . CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = 'X' . ENDIF .","title":"\u5ba2\u5546"},{"location":"master_data/material/","text":"\u7269\u6599 \u00b6 \u7269\u6599\u7ef4\u62a4 \u00b6 BAPI_MATERIAL_SAVEDATA \uff0c\u6bcf\u6b21\u53ea\u80fd\u6269\u5c55\u4e00\u4e2a\u5de5\u5382\u3002 BAPI_MATERIAL_SAVEREPLICA \uff0c\u5141\u8bb8\u6269\u5c55\u591a\u4e2a\u5de5\u5382\uff0c\u4e0b\u9762\u4f7f\u7528\u8be5\u51fd\u6570\u7ef4\u62a4\u7269\u6599\u3002 \u793a\u4f8b\u4ee3\u7801 FUNCTION zfm_demo_material_save_2 \" You can use the template 'functionModuleParameter' to add here the signature! . *&---------------------------------------------------------------------* *& \u6279\u5bfc\u6570\u636e *&---------------------------------------------------------------------* \" \u6f14\u793a\u7528\uff0c\u5047\u8bbe\u8fd9\u662f\u7a0b\u5e8f\u7684\u5165\u53c2\u548c\u51fa\u53c2 TYPES : BEGIN OF ty_data , matnr TYPE mara - matnr , mbrsh TYPE mara - mbrsh , mtart TYPE mara - mtart , maktx TYPE makt - maktx , werks TYPE werks_d , vkorg TYPE vkorg , mtype TYPE bapi_mtype , msg TYPE bapi_msg , END OF ty_data . TYPES tt_data TYPE STANDARD TABLE OF ty_data . DATA lt_data TYPE tt_data . DATA l_matnr TYPE matnr . DATA l_mtype TYPE bapi_mtype . DATA l_msg TYPE bapi_msg . *&---------------------------------------------------------------------* *& BAPI\u6570\u636e\u58f0\u660e *&---------------------------------------------------------------------* DATA l_global_data TYPE bapie1global_data . DATA : lt_headdata TYPE STANDARD TABLE OF bapie1matheader , lt_clientdata TYPE STANDARD TABLE OF bapie1mara , lt_clientdatax TYPE STANDARD TABLE OF bapie1marax , lt_plantdata TYPE STANDARD TABLE OF bapie1marc , lt_plantdatax TYPE STANDARD TABLE OF bapie1marcx , lt_forecastparameters TYPE STANDARD TABLE OF bapie1mpop , lt_forecastparametersx TYPE STANDARD TABLE OF bapie1mpopx , lt_planningdata TYPE STANDARD TABLE OF bapie1mpgd , lt_planningdatax TYPE STANDARD TABLE OF bapie1mpgdx , lt_storagelocationdata TYPE STANDARD TABLE OF bapie1mard , lt_storagelocationdatax TYPE STANDARD TABLE OF bapie1mardx , lt_valuationdata TYPE STANDARD TABLE OF bapie1mbew , lt_valuationdatax TYPE STANDARD TABLE OF bapie1mbewx , lt_warehousenumberdata TYPE STANDARD TABLE OF bapie1mlgn , lt_warehousenumberdatax TYPE STANDARD TABLE OF bapie1mlgnx , lt_salesdata TYPE STANDARD TABLE OF bapie1mvke , lt_salesdatax TYPE STANDARD TABLE OF bapie1mvkex , lt_storagetypedata TYPE STANDARD TABLE OF bapie1mlgt , lt_storagetypedatax TYPE STANDARD TABLE OF bapie1mlgtx , lt_materialdescription TYPE STANDARD TABLE OF bapie1makt , lt_unitsofmeasure TYPE STANDARD TABLE OF bapie1marm , lt_unitsofmeasurex TYPE STANDARD TABLE OF bapie1marmx , lt_internationalartnos TYPE STANDARD TABLE OF bapie1mean , lt_materiallongtext TYPE STANDARD TABLE OF bapie1mltx , lt_taxclassifications TYPE STANDARD TABLE OF bapie1mlan , lt_prtdata TYPE STANDARD TABLE OF bapie1mfhm , lt_prtdatax TYPE STANDARD TABLE OF bapie1mfhmx , lt_extensionin TYPE STANDARD TABLE OF bapie1parex , lt_extensioninx TYPE STANDARD TABLE OF bapie1parexx , lt_forecastvalues TYPE STANDARD TABLE OF bapie1mprw , lt_unplndconsumption TYPE STANDARD TABLE OF bapie1mveu , lt_totalconsumption TYPE STANDARD TABLE OF bapie1mveg . DATA : ls_headdata TYPE bapie1matheader , ls_clientdata TYPE bapie1mara , ls_clientdatax TYPE bapie1marax , ls_plantdata TYPE bapie1marc , ls_plantdatax TYPE bapie1marcx , ls_forecastparameters TYPE bapie1mpop , ls_forecastparametersx TYPE bapie1mpopx , ls_planningdata TYPE bapie1mpgd , ls_planningdatax TYPE bapie1mpgdx , ls_storagelocationdata TYPE bapie1mard , ls_storagelocationdatax TYPE bapie1mardx , ls_valuationdata TYPE bapie1mbew , ls_valuationdatax TYPE bapie1mbewx , ls_warehousenumberdata TYPE bapie1mlgn , ls_warehousenumberdatax TYPE bapie1mlgnx , ls_salesdata TYPE bapie1mvke , ls_salesdatax TYPE bapie1mvkex , ls_storagetypedata TYPE bapie1mlgt , ls_storagetypedatax TYPE bapie1mlgtx , ls_materialdescription TYPE bapie1makt , ls_unitsofmeasure TYPE bapie1marm , ls_unitsofmeasurex TYPE bapie1marmx , ls_internationalartnos TYPE bapie1mean , ls_materiallongtext TYPE bapie1mltx , ls_taxclassifications TYPE bapie1mlan , ls_prtdata TYPE bapie1mfhm , ls_prtdatax TYPE bapie1mfhmx , ls_extensionin TYPE bapie1parex , ls_extensioninx TYPE bapie1parexx , ls_forecastvalues TYPE bapie1mprw , ls_unplndconsumption TYPE bapie1mveu , ls_totalconsumption TYPE bapie1mveg . DATA : lt_return TYPE STANDARD TABLE OF bapie1ret2 , ls_return TYPE bapiret2 . *&---------------------------------------------------------------------* *& \u5206\u6279\u5904\u7406 *&---------------------------------------------------------------------* LOOP AT lt_data INTO DATA ( ls_data ) GROUP BY ( matnr = ls_data - matnr ) INTO DATA ( ls_data_grp ). \" \u4efb\u53d6\u4e00\u884c\u4f5c\u4e3a\u62ac\u5934 LOOP AT GROUP ls_data_grp INTO DATA ( ls_data_head ). EXIT . ENDLOOP . *&---------------------------------------------------------------------* *& \u7269\u6599\u53f7 *&---------------------------------------------------------------------* \" \u5927\u591a\u90fd\u662f\u5916\u90e8\u6307\u5b9a\u7269\u6599\u53f7\uff0c\u5982\u9700\u6d41\u6c34\u53ef\u81ea\u884c\u8c03\u6574 CLEAR l_matnr . CALL FUNCTION 'CONVERSION_EXIT_MATN1_INPUT' EXPORTING input = ls_data_head - matnr IMPORTING output = l_matnr EXCEPTIONS length_error = 1 OTHERS = 2 . *&---------------------------------------------------------------------* *& \u8bbe\u7f6e\u9700\u8981\u5bfc\u5165\u7684\u7269\u6599\u548c\u89c6\u56fe *&---------------------------------------------------------------------* CLEAR ls_headdata . ls_headdata - material_long = l_matnr . \" \u7269\u6599 ls_headdata - ind_sector = ls_data_head - mbrsh . \" \u884c\u4e1a\u9886\u57df ls_headdata - matl_type = ls_data_head - mtart . \" \u7269\u6599\u7c7b\u578b ls_headdata - basic_view = abap_true . ls_headdata - sales_view = abap_true . ls_headdata - purchase_view = abap_true . ls_headdata - mrp_view = abap_true . ls_headdata - forecast_view = abap_true . ls_headdata - work_sched_view = abap_true . ls_headdata - prt_view = abap_true . ls_headdata - storage_view = abap_true . ls_headdata - warehouse_view = abap_true . ls_headdata - quality_view = abap_true . ls_headdata - account_view = abap_true . ls_headdata - cost_view = abap_true . INSERT ls_headdata INTO TABLE lt_headdata . *&---------------------------------------------------------------------* *& \u57fa\u7840\u89c6\u56fe *&---------------------------------------------------------------------* DATA ls_mara_ga TYPE mara . DATA ls_bapi_mara_ga TYPE bapi_mara_ga . CLEAR ls_mara_ga . CLEAR ls_bapi_mara_ga . ls_mara_ga = CORRESPONDING # ( ls_data_head ). CALL FUNCTION 'MAP2E_MARA_TO_BAPI_MARA_GA' EXPORTING mara = ls_mara_ga CHANGING bapi_mara_ga = ls_bapi_mara_ga . CLEAR ls_clientdata . ls_clientdata = CORRESPONDING # ( ls_bapi_mara_ga ). ls_clientdata - material_long = l_matnr . CLEAR ls_clientdatax . PERFORM map_data_to_datax USING 'BAPIE1MARAX' ls_clientdata CHANGING ls_clientdatax . INSERT ls_clientdata INTO TABLE lt_clientdata . INSERT ls_clientdatax INTO TABLE lt_clientdatax . *&---------------------------------------------------------------------* *& \u5de5\u5382\u89c6\u56fe *&---------------------------------------------------------------------* DATA ls_marc_ga TYPE marc . DATA ls_bapi_marc_ga TYPE bapi_marc_ga . LOOP AT GROUP ls_data_grp INTO ls_data . CLEAR ls_marc_ga . CLEAR ls_bapi_marc_ga . ls_marc_ga = CORRESPONDING # ( ls_data ). CALL FUNCTION 'MAP2E_MARC_TO_BAPI_MARC_GA' EXPORTING marc = ls_marc_ga h_waers = 'CNY' CHANGING bapi_marc_ga = ls_bapi_marc_ga EXCEPTIONS error_converting_curr_amount = 1 . IF sy - subrc = 0 . CONTINUE . ENDIF . CLEAR ls_plantdata . ls_plantdata = CORRESPONDING # ( ls_bapi_marc_ga ). ls_plantdata - material_long = l_matnr . CLEAR ls_plantdatax . PERFORM map_data_to_datax USING 'BAPIE1MARCX' ls_plantdata CHANGING ls_plantdatax . INSERT ls_plantdata INTO TABLE lt_plantdata . INSERT ls_plantdatax INTO TABLE lt_plantdatax . ENDLOOP . SORT lt_plantdata BY plant . SORT lt_plantdatax BY plant . DELETE ADJACENT DUPLICATES FROM lt_plantdata COMPARING plant . DELETE ADJACENT DUPLICATES FROM lt_plantdatax COMPARING plant . **&---------------------------------------------------------------------* **& MPOP **&---------------------------------------------------------------------* * DATA ls_mpop_ga TYPE mpop. * DATA ls_bapi_mpop_ga TYPE bapi_mpop_ga. * * LOOP AT GROUP ls_data_grp INTO ls_data. * CLEAR ls_mpop_ga. * CLEAR ls_bapi_mpop_ga. * ls_mpop_ga = CORRESPONDING #( ls_data ). * CALL FUNCTION 'MAP2E_MPOP_TO_BAPI_MPOP_GA' * EXPORTING * mpop = ls_mpop_ga * CHANGING * bapi_mpop_ga = ls_bapi_mpop_ga. * * CLEAR ls_forecastparameters. * ls_forecastparameters = CORRESPONDING #( ls_bapi_mpop_ga ). * ls_forecastparameters-material_long = l_matnr. * * CLEAR ls_forecastparametersx. * PERFORM map_data_to_datax USING 'BAPIE1MPOPX' ls_forecastparameters CHANGING ls_forecastparametersx. * * INSERT ls_forecastparameters INTO TABLE lt_forecastparameters. * INSERT ls_forecastparametersx INTO TABLE lt_forecastparametersx. * ENDLOOP. * * SORT lt_forecastparameters BY plant. * SORT lt_forecastparametersx BY plant. * DELETE ADJACENT DUPLICATES FROM lt_forecastparameters COMPARING plant. * DELETE ADJACENT DUPLICATES FROM lt_forecastparametersx COMPARING plant. **&---------------------------------------------------------------------* **& MPGD **&---------------------------------------------------------------------* * DATA ls_mpgd_ga TYPE mpgd. * DATA ls_bapi_mpgd_ga TYPE bapi_mpgd_ga. * * LOOP AT GROUP ls_data_grp INTO ls_data. * CLEAR ls_mpgd_ga. * CLEAR ls_bapi_mpgd_ga. * ls_mpgd_ga = CORRESPONDING #( ls_data ). * CALL FUNCTION 'MAP2E_MPGD_TO_BAPI_MPGD_GA' * EXPORTING * mpgd = ls_mpgd_ga * CHANGING * bapi_mpgd_ga = ls_bapi_mpgd_ga. * * CLEAR ls_planningdata. * ls_planningdata = CORRESPONDING #( ls_bapi_mpgd_ga ). * ls_planningdata-material_long = l_matnr. * * CLEAR ls_planningdatax. * PERFORM map_data_to_datax USING 'BAPIE1MPGDX' ls_planningdata CHANGING ls_planningdatax. * * INSERT ls_planningdata INTO TABLE lt_planningdata. * INSERT ls_planningdatax INTO TABLE lt_planningdatax. * ENDLOOP. * * SORT lt_planningdata BY plant. * SORT lt_planningdatax BY plant. * DELETE ADJACENT DUPLICATES FROM lt_planningdata COMPARING plant. * DELETE ADJACENT DUPLICATES FROM lt_planningdatax COMPARING plant. *&---------------------------------------------------------------------* *& \u5e93\u4f4d\u89c6\u56fe *&---------------------------------------------------------------------* DATA ls_mard_ga TYPE mard . DATA ls_bapi_mard_ga TYPE bapi_mard_ga . LOOP AT GROUP ls_data_grp INTO ls_data . CLEAR ls_mard_ga . CLEAR ls_bapi_mard_ga . ls_mard_ga = CORRESPONDING # ( ls_data ). CALL FUNCTION 'MAP2E_MARD_TO_BAPI_MARD_GA' EXPORTING mard = ls_mard_ga CHANGING bapi_mard_ga = ls_bapi_mard_ga . CLEAR ls_storagelocationdata . ls_storagelocationdata = CORRESPONDING # ( ls_bapi_mard_ga ). ls_storagelocationdata - material_long = l_matnr . CLEAR ls_storagelocationdatax . PERFORM map_data_to_datax USING 'BAPIE1MARDX' ls_storagelocationdata CHANGING ls_storagelocationdatax . INSERT ls_storagelocationdata INTO TABLE lt_storagelocationdata . INSERT ls_storagelocationdatax INTO TABLE lt_storagelocationdatax . ENDLOOP . SORT lt_storagelocationdata BY plant stge_loc . SORT lt_storagelocationdatax BY plant stge_loc . DELETE ADJACENT DUPLICATES FROM lt_storagelocationdata COMPARING plant stge_loc . DELETE ADJACENT DUPLICATES FROM lt_storagelocationdatax COMPARING plant stge_loc . *&---------------------------------------------------------------------* *& \u8bc4\u4f30\u89c6\u56fe *&---------------------------------------------------------------------* DATA ls_mbew_ga TYPE mbew . DATA ls_bapi_mbew_ga TYPE bapi_mbew_ga . LOOP AT GROUP ls_data_grp INTO ls_data . CLEAR ls_mbew_ga . CLEAR ls_bapi_mbew_ga . ls_mbew_ga = CORRESPONDING # ( ls_data ). CALL FUNCTION 'MAP2E_MBEW_TO_BAPI_MBEW_GA' EXPORTING mbew = ls_mbew_ga h_waers = 'CNY' CHANGING bapi_mbew_ga = ls_bapi_mbew_ga EXCEPTIONS error_converting_curr_amount = 1 . IF sy - subrc <> 0 . CONTINUE . ENDIF . CLEAR ls_valuationdata . ls_valuationdata = CORRESPONDING # ( ls_bapi_mbew_ga ). ls_valuationdata - material_long = l_matnr . CLEAR ls_valuationdatax . PERFORM map_data_to_datax USING 'BAPIE1MBEWX' ls_valuationdata CHANGING ls_valuationdatax . INSERT ls_valuationdata INTO TABLE lt_valuationdata . INSERT ls_valuationdatax INTO TABLE lt_valuationdatax . ENDLOOP . SORT lt_valuationdata BY val_area val_type . SORT lt_valuationdatax BY val_area val_type . DELETE ADJACENT DUPLICATES FROM lt_valuationdata COMPARING val_area val_type . DELETE ADJACENT DUPLICATES FROM lt_valuationdatax COMPARING val_area val_type . *&---------------------------------------------------------------------* *& MLGN *&---------------------------------------------------------------------* DATA ls_mlgn_ga TYPE mlgn . DATA ls_bapi_mlgn_ga TYPE bapi_mlgn_ga . LOOP AT GROUP ls_data_grp INTO ls_data . CLEAR ls_mlgn_ga . CLEAR ls_bapi_mlgn_ga . ls_mlgn_ga = CORRESPONDING # ( ls_data ). CALL FUNCTION 'MAP2E_MLGN_TO_BAPI_MLGN_GA' EXPORTING mlgn = ls_mlgn_ga CHANGING bapi_mlgn_ga = ls_bapi_mlgn_ga . CLEAR ls_plantdata . ls_plantdata = CORRESPONDING # ( ls_bapi_mlgn_ga ). ls_plantdata - material_long = l_matnr . CLEAR ls_plantdatax . PERFORM map_data_to_datax USING 'BAPIE1MLGNX' ls_plantdata CHANGING ls_plantdatax . INSERT ls_plantdata INTO TABLE lt_plantdata . INSERT ls_plantdatax INTO TABLE lt_plantdatax . ENDLOOP . SORT lt_plantdata BY plant . SORT lt_plantdatax BY plant . DELETE ADJACENT DUPLICATES FROM lt_plantdata COMPARING plant . DELETE ADJACENT DUPLICATES FROM lt_plantdatax COMPARING plant . *&---------------------------------------------------------------------* *& \u9500\u552e\u89c6\u56fe *&---------------------------------------------------------------------* DATA ls_mvke_ga TYPE mvke . DATA ls_bapi_mvke_ga TYPE bapi_mvke_ga . LOOP AT GROUP ls_data_grp INTO ls_data . CLEAR ls_mvke_ga . CLEAR ls_bapi_mvke_ga . ls_mvke_ga = CORRESPONDING # ( ls_data ). CALL FUNCTION 'MAP2E_MVKE_TO_BAPI_MVKE_GA' EXPORTING mvke = ls_mvke_ga CHANGING bapi_mvke_ga = ls_bapi_mvke_ga . CLEAR ls_salesdata . ls_salesdata = CORRESPONDING # ( ls_bapi_mvke_ga ). ls_salesdata - material_long = l_matnr . CLEAR ls_salesdatax . PERFORM map_data_to_datax USING 'BAPIE1MVKEX' ls_salesdata CHANGING ls_salesdatax . INSERT ls_salesdata INTO TABLE lt_salesdata . INSERT ls_salesdatax INTO TABLE lt_salesdatax . ENDLOOP . SORT lt_salesdata BY sales_org distr_chan . SORT lt_salesdatax BY sales_org distr_chan . DELETE ADJACENT DUPLICATES FROM lt_salesdata COMPARING sales_org distr_chan . DELETE ADJACENT DUPLICATES FROM lt_salesdatax COMPARING sales_org distr_chan . *&---------------------------------------------------------------------* *& MLGT *&---------------------------------------------------------------------* DATA ls_mlgt_ga TYPE mlgt . DATA ls_bapi_mlgt_ga TYPE bapi_mlgt_ga . LOOP AT GROUP ls_data_grp INTO ls_data . CLEAR ls_mlgt_ga . CLEAR ls_bapi_mlgt_ga . ls_mlgt_ga = CORRESPONDING # ( ls_data ). CALL FUNCTION 'MAP2E_MLGT_TO_BAPI_MLGT_GA' EXPORTING mlgt = ls_mlgt_ga CHANGING bapi_mlgt_ga = ls_bapi_mlgt_ga . CLEAR ls_storagetypedata . ls_storagetypedata = CORRESPONDING # ( ls_bapi_mlgt_ga ). ls_storagetypedata - material_long = l_matnr . CLEAR ls_storagetypedatax . PERFORM map_data_to_datax USING 'BAPIE1MLGTX' ls_storagetypedata CHANGING ls_storagetypedatax . INSERT ls_storagetypedata INTO TABLE lt_storagetypedata . INSERT ls_storagetypedatax INTO TABLE lt_storagetypedatax . ENDLOOP . SORT lt_storagetypedata BY whse_no stge_type . SORT lt_storagetypedatax BY whse_no stge_type . DELETE ADJACENT DUPLICATES FROM lt_storagetypedata COMPARING whse_no stge_type . DELETE ADJACENT DUPLICATES FROM lt_storagetypedatax COMPARING whse_no stge_type . *&---------------------------------------------------------------------* *& \u7269\u6599\u63cf\u8ff0 *&---------------------------------------------------------------------* CLEAR ls_materialdescription . ls_materialdescription - material_long = l_matnr . ls_materialdescription - langu = '1' . ls_materialdescription - matl_desc = ls_data_head - maktx . INSERT ls_materialdescription INTO TABLE lt_materialdescription . SORT lt_materialdescription BY langu . DELETE ADJACENT DUPLICATES FROM lt_materialdescription COMPARING langu . **&---------------------------------------------------------------------* **& \u7a0e **&---------------------------------------------------------------------* * CLEAR ls_taxclassifications. * ls_taxclassifications-material_long = l_matnr. * ls_taxclassifications-depcountry = ls_data_head-aland. * ls_taxclassifications-tax_ind = ls_data_head-taxim. * * IF ls_data_head-taxm1 IS NOT INITIAL. * ls_taxclassifications-tax_type_1 = ls_data_head-taxm1. * ls_taxclassifications-taxclass_1 = ls_data_head-taxim. * ENDIF. * * IF ls_data_head-taxm2 IS NOT INITIAL. * ls_taxclassifications-tax_type_2 = ls_data_head-taxm2. * ls_taxclassifications-taxclass_2 = ls_data_head-taxim. * ENDIF. * * IF ls_data_head-taxm3 IS NOT INITIAL. * ls_taxclassifications-tax_type_3 = ls_data_head-taxm3. * ls_taxclassifications-taxclass_3 = ls_data_head-taxim. * ENDIF. * * IF ls_data_head-taxm4 IS NOT INITIAL. * ls_taxclassifications-tax_type_4 = ls_data_head-taxm4. * ls_taxclassifications-taxclass_4 = ls_data_head-taxim. * ENDIF. * * IF ls_data_head-taxm5 IS NOT INITIAL. * ls_taxclassifications-tax_type_5 = ls_data_head-taxm5. * ls_taxclassifications-taxclass_5 = ls_data_head-taxim. * ENDIF. * * IF ls_data_head-taxm6 IS NOT INITIAL. * ls_taxclassifications-tax_type_6 = ls_data_head-taxm6. * ls_taxclassifications-taxclass_6 = ls_data_head-taxim. * ENDIF. * * IF ls_data_head-taxm7 IS NOT INITIAL. * ls_taxclassifications-tax_type_7 = ls_data_head-taxm7. * ls_taxclassifications-taxclass_7 = ls_data_head-taxim. * ENDIF. * * IF ls_data_head-taxm8 IS NOT INITIAL. * ls_taxclassifications-tax_type_8 = ls_data_head-taxm8. * ls_taxclassifications-taxclass_8 = ls_data_head-taxim. * ENDIF. * * IF ls_data_head-taxm9 IS NOT INITIAL. * ls_taxclassifications-tax_type_9 = ls_data_head-taxm9. * ls_taxclassifications-taxclass_9 = ls_data_head-taxim. * ENDIF. * * INSERT ls_taxclassifications INTO TABLE lt_taxclassifications. **&---------------------------------------------------------------------* **& MARM **&---------------------------------------------------------------------* * DATA ls_marm_ga TYPE marm. * DATA ls_bapi_marm_ga TYPE bapi_marm_ga. * * LOOP AT GROUP ls_data_grp INTO ls_data. * CLEAR ls_marm_ga. * CLEAR ls_unitsofmeasure. * ls_marm_ga = CORRESPONDING #( ls_data ). * CALL FUNCTION 'MAP2E_MARM_TO_BAPIE1MARM' * EXPORTING * marm = ls_marm_ga * CHANGING * bapie1marm = ls_unitsofmeasure. * ls_unitsofmeasure-material_long = l_matnr. * * CLEAR ls_unitsofmeasurex. * PERFORM map_data_to_datax USING 'BAPIE1MARMX' ls_unitsofmeasure CHANGING ls_unitsofmeasurex. * * INSERT ls_unitsofmeasure INTO TABLE lt_unitsofmeasure. * INSERT ls_unitsofmeasurex INTO TABLE lt_unitsofmeasurex. * ENDLOOP. * * SORT lt_unitsofmeasure BY alt_unit alt_unit_iso. * SORT lt_unitsofmeasurex BY alt_unit alt_unit_iso. * DELETE ADJACENT DUPLICATES FROM lt_unitsofmeasure COMPARING alt_unit alt_unit_iso. * DELETE ADJACENT DUPLICATES FROM lt_unitsofmeasurex COMPARING alt_unit alt_unit_iso. *&---------------------------------------------------------------------* *& \u5bfc\u5165\u7269\u6599 *&---------------------------------------------------------------------* CLEAR lt_return . CALL FUNCTION 'BAPI_MATERIAL_SAVEREPLICA' EXPORTING noappllog = l_global_data - no_appl_log nochangedoc = l_global_data - no_change_doc testrun = l_global_data - testrun inpfldcheck = l_global_data - inp_fld_check TABLES headdata = lt_headdata clientdata = lt_clientdata clientdatax = lt_clientdatax plantdata = lt_plantdata plantdatax = lt_plantdatax forecastparameters = lt_forecastparameters forecastparametersx = lt_forecastparametersx planningdata = lt_planningdata planningdatax = lt_planningdatax storagelocationdata = lt_storagelocationdata storagelocationdatax = lt_storagelocationdatax valuationdata = lt_valuationdata valuationdatax = lt_valuationdatax warehousenumberdata = lt_warehousenumberdata warehousenumberdatax = lt_warehousenumberdatax salesdata = lt_salesdata salesdatax = lt_salesdatax storagetypedata = lt_storagetypedata storagetypedatax = lt_storagetypedatax materialdescription = lt_materialdescription unitsofmeasure = lt_unitsofmeasure unitsofmeasurex = lt_unitsofmeasurex * internationalartnos = lt_internationalartnos * materiallongtext = lt_materiallongtext taxclassifications = lt_taxclassifications * prtdata = lt_prtdata * prtdatax = lt_prtdatax extensionin = lt_extensionin extensioninx = lt_extensioninx * forecastvalues = lt_forecastvalues * unplndconsumption = lt_unplndconsumption * totalconsumption = lt_totalconsumption returnmessages = lt_return . CLEAR l_mtype . CLEAR l_msg . LOOP AT lt_return INTO ls_return WHERE type CA 'AXE' . MESSAGE ID ls_return - id TYPE ls_return - type NUMBER ls_return - number WITH ls_return - message_v1 ls_return - message_v2 ls_return - message_v3 ls_return - message_v4 INTO ls_return - message . l_msg = |{ l_msg }{ ls_return - message }|. ENDLOOP . IF sy - subrc = 0 . l_mtype = 'E' . CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK' . ELSE . l_matnr = lt_headdata [ 1 ] - material_long . l_mtype = 'S' . l_msg = '\u5df2\u5904\u7406' . CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = abap_true . ENDIF . \" \u56de\u5199\u6d88\u606f LOOP AT GROUP ls_data_grp REFERENCE INTO DATA ( lr_data ). lr_data -> mtype = l_mtype . lr_data -> msg = l_msg . ENDLOOP . ENDLOOP . ENDFUNCTION . *&---------------------------------------------------------------------* *& \u540c\u540dBAPIUPDATE\u5b57\u6bb5\u8d4b\u503c *&---------------------------------------------------------------------* FORM map_data_to_datax USING i_name TYPE tabname i_data TYPE data CHANGING c_datax TYPE data . FIELD-SYMBOLS <wa> TYPE any . FIELD-SYMBOLS <wax> TYPE any . SELECT fieldname , rollname FROM dd03l WHERE tabname = @ i_name INTO TABLE @ DATA ( lt_field ). LOOP AT lt_field INTO DATA ( ls_field ). ASSIGN COMPONENT ls_field - fieldname OF STRUCTURE i_data TO <wa> . ASSIGN COMPONENT ls_field - fieldname OF STRUCTURE c_datax TO <wax> . IF <wa> IS ASSIGNED AND <wax> IS ASSIGNED . IF ls_field - rollname = 'BAPIUPDATE' . IF <wa> IS NOT INITIAL AND <wa> <> '' . <wax> = abap_true . ENDIF . ELSE . <wax> = <wa> . ENDIF . ENDIF . ENDLOOP . ENDFORM . \u7269\u6599\u5206\u7c7b\u89c6\u56fe \u00b6 BAPI_OBJCL_EXISTENCECHECK \uff0c\u68c0\u67e5\u7269\u6599\u662f\u5426\u5b58\u5728\u5206\u7c7b\u89c6\u56fe BAPI_OBJCL_CREATE \uff0c\u521b\u5efa\u7269\u6599\u5206\u7c7b\u89c6\u56fe BAPI_OBJCL_CHANGE \uff0c\u4fee\u6539\u7269\u6599\u5206\u7c7b\u89c6\u56fe BAPI_OBJCL_GETDETAIL \uff0c\u83b7\u53d6\u7269\u6599\u5206\u7c7b\u7279\u5f81\u503c \u793a\u4f8b\u4ee3\u7801 IDOC\u7269\u6599\u540c\u6b65 \u00b6 SAP\u7cfb\u7edf\u95f4\u8fc1\u79fb\u6216\u540c\u6b65\u7269\u6599\uff0c\u63a8\u8350\u4f7f\u7528IDOC\u5b9e\u73b0\uff0c\u4e0b\u9762\u8bb2\u8ff0\u5b9e\u73b0\u8fc7\u7a0b\u3002 \u793a\u4f8b\u4ee3\u7801","title":"\u7269\u6599"},{"location":"master_data/material/#_1","text":"","title":"\u7269\u6599"},{"location":"master_data/material/#_2","text":"BAPI_MATERIAL_SAVEDATA \uff0c\u6bcf\u6b21\u53ea\u80fd\u6269\u5c55\u4e00\u4e2a\u5de5\u5382\u3002 BAPI_MATERIAL_SAVEREPLICA \uff0c\u5141\u8bb8\u6269\u5c55\u591a\u4e2a\u5de5\u5382\uff0c\u4e0b\u9762\u4f7f\u7528\u8be5\u51fd\u6570\u7ef4\u62a4\u7269\u6599\u3002 \u793a\u4f8b\u4ee3\u7801 FUNCTION zfm_demo_material_save_2 \" You can use the template 'functionModuleParameter' to add here the signature! . *&---------------------------------------------------------------------* *& \u6279\u5bfc\u6570\u636e *&---------------------------------------------------------------------* \" \u6f14\u793a\u7528\uff0c\u5047\u8bbe\u8fd9\u662f\u7a0b\u5e8f\u7684\u5165\u53c2\u548c\u51fa\u53c2 TYPES : BEGIN OF ty_data , matnr TYPE mara - matnr , mbrsh TYPE mara - mbrsh , mtart TYPE mara - mtart , maktx TYPE makt - maktx , werks TYPE werks_d , vkorg TYPE vkorg , mtype TYPE bapi_mtype , msg TYPE bapi_msg , END OF ty_data . TYPES tt_data TYPE STANDARD TABLE OF ty_data . DATA lt_data TYPE tt_data . DATA l_matnr TYPE matnr . DATA l_mtype TYPE bapi_mtype . DATA l_msg TYPE bapi_msg . *&---------------------------------------------------------------------* *& BAPI\u6570\u636e\u58f0\u660e *&---------------------------------------------------------------------* DATA l_global_data TYPE bapie1global_data . DATA : lt_headdata TYPE STANDARD TABLE OF bapie1matheader , lt_clientdata TYPE STANDARD TABLE OF bapie1mara , lt_clientdatax TYPE STANDARD TABLE OF bapie1marax , lt_plantdata TYPE STANDARD TABLE OF bapie1marc , lt_plantdatax TYPE STANDARD TABLE OF bapie1marcx , lt_forecastparameters TYPE STANDARD TABLE OF bapie1mpop , lt_forecastparametersx TYPE STANDARD TABLE OF bapie1mpopx , lt_planningdata TYPE STANDARD TABLE OF bapie1mpgd , lt_planningdatax TYPE STANDARD TABLE OF bapie1mpgdx , lt_storagelocationdata TYPE STANDARD TABLE OF bapie1mard , lt_storagelocationdatax TYPE STANDARD TABLE OF bapie1mardx , lt_valuationdata TYPE STANDARD TABLE OF bapie1mbew , lt_valuationdatax TYPE STANDARD TABLE OF bapie1mbewx , lt_warehousenumberdata TYPE STANDARD TABLE OF bapie1mlgn , lt_warehousenumberdatax TYPE STANDARD TABLE OF bapie1mlgnx , lt_salesdata TYPE STANDARD TABLE OF bapie1mvke , lt_salesdatax TYPE STANDARD TABLE OF bapie1mvkex , lt_storagetypedata TYPE STANDARD TABLE OF bapie1mlgt , lt_storagetypedatax TYPE STANDARD TABLE OF bapie1mlgtx , lt_materialdescription TYPE STANDARD TABLE OF bapie1makt , lt_unitsofmeasure TYPE STANDARD TABLE OF bapie1marm , lt_unitsofmeasurex TYPE STANDARD TABLE OF bapie1marmx , lt_internationalartnos TYPE STANDARD TABLE OF bapie1mean , lt_materiallongtext TYPE STANDARD TABLE OF bapie1mltx , lt_taxclassifications TYPE STANDARD TABLE OF bapie1mlan , lt_prtdata TYPE STANDARD TABLE OF bapie1mfhm , lt_prtdatax TYPE STANDARD TABLE OF bapie1mfhmx , lt_extensionin TYPE STANDARD TABLE OF bapie1parex , lt_extensioninx TYPE STANDARD TABLE OF bapie1parexx , lt_forecastvalues TYPE STANDARD TABLE OF bapie1mprw , lt_unplndconsumption TYPE STANDARD TABLE OF bapie1mveu , lt_totalconsumption TYPE STANDARD TABLE OF bapie1mveg . DATA : ls_headdata TYPE bapie1matheader , ls_clientdata TYPE bapie1mara , ls_clientdatax TYPE bapie1marax , ls_plantdata TYPE bapie1marc , ls_plantdatax TYPE bapie1marcx , ls_forecastparameters TYPE bapie1mpop , ls_forecastparametersx TYPE bapie1mpopx , ls_planningdata TYPE bapie1mpgd , ls_planningdatax TYPE bapie1mpgdx , ls_storagelocationdata TYPE bapie1mard , ls_storagelocationdatax TYPE bapie1mardx , ls_valuationdata TYPE bapie1mbew , ls_valuationdatax TYPE bapie1mbewx , ls_warehousenumberdata TYPE bapie1mlgn , ls_warehousenumberdatax TYPE bapie1mlgnx , ls_salesdata TYPE bapie1mvke , ls_salesdatax TYPE bapie1mvkex , ls_storagetypedata TYPE bapie1mlgt , ls_storagetypedatax TYPE bapie1mlgtx , ls_materialdescription TYPE bapie1makt , ls_unitsofmeasure TYPE bapie1marm , ls_unitsofmeasurex TYPE bapie1marmx , ls_internationalartnos TYPE bapie1mean , ls_materiallongtext TYPE bapie1mltx , ls_taxclassifications TYPE bapie1mlan , ls_prtdata TYPE bapie1mfhm , ls_prtdatax TYPE bapie1mfhmx , ls_extensionin TYPE bapie1parex , ls_extensioninx TYPE bapie1parexx , ls_forecastvalues TYPE bapie1mprw , ls_unplndconsumption TYPE bapie1mveu , ls_totalconsumption TYPE bapie1mveg . DATA : lt_return TYPE STANDARD TABLE OF bapie1ret2 , ls_return TYPE bapiret2 . *&---------------------------------------------------------------------* *& \u5206\u6279\u5904\u7406 *&---------------------------------------------------------------------* LOOP AT lt_data INTO DATA ( ls_data ) GROUP BY ( matnr = ls_data - matnr ) INTO DATA ( ls_data_grp ). \" \u4efb\u53d6\u4e00\u884c\u4f5c\u4e3a\u62ac\u5934 LOOP AT GROUP ls_data_grp INTO DATA ( ls_data_head ). EXIT . ENDLOOP . *&---------------------------------------------------------------------* *& \u7269\u6599\u53f7 *&---------------------------------------------------------------------* \" \u5927\u591a\u90fd\u662f\u5916\u90e8\u6307\u5b9a\u7269\u6599\u53f7\uff0c\u5982\u9700\u6d41\u6c34\u53ef\u81ea\u884c\u8c03\u6574 CLEAR l_matnr . CALL FUNCTION 'CONVERSION_EXIT_MATN1_INPUT' EXPORTING input = ls_data_head - matnr IMPORTING output = l_matnr EXCEPTIONS length_error = 1 OTHERS = 2 . *&---------------------------------------------------------------------* *& \u8bbe\u7f6e\u9700\u8981\u5bfc\u5165\u7684\u7269\u6599\u548c\u89c6\u56fe *&---------------------------------------------------------------------* CLEAR ls_headdata . ls_headdata - material_long = l_matnr . \" \u7269\u6599 ls_headdata - ind_sector = ls_data_head - mbrsh . \" \u884c\u4e1a\u9886\u57df ls_headdata - matl_type = ls_data_head - mtart . \" \u7269\u6599\u7c7b\u578b ls_headdata - basic_view = abap_true . ls_headdata - sales_view = abap_true . ls_headdata - purchase_view = abap_true . ls_headdata - mrp_view = abap_true . ls_headdata - forecast_view = abap_true . ls_headdata - work_sched_view = abap_true . ls_headdata - prt_view = abap_true . ls_headdata - storage_view = abap_true . ls_headdata - warehouse_view = abap_true . ls_headdata - quality_view = abap_true . ls_headdata - account_view = abap_true . ls_headdata - cost_view = abap_true . INSERT ls_headdata INTO TABLE lt_headdata . *&---------------------------------------------------------------------* *& \u57fa\u7840\u89c6\u56fe *&---------------------------------------------------------------------* DATA ls_mara_ga TYPE mara . DATA ls_bapi_mara_ga TYPE bapi_mara_ga . CLEAR ls_mara_ga . CLEAR ls_bapi_mara_ga . ls_mara_ga = CORRESPONDING # ( ls_data_head ). CALL FUNCTION 'MAP2E_MARA_TO_BAPI_MARA_GA' EXPORTING mara = ls_mara_ga CHANGING bapi_mara_ga = ls_bapi_mara_ga . CLEAR ls_clientdata . ls_clientdata = CORRESPONDING # ( ls_bapi_mara_ga ). ls_clientdata - material_long = l_matnr . CLEAR ls_clientdatax . PERFORM map_data_to_datax USING 'BAPIE1MARAX' ls_clientdata CHANGING ls_clientdatax . INSERT ls_clientdata INTO TABLE lt_clientdata . INSERT ls_clientdatax INTO TABLE lt_clientdatax . *&---------------------------------------------------------------------* *& \u5de5\u5382\u89c6\u56fe *&---------------------------------------------------------------------* DATA ls_marc_ga TYPE marc . DATA ls_bapi_marc_ga TYPE bapi_marc_ga . LOOP AT GROUP ls_data_grp INTO ls_data . CLEAR ls_marc_ga . CLEAR ls_bapi_marc_ga . ls_marc_ga = CORRESPONDING # ( ls_data ). CALL FUNCTION 'MAP2E_MARC_TO_BAPI_MARC_GA' EXPORTING marc = ls_marc_ga h_waers = 'CNY' CHANGING bapi_marc_ga = ls_bapi_marc_ga EXCEPTIONS error_converting_curr_amount = 1 . IF sy - subrc = 0 . CONTINUE . ENDIF . CLEAR ls_plantdata . ls_plantdata = CORRESPONDING # ( ls_bapi_marc_ga ). ls_plantdata - material_long = l_matnr . CLEAR ls_plantdatax . PERFORM map_data_to_datax USING 'BAPIE1MARCX' ls_plantdata CHANGING ls_plantdatax . INSERT ls_plantdata INTO TABLE lt_plantdata . INSERT ls_plantdatax INTO TABLE lt_plantdatax . ENDLOOP . SORT lt_plantdata BY plant . SORT lt_plantdatax BY plant . DELETE ADJACENT DUPLICATES FROM lt_plantdata COMPARING plant . DELETE ADJACENT DUPLICATES FROM lt_plantdatax COMPARING plant . **&---------------------------------------------------------------------* **& MPOP **&---------------------------------------------------------------------* * DATA ls_mpop_ga TYPE mpop. * DATA ls_bapi_mpop_ga TYPE bapi_mpop_ga. * * LOOP AT GROUP ls_data_grp INTO ls_data. * CLEAR ls_mpop_ga. * CLEAR ls_bapi_mpop_ga. * ls_mpop_ga = CORRESPONDING #( ls_data ). * CALL FUNCTION 'MAP2E_MPOP_TO_BAPI_MPOP_GA' * EXPORTING * mpop = ls_mpop_ga * CHANGING * bapi_mpop_ga = ls_bapi_mpop_ga. * * CLEAR ls_forecastparameters. * ls_forecastparameters = CORRESPONDING #( ls_bapi_mpop_ga ). * ls_forecastparameters-material_long = l_matnr. * * CLEAR ls_forecastparametersx. * PERFORM map_data_to_datax USING 'BAPIE1MPOPX' ls_forecastparameters CHANGING ls_forecastparametersx. * * INSERT ls_forecastparameters INTO TABLE lt_forecastparameters. * INSERT ls_forecastparametersx INTO TABLE lt_forecastparametersx. * ENDLOOP. * * SORT lt_forecastparameters BY plant. * SORT lt_forecastparametersx BY plant. * DELETE ADJACENT DUPLICATES FROM lt_forecastparameters COMPARING plant. * DELETE ADJACENT DUPLICATES FROM lt_forecastparametersx COMPARING plant. **&---------------------------------------------------------------------* **& MPGD **&---------------------------------------------------------------------* * DATA ls_mpgd_ga TYPE mpgd. * DATA ls_bapi_mpgd_ga TYPE bapi_mpgd_ga. * * LOOP AT GROUP ls_data_grp INTO ls_data. * CLEAR ls_mpgd_ga. * CLEAR ls_bapi_mpgd_ga. * ls_mpgd_ga = CORRESPONDING #( ls_data ). * CALL FUNCTION 'MAP2E_MPGD_TO_BAPI_MPGD_GA' * EXPORTING * mpgd = ls_mpgd_ga * CHANGING * bapi_mpgd_ga = ls_bapi_mpgd_ga. * * CLEAR ls_planningdata. * ls_planningdata = CORRESPONDING #( ls_bapi_mpgd_ga ). * ls_planningdata-material_long = l_matnr. * * CLEAR ls_planningdatax. * PERFORM map_data_to_datax USING 'BAPIE1MPGDX' ls_planningdata CHANGING ls_planningdatax. * * INSERT ls_planningdata INTO TABLE lt_planningdata. * INSERT ls_planningdatax INTO TABLE lt_planningdatax. * ENDLOOP. * * SORT lt_planningdata BY plant. * SORT lt_planningdatax BY plant. * DELETE ADJACENT DUPLICATES FROM lt_planningdata COMPARING plant. * DELETE ADJACENT DUPLICATES FROM lt_planningdatax COMPARING plant. *&---------------------------------------------------------------------* *& \u5e93\u4f4d\u89c6\u56fe *&---------------------------------------------------------------------* DATA ls_mard_ga TYPE mard . DATA ls_bapi_mard_ga TYPE bapi_mard_ga . LOOP AT GROUP ls_data_grp INTO ls_data . CLEAR ls_mard_ga . CLEAR ls_bapi_mard_ga . ls_mard_ga = CORRESPONDING # ( ls_data ). CALL FUNCTION 'MAP2E_MARD_TO_BAPI_MARD_GA' EXPORTING mard = ls_mard_ga CHANGING bapi_mard_ga = ls_bapi_mard_ga . CLEAR ls_storagelocationdata . ls_storagelocationdata = CORRESPONDING # ( ls_bapi_mard_ga ). ls_storagelocationdata - material_long = l_matnr . CLEAR ls_storagelocationdatax . PERFORM map_data_to_datax USING 'BAPIE1MARDX' ls_storagelocationdata CHANGING ls_storagelocationdatax . INSERT ls_storagelocationdata INTO TABLE lt_storagelocationdata . INSERT ls_storagelocationdatax INTO TABLE lt_storagelocationdatax . ENDLOOP . SORT lt_storagelocationdata BY plant stge_loc . SORT lt_storagelocationdatax BY plant stge_loc . DELETE ADJACENT DUPLICATES FROM lt_storagelocationdata COMPARING plant stge_loc . DELETE ADJACENT DUPLICATES FROM lt_storagelocationdatax COMPARING plant stge_loc . *&---------------------------------------------------------------------* *& \u8bc4\u4f30\u89c6\u56fe *&---------------------------------------------------------------------* DATA ls_mbew_ga TYPE mbew . DATA ls_bapi_mbew_ga TYPE bapi_mbew_ga . LOOP AT GROUP ls_data_grp INTO ls_data . CLEAR ls_mbew_ga . CLEAR ls_bapi_mbew_ga . ls_mbew_ga = CORRESPONDING # ( ls_data ). CALL FUNCTION 'MAP2E_MBEW_TO_BAPI_MBEW_GA' EXPORTING mbew = ls_mbew_ga h_waers = 'CNY' CHANGING bapi_mbew_ga = ls_bapi_mbew_ga EXCEPTIONS error_converting_curr_amount = 1 . IF sy - subrc <> 0 . CONTINUE . ENDIF . CLEAR ls_valuationdata . ls_valuationdata = CORRESPONDING # ( ls_bapi_mbew_ga ). ls_valuationdata - material_long = l_matnr . CLEAR ls_valuationdatax . PERFORM map_data_to_datax USING 'BAPIE1MBEWX' ls_valuationdata CHANGING ls_valuationdatax . INSERT ls_valuationdata INTO TABLE lt_valuationdata . INSERT ls_valuationdatax INTO TABLE lt_valuationdatax . ENDLOOP . SORT lt_valuationdata BY val_area val_type . SORT lt_valuationdatax BY val_area val_type . DELETE ADJACENT DUPLICATES FROM lt_valuationdata COMPARING val_area val_type . DELETE ADJACENT DUPLICATES FROM lt_valuationdatax COMPARING val_area val_type . *&---------------------------------------------------------------------* *& MLGN *&---------------------------------------------------------------------* DATA ls_mlgn_ga TYPE mlgn . DATA ls_bapi_mlgn_ga TYPE bapi_mlgn_ga . LOOP AT GROUP ls_data_grp INTO ls_data . CLEAR ls_mlgn_ga . CLEAR ls_bapi_mlgn_ga . ls_mlgn_ga = CORRESPONDING # ( ls_data ). CALL FUNCTION 'MAP2E_MLGN_TO_BAPI_MLGN_GA' EXPORTING mlgn = ls_mlgn_ga CHANGING bapi_mlgn_ga = ls_bapi_mlgn_ga . CLEAR ls_plantdata . ls_plantdata = CORRESPONDING # ( ls_bapi_mlgn_ga ). ls_plantdata - material_long = l_matnr . CLEAR ls_plantdatax . PERFORM map_data_to_datax USING 'BAPIE1MLGNX' ls_plantdata CHANGING ls_plantdatax . INSERT ls_plantdata INTO TABLE lt_plantdata . INSERT ls_plantdatax INTO TABLE lt_plantdatax . ENDLOOP . SORT lt_plantdata BY plant . SORT lt_plantdatax BY plant . DELETE ADJACENT DUPLICATES FROM lt_plantdata COMPARING plant . DELETE ADJACENT DUPLICATES FROM lt_plantdatax COMPARING plant . *&---------------------------------------------------------------------* *& \u9500\u552e\u89c6\u56fe *&---------------------------------------------------------------------* DATA ls_mvke_ga TYPE mvke . DATA ls_bapi_mvke_ga TYPE bapi_mvke_ga . LOOP AT GROUP ls_data_grp INTO ls_data . CLEAR ls_mvke_ga . CLEAR ls_bapi_mvke_ga . ls_mvke_ga = CORRESPONDING # ( ls_data ). CALL FUNCTION 'MAP2E_MVKE_TO_BAPI_MVKE_GA' EXPORTING mvke = ls_mvke_ga CHANGING bapi_mvke_ga = ls_bapi_mvke_ga . CLEAR ls_salesdata . ls_salesdata = CORRESPONDING # ( ls_bapi_mvke_ga ). ls_salesdata - material_long = l_matnr . CLEAR ls_salesdatax . PERFORM map_data_to_datax USING 'BAPIE1MVKEX' ls_salesdata CHANGING ls_salesdatax . INSERT ls_salesdata INTO TABLE lt_salesdata . INSERT ls_salesdatax INTO TABLE lt_salesdatax . ENDLOOP . SORT lt_salesdata BY sales_org distr_chan . SORT lt_salesdatax BY sales_org distr_chan . DELETE ADJACENT DUPLICATES FROM lt_salesdata COMPARING sales_org distr_chan . DELETE ADJACENT DUPLICATES FROM lt_salesdatax COMPARING sales_org distr_chan . *&---------------------------------------------------------------------* *& MLGT *&---------------------------------------------------------------------* DATA ls_mlgt_ga TYPE mlgt . DATA ls_bapi_mlgt_ga TYPE bapi_mlgt_ga . LOOP AT GROUP ls_data_grp INTO ls_data . CLEAR ls_mlgt_ga . CLEAR ls_bapi_mlgt_ga . ls_mlgt_ga = CORRESPONDING # ( ls_data ). CALL FUNCTION 'MAP2E_MLGT_TO_BAPI_MLGT_GA' EXPORTING mlgt = ls_mlgt_ga CHANGING bapi_mlgt_ga = ls_bapi_mlgt_ga . CLEAR ls_storagetypedata . ls_storagetypedata = CORRESPONDING # ( ls_bapi_mlgt_ga ). ls_storagetypedata - material_long = l_matnr . CLEAR ls_storagetypedatax . PERFORM map_data_to_datax USING 'BAPIE1MLGTX' ls_storagetypedata CHANGING ls_storagetypedatax . INSERT ls_storagetypedata INTO TABLE lt_storagetypedata . INSERT ls_storagetypedatax INTO TABLE lt_storagetypedatax . ENDLOOP . SORT lt_storagetypedata BY whse_no stge_type . SORT lt_storagetypedatax BY whse_no stge_type . DELETE ADJACENT DUPLICATES FROM lt_storagetypedata COMPARING whse_no stge_type . DELETE ADJACENT DUPLICATES FROM lt_storagetypedatax COMPARING whse_no stge_type . *&---------------------------------------------------------------------* *& \u7269\u6599\u63cf\u8ff0 *&---------------------------------------------------------------------* CLEAR ls_materialdescription . ls_materialdescription - material_long = l_matnr . ls_materialdescription - langu = '1' . ls_materialdescription - matl_desc = ls_data_head - maktx . INSERT ls_materialdescription INTO TABLE lt_materialdescription . SORT lt_materialdescription BY langu . DELETE ADJACENT DUPLICATES FROM lt_materialdescription COMPARING langu . **&---------------------------------------------------------------------* **& \u7a0e **&---------------------------------------------------------------------* * CLEAR ls_taxclassifications. * ls_taxclassifications-material_long = l_matnr. * ls_taxclassifications-depcountry = ls_data_head-aland. * ls_taxclassifications-tax_ind = ls_data_head-taxim. * * IF ls_data_head-taxm1 IS NOT INITIAL. * ls_taxclassifications-tax_type_1 = ls_data_head-taxm1. * ls_taxclassifications-taxclass_1 = ls_data_head-taxim. * ENDIF. * * IF ls_data_head-taxm2 IS NOT INITIAL. * ls_taxclassifications-tax_type_2 = ls_data_head-taxm2. * ls_taxclassifications-taxclass_2 = ls_data_head-taxim. * ENDIF. * * IF ls_data_head-taxm3 IS NOT INITIAL. * ls_taxclassifications-tax_type_3 = ls_data_head-taxm3. * ls_taxclassifications-taxclass_3 = ls_data_head-taxim. * ENDIF. * * IF ls_data_head-taxm4 IS NOT INITIAL. * ls_taxclassifications-tax_type_4 = ls_data_head-taxm4. * ls_taxclassifications-taxclass_4 = ls_data_head-taxim. * ENDIF. * * IF ls_data_head-taxm5 IS NOT INITIAL. * ls_taxclassifications-tax_type_5 = ls_data_head-taxm5. * ls_taxclassifications-taxclass_5 = ls_data_head-taxim. * ENDIF. * * IF ls_data_head-taxm6 IS NOT INITIAL. * ls_taxclassifications-tax_type_6 = ls_data_head-taxm6. * ls_taxclassifications-taxclass_6 = ls_data_head-taxim. * ENDIF. * * IF ls_data_head-taxm7 IS NOT INITIAL. * ls_taxclassifications-tax_type_7 = ls_data_head-taxm7. * ls_taxclassifications-taxclass_7 = ls_data_head-taxim. * ENDIF. * * IF ls_data_head-taxm8 IS NOT INITIAL. * ls_taxclassifications-tax_type_8 = ls_data_head-taxm8. * ls_taxclassifications-taxclass_8 = ls_data_head-taxim. * ENDIF. * * IF ls_data_head-taxm9 IS NOT INITIAL. * ls_taxclassifications-tax_type_9 = ls_data_head-taxm9. * ls_taxclassifications-taxclass_9 = ls_data_head-taxim. * ENDIF. * * INSERT ls_taxclassifications INTO TABLE lt_taxclassifications. **&---------------------------------------------------------------------* **& MARM **&---------------------------------------------------------------------* * DATA ls_marm_ga TYPE marm. * DATA ls_bapi_marm_ga TYPE bapi_marm_ga. * * LOOP AT GROUP ls_data_grp INTO ls_data. * CLEAR ls_marm_ga. * CLEAR ls_unitsofmeasure. * ls_marm_ga = CORRESPONDING #( ls_data ). * CALL FUNCTION 'MAP2E_MARM_TO_BAPIE1MARM' * EXPORTING * marm = ls_marm_ga * CHANGING * bapie1marm = ls_unitsofmeasure. * ls_unitsofmeasure-material_long = l_matnr. * * CLEAR ls_unitsofmeasurex. * PERFORM map_data_to_datax USING 'BAPIE1MARMX' ls_unitsofmeasure CHANGING ls_unitsofmeasurex. * * INSERT ls_unitsofmeasure INTO TABLE lt_unitsofmeasure. * INSERT ls_unitsofmeasurex INTO TABLE lt_unitsofmeasurex. * ENDLOOP. * * SORT lt_unitsofmeasure BY alt_unit alt_unit_iso. * SORT lt_unitsofmeasurex BY alt_unit alt_unit_iso. * DELETE ADJACENT DUPLICATES FROM lt_unitsofmeasure COMPARING alt_unit alt_unit_iso. * DELETE ADJACENT DUPLICATES FROM lt_unitsofmeasurex COMPARING alt_unit alt_unit_iso. *&---------------------------------------------------------------------* *& \u5bfc\u5165\u7269\u6599 *&---------------------------------------------------------------------* CLEAR lt_return . CALL FUNCTION 'BAPI_MATERIAL_SAVEREPLICA' EXPORTING noappllog = l_global_data - no_appl_log nochangedoc = l_global_data - no_change_doc testrun = l_global_data - testrun inpfldcheck = l_global_data - inp_fld_check TABLES headdata = lt_headdata clientdata = lt_clientdata clientdatax = lt_clientdatax plantdata = lt_plantdata plantdatax = lt_plantdatax forecastparameters = lt_forecastparameters forecastparametersx = lt_forecastparametersx planningdata = lt_planningdata planningdatax = lt_planningdatax storagelocationdata = lt_storagelocationdata storagelocationdatax = lt_storagelocationdatax valuationdata = lt_valuationdata valuationdatax = lt_valuationdatax warehousenumberdata = lt_warehousenumberdata warehousenumberdatax = lt_warehousenumberdatax salesdata = lt_salesdata salesdatax = lt_salesdatax storagetypedata = lt_storagetypedata storagetypedatax = lt_storagetypedatax materialdescription = lt_materialdescription unitsofmeasure = lt_unitsofmeasure unitsofmeasurex = lt_unitsofmeasurex * internationalartnos = lt_internationalartnos * materiallongtext = lt_materiallongtext taxclassifications = lt_taxclassifications * prtdata = lt_prtdata * prtdatax = lt_prtdatax extensionin = lt_extensionin extensioninx = lt_extensioninx * forecastvalues = lt_forecastvalues * unplndconsumption = lt_unplndconsumption * totalconsumption = lt_totalconsumption returnmessages = lt_return . CLEAR l_mtype . CLEAR l_msg . LOOP AT lt_return INTO ls_return WHERE type CA 'AXE' . MESSAGE ID ls_return - id TYPE ls_return - type NUMBER ls_return - number WITH ls_return - message_v1 ls_return - message_v2 ls_return - message_v3 ls_return - message_v4 INTO ls_return - message . l_msg = |{ l_msg }{ ls_return - message }|. ENDLOOP . IF sy - subrc = 0 . l_mtype = 'E' . CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK' . ELSE . l_matnr = lt_headdata [ 1 ] - material_long . l_mtype = 'S' . l_msg = '\u5df2\u5904\u7406' . CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = abap_true . ENDIF . \" \u56de\u5199\u6d88\u606f LOOP AT GROUP ls_data_grp REFERENCE INTO DATA ( lr_data ). lr_data -> mtype = l_mtype . lr_data -> msg = l_msg . ENDLOOP . ENDLOOP . ENDFUNCTION . *&---------------------------------------------------------------------* *& \u540c\u540dBAPIUPDATE\u5b57\u6bb5\u8d4b\u503c *&---------------------------------------------------------------------* FORM map_data_to_datax USING i_name TYPE tabname i_data TYPE data CHANGING c_datax TYPE data . FIELD-SYMBOLS <wa> TYPE any . FIELD-SYMBOLS <wax> TYPE any . SELECT fieldname , rollname FROM dd03l WHERE tabname = @ i_name INTO TABLE @ DATA ( lt_field ). LOOP AT lt_field INTO DATA ( ls_field ). ASSIGN COMPONENT ls_field - fieldname OF STRUCTURE i_data TO <wa> . ASSIGN COMPONENT ls_field - fieldname OF STRUCTURE c_datax TO <wax> . IF <wa> IS ASSIGNED AND <wax> IS ASSIGNED . IF ls_field - rollname = 'BAPIUPDATE' . IF <wa> IS NOT INITIAL AND <wa> <> '' . <wax> = abap_true . ENDIF . ELSE . <wax> = <wa> . ENDIF . ENDIF . ENDLOOP . ENDFORM .","title":"\u7269\u6599\u7ef4\u62a4"},{"location":"master_data/material/#_3","text":"BAPI_OBJCL_EXISTENCECHECK \uff0c\u68c0\u67e5\u7269\u6599\u662f\u5426\u5b58\u5728\u5206\u7c7b\u89c6\u56fe BAPI_OBJCL_CREATE \uff0c\u521b\u5efa\u7269\u6599\u5206\u7c7b\u89c6\u56fe BAPI_OBJCL_CHANGE \uff0c\u4fee\u6539\u7269\u6599\u5206\u7c7b\u89c6\u56fe BAPI_OBJCL_GETDETAIL \uff0c\u83b7\u53d6\u7269\u6599\u5206\u7c7b\u7279\u5f81\u503c \u793a\u4f8b\u4ee3\u7801","title":"\u7269\u6599\u5206\u7c7b\u89c6\u56fe"},{"location":"master_data/material/#idoc","text":"SAP\u7cfb\u7edf\u95f4\u8fc1\u79fb\u6216\u540c\u6b65\u7269\u6599\uff0c\u63a8\u8350\u4f7f\u7528IDOC\u5b9e\u73b0\uff0c\u4e0b\u9762\u8bb2\u8ff0\u5b9e\u73b0\u8fc7\u7a0b\u3002 \u793a\u4f8b\u4ee3\u7801","title":"IDOC\u7269\u6599\u540c\u6b65"},{"location":"master_data/work_center/","text":"\u5de5\u4f5c\u4e2d\u5fc3 \u00b6 \u4f7f\u7528 CL_PP_WORK_CENTER_BO \u5bfc\u5165\u5de5\u4f5c\u4e2d\u5fc3 \u4e0a\u9762\u7c7b\u901a\u8fc7\u5c01\u88c5 CRAP_WORKCENTER_CREATE \u5b9e\u73b0\uff0c\u5e76\u591a\u4e86\u8fd4\u56de\u4fe1\u606f \u793a\u4f8b\u4ee3\u7801 TYPES : BEGIN OF ty_data , \" \u521b\u5efa\u5de5\u4f5c\u4e2d\u5fc3\u5fc5\u586b\u5b57\u6bb5 arbpl TYPE crhd - arbpl , \" \u5de5\u4f5c\u4e2d\u5fc3 werks TYPE crhd - werks , \" \u5de5\u5382 kostl TYPE crco - kostl , \" \u6210\u672c\u4e2d\u5fc3 \" \u5904\u7406\u8fd4\u56de mtype TYPE bapi_mtype , msg TYPE bapi_msg , END OF ty_data . DATA lt_data TYPE STANDARD TABLE OF ty_data . DATA ls_crhd_api01 TYPE crhd_api01 . DATA ls_crhd_api02 TYPE crhd_api02 . DATA ls_crhd_api03 TYPE crhd_api03 . DATA ls_crhd_api05 TYPE crhd_api05 . DATA lt_kapa_api01 TYPE STANDARD TABLE OF kapa_api01 . DATA lt_kapa_api02 TYPE STANDARD TABLE OF kapa_api02 . DATA lt_crhd_api04 TYPE STANDARD TABLE OF crhd_api04 . DATA lt_crco_api01 TYPE STANDARD TABLE OF crco_api01 . DATA ls_kapa_api01 TYPE kapa_api01 . DATA ls_kapa_api02 TYPE kapa_api02 . DATA ls_crhd_api04 TYPE crhd_api04 . DATA ls_crco_api01 TYPE crco_api01 . DATA lt_return TYPE bapiret2_tab . DATA l_mtype TYPE bapi_mtype . DATA l_msg TYPE bapi_msg . \" \u67e5\u627e\u5de5\u5382\u5bf9\u5e94\u65e5\u5386 IF lt_data[] IS NOT INITIAL . SELECT werks , fabkl FROM t001w FOR ALL ENTRIES IN @ lt_data[] WHERE werks = @ lt_data - werks INTO TABLE @ DATA ( lt_t001w ). SORT lt_t001w BY werks . DELETE ADJACENT DUPLICATES FROM lt_t001w COMPARING werks . ENDIF . \" \u5206\u7ec4\u5904\u7406 LOOP AT lt_data INTO DATA ( ls_data ) WHERE mtype <> 'E' GROUP BY ( arbpl = ls_data - arbpl werks = ls_data - werks group_size = GROUP SIZE ) INTO DATA ( ls_data_grp ). \" \u91cd\u590d\u4ee3\u7801\uff0c\u9000\u51fa\u65f6\u5199\u5165\u5904\u7406\u7ed3\u679c DATA lr_data LIKE REF TO ls_data . DEFINE _contiune . CLEAR l_mtype . CLEAR l_msg . l_mtype = &1 . l_msg = &2 . LOOP AT GROUP ls_data_grp REFERENCE INTO lr_data . lr_data -> mtype = l_mtype . lr_data -> msg = l_msg . ENDLOOP . CONTINUE . END-OF-DEFINITION . \" \u53d6\u5de5\u5382\u76f8\u5173\u6570\u636e READ TABLE lt_t001w INTO DATA ( ls_t001w ) WITH KEY werks = ls_data_grp - werks BINARY SEARCH . IF sy - subrc <> 0 . l_msg = | \u5de5\u5382 { ls_data_grp - werks } \u4e0d\u5b58\u5728 |. _contiune 'E' l_msg . ENDIF . CLEAR ls_crhd_api01 . ls_crhd_api01 - arbpl = ls_data_grp - arbpl . ls_crhd_api01 - werks = ls_data_grp - werks . ls_crhd_api01 - verwe = '0001' . ls_crhd_api01 - ktext = |{ ls_data_grp - arbpl } - { ls_data_grp - werks }|. \" \u5de5\u4f5c\u4e2d\u5fc3\u6587\u672c CLEAR ls_crhd_api02 . ls_crhd_api02 - planv = '009' . ls_crhd_api02 - veran = 'ZZ' . ls_crhd_api02 - vgwts = 'ZZZZ' . CLEAR ls_crhd_api03 . ls_crhd_api03 - steus = 'ZZ01' . ls_crhd_api03 - vge01 = 'STD' . \" h - \u5185\u7801 ls_crhd_api03 - vge02 = 'STD' . \" h - \u5185\u7801 ls_crhd_api03 - vge03 = 'STD' . \" h - \u5185\u7801 ls_crhd_api03 - vge04 = 'KG' . \" kg - \u5185\u7801 ls_crhd_api03 - vge05 = 'STD' . \" h - \u5185\u7801 ls_crhd_api03 - vge06 = 'KG' . \" kg - \u5185\u7801 CLEAR ls_crhd_api05 . ls_crhd_api05 - kapart = '001' . ls_crhd_api05 - fort2 = 'ZZ_PP' . CLEAR lt_kapa_api01 . CLEAR ls_kapa_api01 . ls_kapa_api01 - canum = '1' . ls_kapa_api01 - kapart = '001' . \" \u8fd9\u4e2a\u4e0d\u586b\uff0c\u4e0b\u9762FM\u624d\u4f1a\u4f1a\u81ea\u52a8\u521b\u5efa\u80fd\u529b \" \u6216\u8005\u624b\u5de5\u8c03\u7528CRAP_CAPACITY_CREATE\u521b\u5efa\u80fd\u529b \" ls_kapa_api01-kapname = '\u673a\u5668'. ls_kapa_api01 - werks = ls_data_grp - werks . ls_kapa_api01 - ktext = '\u673a\u5668' . ls_kapa_api01 - kapid = ls_t001w - fabkl . \" \u4f7f\u7528\u5de5\u5382\u65e5\u5386 INSERT ls_kapa_api01 INTO TABLE lt_kapa_api01 . CLEAR lt_kapa_api02 . CLEAR ls_kapa_api02 . ls_kapa_api02 - canum = '1' . ls_kapa_api02 - planr = 'ZZ' . ls_kapa_api02 - kalid = ls_t001w - fabkl . ls_kapa_api02 - meins = 'STD' . \" h - \u5185\u7801 ls_kapa_api02 - begzt = '000000' . ls_kapa_api02 - endzt = '240000' . ls_kapa_api02 - ngrad = '100' . ls_kapa_api02 - aznor = ls_data_grp - group_size . \" \u6709\u591a\u5c11\u884c\u9879\u76ee INSERT ls_kapa_api02 INTO TABLE lt_kapa_api02 . CLEAR lt_crhd_api04 . CLEAR ls_crhd_api04 . ls_crhd_api04 - canum = '1' . ls_crhd_api04 - fork2 = 'ZZ_PP' . INSERT ls_crhd_api04 INTO TABLE lt_crhd_api04 . CLEAR lt_crco_api01 . LOOP AT GROUP ls_data_grp INTO ls_data . CLEAR ls_crco_api01 . ls_crco_api01 - kostl = ls_data - kostl . ls_crco_api01 - begda = sy - datum . ls_crco_api01 - endda = '99991231' . ls_crco_api01 - lstar1 = '1000' . ls_crco_api01 - lstar_ref1 = 'X' . ls_crco_api01 - leinh1 = 'STD' . \" h - \u5185\u7801 ls_crco_api01 - forml1 = 'ZZ_CO1' . ls_crco_api01 - lstar2 = '2000' . ls_crco_api01 - lstar_ref2 = 'X' . ls_crco_api01 - leinh2 = 'STD' . \" h - \u5185\u7801 ls_crco_api01 - forml2 = 'ZZ_CO2' . ls_crco_api01 - lstar3 = '3000' . ls_crco_api01 - lstar_ref3 = 'X' . ls_crco_api01 - leinh3 = 'STD' . \" h - \u5185\u7801 ls_crco_api01 - forml3 = 'ZZ_CO3' . ls_crco_api01 - lstar4 = '4000' . ls_crco_api01 - lstar_ref4 = 'X' . ls_crco_api01 - leinh4 = 'KG' . \" kg - \u5185\u7801 ls_crco_api01 - forml4 = 'ZZ_CO4' . ls_crco_api01 - lstar5 = '5000' . ls_crco_api01 - lstar_ref5 = 'X' . ls_crco_api01 - leinh5 = 'STD' . \" h - \u5185\u7801 ls_crco_api01 - forml5 = 'ZZ_CO5' . ls_crco_api01 - lstar6 = '6000' . ls_crco_api01 - lstar_ref6 = 'X' . ls_crco_api01 - leinh6 = 'KG' . \" kg - \u5185\u7801 ls_crco_api01 - forml6 = 'ZZ_CO6' . INSERT ls_crco_api01 INTO TABLE lt_crco_api01 . ENDLOOP . \" \u53ef\u80fd\u4e0d\u540c\u884c\u53ea\u662f\u8bbe\u5907\u7801\u4e0d\u4e00\u6837\uff0c\u800c\u6210\u672c\u4e2d\u5fc3\u662f\u4e00\u81f4\u7684 SORT lt_crco_api01 BY kostl . DELETE ADJACENT DUPLICATES FROM lt_crco_api01 COMPARING kostl . * CALL FUNCTION 'CRAP_WORKCENTER_CREATE' * EXPORTING * in_crhd_api01 = ls_crhd_api01 * in_crhd_api02 = ls_crhd_api02 * in_crhd_api03 = ls_crhd_api03 * in_crhd_api05 = ls_crhd_api05 * test = i_test * TABLES * in_kapa_api01 = lt_kapa_api01 * in_kapa_api02 = lt_kapa_api02 * in_crhd_api04 = lt_crhd_api04 * in_crco_api01 = lt_crco_api01. \" \u6362\u4e2a\u6807\u51c6\u5e26\u8fd4\u56de\u7684\uff0c\u65b9\u4fbf\u5c55\u793a\u6d88\u606f DATA ( lo_work_center ) = cl_pp_work_center_bo => get_instance ( ). CLEAR lt_return . lo_work_center -> create_work_center ( EXPORTING is_crhd_api01 = ls_crhd_api01 is_crhd_api02 = ls_crhd_api02 is_crhd_api03 = ls_crhd_api03 it_crhd_api04 = lt_crhd_api04 is_crhd_api05 = ls_crhd_api05 it_kapa_api01 = lt_kapa_api01 it_kapa_api02 = lt_kapa_api02 it_crco_api01 = lt_crco_api01 IMPORTING et_return = lt_return ). CLEAR l_mtype . CLEAR l_msg . LOOP AT lt_return INTO DATA ( ls_return ) WHERE type CA 'EA' . l_msg = |{ l_msg }{ ls_return - message } ; |. ENDLOOP . IF sy - subrc = 0 . _contiune 'E' l_msg . ELSE . _contiune 'S' '\u5de5\u4f5c\u4e2d\u5fc3\u5bfc\u5165\u6210\u529f' . ENDIF . ENDLOOP .","title":"\u5de5\u4f5c\u4e2d\u5fc3"},{"location":"master_data/work_center/#_1","text":"\u4f7f\u7528 CL_PP_WORK_CENTER_BO \u5bfc\u5165\u5de5\u4f5c\u4e2d\u5fc3 \u4e0a\u9762\u7c7b\u901a\u8fc7\u5c01\u88c5 CRAP_WORKCENTER_CREATE \u5b9e\u73b0\uff0c\u5e76\u591a\u4e86\u8fd4\u56de\u4fe1\u606f \u793a\u4f8b\u4ee3\u7801 TYPES : BEGIN OF ty_data , \" \u521b\u5efa\u5de5\u4f5c\u4e2d\u5fc3\u5fc5\u586b\u5b57\u6bb5 arbpl TYPE crhd - arbpl , \" \u5de5\u4f5c\u4e2d\u5fc3 werks TYPE crhd - werks , \" \u5de5\u5382 kostl TYPE crco - kostl , \" \u6210\u672c\u4e2d\u5fc3 \" \u5904\u7406\u8fd4\u56de mtype TYPE bapi_mtype , msg TYPE bapi_msg , END OF ty_data . DATA lt_data TYPE STANDARD TABLE OF ty_data . DATA ls_crhd_api01 TYPE crhd_api01 . DATA ls_crhd_api02 TYPE crhd_api02 . DATA ls_crhd_api03 TYPE crhd_api03 . DATA ls_crhd_api05 TYPE crhd_api05 . DATA lt_kapa_api01 TYPE STANDARD TABLE OF kapa_api01 . DATA lt_kapa_api02 TYPE STANDARD TABLE OF kapa_api02 . DATA lt_crhd_api04 TYPE STANDARD TABLE OF crhd_api04 . DATA lt_crco_api01 TYPE STANDARD TABLE OF crco_api01 . DATA ls_kapa_api01 TYPE kapa_api01 . DATA ls_kapa_api02 TYPE kapa_api02 . DATA ls_crhd_api04 TYPE crhd_api04 . DATA ls_crco_api01 TYPE crco_api01 . DATA lt_return TYPE bapiret2_tab . DATA l_mtype TYPE bapi_mtype . DATA l_msg TYPE bapi_msg . \" \u67e5\u627e\u5de5\u5382\u5bf9\u5e94\u65e5\u5386 IF lt_data[] IS NOT INITIAL . SELECT werks , fabkl FROM t001w FOR ALL ENTRIES IN @ lt_data[] WHERE werks = @ lt_data - werks INTO TABLE @ DATA ( lt_t001w ). SORT lt_t001w BY werks . DELETE ADJACENT DUPLICATES FROM lt_t001w COMPARING werks . ENDIF . \" \u5206\u7ec4\u5904\u7406 LOOP AT lt_data INTO DATA ( ls_data ) WHERE mtype <> 'E' GROUP BY ( arbpl = ls_data - arbpl werks = ls_data - werks group_size = GROUP SIZE ) INTO DATA ( ls_data_grp ). \" \u91cd\u590d\u4ee3\u7801\uff0c\u9000\u51fa\u65f6\u5199\u5165\u5904\u7406\u7ed3\u679c DATA lr_data LIKE REF TO ls_data . DEFINE _contiune . CLEAR l_mtype . CLEAR l_msg . l_mtype = &1 . l_msg = &2 . LOOP AT GROUP ls_data_grp REFERENCE INTO lr_data . lr_data -> mtype = l_mtype . lr_data -> msg = l_msg . ENDLOOP . CONTINUE . END-OF-DEFINITION . \" \u53d6\u5de5\u5382\u76f8\u5173\u6570\u636e READ TABLE lt_t001w INTO DATA ( ls_t001w ) WITH KEY werks = ls_data_grp - werks BINARY SEARCH . IF sy - subrc <> 0 . l_msg = | \u5de5\u5382 { ls_data_grp - werks } \u4e0d\u5b58\u5728 |. _contiune 'E' l_msg . ENDIF . CLEAR ls_crhd_api01 . ls_crhd_api01 - arbpl = ls_data_grp - arbpl . ls_crhd_api01 - werks = ls_data_grp - werks . ls_crhd_api01 - verwe = '0001' . ls_crhd_api01 - ktext = |{ ls_data_grp - arbpl } - { ls_data_grp - werks }|. \" \u5de5\u4f5c\u4e2d\u5fc3\u6587\u672c CLEAR ls_crhd_api02 . ls_crhd_api02 - planv = '009' . ls_crhd_api02 - veran = 'ZZ' . ls_crhd_api02 - vgwts = 'ZZZZ' . CLEAR ls_crhd_api03 . ls_crhd_api03 - steus = 'ZZ01' . ls_crhd_api03 - vge01 = 'STD' . \" h - \u5185\u7801 ls_crhd_api03 - vge02 = 'STD' . \" h - \u5185\u7801 ls_crhd_api03 - vge03 = 'STD' . \" h - \u5185\u7801 ls_crhd_api03 - vge04 = 'KG' . \" kg - \u5185\u7801 ls_crhd_api03 - vge05 = 'STD' . \" h - \u5185\u7801 ls_crhd_api03 - vge06 = 'KG' . \" kg - \u5185\u7801 CLEAR ls_crhd_api05 . ls_crhd_api05 - kapart = '001' . ls_crhd_api05 - fort2 = 'ZZ_PP' . CLEAR lt_kapa_api01 . CLEAR ls_kapa_api01 . ls_kapa_api01 - canum = '1' . ls_kapa_api01 - kapart = '001' . \" \u8fd9\u4e2a\u4e0d\u586b\uff0c\u4e0b\u9762FM\u624d\u4f1a\u4f1a\u81ea\u52a8\u521b\u5efa\u80fd\u529b \" \u6216\u8005\u624b\u5de5\u8c03\u7528CRAP_CAPACITY_CREATE\u521b\u5efa\u80fd\u529b \" ls_kapa_api01-kapname = '\u673a\u5668'. ls_kapa_api01 - werks = ls_data_grp - werks . ls_kapa_api01 - ktext = '\u673a\u5668' . ls_kapa_api01 - kapid = ls_t001w - fabkl . \" \u4f7f\u7528\u5de5\u5382\u65e5\u5386 INSERT ls_kapa_api01 INTO TABLE lt_kapa_api01 . CLEAR lt_kapa_api02 . CLEAR ls_kapa_api02 . ls_kapa_api02 - canum = '1' . ls_kapa_api02 - planr = 'ZZ' . ls_kapa_api02 - kalid = ls_t001w - fabkl . ls_kapa_api02 - meins = 'STD' . \" h - \u5185\u7801 ls_kapa_api02 - begzt = '000000' . ls_kapa_api02 - endzt = '240000' . ls_kapa_api02 - ngrad = '100' . ls_kapa_api02 - aznor = ls_data_grp - group_size . \" \u6709\u591a\u5c11\u884c\u9879\u76ee INSERT ls_kapa_api02 INTO TABLE lt_kapa_api02 . CLEAR lt_crhd_api04 . CLEAR ls_crhd_api04 . ls_crhd_api04 - canum = '1' . ls_crhd_api04 - fork2 = 'ZZ_PP' . INSERT ls_crhd_api04 INTO TABLE lt_crhd_api04 . CLEAR lt_crco_api01 . LOOP AT GROUP ls_data_grp INTO ls_data . CLEAR ls_crco_api01 . ls_crco_api01 - kostl = ls_data - kostl . ls_crco_api01 - begda = sy - datum . ls_crco_api01 - endda = '99991231' . ls_crco_api01 - lstar1 = '1000' . ls_crco_api01 - lstar_ref1 = 'X' . ls_crco_api01 - leinh1 = 'STD' . \" h - \u5185\u7801 ls_crco_api01 - forml1 = 'ZZ_CO1' . ls_crco_api01 - lstar2 = '2000' . ls_crco_api01 - lstar_ref2 = 'X' . ls_crco_api01 - leinh2 = 'STD' . \" h - \u5185\u7801 ls_crco_api01 - forml2 = 'ZZ_CO2' . ls_crco_api01 - lstar3 = '3000' . ls_crco_api01 - lstar_ref3 = 'X' . ls_crco_api01 - leinh3 = 'STD' . \" h - \u5185\u7801 ls_crco_api01 - forml3 = 'ZZ_CO3' . ls_crco_api01 - lstar4 = '4000' . ls_crco_api01 - lstar_ref4 = 'X' . ls_crco_api01 - leinh4 = 'KG' . \" kg - \u5185\u7801 ls_crco_api01 - forml4 = 'ZZ_CO4' . ls_crco_api01 - lstar5 = '5000' . ls_crco_api01 - lstar_ref5 = 'X' . ls_crco_api01 - leinh5 = 'STD' . \" h - \u5185\u7801 ls_crco_api01 - forml5 = 'ZZ_CO5' . ls_crco_api01 - lstar6 = '6000' . ls_crco_api01 - lstar_ref6 = 'X' . ls_crco_api01 - leinh6 = 'KG' . \" kg - \u5185\u7801 ls_crco_api01 - forml6 = 'ZZ_CO6' . INSERT ls_crco_api01 INTO TABLE lt_crco_api01 . ENDLOOP . \" \u53ef\u80fd\u4e0d\u540c\u884c\u53ea\u662f\u8bbe\u5907\u7801\u4e0d\u4e00\u6837\uff0c\u800c\u6210\u672c\u4e2d\u5fc3\u662f\u4e00\u81f4\u7684 SORT lt_crco_api01 BY kostl . DELETE ADJACENT DUPLICATES FROM lt_crco_api01 COMPARING kostl . * CALL FUNCTION 'CRAP_WORKCENTER_CREATE' * EXPORTING * in_crhd_api01 = ls_crhd_api01 * in_crhd_api02 = ls_crhd_api02 * in_crhd_api03 = ls_crhd_api03 * in_crhd_api05 = ls_crhd_api05 * test = i_test * TABLES * in_kapa_api01 = lt_kapa_api01 * in_kapa_api02 = lt_kapa_api02 * in_crhd_api04 = lt_crhd_api04 * in_crco_api01 = lt_crco_api01. \" \u6362\u4e2a\u6807\u51c6\u5e26\u8fd4\u56de\u7684\uff0c\u65b9\u4fbf\u5c55\u793a\u6d88\u606f DATA ( lo_work_center ) = cl_pp_work_center_bo => get_instance ( ). CLEAR lt_return . lo_work_center -> create_work_center ( EXPORTING is_crhd_api01 = ls_crhd_api01 is_crhd_api02 = ls_crhd_api02 is_crhd_api03 = ls_crhd_api03 it_crhd_api04 = lt_crhd_api04 is_crhd_api05 = ls_crhd_api05 it_kapa_api01 = lt_kapa_api01 it_kapa_api02 = lt_kapa_api02 it_crco_api01 = lt_crco_api01 IMPORTING et_return = lt_return ). CLEAR l_mtype . CLEAR l_msg . LOOP AT lt_return INTO DATA ( ls_return ) WHERE type CA 'EA' . l_msg = |{ l_msg }{ ls_return - message } ; |. ENDLOOP . IF sy - subrc = 0 . _contiune 'E' l_msg . ELSE . _contiune 'S' '\u5de5\u4f5c\u4e2d\u5fc3\u5bfc\u5165\u6210\u529f' . ENDIF . ENDLOOP .","title":"\u5de5\u4f5c\u4e2d\u5fc3"},{"location":"mm/","text":"MM\u6a21\u5757\u6982\u8ff0 \u00b6 \u6211\u7406\u89e3\u7684MM\uff08Material Management\uff09\uff0c\u7269\u6599\u7ba1\u7406\u6a21\u5757\uff0c\u5305\u62ec\u4e86\u7269\u6599\u4e3b\u6570\u636e\uff0c\u91c7\u8d2d\u7ba1\u7406\uff0c\u5e93\u5b58\u7ba1\u7406\uff0c\u5171\u4e09\u4e2a\u90e8\u5206\u3002","title":"MM\u6a21\u5757\u6982\u8ff0"},{"location":"mm/#mm","text":"\u6211\u7406\u89e3\u7684MM\uff08Material Management\uff09\uff0c\u7269\u6599\u7ba1\u7406\u6a21\u5757\uff0c\u5305\u62ec\u4e86\u7269\u6599\u4e3b\u6570\u636e\uff0c\u91c7\u8d2d\u7ba1\u7406\uff0c\u5e93\u5b58\u7ba1\u7406\uff0c\u5171\u4e09\u4e2a\u90e8\u5206\u3002","title":"MM\u6a21\u5757\u6982\u8ff0"},{"location":"mm/inbound_delivery/","text":"\u5185\u5411\u4ea4\u8d27\u5355 \u00b6","title":"\u5185\u5411\u4ea4\u8d27\u5355"},{"location":"mm/inbound_delivery/#_1","text":"","title":"\u5185\u5411\u4ea4\u8d27\u5355"},{"location":"mm/inbound_delivery_post/","text":"\u91c7\u8d2d\u6536\u8d27\u8fc7\u8d26 \u00b6","title":"\u6536\u8d27\u8fc7\u8d26"},{"location":"mm/inbound_delivery_post/#_1","text":"","title":"\u91c7\u8d2d\u6536\u8d27\u8fc7\u8d26"},{"location":"mm/purchase/","text":"\u91c7\u8d2d\u8ba2\u5355 \u00b6","title":"\u91c7\u8d2d\u8ba2\u5355"},{"location":"mm/purchase/#_1","text":"","title":"\u91c7\u8d2d\u8ba2\u5355"},{"location":"others/","text":"\u5176\u4ed6\u6982\u8ff0 \u00b6 \u4e0d\u5728\u5b9e\u65bd\u6d41\u7a0b\u4e2d\uff0c\u6216\u591a\u4e2a\u6a21\u5757\u7686\u6709\u5f15\u7528\u7684\u529f\u80fd\uff0c\u90fd\u4f1a\u6574\u7406\u5728\u5176\u4ed6\u6a21\u5757\u4e2d\u3002","title":"\u5176\u4ed6\u6982\u8ff0"},{"location":"others/#_1","text":"\u4e0d\u5728\u5b9e\u65bd\u6d41\u7a0b\u4e2d\uff0c\u6216\u591a\u4e2a\u6a21\u5757\u7686\u6709\u5f15\u7528\u7684\u529f\u80fd\uff0c\u90fd\u4f1a\u6574\u7406\u5728\u5176\u4ed6\u6a21\u5757\u4e2d\u3002","title":"\u5176\u4ed6\u6982\u8ff0"},{"location":"others/alv/","text":"ALV \u00b6 \u6574\u7406\u4e0bALV\u7528\u5230\u7684\u51e0\u79cd\u65b9\u6cd5\u3002 LVC \u00b6 LVC\u597d\u5728\u4e0d\u7528\u753b\u5c4f\u5e55\uff0c\u76f4\u63a5\u8c03\u7528\u5373\u53ef\u3002 INCLUDE_LVC *&---------------------------------------------------------------------* *& Form frm_display *&---------------------------------------------------------------------* *& text *&---------------------------------------------------------------------* *& --> p1 text *& <-- p2 text *&---------------------------------------------------------------------* FORM frm_display TABLES ct_data TYPE STANDARD TABLE . DATA ls_layout TYPE lvc_s_layo . DATA lt_fieldcat TYPE STANDARD TABLE OF lvc_s_fcat . PERFORM frm_set_layout CHANGING ls_layout . PERFORM frm_set_fieldcat TABLES lt_fieldcat . CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY_LVC' EXPORTING i_callback_program = sy - repid i_callback_pf_status_set = 'FRM_PF_STATUS' i_callback_user_command = 'FRM_USER_COMMAND' is_layout_lvc = ls_layout it_fieldcat_lvc = lt_fieldcat i_default = abap_true i_save = 'A' TABLES t_outtab = ct_data[] EXCEPTIONS program_error = 1 OTHERS = 2 . IF sy - subrc <> 0 . MESSAGE ID sy - msgid TYPE sy - msgty NUMBER sy - msgno WITH sy - msgv1 sy - msgv2 sy - msgv3 sy - msgv4 . ENDIF . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_set_layout *&---------------------------------------------------------------------* *& \u62a5\u8868\u5e03\u5c40\u8bbe\u7f6e *&---------------------------------------------------------------------* FORM frm_set_layout CHANGING cs_layout TYPE lvc_s_layo . CLEAR cs_layout . cs_layout - zebra = abap_true . \" \u6591\u9a6c\u7ebf cs_layout - cwidth_opt = abap_true . \" \u81ea\u52a8\u8c03\u6574ALVL\u5217\u5bbd cs_layout - sel_mode = 'A' . \" \u9009\u62e9\u6a21\u5f0f * CS_LAYOUT - box_fname = 'CHECKBOX' . \" \u9009\u62e9\u6846 * CS_LAYOUT - ctab_fname = 'COLTAB' . \" \u5355\u5143\u683c\u989c\u8272\u8bbe\u7f6e ENDFORM . *&---------------------------------------------------------------------* *& Form frm_set_fieldcat *&---------------------------------------------------------------------* *& \u5b57\u6bb5\u76ee\u5f55\u8bbe\u7f6e *&---------------------------------------------------------------------* FORM frm_set_fieldcat TABLES ct_fieldcat TYPE lvc_t_fcat . DATA ls_fieldcat TYPE lvc_s_fcat . DEFINE _init_fieldcat . CLEAR ls_fieldcat . ls_fieldcat - fieldname = &1 . ls_fieldcat - tooltip = ls_fieldcat - coltext = ls_fieldcat - seltext = ls_fieldcat - scrtext_l = ls_fieldcat - scrtext_m = ls_fieldcat - scrtext_s = &2 . ls_fieldcat - ref_table = &3 . ls_fieldcat - ref_field = &4 . INSERT ls_fieldcat INTO TABLE ct_fieldcat . END-OF-DEFINITION . _init_fieldcat 'ZSEL' '\u9009\u62e9\u9879' '' '' . _init_fieldcat 'MTYPE ' '\u5904\u7406\u72b6\u6001' '' '' . _init_fieldcat 'MSG ' '\u5904\u7406\u6d88\u606f' '' '' . \" \u4e2a\u6027\u5316\u81ea\u5df1\u8f93\u51fa\u6570\u636e\u683c\u5f0f LOOP AT ct_fieldcat REFERENCE INTO DATA ( lr_fieldcat ). \" \u5b57\u6bb5\u663e\u793a\u5c5e\u6027\u8bbe\u7f6e CASE lr_fieldcat -> fieldname . WHEN 'ZSEL' . lr_fieldcat -> checkbox = abap_true . lr_fieldcat -> edit = abap_true . lr_fieldcat -> hotspot = abap_true . WHEN 'MENGE' . lr_fieldcat -> qfieldname = 'MEINS' . WHEN OTHERS . ENDCASE . ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_pf_status *&---------------------------------------------------------------------* *& \u8bbe\u7f6eGUI\u72b6\u6001 *&---------------------------------------------------------------------* FORM frm_pf_status USING ct_extab TYPE slis_t_extab . SET PF-STATUS 'STATUS' . SET TITLEBAR 'TITLE' . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_user_command *&---------------------------------------------------------------------* *& \u529f\u80fd\u54cd\u5e94 *&---------------------------------------------------------------------* FORM frm_user_command USING cv_ucomm LIKE sy - ucomm cs_selfield TYPE slis_selfield . \" \u5237\u65b0\u5c4f\u5e55\u6570\u636e\u5230\u5185\u8868 DATA : lo_grid TYPE REF TO cl_gui_alv_grid . CALL FUNCTION 'GET_GLOBALS_FROM_SLVC_FULLSCR' IMPORTING e_grid = lo_grid . CALL METHOD lo_grid -> check_changed_data . PERFORM frm_get_data_selection . \" \u6309\u94ae\u529f\u80fd\u5b9e\u73b0 CASE cv_ucomm . WHEN '&IC1' . \" \u53cc\u51fb WHEN OTHERS . ENDCASE . \" \u5237\u65b0ALV \u663e\u793a\u503c cs_selfield - refresh = abap_true . cs_selfield - row_stable = abap_true . cs_selfield - col_stable = abap_true . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_get_data_selection *&---------------------------------------------------------------------* *& text *&---------------------------------------------------------------------* *& --> p1 text *& <-- p2 text *&---------------------------------------------------------------------* FORM frm_get_data_selection . \" \u5237\u65b0\u5c4f\u5e55\u6570\u636e\u5230\u5185\u8868 DATA : lo_grid TYPE REF TO cl_gui_alv_grid . CALL FUNCTION 'GET_GLOBALS_FROM_SLVC_FULLSCR' IMPORTING e_grid = lo_grid . \" \u83b7\u53d6ALV\u9009\u53d6\u884c DATA lt_rows TYPE lvc_t_row . CALL METHOD lo_grid -> get_selected_rows IMPORTING et_index_rows = lt_rows . LOOP AT lt_rows INTO DATA ( ls_row ). READ TABLE gt_data REFERENCE INTO DATA ( lr_data ) INDEX ls_row - index . IF sy - subrc = 0 . lr_data -> zsel = abap_true . ENDIF . ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_reset_data_selection *&---------------------------------------------------------------------* *& text *&---------------------------------------------------------------------* *& --> p1 text *& <-- p2 text *&---------------------------------------------------------------------* FORM frm_reset_data_selection . LOOP AT gt_data REFERENCE INTO DATA ( lr_data ). CLEAR lr_data -> zsel . ENDLOOP . ENDFORM . ALV GRID \u00b6 OOALV\u53ef\u5b9a\u5236\u7684\u529f\u80fd\u66f4\u5b8c\u5584\uff0c\u9002\u5408\u590d\u6742\u7684\u62a5\u8868\u5f00\u53d1\u3002 INCLUDE_ALV_GRID CLASS lcl_event_handler DEFINITION DEFERRED . DATA go_container TYPE REF TO cl_gui_container . DATA go_alv_grid TYPE REF TO cl_gui_alv_grid . DATA go_handler TYPE REF TO lcl_event_handler . *&---------------------------------------------------------------------* *& Form lcl_event_handler *&---------------------------------------------------------------------* CLASS lcl_event_handler DEFINITION . PUBLIC SECTION . \" \u6570\u636e\u53d8\u66f4\u4e8b\u4ef6 METHODS on_data_changed_finished FOR EVENT data_changed_finished OF cl_gui_alv_grid IMPORTING e_modified et_good_cells . \" \u5de5\u5177\u680f\u8c03\u6574 METHODS on_toolbar FOR EVENT toolbar OF cl_gui_alv_grid IMPORTING e_object e_interactive . \" \u54cd\u5e94\u5de5\u5177\u680f\u4e8b\u4ef6 \" \u70b9\u51fb\u6309\u94ae\u4e4b\u7c7b\u7684\u4e8b\u4ef6 METHODS on_user_command FOR EVENT user_command OF cl_gui_alv_grid IMPORTING e_ucomm . ENDCLASS . *&---------------------------------------------------------------------* *& Form lcl_event_handler *&---------------------------------------------------------------------* CLASS lcl_event_handler IMPLEMENTATION . *&---------------------------------------------------------------------* *& on_data_changed_finished *&---------------------------------------------------------------------* METHOD on_data_changed_finished . CHECK e_modified = abap_true . LOOP AT et_good_cells INTO DATA ( ls_cell ). READ TABLE gt_data REFERENCE INTO DATA ( lr_data ) INDEX ls_cell - row_id . IF sy - subrc = 0 . ENDIF . ENDLOOP . PERFORM frm_refresh_display . ENDMETHOD . *&---------------------------------------------------------------------* *& on_toolbar *&---------------------------------------------------------------------* METHOD on_toolbar . \" \u79fb\u9664\u7f16\u8f91\u76f8\u5173\u7684\u6309\u94ae DELETE e_object -> mt_toolbar WHERE function CS '&LOCAL&' . \" \u65b0\u589e\u6309\u94ae DATA ls_button LIKE LINE OF e_object -> mt_toolbar . CLEAR ls_button . ls_button - function = 'Z10' . ls_button - icon = icon_system_copy . ls_button - quickinfo = ls_button - text = '' . INSERT ls_button INTO TABLE e_object -> mt_toolbar . ENDMETHOD . *&---------------------------------------------------------------------* *& on_user_command *&---------------------------------------------------------------------* METHOD on_user_command . \" \u83b7\u53d6ALV\u9009\u53d6\u884c DATA lt_rows TYPE lvc_t_row . DATA ls_row TYPE lvc_s_row . CALL METHOD go_alv_grid -> get_selected_rows IMPORTING et_index_rows = lt_rows . CASE e_ucomm . WHEN 'Z10' . WHEN OTHERS . ENDCASE . PERFORM frm_refresh_display . ENDMETHOD . ENDCLASS . *&---------------------------------------------------------------------* *& Form frm_display *&---------------------------------------------------------------------* *& text *&---------------------------------------------------------------------* *& --> p1 text *& <-- p2 text *&---------------------------------------------------------------------* FORM frm_display TABLES ct_data TYPE STANDARD TABLE . IF go_container IS NOT BOUND . go_container = NEW cl_gui_custom_container ( 'CON_9000' ). ENDIF . IF go_alv_grid IS BOUND . PERFORM frm_refresh_display . RETURN . ENDIF . \" \u65b0\u5efa\u5bf9\u8c61 go_alv_grid = NEW cl_gui_alv_grid ( go_container ). DATA ls_layout TYPE lvc_s_layo . DATA lt_fieldcat TYPE STANDARD TABLE OF lvc_s_fcat . PERFORM frm_set_layout CHANGING ls_layout . PERFORM frm_set_fieldcat TABLES lt_fieldcat . PERFORM frm_set_event . PERFORM frm_set_style . PERFORM frm_set_color . \" \u5c55\u793a CALL METHOD go_alv_grid -> set_table_for_first_display EXPORTING is_layout = ls_layout CHANGING it_outtab = ct_data[] it_fieldcatalog = lt_fieldcat EXCEPTIONS invalid_parameter_combination = 1 program_error = 2 too_many_lines = 3 OTHERS = 4 . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_display *&---------------------------------------------------------------------* *& text *&---------------------------------------------------------------------* *& --> p1 text *& <-- p2 text *&---------------------------------------------------------------------* FORM frm_refresh_display . PERFORM frm_set_style . PERFORM frm_set_color . go_alv_grid -> refresh_table_display ( is_stable = CONV # ( 'XX' ) ). ENDFORM . *&---------------------------------------------------------------------* *& Form frm_set_layout *&---------------------------------------------------------------------* *& \u62a5\u8868\u5e03\u5c40\u8bbe\u7f6e *&---------------------------------------------------------------------* FORM frm_set_layout CHANGING cs_layout TYPE lvc_s_layo . CLEAR cs_layout . cs_layout - zebra = abap_true . \" \u6591\u9a6c\u7ebf cs_layout - cwidth_opt = abap_true . \" \u81ea\u52a8\u8c03\u6574ALVL\u5217\u5bbd cs_layout - sel_mode = 'A' . \" \u9009\u62e9\u6a21\u5f0f cs_layout - ctab_fname = 'T_SCOL' . \" \u5355\u5143\u683c\u989c\u8272\u8bbe\u7f6e cs_layout - stylefname = 'T_STYL' . \" \u5355\u5143\u683c\u63a7\u5236 ENDFORM . *&---------------------------------------------------------------------* *& Form frm_set_fieldcat *&---------------------------------------------------------------------* *& \u5b57\u6bb5\u76ee\u5f55\u8bbe\u7f6e *&---------------------------------------------------------------------* FORM frm_set_fieldcat TABLES ct_fieldcat TYPE lvc_t_fcat . DATA ls_fieldcat TYPE lvc_s_fcat . DEFINE _init_fieldcat . CLEAR ls_fieldcat . ls_fieldcat - fieldname = &1 . ls_fieldcat - tooltip = ls_fieldcat - coltext = ls_fieldcat - seltext = ls_fieldcat - scrtext_l = ls_fieldcat - scrtext_m = ls_fieldcat - scrtext_s = &2 . ls_fieldcat - ref_table = &3 . ls_fieldcat - ref_field = &4 . INSERT ls_fieldcat INTO TABLE ct_fieldcat . END-OF-DEFINITION . _init_fieldcat 'MTYPE' '\u68c0\u67e5\u72b6\u6001' '' '' . _init_fieldcat 'MSG ' '\u68c0\u67e5\u6d88\u606f' '' '' . \" \u4e2a\u6027\u5316\u81ea\u5df1\u8f93\u51fa\u6570\u636e\u683c\u5f0f LOOP AT ct_fieldcat REFERENCE INTO DATA ( lr_fieldcat ). \" \u7f16\u8f91\u72b6\u6001\uff0c\u9ed8\u8ba4\u53ef\u7f16\u8f91 lr_fieldcat -> edit = abap_true . CASE lr_fieldcat -> fieldname . WHEN 'MTYPE' OR 'MSG' . lr_fieldcat -> edit = abap_false . WHEN OTHERS . ENDCASE . ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_set_event *&---------------------------------------------------------------------* *& \u7ed1\u5b9aALV\u4e8b\u4ef6 *&---------------------------------------------------------------------* FORM frm_set_event . IF go_handler IS BOUND . RETURN . ENDIF . go_handler = NEW lcl_event_handler ( ). \" \u6570\u636e\u53d8\u66f4 go_alv_grid -> register_edit_event ( i_event_id = cl_gui_alv_grid => mc_evt_modified ). SET HANDLER go_handler -> on_data_changed_finished FOR go_alv_grid . \" \u5de5\u5177\u680f\u76f8\u5173 SET HANDLER go_handler -> on_toolbar FOR go_alv_grid . SET HANDLER go_handler -> on_user_command FOR go_alv_grid . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_set_style *&---------------------------------------------------------------------* *& text *&---------------------------------------------------------------------* *& --> p1 text *& <-- p2 text *&---------------------------------------------------------------------* FORM frm_set_style . DATA ls_styl TYPE lvc_s_styl . LOOP AT gt_data REFERENCE INTO DATA ( lr_data ). CLEAR lr_data -> t_styl . \" \u8bbe\u7f6eALV\u5b57\u6bb5\u6216\u884c\u7684\u72b6\u6001 \" \u5e38\u7528\u6709\u7981\u6b62\u7f16\u8f91CL_GUI_ALV_GRID=>MC_STYLE_DISABLED \" \u7981\u6b62\u5220\u9664\u884cCL_GUI_ALV_GRID=>MC_STYLE_NO_DELETE_ROW ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_set_color *&---------------------------------------------------------------------* *& text *&---------------------------------------------------------------------* *& --> p1 text *& <-- p2 text *&---------------------------------------------------------------------* FORM frm_set_color . DATA ls_scol TYPE lvc_s_scol . LOOP AT gt_data REFERENCE INTO DATA ( lr_data ). CLEAR lr_data -> t_scol . IF lr_data -> mtype = 'E' . CLEAR ls_scol . ls_scol - fname = 'MTYPE' . ls_scol - color = VALUE # ( col = '6' ). INSERT ls_scol INTO TABLE lr_data -> t_scol . CLEAR ls_scol . ls_scol - fname = 'MSG' . ls_scol - color = VALUE # ( col = '6' ). INSERT ls_scol INTO TABLE lr_data -> t_scol . ENDIF . ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_get_data_selection *&---------------------------------------------------------------------* *& text *&---------------------------------------------------------------------* *& --> p1 text *& <-- p2 text *&---------------------------------------------------------------------* FORM frm_get_data_selection . CHECK go_alv_grid IS BOUND . \" \u83b7\u53d6ALV\u9009\u53d6\u884c DATA lt_rows TYPE lvc_t_row . CALL METHOD go_alv_grid -> get_selected_rows IMPORTING et_index_rows = lt_rows . LOOP AT lt_rows INTO DATA ( ls_row ). READ TABLE gt_data REFERENCE INTO DATA ( lr_data ) INDEX ls_row - index . IF sy - subrc = 0 . lr_data -> zsel = abap_true . ENDIF . ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_reset_data_selection *&---------------------------------------------------------------------* *& text *&---------------------------------------------------------------------* *& --> p1 text *& <-- p2 text *&---------------------------------------------------------------------* FORM frm_reset_data_selection . LOOP AT gt_data REFERENCE INTO DATA ( lr_data ). CLEAR lr_data -> zsel . ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Module STATUS_9000 OUTPUT *&---------------------------------------------------------------------* *& *&---------------------------------------------------------------------* MODULE status_9000 OUTPUT . PERFORM frm_display TABLES gt_data . SET PF-STATUS 'STATUS' . SET TITLEBAR 'TITLE' . ENDMODULE . *&---------------------------------------------------------------------* *& Module USER_COMMAND_9000 INPUT *&---------------------------------------------------------------------* * text *----------------------------------------------------------------------* MODULE user_command_9000 INPUT . PERFORM frm_get_data_selection . CASE sy - ucomm . WHEN '&F03' OR '&F15' OR '&F12' . LEAVE TO SCREEN 0 . WHEN OTHERS . ENDCASE . CLEAR sy - ucomm . ENDMODULE . SALV \u00b6 SALV\u6700\u5927\u95ee\u9898\u5728\u4e8e\u4e0d\u53ef\u7f16\u8f91\u3002\u5c3d\u7ba1\u53ef\u4ee5\u89e3\u51b3\uff0c\u4f46\u76f8\u5f53\u9ebb\u70e6\uff0c\u4e0d\u5efa\u8bae\u5728\u590d\u6742\u7684\u5f00\u53d1\u573a\u666f\u4e2d\u4f7f\u7528SALV\u3002 SALV\u5b9e\u9645\u4e0a\u4e5f\u662fALV GRID\uff0c\u6240\u4ee5\u53ea\u8981\u83b7\u53d6\u5230\u6838\u5fc3\u7684GRID\u5bf9\u8c61\uff0c\u5373\u53ef\u89e3\u51b3\u4e0a\u8ff0\u95ee\u9898\u3002\u4f46\u2026\u2026\u90fd\u8fd9\u6837\u4e86\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5\u7528ALV GRID\u5f00\u53d1\uff1f \u793a\u4f8b\u4ee3\u7801 TYPES : BEGIN OF ty_detail , field1 TYPE string , field2 TYPE string , END OF ty_detail . DATA gt_detail TYPE STANDARD TABLE OF ty_detail . DATA go_salv TYPE REF TO cl_salv_table . IF go_salv IS BOUND . go_salv -> refresh ( ). RETURN . ENDIF . TRY . cl_salv_table => factory ( IMPORTING r_salv_table = go_salv CHANGING t_table = gt_detail ). CATCH cx_salv_msg . RETURN . ENDTRY . DATA ( lo_setting ) = go_salv -> get_display_settings ( ). lo_setting -> set_list_header ( '\u6807\u9898' ). DATA ( lo_columns ) = go_salv -> get_columns ( ). lo_columns -> set_optimize ( abap_true ). TRY . DATA lo_column TYPE REF TO cl_salv_column_table . DEFINE _set_savl_column . lo_column ?= lo_columns -> get_column ( &1 ). lo_column -> set_long_text ( &2 ). lo_column -> set_medium_text ( &2 ). lo_column -> set_short_text ( &2 ). END-OF-DEFINITION . _set_savl_column 'ZFIELD1' '\u5b57\u6bb51' . _set_savl_column 'ZFIELD2' '\u5b57\u6bb52' . CATCH cx_salv_not_found . ENDTRY . \" \u8bbe\u7f6e\u5de5\u5177\u680f\u6309\u94ae DATA ( lo_functions ) = go_salv -> get_functions ( ). lo_functions -> set_all ( abap_true ). \" \u5f39\u7a97\u6a21\u5f0f\uff0c\u4e0d\u5f39\u7a97\u7684\u8bdd\uff0c\u6ce8\u91ca\u5373\u53ef go_salv -> set_screen_popup ( start_column = 30 end_column = 150 start_line = 2 end_line = 15 ). \" \u5c55\u793aSALV\u62a5\u8868 go_salv -> display ( ).","title":"ALV\u76f8\u5173"},{"location":"others/alv/#alv","text":"\u6574\u7406\u4e0bALV\u7528\u5230\u7684\u51e0\u79cd\u65b9\u6cd5\u3002","title":"ALV"},{"location":"others/alv/#lvc","text":"LVC\u597d\u5728\u4e0d\u7528\u753b\u5c4f\u5e55\uff0c\u76f4\u63a5\u8c03\u7528\u5373\u53ef\u3002 INCLUDE_LVC *&---------------------------------------------------------------------* *& Form frm_display *&---------------------------------------------------------------------* *& text *&---------------------------------------------------------------------* *& --> p1 text *& <-- p2 text *&---------------------------------------------------------------------* FORM frm_display TABLES ct_data TYPE STANDARD TABLE . DATA ls_layout TYPE lvc_s_layo . DATA lt_fieldcat TYPE STANDARD TABLE OF lvc_s_fcat . PERFORM frm_set_layout CHANGING ls_layout . PERFORM frm_set_fieldcat TABLES lt_fieldcat . CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY_LVC' EXPORTING i_callback_program = sy - repid i_callback_pf_status_set = 'FRM_PF_STATUS' i_callback_user_command = 'FRM_USER_COMMAND' is_layout_lvc = ls_layout it_fieldcat_lvc = lt_fieldcat i_default = abap_true i_save = 'A' TABLES t_outtab = ct_data[] EXCEPTIONS program_error = 1 OTHERS = 2 . IF sy - subrc <> 0 . MESSAGE ID sy - msgid TYPE sy - msgty NUMBER sy - msgno WITH sy - msgv1 sy - msgv2 sy - msgv3 sy - msgv4 . ENDIF . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_set_layout *&---------------------------------------------------------------------* *& \u62a5\u8868\u5e03\u5c40\u8bbe\u7f6e *&---------------------------------------------------------------------* FORM frm_set_layout CHANGING cs_layout TYPE lvc_s_layo . CLEAR cs_layout . cs_layout - zebra = abap_true . \" \u6591\u9a6c\u7ebf cs_layout - cwidth_opt = abap_true . \" \u81ea\u52a8\u8c03\u6574ALVL\u5217\u5bbd cs_layout - sel_mode = 'A' . \" \u9009\u62e9\u6a21\u5f0f * CS_LAYOUT - box_fname = 'CHECKBOX' . \" \u9009\u62e9\u6846 * CS_LAYOUT - ctab_fname = 'COLTAB' . \" \u5355\u5143\u683c\u989c\u8272\u8bbe\u7f6e ENDFORM . *&---------------------------------------------------------------------* *& Form frm_set_fieldcat *&---------------------------------------------------------------------* *& \u5b57\u6bb5\u76ee\u5f55\u8bbe\u7f6e *&---------------------------------------------------------------------* FORM frm_set_fieldcat TABLES ct_fieldcat TYPE lvc_t_fcat . DATA ls_fieldcat TYPE lvc_s_fcat . DEFINE _init_fieldcat . CLEAR ls_fieldcat . ls_fieldcat - fieldname = &1 . ls_fieldcat - tooltip = ls_fieldcat - coltext = ls_fieldcat - seltext = ls_fieldcat - scrtext_l = ls_fieldcat - scrtext_m = ls_fieldcat - scrtext_s = &2 . ls_fieldcat - ref_table = &3 . ls_fieldcat - ref_field = &4 . INSERT ls_fieldcat INTO TABLE ct_fieldcat . END-OF-DEFINITION . _init_fieldcat 'ZSEL' '\u9009\u62e9\u9879' '' '' . _init_fieldcat 'MTYPE ' '\u5904\u7406\u72b6\u6001' '' '' . _init_fieldcat 'MSG ' '\u5904\u7406\u6d88\u606f' '' '' . \" \u4e2a\u6027\u5316\u81ea\u5df1\u8f93\u51fa\u6570\u636e\u683c\u5f0f LOOP AT ct_fieldcat REFERENCE INTO DATA ( lr_fieldcat ). \" \u5b57\u6bb5\u663e\u793a\u5c5e\u6027\u8bbe\u7f6e CASE lr_fieldcat -> fieldname . WHEN 'ZSEL' . lr_fieldcat -> checkbox = abap_true . lr_fieldcat -> edit = abap_true . lr_fieldcat -> hotspot = abap_true . WHEN 'MENGE' . lr_fieldcat -> qfieldname = 'MEINS' . WHEN OTHERS . ENDCASE . ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_pf_status *&---------------------------------------------------------------------* *& \u8bbe\u7f6eGUI\u72b6\u6001 *&---------------------------------------------------------------------* FORM frm_pf_status USING ct_extab TYPE slis_t_extab . SET PF-STATUS 'STATUS' . SET TITLEBAR 'TITLE' . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_user_command *&---------------------------------------------------------------------* *& \u529f\u80fd\u54cd\u5e94 *&---------------------------------------------------------------------* FORM frm_user_command USING cv_ucomm LIKE sy - ucomm cs_selfield TYPE slis_selfield . \" \u5237\u65b0\u5c4f\u5e55\u6570\u636e\u5230\u5185\u8868 DATA : lo_grid TYPE REF TO cl_gui_alv_grid . CALL FUNCTION 'GET_GLOBALS_FROM_SLVC_FULLSCR' IMPORTING e_grid = lo_grid . CALL METHOD lo_grid -> check_changed_data . PERFORM frm_get_data_selection . \" \u6309\u94ae\u529f\u80fd\u5b9e\u73b0 CASE cv_ucomm . WHEN '&IC1' . \" \u53cc\u51fb WHEN OTHERS . ENDCASE . \" \u5237\u65b0ALV \u663e\u793a\u503c cs_selfield - refresh = abap_true . cs_selfield - row_stable = abap_true . cs_selfield - col_stable = abap_true . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_get_data_selection *&---------------------------------------------------------------------* *& text *&---------------------------------------------------------------------* *& --> p1 text *& <-- p2 text *&---------------------------------------------------------------------* FORM frm_get_data_selection . \" \u5237\u65b0\u5c4f\u5e55\u6570\u636e\u5230\u5185\u8868 DATA : lo_grid TYPE REF TO cl_gui_alv_grid . CALL FUNCTION 'GET_GLOBALS_FROM_SLVC_FULLSCR' IMPORTING e_grid = lo_grid . \" \u83b7\u53d6ALV\u9009\u53d6\u884c DATA lt_rows TYPE lvc_t_row . CALL METHOD lo_grid -> get_selected_rows IMPORTING et_index_rows = lt_rows . LOOP AT lt_rows INTO DATA ( ls_row ). READ TABLE gt_data REFERENCE INTO DATA ( lr_data ) INDEX ls_row - index . IF sy - subrc = 0 . lr_data -> zsel = abap_true . ENDIF . ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_reset_data_selection *&---------------------------------------------------------------------* *& text *&---------------------------------------------------------------------* *& --> p1 text *& <-- p2 text *&---------------------------------------------------------------------* FORM frm_reset_data_selection . LOOP AT gt_data REFERENCE INTO DATA ( lr_data ). CLEAR lr_data -> zsel . ENDLOOP . ENDFORM .","title":"LVC"},{"location":"others/alv/#alv-grid","text":"OOALV\u53ef\u5b9a\u5236\u7684\u529f\u80fd\u66f4\u5b8c\u5584\uff0c\u9002\u5408\u590d\u6742\u7684\u62a5\u8868\u5f00\u53d1\u3002 INCLUDE_ALV_GRID CLASS lcl_event_handler DEFINITION DEFERRED . DATA go_container TYPE REF TO cl_gui_container . DATA go_alv_grid TYPE REF TO cl_gui_alv_grid . DATA go_handler TYPE REF TO lcl_event_handler . *&---------------------------------------------------------------------* *& Form lcl_event_handler *&---------------------------------------------------------------------* CLASS lcl_event_handler DEFINITION . PUBLIC SECTION . \" \u6570\u636e\u53d8\u66f4\u4e8b\u4ef6 METHODS on_data_changed_finished FOR EVENT data_changed_finished OF cl_gui_alv_grid IMPORTING e_modified et_good_cells . \" \u5de5\u5177\u680f\u8c03\u6574 METHODS on_toolbar FOR EVENT toolbar OF cl_gui_alv_grid IMPORTING e_object e_interactive . \" \u54cd\u5e94\u5de5\u5177\u680f\u4e8b\u4ef6 \" \u70b9\u51fb\u6309\u94ae\u4e4b\u7c7b\u7684\u4e8b\u4ef6 METHODS on_user_command FOR EVENT user_command OF cl_gui_alv_grid IMPORTING e_ucomm . ENDCLASS . *&---------------------------------------------------------------------* *& Form lcl_event_handler *&---------------------------------------------------------------------* CLASS lcl_event_handler IMPLEMENTATION . *&---------------------------------------------------------------------* *& on_data_changed_finished *&---------------------------------------------------------------------* METHOD on_data_changed_finished . CHECK e_modified = abap_true . LOOP AT et_good_cells INTO DATA ( ls_cell ). READ TABLE gt_data REFERENCE INTO DATA ( lr_data ) INDEX ls_cell - row_id . IF sy - subrc = 0 . ENDIF . ENDLOOP . PERFORM frm_refresh_display . ENDMETHOD . *&---------------------------------------------------------------------* *& on_toolbar *&---------------------------------------------------------------------* METHOD on_toolbar . \" \u79fb\u9664\u7f16\u8f91\u76f8\u5173\u7684\u6309\u94ae DELETE e_object -> mt_toolbar WHERE function CS '&LOCAL&' . \" \u65b0\u589e\u6309\u94ae DATA ls_button LIKE LINE OF e_object -> mt_toolbar . CLEAR ls_button . ls_button - function = 'Z10' . ls_button - icon = icon_system_copy . ls_button - quickinfo = ls_button - text = '' . INSERT ls_button INTO TABLE e_object -> mt_toolbar . ENDMETHOD . *&---------------------------------------------------------------------* *& on_user_command *&---------------------------------------------------------------------* METHOD on_user_command . \" \u83b7\u53d6ALV\u9009\u53d6\u884c DATA lt_rows TYPE lvc_t_row . DATA ls_row TYPE lvc_s_row . CALL METHOD go_alv_grid -> get_selected_rows IMPORTING et_index_rows = lt_rows . CASE e_ucomm . WHEN 'Z10' . WHEN OTHERS . ENDCASE . PERFORM frm_refresh_display . ENDMETHOD . ENDCLASS . *&---------------------------------------------------------------------* *& Form frm_display *&---------------------------------------------------------------------* *& text *&---------------------------------------------------------------------* *& --> p1 text *& <-- p2 text *&---------------------------------------------------------------------* FORM frm_display TABLES ct_data TYPE STANDARD TABLE . IF go_container IS NOT BOUND . go_container = NEW cl_gui_custom_container ( 'CON_9000' ). ENDIF . IF go_alv_grid IS BOUND . PERFORM frm_refresh_display . RETURN . ENDIF . \" \u65b0\u5efa\u5bf9\u8c61 go_alv_grid = NEW cl_gui_alv_grid ( go_container ). DATA ls_layout TYPE lvc_s_layo . DATA lt_fieldcat TYPE STANDARD TABLE OF lvc_s_fcat . PERFORM frm_set_layout CHANGING ls_layout . PERFORM frm_set_fieldcat TABLES lt_fieldcat . PERFORM frm_set_event . PERFORM frm_set_style . PERFORM frm_set_color . \" \u5c55\u793a CALL METHOD go_alv_grid -> set_table_for_first_display EXPORTING is_layout = ls_layout CHANGING it_outtab = ct_data[] it_fieldcatalog = lt_fieldcat EXCEPTIONS invalid_parameter_combination = 1 program_error = 2 too_many_lines = 3 OTHERS = 4 . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_display *&---------------------------------------------------------------------* *& text *&---------------------------------------------------------------------* *& --> p1 text *& <-- p2 text *&---------------------------------------------------------------------* FORM frm_refresh_display . PERFORM frm_set_style . PERFORM frm_set_color . go_alv_grid -> refresh_table_display ( is_stable = CONV # ( 'XX' ) ). ENDFORM . *&---------------------------------------------------------------------* *& Form frm_set_layout *&---------------------------------------------------------------------* *& \u62a5\u8868\u5e03\u5c40\u8bbe\u7f6e *&---------------------------------------------------------------------* FORM frm_set_layout CHANGING cs_layout TYPE lvc_s_layo . CLEAR cs_layout . cs_layout - zebra = abap_true . \" \u6591\u9a6c\u7ebf cs_layout - cwidth_opt = abap_true . \" \u81ea\u52a8\u8c03\u6574ALVL\u5217\u5bbd cs_layout - sel_mode = 'A' . \" \u9009\u62e9\u6a21\u5f0f cs_layout - ctab_fname = 'T_SCOL' . \" \u5355\u5143\u683c\u989c\u8272\u8bbe\u7f6e cs_layout - stylefname = 'T_STYL' . \" \u5355\u5143\u683c\u63a7\u5236 ENDFORM . *&---------------------------------------------------------------------* *& Form frm_set_fieldcat *&---------------------------------------------------------------------* *& \u5b57\u6bb5\u76ee\u5f55\u8bbe\u7f6e *&---------------------------------------------------------------------* FORM frm_set_fieldcat TABLES ct_fieldcat TYPE lvc_t_fcat . DATA ls_fieldcat TYPE lvc_s_fcat . DEFINE _init_fieldcat . CLEAR ls_fieldcat . ls_fieldcat - fieldname = &1 . ls_fieldcat - tooltip = ls_fieldcat - coltext = ls_fieldcat - seltext = ls_fieldcat - scrtext_l = ls_fieldcat - scrtext_m = ls_fieldcat - scrtext_s = &2 . ls_fieldcat - ref_table = &3 . ls_fieldcat - ref_field = &4 . INSERT ls_fieldcat INTO TABLE ct_fieldcat . END-OF-DEFINITION . _init_fieldcat 'MTYPE' '\u68c0\u67e5\u72b6\u6001' '' '' . _init_fieldcat 'MSG ' '\u68c0\u67e5\u6d88\u606f' '' '' . \" \u4e2a\u6027\u5316\u81ea\u5df1\u8f93\u51fa\u6570\u636e\u683c\u5f0f LOOP AT ct_fieldcat REFERENCE INTO DATA ( lr_fieldcat ). \" \u7f16\u8f91\u72b6\u6001\uff0c\u9ed8\u8ba4\u53ef\u7f16\u8f91 lr_fieldcat -> edit = abap_true . CASE lr_fieldcat -> fieldname . WHEN 'MTYPE' OR 'MSG' . lr_fieldcat -> edit = abap_false . WHEN OTHERS . ENDCASE . ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_set_event *&---------------------------------------------------------------------* *& \u7ed1\u5b9aALV\u4e8b\u4ef6 *&---------------------------------------------------------------------* FORM frm_set_event . IF go_handler IS BOUND . RETURN . ENDIF . go_handler = NEW lcl_event_handler ( ). \" \u6570\u636e\u53d8\u66f4 go_alv_grid -> register_edit_event ( i_event_id = cl_gui_alv_grid => mc_evt_modified ). SET HANDLER go_handler -> on_data_changed_finished FOR go_alv_grid . \" \u5de5\u5177\u680f\u76f8\u5173 SET HANDLER go_handler -> on_toolbar FOR go_alv_grid . SET HANDLER go_handler -> on_user_command FOR go_alv_grid . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_set_style *&---------------------------------------------------------------------* *& text *&---------------------------------------------------------------------* *& --> p1 text *& <-- p2 text *&---------------------------------------------------------------------* FORM frm_set_style . DATA ls_styl TYPE lvc_s_styl . LOOP AT gt_data REFERENCE INTO DATA ( lr_data ). CLEAR lr_data -> t_styl . \" \u8bbe\u7f6eALV\u5b57\u6bb5\u6216\u884c\u7684\u72b6\u6001 \" \u5e38\u7528\u6709\u7981\u6b62\u7f16\u8f91CL_GUI_ALV_GRID=>MC_STYLE_DISABLED \" \u7981\u6b62\u5220\u9664\u884cCL_GUI_ALV_GRID=>MC_STYLE_NO_DELETE_ROW ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_set_color *&---------------------------------------------------------------------* *& text *&---------------------------------------------------------------------* *& --> p1 text *& <-- p2 text *&---------------------------------------------------------------------* FORM frm_set_color . DATA ls_scol TYPE lvc_s_scol . LOOP AT gt_data REFERENCE INTO DATA ( lr_data ). CLEAR lr_data -> t_scol . IF lr_data -> mtype = 'E' . CLEAR ls_scol . ls_scol - fname = 'MTYPE' . ls_scol - color = VALUE # ( col = '6' ). INSERT ls_scol INTO TABLE lr_data -> t_scol . CLEAR ls_scol . ls_scol - fname = 'MSG' . ls_scol - color = VALUE # ( col = '6' ). INSERT ls_scol INTO TABLE lr_data -> t_scol . ENDIF . ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_get_data_selection *&---------------------------------------------------------------------* *& text *&---------------------------------------------------------------------* *& --> p1 text *& <-- p2 text *&---------------------------------------------------------------------* FORM frm_get_data_selection . CHECK go_alv_grid IS BOUND . \" \u83b7\u53d6ALV\u9009\u53d6\u884c DATA lt_rows TYPE lvc_t_row . CALL METHOD go_alv_grid -> get_selected_rows IMPORTING et_index_rows = lt_rows . LOOP AT lt_rows INTO DATA ( ls_row ). READ TABLE gt_data REFERENCE INTO DATA ( lr_data ) INDEX ls_row - index . IF sy - subrc = 0 . lr_data -> zsel = abap_true . ENDIF . ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_reset_data_selection *&---------------------------------------------------------------------* *& text *&---------------------------------------------------------------------* *& --> p1 text *& <-- p2 text *&---------------------------------------------------------------------* FORM frm_reset_data_selection . LOOP AT gt_data REFERENCE INTO DATA ( lr_data ). CLEAR lr_data -> zsel . ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Module STATUS_9000 OUTPUT *&---------------------------------------------------------------------* *& *&---------------------------------------------------------------------* MODULE status_9000 OUTPUT . PERFORM frm_display TABLES gt_data . SET PF-STATUS 'STATUS' . SET TITLEBAR 'TITLE' . ENDMODULE . *&---------------------------------------------------------------------* *& Module USER_COMMAND_9000 INPUT *&---------------------------------------------------------------------* * text *----------------------------------------------------------------------* MODULE user_command_9000 INPUT . PERFORM frm_get_data_selection . CASE sy - ucomm . WHEN '&F03' OR '&F15' OR '&F12' . LEAVE TO SCREEN 0 . WHEN OTHERS . ENDCASE . CLEAR sy - ucomm . ENDMODULE .","title":"ALV GRID"},{"location":"others/alv/#salv","text":"SALV\u6700\u5927\u95ee\u9898\u5728\u4e8e\u4e0d\u53ef\u7f16\u8f91\u3002\u5c3d\u7ba1\u53ef\u4ee5\u89e3\u51b3\uff0c\u4f46\u76f8\u5f53\u9ebb\u70e6\uff0c\u4e0d\u5efa\u8bae\u5728\u590d\u6742\u7684\u5f00\u53d1\u573a\u666f\u4e2d\u4f7f\u7528SALV\u3002 SALV\u5b9e\u9645\u4e0a\u4e5f\u662fALV GRID\uff0c\u6240\u4ee5\u53ea\u8981\u83b7\u53d6\u5230\u6838\u5fc3\u7684GRID\u5bf9\u8c61\uff0c\u5373\u53ef\u89e3\u51b3\u4e0a\u8ff0\u95ee\u9898\u3002\u4f46\u2026\u2026\u90fd\u8fd9\u6837\u4e86\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5\u7528ALV GRID\u5f00\u53d1\uff1f \u793a\u4f8b\u4ee3\u7801 TYPES : BEGIN OF ty_detail , field1 TYPE string , field2 TYPE string , END OF ty_detail . DATA gt_detail TYPE STANDARD TABLE OF ty_detail . DATA go_salv TYPE REF TO cl_salv_table . IF go_salv IS BOUND . go_salv -> refresh ( ). RETURN . ENDIF . TRY . cl_salv_table => factory ( IMPORTING r_salv_table = go_salv CHANGING t_table = gt_detail ). CATCH cx_salv_msg . RETURN . ENDTRY . DATA ( lo_setting ) = go_salv -> get_display_settings ( ). lo_setting -> set_list_header ( '\u6807\u9898' ). DATA ( lo_columns ) = go_salv -> get_columns ( ). lo_columns -> set_optimize ( abap_true ). TRY . DATA lo_column TYPE REF TO cl_salv_column_table . DEFINE _set_savl_column . lo_column ?= lo_columns -> get_column ( &1 ). lo_column -> set_long_text ( &2 ). lo_column -> set_medium_text ( &2 ). lo_column -> set_short_text ( &2 ). END-OF-DEFINITION . _set_savl_column 'ZFIELD1' '\u5b57\u6bb51' . _set_savl_column 'ZFIELD2' '\u5b57\u6bb52' . CATCH cx_salv_not_found . ENDTRY . \" \u8bbe\u7f6e\u5de5\u5177\u680f\u6309\u94ae DATA ( lo_functions ) = go_salv -> get_functions ( ). lo_functions -> set_all ( abap_true ). \" \u5f39\u7a97\u6a21\u5f0f\uff0c\u4e0d\u5f39\u7a97\u7684\u8bdd\uff0c\u6ce8\u91ca\u5373\u53ef go_salv -> set_screen_popup ( start_column = 30 end_column = 150 start_line = 2 end_line = 15 ). \" \u5c55\u793aSALV\u62a5\u8868 go_salv -> display ( ).","title":"SALV"},{"location":"others/migo/","text":"MIGO \u00b6 MIGO\u529f\u80fd\u5f3a\u5927\uff0c\u5728\u524d\u53f0\u6839\u636e\u64cd\u4f5c\u7c7b\u578b\u3001\u51ed\u8bc1\u7c7b\u578b\u3001\u79fb\u52a8\u7c7b\u578b\uff0c\u53ef\u5b9e\u73b0\u4e0d\u540c\u6548\u679c\u7684\u5e93\u5b58\u7ba1\u7406\u3002\u5176\u5bf9\u5e94BAPI\uff0c BAPI_GOODSMVT_CREATE \uff0c\u4e5f\u6709\u7740\u5f3a\u5927\u7684\u4f5c\u7528\uff0c\u6211\u5c3d\u53ef\u80fd\u628a\u5404\u79cd\u573a\u666f\u7684\u4ee3\u7801\u90fd\u5217\u793a\u3002 \u53c2\u6570\u8bf4\u660e \u00b6 GM_CODE \u00b6 \u5173\u4e8eGM_CODE\u4f20\u503c\u4f5c\u7528\uff1a GM_CODE \u4e8b\u52a1\u4ee3\u7801 \u8bf4\u660e1 \u8bf4\u660e2 01 MB01 Goods receipt for purchase order \u91c7\u8d2d\u8ba2\u5355\u6536\u8d27 02 MB31 Goods receipt for production order \u751f\u4ea7\u8ba2\u5355\u6536\u8d27 03 MB1A Goods issue \u53d1\u8d27 04 MB1B Transfer posting \u8f6c\u50a8 05 MB1C Other goods receipt \u5176\u4ed6\u6536\u8d27 06 MB11 Goods movement \u8d27\u7269\u79fb\u52a8 07 MB04 Subsequent adjustment to a subcontract order \u5206\u5305\u540e\u7eed\u8c03\u6574\uff0c\u4e0d\u61c2 \u8868 T158G \uff0cGM_CODE\u5bf9\u5e94\u7684\u4e8b\u52a1\u4ee3\u7801 \u8868 T158B \uff0c\u4e8b\u52a1\u4ee3\u7801\u5bf9\u5e94\u79fb\u52a8\u7c7b\u578b \u5982\u679c\u4e0d\u786e\u5b9a\u8981\u4f20\u4ec0\u4e48\u503c\uff0c\u53ef\u4ee5\u5148\u5230T158B\uff0c\u6839\u636e\u79fb\u52a8\u7c7b\u578b\u67e5\u627e\u4e8b\u52a1\u4ee3\u7801\uff0c\u518d\u5230T158G\u67e5\u627e\u5bf9\u5e94GM_CODE \u5b9e\u5728\u4e0d\u884c\uff0c\u5c31\u4e00\u4e2a\u4e00\u4e2a\u8bd5\u9519\u5427\uff0c\u53cd\u6b63\u4e5f\u4e0d\u591a MVT_IND \u00b6 \u79fb\u52a8\u6807\u8bc6\uff0c\u5927\u6982\u662f\u9488\u5bf9\u8d27\u7269\u79fb\u52a8\uff08GM_CODE=06\uff09\u6765\u8bbe\u7f6e\u7684\uff0c\u53c2\u8003\uff08\u57df\u503c\uff09\u8bf4\u660e\uff1a MVT_IND \u8bf4\u660e1 \u8bf4\u660e2 \u7a7a Goods movement w/o reference \u65e0\u53c2\u8003\u7684\u8d27\u7269\u79fb\u52a8 B Goods movement for purchase order \u6309\u91c7\u8d2d\u8ba2\u5355\u7684\u8d27\u7269\u79fb\u52a8 F Goods movement for production order \u6709\u5173\u751f\u4ea7\u5355\u7684\u8d27\u7269\u79fb\u52a8 L Goods movement for delivery note \u6709\u5173\u4ea4\u8d27\u901a\u77e5\u7684\u8d27\u7269\u79fb\u52a8 K Goods movement for kanban requirement (WM - internal only) \u770b\u677f\u9700\u6c42\u7684\u8d27\u7269\u79fb\u52a8\uff08WM\uff0d\u4ec5\u9650\u5185\u90e8\uff09 O Subsequent adjustment of \"material-provided\" consumption \"\u63d0\u4f9b\u7269\u6599\"\u6d88\u8017\u7684\u540e\u7eed\u8c03\u6574 W Subsequent adjustment of proportion/product unit material \u6bd4\u4f8b\u7684\u540e\u7eed\u8c03\u6574/\u4ea7\u54c1\u5355\u4f4d\u7269\u6599 MOVE_TYPE \u00b6 \u5177\u4f53\u53ef\u67e5\u8868\uff08T156\uff0cT156HT\uff09\uff0c\u4e0b\u9762\u5217\u793a\u5e38\u89c1\u7684\u51e0\u79cd\u79fb\u52a8\u7c7b\u578b\uff1a MOVE_TYPE \u8bf4\u660e 101 \u6536\u8d27\u5165\u5e93 102 \u51b2\u9500101 261 \u5de5\u5355\u9886\u6599 262 \u5de5\u5355\u9000\u6599\uff08\u6216\u51b2\u9500261\uff09 311 \u8f6c\u50a8 561 \u521b\u5efa\u671f\u521d\u5e93\u5b58 562 \u51b2\u9500561 \u573a\u666f \u00b6 \u6f14\u793a \u00b6 \u793a\u4f8b\u4ee3\u7801 DATA l_mtype TYPE bapi_mtype . DATA l_msg TYPE bapi_msg . DATA : ls_goodsmvt_header TYPE bapi2017_gm_head_01 , ls_goodsmvt_code TYPE bapi2017_gm_code , lt_goodsmvt_item TYPE STANDARD TABLE OF bapi2017_gm_item_create , ls_goodsmvt_item TYPE bapi2017_gm_item_create , ls_goodsmvt_headret TYPE bapi2017_gm_head_ret , lt_return TYPE STANDARD TABLE OF bapiret2 , ls_return TYPE bapiret2 . CLEAR ls_goodsmvt_header . ls_goodsmvt_header - pstng_date = ls_input - budat . ls_goodsmvt_header - doc_date = ls_input - budat . CLEAR ls_goodsmvt_code . ls_goodsmvt_code - gm_code = ls_input - gm_code . CLEAR lt_goodsmvt_item . CLEAR ls_goodsmvt_item . ls_goodsmvt_item - move_type = ls_input - bwart . ls_goodsmvt_item - material = ls_input - matnr . ls_goodsmvt_item - plant = ls_input - werks . ls_goodsmvt_item - stge_loc = ls_input - lgort . ls_goodsmvt_item - batch = ls_input - charg . ls_goodsmvt_item - spec_stock = ls_input - sobkz . ls_goodsmvt_item - entry_qnt = ls_input - menge . INSERT ls_goodsmvt_item INTO TABLE lt_goodsmvt_item . CLEAR ls_goodsmvt_headret . CLEAR lt_return . CLEAR ls_return . CALL FUNCTION 'BAPI_GOODSMVT_CREATE' EXPORTING goodsmvt_header = ls_goodsmvt_header goodsmvt_code = ls_goodsmvt_code IMPORTING goodsmvt_headret = ls_goodsmvt_headret TABLES goodsmvt_item = lt_goodsmvt_item return = lt_return . IF ls_goodsmvt_headret - mat_doc IS INITIAL . l_mtype = 'E' . LOOP AT lt_return INTO ls_return WHERE type CA 'AEX' . MESSAGE ID ls_return - id TYPE ls_return - type NUMBER ls_return - number WITH ls_return - message_v1 ls_return - message_v2 ls_return - message_v3 ls_return - message_v4 INTO ls_return - message . l_msg = |{ l_msg }{ ls_return - message } ; |. ENDLOOP . CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK' . ELSE . l_mtype = 'S' . l_msg = | \u7269\u6599\u51ed\u8bc1 { ls_goodsmvt_headret - mat_doc } \u5df2\u5904\u7406 |. CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = 'X' . ENDIF . \u91c7\u8d2d\u8ba2\u5355\u6536\u8d27 \u00b6 \u793a\u4f8b\u4ee3\u7801 \u751f\u4ea7\u8ba2\u5355\u6536\u8d27 \u00b6 \u793a\u4f8b\u4ee3\u7801 \u53d1\u8d27 \u00b6 \u793a\u4f8b\u4ee3\u7801 DATA : ls_goodsmvt_header TYPE bapi2017_gm_head_01 , ls_goodsmvt_code TYPE bapi2017_gm_code , ls_goodsmvt_headret TYPE bapi2017_gm_head_ret , lt_goodsmvt_item TYPE STANDARD TABLE OF bapi2017_gm_item_create , ls_goodsmvt_item TYPE bapi2017_gm_item_create , lt_return TYPE STANDARD TABLE OF bapiret2 , ls_return TYPE bapiret2 . CLEAR ls_goodsmvt_header . ls_goodsmvt_header - pstng_date = ls_input - budat . ls_goodsmvt_header - doc_date = ls_input - budat . CLEAR ls_goodsmvt_code . ls_goodsmvt_code - gm_code = '03' . \" \u53d1\u8d27 CLEAR lt_goodsmvt_item . CLEAR ls_goodsmvt_item . ls_goodsmvt_item - material = ls_input - matnr . ls_goodsmvt_item - plant = ls_input - werks . ls_goodsmvt_item - stge_loc = ls_input - lgort . ls_goodsmvt_item - batch = ls_input - charg . ls_goodsmvt_item - spec_stock = ls_input - sobkz . \" \u7279\u6b8a\u5e93\u5b58\u6807\u8bc6 ls_goodsmvt_item - entry_qnt = ls_input - menge . \" \u6570\u91cf \" \u64a4\u9500\u6807\u8bb0 ls_goodsmvt_item - move_type = '261' . IF ls_input - zcancel IS NOT INITIAL . ls_goodsmvt_item - move_type = '262' . ENDIF . \" WBS\u5143\u7d20 IF ls_input - pspnr IS NOT INITIAL . ls_goodsmvt_item - wbs_elem = ls_input - pspnr . ENDIF . \" \u751f\u4ea7\u8ba2\u5355 ls_goodsmvt_item - orderid = ls_input - aufnr . INSERT ls_goodsmvt_item INTO TABLE lt_goodsmvt_item . \" \u9884\u7559\u5355 ls_goodsmvt_item - reserv_no = ls_input - rsnum . ls_goodsmvt_item - res_item = ls_input - rspos . \" \u53d1\u8d27\u8fc7\u8d26 CLEAR ls_goodsmvt_headret . CLEAR lt_return . CLEAR ls_return . CALL FUNCTION 'BAPI_GOODSMVT_CREATE' EXPORTING goodsmvt_header = ls_goodsmvt_header goodsmvt_code = ls_goodsmvt_code IMPORTING goodsmvt_headret = ls_goodsmvt_headret TABLES goodsmvt_item = lt_goodsmvt_item return = lt_return . IF ls_goodsmvt_headret - mat_doc IS INITIAL . l_mtype = 'E' . LOOP AT lt_return INTO ls_return WHERE type CA 'AEX' . MESSAGE ID ls_return - id TYPE ls_return - type NUMBER ls_return - number WITH ls_return - message_v1 ls_return - message_v2 ls_return - message_v3 ls_return - message_v4 INTO ls_return - message . l_msg = |{ l_msg }{ ls_return - message } ; |. ENDLOOP . CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK' . ELSE . l_mtype = 'S' . l_msg = | \u7269\u6599\u51ed\u8bc1 { ls_goodsmvt_headret - mat_doc } \u5df2\u5904\u7406 |. CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = 'X' . ENDIF . \u8f6c\u50a8 \u00b6 \u5bf9\u4e8e\u9879\u76ee\u5e93\u5b58(WBS)\u8f6c\u50a8\uff0c\u5982\u679c\u51fa\u73b0\u9879\u76ee\u65e0\u6cd5\u4fee\u6539\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u5728\u6267\u884c\u524d\u52a0\u5165\u4e0b\u9762\u4ee3\u7801\uff1a \u8bbe\u7f6eXMIGO\u6807\u8bb0 \" \u5728INCLUDE\u6587\u4ef6MM07MFU0_UMLAGERUNG_PRUEFEN \" \u884c179\uff0cIF xmigo <> X. \" \u884c243\uff0cIF dm07m-fausw+62(1) = minus. \" \u8be5\u6761\u4ef6\u4e2d\uff0cWBS_ELEM(PS_PSP_PNR)\u5b57\u6bb5\u88ab\u6e05\u7a7a \" \u5e76\u5728\u540e\u7eed\u5904\u7406\u8fc7\u7a0b\uff0c\uff08\u7a7a\u503c\uff09\u9ed8\u8ba4\u8d4b\u503c\u4e3aVAL_WBS_ELEM(MAT_PSPNR) \" \u56e0\u6b64\uff0c\u53ea\u8981\u5e72\u9884\u8fd9\u4e24\u4e2a\u5224\u65ad\u5373\u53ef\u89e3\u51b3\u5b57\u6bb5\u88ab\u6e05\u7a7a\u7684\u95ee\u9898 \" \u5229\u7528\u4e0b\u9762\u65b9\u6cd5\uff0c\u53ef\u4ee5\u5bf9XMIGO\u5b57\u6bb5\u8fdb\u884c\u8d4b\u503c CALL FUNCTION 'MB_SET_BAPI_FLAG' EXPORTING action = 3 . \u793a\u4f8b\u4ee3\u7801 DATA : ls_goodsmvt_header TYPE bapi2017_gm_head_01 , ls_goodsmvt_code TYPE bapi2017_gm_code , ls_goodsmvt_headret TYPE bapi2017_gm_head_ret , lt_goodsmvt_item TYPE STANDARD TABLE OF bapi2017_gm_item_create , ls_goodsmvt_item TYPE bapi2017_gm_item_create , lt_return TYPE STANDARD TABLE OF bapiret2 , ls_return TYPE bapiret2 . CLEAR ls_goodsmvt_header . ls_goodsmvt_header - pstng_date = ls_input - budat . ls_goodsmvt_header - doc_date = ls_input - budat . CLEAR ls_goodsmvt_code . ls_goodsmvt_code - gm_code = '04' . \" \u8f6c\u50a8 CLEAR lt_goodsmvt_item . CLEAR ls_goodsmvt_item . ls_goodsmvt_item - material = ls_input - matnr_from . ls_goodsmvt_item - move_mat = ls_input - matnr_to . ls_goodsmvt_item - plant = ls_input - werks_from . ls_goodsmvt_item - move_plant = ls_input - werks_to . ls_goodsmvt_item - stge_loc = ls_input - lgort_from . ls_goodsmvt_item - move_stloc = ls_input - lgort_to . ls_goodsmvt_item - batch = ls_input - charg_from . ls_goodsmvt_item - move_batch = ls_input - charg_to . \" ls_goodsmvt_item-val_wbs_elem = ls_input-pspnr_from. \" ls_goodsmvt_item-wbs_elem = ls_input-pspnr_to. CALL FUNCTION 'CONVERSION_EXIT_ABPSP_OUTPUT' EXPORTING input = ls_input - pspnr_from IMPORTING output = ls_goodsmvt_item - val_wbs_elem . CALL FUNCTION 'CONVERSION_EXIT_ABPSP_OUTPUT' EXPORTING input = ls_input - pspnr_to IMPORTING output = ls_goodsmvt_item - wbs_elem . ls_goodsmvt_item - move_type = '311' . ls_goodsmvt_item - spec_stock = 'Q' . \" \u7279\u6b8a\u5e93\u5b58\u6807\u8bc6 ls_goodsmvt_item - entry_qnt = ls_input - menge . \" \u6570\u91cf \" \u8bbe\u7f6eXMIGO\u6807\u8bb0 CALL FUNCTION 'MB_SET_BAPI_FLAG' EXPORTING action = 3 . \" \u8f6c\u50a8\u8fc7\u8d26 CLEAR ls_goodsmvt_headret . CLEAR lt_return . CLEAR ls_return . CALL FUNCTION 'BAPI_GOODSMVT_CREATE' EXPORTING goodsmvt_header = ls_goodsmvt_header goodsmvt_code = ls_goodsmvt_code IMPORTING goodsmvt_headret = ls_goodsmvt_headret TABLES goodsmvt_item = lt_goodsmvt_item return = lt_return . IF ls_goodsmvt_headret - mat_doc IS INITIAL . l_mtype = 'E' . LOOP AT lt_return INTO ls_return WHERE type CA 'AEX' . MESSAGE ID ls_return - id TYPE ls_return - type NUMBER ls_return - number WITH ls_return - message_v1 ls_return - message_v2 ls_return - message_v3 ls_return - message_v4 INTO ls_return - message . l_msg = |{ l_msg }{ ls_return - message } ; |. ENDLOOP . CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK' . ELSE . l_mtype = 'S' . l_msg = | \u7269\u6599\u51ed\u8bc1 { ls_goodsmvt_headret - mat_doc } \u5df2\u5904\u7406 |. CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = 'X' . ENDIF . \u5176\u4ed6\u6536\u8d27 \u00b6 \u793a\u4f8b\u4ee3\u7801 \u8d27\u7269\u79fb\u52a8 \u00b6 \u793a\u4f8b\u4ee3\u7801 \u9500\u552e\u8ba2\u5355\u51fa\u5e93 \u00b6 \u793a\u4f8b\u4ee3\u7801 \u51b2\u9500 \u00b6 BAPI_DELIVERYPROCESSING_EXEC","title":"MIGO"},{"location":"others/migo/#migo","text":"MIGO\u529f\u80fd\u5f3a\u5927\uff0c\u5728\u524d\u53f0\u6839\u636e\u64cd\u4f5c\u7c7b\u578b\u3001\u51ed\u8bc1\u7c7b\u578b\u3001\u79fb\u52a8\u7c7b\u578b\uff0c\u53ef\u5b9e\u73b0\u4e0d\u540c\u6548\u679c\u7684\u5e93\u5b58\u7ba1\u7406\u3002\u5176\u5bf9\u5e94BAPI\uff0c BAPI_GOODSMVT_CREATE \uff0c\u4e5f\u6709\u7740\u5f3a\u5927\u7684\u4f5c\u7528\uff0c\u6211\u5c3d\u53ef\u80fd\u628a\u5404\u79cd\u573a\u666f\u7684\u4ee3\u7801\u90fd\u5217\u793a\u3002","title":"MIGO"},{"location":"others/migo/#_1","text":"","title":"\u53c2\u6570\u8bf4\u660e"},{"location":"others/migo/#gm_code","text":"\u5173\u4e8eGM_CODE\u4f20\u503c\u4f5c\u7528\uff1a GM_CODE \u4e8b\u52a1\u4ee3\u7801 \u8bf4\u660e1 \u8bf4\u660e2 01 MB01 Goods receipt for purchase order \u91c7\u8d2d\u8ba2\u5355\u6536\u8d27 02 MB31 Goods receipt for production order \u751f\u4ea7\u8ba2\u5355\u6536\u8d27 03 MB1A Goods issue \u53d1\u8d27 04 MB1B Transfer posting \u8f6c\u50a8 05 MB1C Other goods receipt \u5176\u4ed6\u6536\u8d27 06 MB11 Goods movement \u8d27\u7269\u79fb\u52a8 07 MB04 Subsequent adjustment to a subcontract order \u5206\u5305\u540e\u7eed\u8c03\u6574\uff0c\u4e0d\u61c2 \u8868 T158G \uff0cGM_CODE\u5bf9\u5e94\u7684\u4e8b\u52a1\u4ee3\u7801 \u8868 T158B \uff0c\u4e8b\u52a1\u4ee3\u7801\u5bf9\u5e94\u79fb\u52a8\u7c7b\u578b \u5982\u679c\u4e0d\u786e\u5b9a\u8981\u4f20\u4ec0\u4e48\u503c\uff0c\u53ef\u4ee5\u5148\u5230T158B\uff0c\u6839\u636e\u79fb\u52a8\u7c7b\u578b\u67e5\u627e\u4e8b\u52a1\u4ee3\u7801\uff0c\u518d\u5230T158G\u67e5\u627e\u5bf9\u5e94GM_CODE \u5b9e\u5728\u4e0d\u884c\uff0c\u5c31\u4e00\u4e2a\u4e00\u4e2a\u8bd5\u9519\u5427\uff0c\u53cd\u6b63\u4e5f\u4e0d\u591a","title":"GM_CODE"},{"location":"others/migo/#mvt_ind","text":"\u79fb\u52a8\u6807\u8bc6\uff0c\u5927\u6982\u662f\u9488\u5bf9\u8d27\u7269\u79fb\u52a8\uff08GM_CODE=06\uff09\u6765\u8bbe\u7f6e\u7684\uff0c\u53c2\u8003\uff08\u57df\u503c\uff09\u8bf4\u660e\uff1a MVT_IND \u8bf4\u660e1 \u8bf4\u660e2 \u7a7a Goods movement w/o reference \u65e0\u53c2\u8003\u7684\u8d27\u7269\u79fb\u52a8 B Goods movement for purchase order \u6309\u91c7\u8d2d\u8ba2\u5355\u7684\u8d27\u7269\u79fb\u52a8 F Goods movement for production order \u6709\u5173\u751f\u4ea7\u5355\u7684\u8d27\u7269\u79fb\u52a8 L Goods movement for delivery note \u6709\u5173\u4ea4\u8d27\u901a\u77e5\u7684\u8d27\u7269\u79fb\u52a8 K Goods movement for kanban requirement (WM - internal only) \u770b\u677f\u9700\u6c42\u7684\u8d27\u7269\u79fb\u52a8\uff08WM\uff0d\u4ec5\u9650\u5185\u90e8\uff09 O Subsequent adjustment of \"material-provided\" consumption \"\u63d0\u4f9b\u7269\u6599\"\u6d88\u8017\u7684\u540e\u7eed\u8c03\u6574 W Subsequent adjustment of proportion/product unit material \u6bd4\u4f8b\u7684\u540e\u7eed\u8c03\u6574/\u4ea7\u54c1\u5355\u4f4d\u7269\u6599","title":"MVT_IND"},{"location":"others/migo/#move_type","text":"\u5177\u4f53\u53ef\u67e5\u8868\uff08T156\uff0cT156HT\uff09\uff0c\u4e0b\u9762\u5217\u793a\u5e38\u89c1\u7684\u51e0\u79cd\u79fb\u52a8\u7c7b\u578b\uff1a MOVE_TYPE \u8bf4\u660e 101 \u6536\u8d27\u5165\u5e93 102 \u51b2\u9500101 261 \u5de5\u5355\u9886\u6599 262 \u5de5\u5355\u9000\u6599\uff08\u6216\u51b2\u9500261\uff09 311 \u8f6c\u50a8 561 \u521b\u5efa\u671f\u521d\u5e93\u5b58 562 \u51b2\u9500561","title":"MOVE_TYPE"},{"location":"others/migo/#_2","text":"","title":"\u573a\u666f"},{"location":"others/migo/#_3","text":"\u793a\u4f8b\u4ee3\u7801 DATA l_mtype TYPE bapi_mtype . DATA l_msg TYPE bapi_msg . DATA : ls_goodsmvt_header TYPE bapi2017_gm_head_01 , ls_goodsmvt_code TYPE bapi2017_gm_code , lt_goodsmvt_item TYPE STANDARD TABLE OF bapi2017_gm_item_create , ls_goodsmvt_item TYPE bapi2017_gm_item_create , ls_goodsmvt_headret TYPE bapi2017_gm_head_ret , lt_return TYPE STANDARD TABLE OF bapiret2 , ls_return TYPE bapiret2 . CLEAR ls_goodsmvt_header . ls_goodsmvt_header - pstng_date = ls_input - budat . ls_goodsmvt_header - doc_date = ls_input - budat . CLEAR ls_goodsmvt_code . ls_goodsmvt_code - gm_code = ls_input - gm_code . CLEAR lt_goodsmvt_item . CLEAR ls_goodsmvt_item . ls_goodsmvt_item - move_type = ls_input - bwart . ls_goodsmvt_item - material = ls_input - matnr . ls_goodsmvt_item - plant = ls_input - werks . ls_goodsmvt_item - stge_loc = ls_input - lgort . ls_goodsmvt_item - batch = ls_input - charg . ls_goodsmvt_item - spec_stock = ls_input - sobkz . ls_goodsmvt_item - entry_qnt = ls_input - menge . INSERT ls_goodsmvt_item INTO TABLE lt_goodsmvt_item . CLEAR ls_goodsmvt_headret . CLEAR lt_return . CLEAR ls_return . CALL FUNCTION 'BAPI_GOODSMVT_CREATE' EXPORTING goodsmvt_header = ls_goodsmvt_header goodsmvt_code = ls_goodsmvt_code IMPORTING goodsmvt_headret = ls_goodsmvt_headret TABLES goodsmvt_item = lt_goodsmvt_item return = lt_return . IF ls_goodsmvt_headret - mat_doc IS INITIAL . l_mtype = 'E' . LOOP AT lt_return INTO ls_return WHERE type CA 'AEX' . MESSAGE ID ls_return - id TYPE ls_return - type NUMBER ls_return - number WITH ls_return - message_v1 ls_return - message_v2 ls_return - message_v3 ls_return - message_v4 INTO ls_return - message . l_msg = |{ l_msg }{ ls_return - message } ; |. ENDLOOP . CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK' . ELSE . l_mtype = 'S' . l_msg = | \u7269\u6599\u51ed\u8bc1 { ls_goodsmvt_headret - mat_doc } \u5df2\u5904\u7406 |. CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = 'X' . ENDIF .","title":"\u6f14\u793a"},{"location":"others/migo/#_4","text":"\u793a\u4f8b\u4ee3\u7801","title":"\u91c7\u8d2d\u8ba2\u5355\u6536\u8d27"},{"location":"others/migo/#_5","text":"\u793a\u4f8b\u4ee3\u7801","title":"\u751f\u4ea7\u8ba2\u5355\u6536\u8d27"},{"location":"others/migo/#_6","text":"\u793a\u4f8b\u4ee3\u7801 DATA : ls_goodsmvt_header TYPE bapi2017_gm_head_01 , ls_goodsmvt_code TYPE bapi2017_gm_code , ls_goodsmvt_headret TYPE bapi2017_gm_head_ret , lt_goodsmvt_item TYPE STANDARD TABLE OF bapi2017_gm_item_create , ls_goodsmvt_item TYPE bapi2017_gm_item_create , lt_return TYPE STANDARD TABLE OF bapiret2 , ls_return TYPE bapiret2 . CLEAR ls_goodsmvt_header . ls_goodsmvt_header - pstng_date = ls_input - budat . ls_goodsmvt_header - doc_date = ls_input - budat . CLEAR ls_goodsmvt_code . ls_goodsmvt_code - gm_code = '03' . \" \u53d1\u8d27 CLEAR lt_goodsmvt_item . CLEAR ls_goodsmvt_item . ls_goodsmvt_item - material = ls_input - matnr . ls_goodsmvt_item - plant = ls_input - werks . ls_goodsmvt_item - stge_loc = ls_input - lgort . ls_goodsmvt_item - batch = ls_input - charg . ls_goodsmvt_item - spec_stock = ls_input - sobkz . \" \u7279\u6b8a\u5e93\u5b58\u6807\u8bc6 ls_goodsmvt_item - entry_qnt = ls_input - menge . \" \u6570\u91cf \" \u64a4\u9500\u6807\u8bb0 ls_goodsmvt_item - move_type = '261' . IF ls_input - zcancel IS NOT INITIAL . ls_goodsmvt_item - move_type = '262' . ENDIF . \" WBS\u5143\u7d20 IF ls_input - pspnr IS NOT INITIAL . ls_goodsmvt_item - wbs_elem = ls_input - pspnr . ENDIF . \" \u751f\u4ea7\u8ba2\u5355 ls_goodsmvt_item - orderid = ls_input - aufnr . INSERT ls_goodsmvt_item INTO TABLE lt_goodsmvt_item . \" \u9884\u7559\u5355 ls_goodsmvt_item - reserv_no = ls_input - rsnum . ls_goodsmvt_item - res_item = ls_input - rspos . \" \u53d1\u8d27\u8fc7\u8d26 CLEAR ls_goodsmvt_headret . CLEAR lt_return . CLEAR ls_return . CALL FUNCTION 'BAPI_GOODSMVT_CREATE' EXPORTING goodsmvt_header = ls_goodsmvt_header goodsmvt_code = ls_goodsmvt_code IMPORTING goodsmvt_headret = ls_goodsmvt_headret TABLES goodsmvt_item = lt_goodsmvt_item return = lt_return . IF ls_goodsmvt_headret - mat_doc IS INITIAL . l_mtype = 'E' . LOOP AT lt_return INTO ls_return WHERE type CA 'AEX' . MESSAGE ID ls_return - id TYPE ls_return - type NUMBER ls_return - number WITH ls_return - message_v1 ls_return - message_v2 ls_return - message_v3 ls_return - message_v4 INTO ls_return - message . l_msg = |{ l_msg }{ ls_return - message } ; |. ENDLOOP . CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK' . ELSE . l_mtype = 'S' . l_msg = | \u7269\u6599\u51ed\u8bc1 { ls_goodsmvt_headret - mat_doc } \u5df2\u5904\u7406 |. CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = 'X' . ENDIF .","title":"\u53d1\u8d27"},{"location":"others/migo/#_7","text":"\u5bf9\u4e8e\u9879\u76ee\u5e93\u5b58(WBS)\u8f6c\u50a8\uff0c\u5982\u679c\u51fa\u73b0\u9879\u76ee\u65e0\u6cd5\u4fee\u6539\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u5728\u6267\u884c\u524d\u52a0\u5165\u4e0b\u9762\u4ee3\u7801\uff1a \u8bbe\u7f6eXMIGO\u6807\u8bb0 \" \u5728INCLUDE\u6587\u4ef6MM07MFU0_UMLAGERUNG_PRUEFEN \" \u884c179\uff0cIF xmigo <> X. \" \u884c243\uff0cIF dm07m-fausw+62(1) = minus. \" \u8be5\u6761\u4ef6\u4e2d\uff0cWBS_ELEM(PS_PSP_PNR)\u5b57\u6bb5\u88ab\u6e05\u7a7a \" \u5e76\u5728\u540e\u7eed\u5904\u7406\u8fc7\u7a0b\uff0c\uff08\u7a7a\u503c\uff09\u9ed8\u8ba4\u8d4b\u503c\u4e3aVAL_WBS_ELEM(MAT_PSPNR) \" \u56e0\u6b64\uff0c\u53ea\u8981\u5e72\u9884\u8fd9\u4e24\u4e2a\u5224\u65ad\u5373\u53ef\u89e3\u51b3\u5b57\u6bb5\u88ab\u6e05\u7a7a\u7684\u95ee\u9898 \" \u5229\u7528\u4e0b\u9762\u65b9\u6cd5\uff0c\u53ef\u4ee5\u5bf9XMIGO\u5b57\u6bb5\u8fdb\u884c\u8d4b\u503c CALL FUNCTION 'MB_SET_BAPI_FLAG' EXPORTING action = 3 . \u793a\u4f8b\u4ee3\u7801 DATA : ls_goodsmvt_header TYPE bapi2017_gm_head_01 , ls_goodsmvt_code TYPE bapi2017_gm_code , ls_goodsmvt_headret TYPE bapi2017_gm_head_ret , lt_goodsmvt_item TYPE STANDARD TABLE OF bapi2017_gm_item_create , ls_goodsmvt_item TYPE bapi2017_gm_item_create , lt_return TYPE STANDARD TABLE OF bapiret2 , ls_return TYPE bapiret2 . CLEAR ls_goodsmvt_header . ls_goodsmvt_header - pstng_date = ls_input - budat . ls_goodsmvt_header - doc_date = ls_input - budat . CLEAR ls_goodsmvt_code . ls_goodsmvt_code - gm_code = '04' . \" \u8f6c\u50a8 CLEAR lt_goodsmvt_item . CLEAR ls_goodsmvt_item . ls_goodsmvt_item - material = ls_input - matnr_from . ls_goodsmvt_item - move_mat = ls_input - matnr_to . ls_goodsmvt_item - plant = ls_input - werks_from . ls_goodsmvt_item - move_plant = ls_input - werks_to . ls_goodsmvt_item - stge_loc = ls_input - lgort_from . ls_goodsmvt_item - move_stloc = ls_input - lgort_to . ls_goodsmvt_item - batch = ls_input - charg_from . ls_goodsmvt_item - move_batch = ls_input - charg_to . \" ls_goodsmvt_item-val_wbs_elem = ls_input-pspnr_from. \" ls_goodsmvt_item-wbs_elem = ls_input-pspnr_to. CALL FUNCTION 'CONVERSION_EXIT_ABPSP_OUTPUT' EXPORTING input = ls_input - pspnr_from IMPORTING output = ls_goodsmvt_item - val_wbs_elem . CALL FUNCTION 'CONVERSION_EXIT_ABPSP_OUTPUT' EXPORTING input = ls_input - pspnr_to IMPORTING output = ls_goodsmvt_item - wbs_elem . ls_goodsmvt_item - move_type = '311' . ls_goodsmvt_item - spec_stock = 'Q' . \" \u7279\u6b8a\u5e93\u5b58\u6807\u8bc6 ls_goodsmvt_item - entry_qnt = ls_input - menge . \" \u6570\u91cf \" \u8bbe\u7f6eXMIGO\u6807\u8bb0 CALL FUNCTION 'MB_SET_BAPI_FLAG' EXPORTING action = 3 . \" \u8f6c\u50a8\u8fc7\u8d26 CLEAR ls_goodsmvt_headret . CLEAR lt_return . CLEAR ls_return . CALL FUNCTION 'BAPI_GOODSMVT_CREATE' EXPORTING goodsmvt_header = ls_goodsmvt_header goodsmvt_code = ls_goodsmvt_code IMPORTING goodsmvt_headret = ls_goodsmvt_headret TABLES goodsmvt_item = lt_goodsmvt_item return = lt_return . IF ls_goodsmvt_headret - mat_doc IS INITIAL . l_mtype = 'E' . LOOP AT lt_return INTO ls_return WHERE type CA 'AEX' . MESSAGE ID ls_return - id TYPE ls_return - type NUMBER ls_return - number WITH ls_return - message_v1 ls_return - message_v2 ls_return - message_v3 ls_return - message_v4 INTO ls_return - message . l_msg = |{ l_msg }{ ls_return - message } ; |. ENDLOOP . CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK' . ELSE . l_mtype = 'S' . l_msg = | \u7269\u6599\u51ed\u8bc1 { ls_goodsmvt_headret - mat_doc } \u5df2\u5904\u7406 |. CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = 'X' . ENDIF .","title":"\u8f6c\u50a8"},{"location":"others/migo/#_8","text":"\u793a\u4f8b\u4ee3\u7801","title":"\u5176\u4ed6\u6536\u8d27"},{"location":"others/migo/#_9","text":"\u793a\u4f8b\u4ee3\u7801","title":"\u8d27\u7269\u79fb\u52a8"},{"location":"others/migo/#_10","text":"\u793a\u4f8b\u4ee3\u7801","title":"\u9500\u552e\u8ba2\u5355\u51fa\u5e93"},{"location":"others/migo/#_11","text":"BAPI_DELIVERYPROCESSING_EXEC","title":"\u51b2\u9500"},{"location":"others/number_to_chinese/","text":"\u6570\u5b57\u8f6c\u4e2d\u6587 \u00b6 \u7f51\u4e0a\u4e0d\u5c11\u4ee3\u7801\u51fa\u4e8e\u6027\u80fd\u8003\u8651\uff0c\u4f1a\u4ece\u6570\u5b57\u5206\u6790\uff0c\u6240\u4ee5\u6211\u8bd5\u4e86\u4e0b\u76f4\u63a5\u8f6c\u5230\u6587\u672c\u8fdb\u884c\u5206\u6790\u3002 \u793a\u4f8b\u4ee3\u7801 FUNCTION zfm_fi_number_to_chinese . *\"---------------------------------------------------------------------- *\"*\"\u672c\u5730\u63a5\u53e3\uff1a *\" IMPORTING *\" REFERENCE(INPUT) *\" EXPORTING *\" REFERENCE(OUTPUT) TYPE STRING *\"---------------------------------------------------------------------- \" \u8f6c\u6362\u4e3a\u6570\u5b57\u683c\u5f0f DATA l_num TYPE p LENGTH 16 DECIMALS 2 . \" P(16,2)\u662f\u53ef\u8bbe\u7f6e\u7684\u6700\u5927\u8303\u56f4 TRY . l_num = input . CATCH cx_root . RETURN . ENDTRY . \" \u96f6\u503c\u6821\u9a8c IF l_num = 0 . output = '\u96f6\u5143\u6574' . RETURN . ENDIF . \" \u6570\u5b57\u6587\u672c DATA ( l_str ) = |{ l_num NUMBER = RAW }|. REPLACE '.' IN l_str WITH space . \" \u6570\u5b57\u5927\u5199\u5bf9\u7167 TYPES : BEGIN OF ty_num_map , num TYPE c LENGTH 1 , num_cn TYPE c LENGTH 1 , END OF ty_num_map . DATA lt_num_map TYPE HASHED TABLE OF ty_num_map WITH UNIQUE KEY num . lt_num_map = VALUE # ( ( num = '0' num_cn = '\u96f6' ) ( num = '1' num_cn = '\u58f9' ) ( num = '2' num_cn = '\u8d30' ) ( num = '3' num_cn = '\u53c1' ) ( num = '4' num_cn = '\u8086' ) ( num = '5' num_cn = '\u4f0d' ) ( num = '6' num_cn = '\u9646' ) ( num = '7' num_cn = '\u67d2' ) ( num = '8' num_cn = '\u634c' ) ( num = '9' num_cn = '\u7396' ) ). \" \u9884\u8bbe\u8868\uff0c\u89e3\u6790\u6587\u672c\u540e\uff0c\u6570\u5b57\u9006\u5e8f\u586b\u5165 TYPES : BEGIN OF ty_nums , unit_cn TYPE char01 , num_cn TYPE char01 , END OF ty_nums . DATA lt_nums TYPE STANDARD TABLE OF ty_nums WITH EMPTY KEY . lt_nums = VALUE # ( ( unit_cn = '\u5206' ) ( unit_cn = '\u89d2' ) ( unit_cn = '\u5143' ) ( unit_cn = '\u62fe' ) ( unit_cn = '\u4f70' ) ( unit_cn = '\u4edf' ) ( unit_cn = '\u4e07' ) ( unit_cn = '\u62fe' ) ( unit_cn = '\u4f70' ) ( unit_cn = '\u4edf' ) ( unit_cn = '\u4ebf' ) ( unit_cn = '\u62fe' ) ( unit_cn = '\u4f70' ) ( unit_cn = '\u4edf' ) ( unit_cn = '\u4e07' ) ). \" \u4ece\u53f3\u5230\u5de6\uff0c\u4ece\u5206\u5230\u4ebf\uff0c\u9010\u6570\u5b57\u586b\u8868 DATA ( l_length ) = strlen ( l_str ). DO l_length TIMES . DATA ( l_offset ) = l_length - sy - index . lt_nums [ sy - index ] - num_cn = lt_num_map [ num = l_str + l_offset ( 1 ) ] - num_cn . ENDDO . DELETE lt_nums WHERE num_cn IS INITIAL . \" \u5220\u9664\u6ca1\u586b\u5145\u7684\u9879 \" \u6ca1\u6709\u5c0f\u6570\u4f4d\uff0c\u8981\u663e\u793aX\u5143\u6574 IF lt_nums [ 1 ] - num_cn = '\u96f6' AND lt_nums [ 2 ] - num_cn = '\u96f6' . DELETE lt_nums FROM 1 TO 2 . INSERT VALUE # ( unit_cn = '\u6574' ) INTO lt_nums INDEX 1 . ENDIF . \" \u96f6\u503c\u5904\u7406 LOOP AT lt_nums REFERENCE INTO DATA ( lr_nums ) WHERE num_cn = '\u96f6' . CASE lr_nums -> unit_cn . WHEN '\u5206' . CLEAR lr_nums->* . WHEN '\u89d2' . CLEAR lr_nums->* . WHEN '\u5143' . CLEAR lr_nums -> num_cn . WHEN '\u4e07' . CLEAR lr_nums -> num_cn . WHEN '\u4ebf' . CLEAR lr_nums -> num_cn . WHEN OTHERS . CLEAR lr_nums -> unit_cn . ENDCASE . ENDLOOP . DELETE ADJACENT DUPLICATES FROM lt_nums COMPARING ALL FIELDS . \" \u9010\u9879\u62fc\u63a5 LOOP AT lt_nums REFERENCE INTO lr_nums . output = |{ lr_nums -> num_cn }{ lr_nums -> unit_cn }{ output }|. ENDLOOP . \" \u96f6\u503c\u5904\u74062 REPLACE '\u96f6\u5143' IN output WITH '\u5143' . REPLACE ALL OCCURRENCES OF '\u96f6\u4e07' IN output WITH '\u4e07' . REPLACE ALL OCCURRENCES OF '\u96f6\u4ebf' IN output WITH '\u4ebf' . ENDFUNCTION .","title":"\u6570\u5b57\u8f6c\u4e2d\u6587"},{"location":"others/number_to_chinese/#_1","text":"\u7f51\u4e0a\u4e0d\u5c11\u4ee3\u7801\u51fa\u4e8e\u6027\u80fd\u8003\u8651\uff0c\u4f1a\u4ece\u6570\u5b57\u5206\u6790\uff0c\u6240\u4ee5\u6211\u8bd5\u4e86\u4e0b\u76f4\u63a5\u8f6c\u5230\u6587\u672c\u8fdb\u884c\u5206\u6790\u3002 \u793a\u4f8b\u4ee3\u7801 FUNCTION zfm_fi_number_to_chinese . *\"---------------------------------------------------------------------- *\"*\"\u672c\u5730\u63a5\u53e3\uff1a *\" IMPORTING *\" REFERENCE(INPUT) *\" EXPORTING *\" REFERENCE(OUTPUT) TYPE STRING *\"---------------------------------------------------------------------- \" \u8f6c\u6362\u4e3a\u6570\u5b57\u683c\u5f0f DATA l_num TYPE p LENGTH 16 DECIMALS 2 . \" P(16,2)\u662f\u53ef\u8bbe\u7f6e\u7684\u6700\u5927\u8303\u56f4 TRY . l_num = input . CATCH cx_root . RETURN . ENDTRY . \" \u96f6\u503c\u6821\u9a8c IF l_num = 0 . output = '\u96f6\u5143\u6574' . RETURN . ENDIF . \" \u6570\u5b57\u6587\u672c DATA ( l_str ) = |{ l_num NUMBER = RAW }|. REPLACE '.' IN l_str WITH space . \" \u6570\u5b57\u5927\u5199\u5bf9\u7167 TYPES : BEGIN OF ty_num_map , num TYPE c LENGTH 1 , num_cn TYPE c LENGTH 1 , END OF ty_num_map . DATA lt_num_map TYPE HASHED TABLE OF ty_num_map WITH UNIQUE KEY num . lt_num_map = VALUE # ( ( num = '0' num_cn = '\u96f6' ) ( num = '1' num_cn = '\u58f9' ) ( num = '2' num_cn = '\u8d30' ) ( num = '3' num_cn = '\u53c1' ) ( num = '4' num_cn = '\u8086' ) ( num = '5' num_cn = '\u4f0d' ) ( num = '6' num_cn = '\u9646' ) ( num = '7' num_cn = '\u67d2' ) ( num = '8' num_cn = '\u634c' ) ( num = '9' num_cn = '\u7396' ) ). \" \u9884\u8bbe\u8868\uff0c\u89e3\u6790\u6587\u672c\u540e\uff0c\u6570\u5b57\u9006\u5e8f\u586b\u5165 TYPES : BEGIN OF ty_nums , unit_cn TYPE char01 , num_cn TYPE char01 , END OF ty_nums . DATA lt_nums TYPE STANDARD TABLE OF ty_nums WITH EMPTY KEY . lt_nums = VALUE # ( ( unit_cn = '\u5206' ) ( unit_cn = '\u89d2' ) ( unit_cn = '\u5143' ) ( unit_cn = '\u62fe' ) ( unit_cn = '\u4f70' ) ( unit_cn = '\u4edf' ) ( unit_cn = '\u4e07' ) ( unit_cn = '\u62fe' ) ( unit_cn = '\u4f70' ) ( unit_cn = '\u4edf' ) ( unit_cn = '\u4ebf' ) ( unit_cn = '\u62fe' ) ( unit_cn = '\u4f70' ) ( unit_cn = '\u4edf' ) ( unit_cn = '\u4e07' ) ). \" \u4ece\u53f3\u5230\u5de6\uff0c\u4ece\u5206\u5230\u4ebf\uff0c\u9010\u6570\u5b57\u586b\u8868 DATA ( l_length ) = strlen ( l_str ). DO l_length TIMES . DATA ( l_offset ) = l_length - sy - index . lt_nums [ sy - index ] - num_cn = lt_num_map [ num = l_str + l_offset ( 1 ) ] - num_cn . ENDDO . DELETE lt_nums WHERE num_cn IS INITIAL . \" \u5220\u9664\u6ca1\u586b\u5145\u7684\u9879 \" \u6ca1\u6709\u5c0f\u6570\u4f4d\uff0c\u8981\u663e\u793aX\u5143\u6574 IF lt_nums [ 1 ] - num_cn = '\u96f6' AND lt_nums [ 2 ] - num_cn = '\u96f6' . DELETE lt_nums FROM 1 TO 2 . INSERT VALUE # ( unit_cn = '\u6574' ) INTO lt_nums INDEX 1 . ENDIF . \" \u96f6\u503c\u5904\u7406 LOOP AT lt_nums REFERENCE INTO DATA ( lr_nums ) WHERE num_cn = '\u96f6' . CASE lr_nums -> unit_cn . WHEN '\u5206' . CLEAR lr_nums->* . WHEN '\u89d2' . CLEAR lr_nums->* . WHEN '\u5143' . CLEAR lr_nums -> num_cn . WHEN '\u4e07' . CLEAR lr_nums -> num_cn . WHEN '\u4ebf' . CLEAR lr_nums -> num_cn . WHEN OTHERS . CLEAR lr_nums -> unit_cn . ENDCASE . ENDLOOP . DELETE ADJACENT DUPLICATES FROM lt_nums COMPARING ALL FIELDS . \" \u9010\u9879\u62fc\u63a5 LOOP AT lt_nums REFERENCE INTO lr_nums . output = |{ lr_nums -> num_cn }{ lr_nums -> unit_cn }{ output }|. ENDLOOP . \" \u96f6\u503c\u5904\u74062 REPLACE '\u96f6\u5143' IN output WITH '\u5143' . REPLACE ALL OCCURRENCES OF '\u96f6\u4e07' IN output WITH '\u4e07' . REPLACE ALL OCCURRENCES OF '\u96f6\u4ebf' IN output WITH '\u4ebf' . ENDFUNCTION .","title":"\u6570\u5b57\u8f6c\u4e2d\u6587"},{"location":"others/pricing/","text":"\u5b9a\u4ef7 \u00b6 \u5b9a\u4ef7\u4e5f\u662f\u9879\u76ee\u5b9e\u65bd\u5fc5\u4e0d\u53ef\u5c11\u7684\u6d41\u7a0b\u4e86\uff0c\u6211\u60f3\u60f3\u8981\u600e\u4e48\u5199 \u5b9a\u4ef7\u8fc7\u7a0b \u00b6 \u5b9a\u4ef7\u4f8b\u7a0b \u00b6 \u6267\u884c\u5b9a\u4ef7 \u00b6","title":"\u5b9a\u4ef7"},{"location":"others/pricing/#_1","text":"\u5b9a\u4ef7\u4e5f\u662f\u9879\u76ee\u5b9e\u65bd\u5fc5\u4e0d\u53ef\u5c11\u7684\u6d41\u7a0b\u4e86\uff0c\u6211\u60f3\u60f3\u8981\u600e\u4e48\u5199","title":"\u5b9a\u4ef7"},{"location":"others/pricing/#_2","text":"","title":"\u5b9a\u4ef7\u8fc7\u7a0b"},{"location":"others/pricing/#_3","text":"","title":"\u5b9a\u4ef7\u4f8b\u7a0b"},{"location":"others/pricing/#_4","text":"","title":"\u6267\u884c\u5b9a\u4ef7"},{"location":"others/smartforms/","text":"SMARTFORMS\u76f8\u5173 \u00b6 \u793a\u4f8b\u4ee3\u7801 \u53d6\u6d88\u6fc0\u6d3bWORD\u7f16\u8f91\u5668 \u00b6 WORD\u7f16\u8f91\u5668\u6ca1\u529e\u6cd5\u62d6\u62fd\u5b57\u6bb5\uff0c\u9700\u8981\u6362\u56de\u6587\u672c\u7f16\u8f91\u5668\u3002 SE38\u8fd0\u884c\u7a0b\u5e8fRSCPSETEDITOR\uff0c\u53d6\u6d88\u52fe\u9009\u5e76\u6fc0\u6d3b\u3002 CL_COS_UTILITIES=>IS_S4H\u589e\u5f3a\u52a0\u5165\u4e0b\u9762\u4ee3\u7801 IF sy - tcode = 'SMARTFORMS' . rv_is_s4h = abap_false . ENDIF . \u6253\u5370PDF \u00b6 \u548c\u666e\u901a\u6253\u5370\u6ca1\u592a\u5927\u533a\u522b\uff0c\u591a\u8bbe\u7f6e\u51e0\u4e2a\u53c2\u6570\u5373\u53ef \u793a\u4f8b\u4ee3\u7801 \" ... \" \u83b7\u53d6OTF\u5185\u5bb9 ls_control_parameters - getotf = abap_true . \" \u8bbe\u7f6e\u6253\u5370\u673a ls_output_options - tddest = 'LP01' . \" ... \" \u8c03\u7528\u6253\u5370\u7684\u51fd\u6570\uff0c\u901a\u8fc7JOB_OUTPUT_INFO\u83b7\u53d6OTF\u5185\u5bb9 DATA ls_job_output_info TYPE ssfcrescl . CALL FUNCTION l_fm_name EXPORTING control_parameters = ls_control_parameters output_options = ls_output_options IMPORTING job_output_options = ls_job_options job_output_info = ls_job_output_info EXCEPTIONS formatting_error = 1 internal_error = 2 send_error = 3 user_canceled = 4 OTHERS = 5 . \" PDF\u7684\u5f62\u5f0f\u4fdd\u5b58\u6253\u5370\u5355 DATA l_len TYPE i . DATA l_xstr TYPE xstring . DATA lt_lines TYPE STANDARD TABLE OF tline . CALL FUNCTION 'CONVERT_OTF' EXPORTING format = 'PDF' IMPORTING bin_filesize = l_len bin_file = l_xstr TABLES otf = ls_job_output_info - otfdata[] lines = lt_lines EXCEPTIONS err_max_linewidth = 1 err_format = 2 err_conv_not_possible = 3 err_bad_otf = 4 OTHERS = 5 . IF sy - subrc <> 0 . MESSAGE ID sy - msgid TYPE 'S' NUMBER sy - msgno DISPLAY LIKE 'E' WITH sy - msgv1 sy - msgv2 sy - msgv3 sy - msgv4 . RETURN . ENDIF . cl_openxml_helper => store_local_file ( im_file_name = 'C:\\Export.pdf' im_data = l_xstr ). \" ...","title":"SMARTFORMS\u76f8\u5173"},{"location":"others/smartforms/#smartforms","text":"\u793a\u4f8b\u4ee3\u7801","title":"SMARTFORMS\u76f8\u5173"},{"location":"others/smartforms/#word","text":"WORD\u7f16\u8f91\u5668\u6ca1\u529e\u6cd5\u62d6\u62fd\u5b57\u6bb5\uff0c\u9700\u8981\u6362\u56de\u6587\u672c\u7f16\u8f91\u5668\u3002 SE38\u8fd0\u884c\u7a0b\u5e8fRSCPSETEDITOR\uff0c\u53d6\u6d88\u52fe\u9009\u5e76\u6fc0\u6d3b\u3002 CL_COS_UTILITIES=>IS_S4H\u589e\u5f3a\u52a0\u5165\u4e0b\u9762\u4ee3\u7801 IF sy - tcode = 'SMARTFORMS' . rv_is_s4h = abap_false . ENDIF .","title":"\u53d6\u6d88\u6fc0\u6d3bWORD\u7f16\u8f91\u5668"},{"location":"others/smartforms/#pdf","text":"\u548c\u666e\u901a\u6253\u5370\u6ca1\u592a\u5927\u533a\u522b\uff0c\u591a\u8bbe\u7f6e\u51e0\u4e2a\u53c2\u6570\u5373\u53ef \u793a\u4f8b\u4ee3\u7801 \" ... \" \u83b7\u53d6OTF\u5185\u5bb9 ls_control_parameters - getotf = abap_true . \" \u8bbe\u7f6e\u6253\u5370\u673a ls_output_options - tddest = 'LP01' . \" ... \" \u8c03\u7528\u6253\u5370\u7684\u51fd\u6570\uff0c\u901a\u8fc7JOB_OUTPUT_INFO\u83b7\u53d6OTF\u5185\u5bb9 DATA ls_job_output_info TYPE ssfcrescl . CALL FUNCTION l_fm_name EXPORTING control_parameters = ls_control_parameters output_options = ls_output_options IMPORTING job_output_options = ls_job_options job_output_info = ls_job_output_info EXCEPTIONS formatting_error = 1 internal_error = 2 send_error = 3 user_canceled = 4 OTHERS = 5 . \" PDF\u7684\u5f62\u5f0f\u4fdd\u5b58\u6253\u5370\u5355 DATA l_len TYPE i . DATA l_xstr TYPE xstring . DATA lt_lines TYPE STANDARD TABLE OF tline . CALL FUNCTION 'CONVERT_OTF' EXPORTING format = 'PDF' IMPORTING bin_filesize = l_len bin_file = l_xstr TABLES otf = ls_job_output_info - otfdata[] lines = lt_lines EXCEPTIONS err_max_linewidth = 1 err_format = 2 err_conv_not_possible = 3 err_bad_otf = 4 OTHERS = 5 . IF sy - subrc <> 0 . MESSAGE ID sy - msgid TYPE 'S' NUMBER sy - msgno DISPLAY LIKE 'E' WITH sy - msgv1 sy - msgv2 sy - msgv3 sy - msgv4 . RETURN . ENDIF . cl_openxml_helper => store_local_file ( im_file_name = 'C:\\Export.pdf' im_data = l_xstr ). \" ...","title":"\u6253\u5370PDF"},{"location":"others/xlsx_io/","text":"EXCEL\u4e0a\u4f20\u4e0b\u8f7d \u00b6 \u6574\u7406\u4e0b\u5e38\u7528\u7684\u65b9\u6cd5\u3002 CL_EHFND_XLSX \u00b6 SAP\u7684\u5185\u7f6e\u65b9\u6cd5\uff0c\u901a\u8fc7\u89e3\u6790XLSX\u4e2d\u7684XML\u6587\u4ef6\uff0c\u5b9e\u73b0\u9ad8\u901f\u8bfb\u53d6\u6570\u636e\uff0c\u9996\u63a8\u3002 \u793a\u4f8b\u4ee3\u7801 TYPES : BEGIN OF ty_data , field1 TYPE string , field2 TYPE string , END OF ty_data . DATA : lt_data TYPE STANDARD TABLE OF ty_data , ls_data TYPE ty_data . \" \u83b7\u53d6\u4e0a\u4f20\u6587\u4ef6\u8def\u5f84 DATA ( l_file ) = cl_openxml_helper => browse_local_file_open ( iv_title = 'Choose' iv_filename = 'Import.xlsx' iv_extpattern = '*.xlsx|*.xlsx' ). TRY . \" \u83b7\u53d6\u6587\u4ef6\u5185\u5bb9 DATA ( l_buffer ) = cl_openxml_helper => load_local_file ( l_file ). \" \u89e3\u6790\u6587\u4ef6 DATA ( lo_xlsx ) = cl_ehfnd_xlsx => get_instance ( ). DATA ( lo_doc ) = lo_xlsx -> load_doc ( l_buffer ). DATA ( lt_sheet_info ) = lo_doc -> get_sheets ( ). DATA ( lo_sheet ) = lo_doc -> get_sheet_by_id ( lt_sheet_info [ 1 ] - sheet_id ). CATCH cx_openxml_format cx_openxml_not_found cx_openxml_not_allowed . RETURN . ENDTRY . \" \u83b7\u53d6\u4e0a\u4f20\u884c\u6570 DATA l_row TYPE i . DATA l_row_last TYPE i . l_row_last = lo_sheet -> get_last_row_number ( ). l_row = 1 . \" \u8df3\u8fc7\u62ac\u5934\u884c \" \u9010\u884c\u5904\u7406 WHILE l_row < l_row_last . l_row = l_row + 1 . CLEAR ls_data . ls_data - field1 = lo_sheet -> get_cell_content ( iv_row = l_row iv_column = 1 ). ls_data - field2 = lo_sheet -> get_cell_content ( iv_row = l_row iv_column = 2 ). INSERT ls_data INTO TABLE lt_data . ENDWHILE . \u5c01\u88c5\u7b80\u5316 \u00b6 CL_EHFND_XLSX\u4f7f\u7528\u4e0a\u6bd4\u5176\u4ed6\u65b9\u6cd5\u90fd\u663e\u5f97\u7e41\u7410\uff0c\u4e0d\u59a8\u5199\u4e9b\u5de5\u5177\u4ee3\u7801\u6765\u7b80\u5316\u3002 ZCL_XLSX_IO CLASS zcl_xlsx_io DEFINITION PUBLIC FINAL CREATE PUBLIC . PUBLIC SECTION . DATA mo_xlsx TYPE REF TO cl_ehfnd_xlsx . DATA mo_doc TYPE REF TO if_ehfnd_xlsx_doc . DATA mo_sheet TYPE REF TO if_ehfnd_xlsx_sheet . CLASS-METHODS download_smw0_templete IMPORTING ! i_objid TYPE w3objid ! i_name TYPE string OPTIONAL . CLASS-METHODS get_smw0_templete IMPORTING ! i_objid TYPE w3objid RETURNING VALUE ( r_buffer ) TYPE xstring . CLASS-METHODS replace_sharedstrings IMPORTING ! it_replace TYPE ANY TABLE CHANGING ! c_doc TYPE xstring . CLASS-METHODS get_local_file IMPORTING ! i_filename TYPE string OPTIONAL RETURNING VALUE ( r_buffer ) TYPE xstring . CLASS-METHODS import IMPORTING ! i_filename TYPE string OPTIONAL ! i_skip_row TYPE i DEFAULT 1 CHANGING ! ct_data TYPE ANY TABLE . CLASS-METHODS export IMPORTING ! i_filename TYPE string OPTIONAL ! it_data TYPE ANY TABLE . CLASS-METHODS get_instance IMPORTING ! i_buffer TYPE xstring OPTIONAL RETURNING VALUE ( ro_instance ) TYPE REF TO zcl_xlsx_io . CLASS-METHODS get_reader IMPORTING ! i_filename TYPE string OPTIONAL RETURNING VALUE ( ro_instance ) TYPE REF TO zcl_xlsx_io . CLASS-METHODS get_writer RETURNING VALUE ( ro_instance ) TYPE REF TO zcl_xlsx_io . CLASS-METHODS conv IMPORTING ! dataflow TYPE string ! convexit TYPE string OPTIONAL ! input TYPE data EXPORTING ! output TYPE data . METHODS start IMPORTING ! i_row TYPE i OPTIONAL ! i_column TYPE i OPTIONAL . METHODS stop . METHODS row_id RETURNING VALUE ( r_row ) TYPE i . METHODS column_id RETURNING VALUE ( r_column ) TYPE i . METHODS has_next_row RETURNING VALUE ( r_flag ) TYPE abap_bool . METHODS has_next_column RETURNING VALUE ( r_flag ) TYPE abap_bool . METHODS next_row IMPORTING ! i_row TYPE i DEFAULT 1 . METHODS next_column IMPORTING ! i_column TYPE i DEFAULT 1 . METHODS read_column IMPORTING ! i_column TYPE i EXPORTING ! e_value TYPE data RETURNING VALUE ( r_value ) TYPE string . METHODS read_next_column EXPORTING ! e_value TYPE data RETURNING VALUE ( r_value ) TYPE string . METHODS write_column IMPORTING ! i_value TYPE data ! i_conv TYPE xfeld DEFAULT abap_false ! i_column TYPE i . METHODS write_next_column IMPORTING ! i_value TYPE data ! i_conv TYPE xfeld DEFAULT abap_false . METHODS save IMPORTING ! i_filename TYPE string OPTIONAL . PROTECTED SECTION . PRIVATE SECTION . DATA m_row TYPE i . DATA m_column TYPE i . DATA m_row_last TYPE i . DATA m_column_last TYPE i . ENDCLASS . CLASS zcl_xlsx_io IMPLEMENTATION . METHOD column_id . r_column = m_column . ENDMETHOD . METHOD conv . DATA l_subrc TYPE subrc VALUE 4 . DATA l_value TYPE string . DATA l_convexit TYPE string . DATA l_fm_convexit TYPE rs38l_fnam . \" \u8f6c\u6362\u4f8b\u7a0b\u51fd\u6570 DESCRIBE FIELD output TYPE DATA ( l_type ) EDIT MASK DATA ( l_mask ). \" EDIT MASK\u53d6\u51fa\u6765\u7684\u503c\u5982\uff1a==ALPHA\u3001==MATN1 CLEAR l_convexit . IF convexit IS SUPPLIED . l_convexit = convexit . ELSEIF strlen ( l_mask ) > 2 . l_convexit = l_mask + 2 . ELSEIF l_type = 'N' . \" \u5982\u679c\u662fNUMC\u7c7b\u578b\uff0c\u9ed8\u8ba4ALPHA\u8f6c\u6362 l_convexit = 'ALPHA' . ENDIF . CASE l_type . WHEN 'D' OR 'T' . \" \u65e5\u671f\u65f6\u95f4\u683c\u5f0f l_value = input . REPLACE ALL OCCURRENCES OF REGEX '[^0-9]' IN l_value WITH '' . output = l_value . WHEN OTHERS . \" \u68c0\u67e5\u5b57\u6bb5\u662f\u5426\u6709\u8f93\u51fa\u8f6c\u6362 IF l_convexit IS INITIAL . output = input . ELSE . TRY . \" EDIT MASK\u4e0d\u652f\u6301STRING\uff0c\u8fd8\u662f\u8981\u7528CONVEXIT\u7684\u65b9\u6cd5 l_fm_convexit = | CONVERSION_EXIT_ { l_convexit } _ { dataflow }|. CALL FUNCTION l_fm_convexit EXPORTING input = input IMPORTING output = output EXCEPTIONS OTHERS = 99 . IF sy - subrc <> 0 . output = input . \" \u8f6c\u6362\u9519\u8bef\uff0c\u76f4\u63a5\u8f93\u5165 ENDIF . CATCH cx_root . output = input . ENDTRY . ENDIF . ENDCASE . \" CONDENSE\u5fc5\u987b\u662fCharacter-Like IF l_type = 'C' OR l_type = 'N' OR l_type = 'g' . CONDENSE output . \" \u53bb\u9664\u591a\u4f59\u7a7a\u683c ENDIF . ENDMETHOD . METHOD download_smw0_templete . DATA : ls_wwwdatatab TYPE wwwdatatab , l_rc TYPE sy - subrc , l_defaultfilename TYPE string , ls_wwwdata_tab TYPE wwwdatatab , l_object_name TYPE w3objid , l_filename TYPE string , l_default_file_name TYPE string , l_fullpath TYPE string , l_down_path TYPE localfile , ls_wwwdata TYPE wwwdata , l_path TYPE string . l_default_file_name = i_name . CALL METHOD cl_gui_frontend_services => file_save_dialog EXPORTING window_title = '\u9009\u62e9\u672c\u5730\u6587\u4ef6\u4fdd\u5b58\u8def\u5f84' default_file_name = l_default_file_name default_extension = '*.xlsx' file_filter = 'EXCEL FILES(*.xlsx)|*.xlsx' CHANGING filename = l_filename path = l_path fullpath = l_fullpath EXCEPTIONS cntl_error = 1 error_no_gui = 2 not_supported_by_gui = 3 OTHERS = 5 . IF sy - subrc <> 0 . RETURN . ENDIF . SELECT SINGLE * FROM wwwdata INNER JOIN tadir ON wwwdata~objid = tadir~obj_name INTO CORRESPONDING FIELDS OF ls_wwwdata_tab WHERE wwwdata~srtf2 = 0 AND wwwdata~relid = 'MI' AND tadir~pgmid = 'R3TR' AND tadir~object = 'W3MI' AND tadir~obj_name = i_objid . IF sy - subrc <> 0 . MESSAGE | \u6a21\u677f\u6587\u4ef6[ { i_objid } ]\u4e0d\u5b58\u5728 | TYPE 'S' DISPLAY LIKE 'E' . RETURN . ENDIF . l_down_path = l_fullpath . CALL FUNCTION 'DOWNLOAD_WEB_OBJECT' EXPORTING key = ls_wwwdata_tab destination = l_down_path IMPORTING rc = l_rc . IF sy - subrc = 0 . MESSAGE | \u6a21\u677f\u4e0b\u8f7d\u6210\u529f | TYPE 'S' . ELSE . MESSAGE | \u6a21\u677f\u4e0b\u8f7d\u5931\u8d25 | TYPE 'S' . ENDIF . ENDMETHOD . METHOD export . DATA lo_tabledescr TYPE REF TO cl_abap_tabledescr . DATA lo_structdescr TYPE REF TO cl_abap_structdescr . lo_tabledescr ?= cl_abap_typedescr => describe_by_data ( it_data ). lo_structdescr ?= lo_tabledescr -> get_table_line_type ( ). \" \u83b7\u53d6\u5185\u8868\u4fe1\u606f DATA ( lt_component ) = lo_structdescr -> get_components ( ). \" \u6df1\u5ea6\u7ed3\u6784\u5904\u7406\u592a\u9ebb\u70e6\uff0c\u4e0d\u8003\u8651\u4e86\uff0c\u6709\u9700\u8981\u53ef\u4ee5\u81ea\u5df1\u8c03\u6574 DELETE lt_component WHERE type IS NOT INSTANCE OF cl_abap_elemdescr . IF lt_component IS INITIAL . MESSAGE '\u5bfc\u51fa\u5931\u8d25' TYPE 'S' DISPLAY LIKE 'E' . RETURN . ENDIF . DATA ( lo_writer ) = zcl_xlsx_io => get_instance ( ). lo_writer -> start ( ). \" \u51c6\u5907\u5199\u5165 \" \u5199\u5165\u62ac\u5934\u6587\u672c\u884c lo_writer -> next_row ( ). LOOP AT lt_component INTO DATA ( ls_component ). lo_writer -> write_next_column ( ls_component - name ). ENDLOOP . \" \u5199\u5165\u6570\u636e\u884c LOOP AT it_data ASSIGNING FIELD - SYMBOL ( <ls_data> ). lo_writer -> next_row ( ). LOOP AT lt_component INTO ls_component . FIELD-SYMBOLS <fs_field> TYPE any . ASSIGN COMPONENT ls_component - name OF STRUCTURE <ls_data> TO <fs_field> . IF <fs_field> IS ASSIGNED . lo_writer -> write_next_column ( <fs_field> ). UNASSIGN <fs_field> . ELSE . lo_writer -> next_column ( ). ENDIF . ENDLOOP . ENDLOOP . \" \u5bfc\u51fa\u5230\u672c\u5730 lo_writer -> save ( i_filename = i_filename ). ENDMETHOD . METHOD get_instance . ro_instance = NEW # ( ). TRY . ro_instance -> mo_xlsx = cl_ehfnd_xlsx => get_instance ( ). IF i_buffer IS SUPPLIED . ro_instance -> mo_doc = ro_instance -> mo_xlsx -> load_doc ( iv_file_data = i_buffer ). ELSE . ro_instance -> mo_doc = ro_instance -> mo_xlsx -> create_doc ( ). ENDIF . DATA ( lt_sheet_info ) = ro_instance -> mo_doc -> get_sheets ( ). ro_instance -> mo_sheet = ro_instance -> mo_doc -> get_sheet_by_id ( lt_sheet_info [ 1 ] - sheet_id ). CATCH cx_openxml_format cx_openxml_not_found cx_openxml_not_allowed . CLEAR ro_instance . ENDTRY . ENDMETHOD . METHOD get_local_file . DATA l_filename TYPE string . IF i_filename IS NOT INITIAL . l_filename = i_filename . ELSE . l_filename = cl_openxml_helper => browse_local_file_open ( iv_title = 'Choose' iv_filename = 'Import.xlsx' iv_extpattern = '*.xlsx|*.xlsx' ). ENDIF . CHECK l_filename IS NOT INITIAL . TRY . r_buffer = cl_openxml_helper => load_local_file ( l_filename ). CATCH cx_openxml_not_found . CLEAR r_buffer . ENDTRY . ENDMETHOD . METHOD get_reader . DATA ( l_buffer ) = zcl_xlsx_io => get_local_file ( i_filename ). ro_instance = zcl_xlsx_io => get_instance ( i_buffer = l_buffer ). ENDMETHOD . METHOD get_smw0_templete . DATA : lt_mime TYPE STANDARD TABLE OF w3mime , ls_id TYPE wwwdataid , ls_key TYPE wwwdatatab . ls_key - relid = 'MI' . ls_key - objid = i_objid . CALL FUNCTION 'WWWDATA_IMPORT' EXPORTING key = ls_key TABLES mime = lt_mime EXCEPTIONS wrong_object_type = 1 import_error = 2 OTHERS = 3 . IF sy - subrc <> 0 . MESSAGE | \u6a21\u677f[ { i_objid } ]\u83b7\u53d6\u5931\u8d25 | TYPE 'S' DISPLAY LIKE 'E' . RETURN . ENDIF . SELECT SINGLE value FROM wwwparams WHERE relid = @ ls_key - relid AND objid = @ ls_key - objid AND name EQ 'filesize' INTO @ DATA ( l_param ). DATA l_length TYPE i . l_length = l_param . CALL FUNCTION 'SCMS_BINARY_TO_XSTRING' EXPORTING input_length = l_length IMPORTING buffer = r_buffer TABLES binary_tab = lt_mime EXCEPTIONS failed = 1 OTHERS = 2 . IF sy - subrc <> 0 . CLEAR r_buffer . ENDIF . ENDMETHOD . METHOD get_writer . ro_instance = get_instance ( ). ENDMETHOD . METHOD has_next_column . r_flag = xsdbool ( m_column_last > m_column ). ENDMETHOD . METHOD has_next_row . r_flag = xsdbool ( m_row_last > m_row ). ENDMETHOD . METHOD import . DATA lr_data TYPE REF TO data . FIELD-SYMBOLS <fs_data> TYPE any . FIELD-SYMBOLS <fs_field> TYPE any . \" \u6784\u9020\u5de5\u4f5c\u533a CREATE DATA lr_data LIKE LINE OF ct_data[] . ASSIGN lr_data->* TO <fs_data> . CHECK <fs_data> IS ASSIGNED . DATA ( l_buffer ) = get_local_file ( i_filename = i_filename ). CHECK l_buffer IS NOT INITIAL . DATA ( lo_reader ) = zcl_xlsx_io => get_instance ( i_buffer = l_buffer ). CHECK lo_reader IS NOT INITIAL . \" \u51c6\u5907\u8bfb\u53d6 lo_reader -> start ( ). \" \u8df3\u8fc7\u62ac\u5934\u884c DO i_skip_row TIMES . lo_reader -> next_row ( ). ENDDO . \" \u8bfb\u53d6\u6570\u636e\u884c WHILE lo_reader -> has_next_row ( ) = abap_true . lo_reader -> next_row ( ). CLEAR <fs_data> . DO . ASSIGN COMPONENT sy - index OF STRUCTURE <fs_data> TO <fs_field> . IF <fs_field> IS ASSIGNED . <fs_field> = lo_reader -> read_next_column ( ). UNASSIGN <fs_field> . ELSE . EXIT . ENDIF . ENDDO . INSERT <fs_data> INTO TABLE ct_data . ENDWHILE . ENDMETHOD . METHOD next_column . m_column = m_column + i_column . ENDMETHOD . METHOD next_row . m_row = m_row + i_row . CLEAR m_column . m_column_last = mo_sheet -> get_last_column_number_in_row ( m_row ). ENDMETHOD . METHOD read_column . r_value = mo_sheet -> get_cell_content ( iv_row = m_row iv_column = i_column ). IF e_value IS SUPPLIED . me -> conv ( EXPORTING dataflow = 'INPUT' input = r_value IMPORTING output = e_value ). ENDIF . ENDMETHOD . METHOD read_next_column . next_column ( ). r_value = read_column ( m_column ). IF e_value IS SUPPLIED . me -> conv ( EXPORTING dataflow = 'INPUT' input = r_value IMPORTING output = e_value ). ENDIF . ENDMETHOD . METHOD row_id . r_row = m_row . ENDMETHOD . METHOD save . DATA l_filename TYPE string . IF i_filename IS NOT INITIAL . l_filename = i_filename . ELSE . l_filename = cl_openxml_helper => browse_local_file_save ( iv_title = 'Save as' iv_filename = 'Export.xlsx' iv_extpattern = '*.xlsx|*.xlsx' ). ENDIF . CHECK l_filename IS NOT INITIAL . TRY . cl_openxml_helper => store_local_file ( im_file_name = l_filename im_data = mo_doc -> save ( ) ). CATCH cx_openxml_format cx_openxml_not_found cx_openxml_not_allowed cx_dynamic_check INTO DATA ( lx_openxml ). MESSAGE lx_openxml -> get_longtext ( ) TYPE 'S' DISPLAY LIKE 'E' . ENDTRY . ENDMETHOD . METHOD start . m_row_last = mo_sheet -> get_last_row_number ( ). m_row = i_row . m_column = i_column . ENDMETHOD . METHOD stop . m_row = m_row_last . IF m_row > 0 . m_column_last = mo_sheet -> get_last_column_number_in_row ( m_row ). m_column = m_column_last . ENDIF . ENDMETHOD . METHOD write_column . DATA l_value TYPE string . IF i_conv = abap_true . me -> conv ( EXPORTING dataflow = 'OUTPUT' input = i_value IMPORTING output = l_value ). ELSE . l_value = i_value . ENDIF . mo_sheet -> set_cell_content ( iv_row = m_row iv_column = i_column iv_value = l_value ). ENDMETHOD . METHOD write_next_column . next_column ( ). write_column ( i_column = m_column i_conv = i_conv i_value = i_value ). ENDMETHOD . METHOD replace_sharedstrings . \" \u7a0b\u5e8f\u8981\u6c42IT_REPLACE\u81f3\u5c11\u4e24\u5217\uff0c\u4ee3\u7801\u4f1a\u5c06\u5de6\u5217\u5185\u5bb9\u66ff\u6362\u4e3a\u53f3\u5217\u5185\u5bb9 CHECK it_replace IS NOT INITIAL . CHECK c_doc IS NOT INITIAL . FIELD-SYMBOLS <fs_replace_t> TYPE ANY TABLE . FIELD-SYMBOLS <fs_replace> TYPE any . FIELD-SYMBOLS <fs_from> TYPE any . FIELD-SYMBOLS <fs_to> TYPE any . TRY . DATA ( lo_doc ) = cl_xlsx_document => load_document ( c_doc ). DATA ( lo_workbook_part ) = lo_doc -> get_workbookpart ( ). DATA ( lo_sharedstrings_part ) = lo_workbook_part -> get_sharedstringspart ( ). DATA ( l_sharedstrings_xml ) = lo_sharedstrings_part -> get_data ( ). DATA ( l_sharedstrings_str ) = cl_openxml_helper => xstring_to_string ( l_sharedstrings_xml ). ASSIGN it_replace TO <fs_replace_t> . LOOP AT <fs_replace_t> ASSIGNING <fs_replace> . ASSIGN COMPONENT 1 OF STRUCTURE <fs_replace> TO <fs_from> . ASSIGN COMPONENT 2 OF STRUCTURE <fs_replace> TO <fs_to> . IF <fs_from> IS ASSIGNED AND <fs_to> IS ASSIGNED . IF <fs_from> IS NOT INITIAL . REPLACE ALL OCCURRENCES OF <fs_from> IN l_sharedstrings_str WITH <fs_to> IN CHARACTER MODE . ENDIF . ENDIF . UNASSIGN <fs_from> . UNASSIGN <fs_to> . ENDLOOP . l_sharedstrings_xml = cl_openxml_helper => string_to_xstring ( l_sharedstrings_str ). lo_sharedstrings_part -> feed_data ( l_sharedstrings_xml ). c_doc = lo_doc -> get_package_data ( ). CATCH cx_openxml_not_found cx_openxml_format cx_openxml_not_allowed INTO DATA ( lx_openxml ). MESSAGE lx_openxml -> get_text ( ) TYPE 'S' DISPLAY LIKE 'E' . CATCH cx_root INTO DATA ( lx_root ). MESSAGE lx_root -> get_text ( ) TYPE 'S' DISPLAY LIKE 'E' . ENDTRY . ENDMETHOD . ENDCLASS . \u793a\u4f8b\u4ee3\u7801 TYPES : BEGIN OF ty_data , field1 TYPE string , field2 TYPE string , END OF ty_data . DATA lt_data TYPE STANDARD TABLE OF ty_data . lt_data = VALUE # ( ( field1 = 'A1' field2 = 'B1' ) ( field1 = 'A2' field2 = 'B2' ) ). \" \u5bfc\u51fa zcl_xlsx_io => export ( lt_data ). \" \u5bfc\u5165 CLEAR lt_data . zcl_xlsx_io => import ( CHANGING ct_data = lt_data ). \u6587\u672c\u66ff\u6362 \u00b6 \u5bf9\u4e8e\u56fa\u5b9a\u6a21\u677f\u6587\u4ef6\uff0c\u4e0d\u59a8\u76f4\u63a5\u66ff\u6362\u91cc\u9762\u7684\u6587\u672c\u5185\u5bb9 \u793a\u4f8b\u4ee3\u7801 DATA ( l_buffer ) = zcl_xlsx_io => get_smw0_templete ( CONV # ( sy - tcode ) ). \" \u83b7\u53d6SMW0\u6a21\u677f\u6587\u4ef6 TRY . DATA ( lo_doc ) = cl_xlsx_document => load_document ( l_buffer ). DATA ( lo_workbook_part ) = lo_doc -> get_workbookpart ( ). DATA ( lo_sharedstrings_part ) = lo_workbook_part -> get_sharedstringspart ( ). \" \u76f4\u63a5\u66ff\u6362\u5373\u53ef \" \u4e5f\u8bd5\u8fc7\u89e3\u6790XML\u6587\u4ef6\uff0c\u4f46\u5bcc\u6587\u672c\u683c\u5f0f\u96be\u4ee5\u5904\u7406 DATA ( l_sharedstrings_xml ) = lo_sharedstrings_part -> get_data ( ). LOOP AT lt_replace INTO DATA ( ls_replace ). DATA ( l_from ) = cl_openxml_helper => string_to_xstring ( ls_replace - from ). IF l_from IS NOT INITIAL . DATA ( l_to ) = cl_openxml_helper => string_to_xstring ( ls_replace - to ). REPLACE ALL OCCURRENCES OF l_from IN l_sharedstrings_xml WITH l_to IN BYTE MODE . ENDIF . CLEAR l_from . CLEAR l_to . ENDLOOP . lo_sharedstrings_part -> feed_data ( l_sharedstrings_xml ). \" \u56de\u5199 l_buffer = lo_doc -> get_package_data ( ). \" \u83b7\u53d6\u66ff\u6362\u540e\u7684\u6587\u4ef6 CATCH cx_openxml_not_found cx_openxml_format cx_openxml_not_allowed INTO DATA ( lx_openxml ). MESSAGE lx_openxml -> get_text ( ) TYPE 'S' DISPLAY LIKE 'E' . ENDTRY . ABAP2XLSX \u00b6 \u7b2c\u4e09\u65b9\u5de5\u5177\uff0c\u901a\u8fc7\u89e3\u6790XLSX\u4e2d\u7684XML\u6587\u4ef6\uff0c\u5b9e\u73b0\u9ad8\u901f\u8bfb\u53d6\u6570\u636e\u3002\u76f8\u6bd4CL_EHFND_XLSX\uff0c\u63d0\u4f9b\u4e86\u66f4\u9f50\u5168\u7684\u6837\u5f0f\u8bbe\u7f6e\u3002 XLSX WORKBANCH \u00b6 \u7b2c\u4e09\u65b9\u5de5\u5177\uff0c\u7c7b\u4f3cSMARTFORMS\uff0c\u9884\u5148\u8bbe\u7f6e\u597dEXCEL\u6a21\u677f\u4e0e\u8f93\u5165\u53c2\u6570\uff0c\u968f\u540e\u53ef\u5728\u7a0b\u5e8f\u4e2d\u76f4\u63a5\u8c03\u7528\u83b7\u53d6\uff0c\u9002\u5408\u5bfc\u51fa\u7279\u5b9a\u683c\u5f0f\u7684\u9700\u6c42\u3002 TEXT_CONVERT_XLS_TO_SAP \u00b6 \u8be5\u65b9\u6cd5\u53ef\u5c06EXCEL\u5185\u5bb9\u76f4\u63a5\u6620\u5c04\u5230ABAP\u5185\u8868\u4e2d\u3002 \u793a\u4f8b\u4ee3\u7801 TYPES : BEGIN OF ty_data , field1 TYPE string , field2 TYPE string , END OF ty_data . TYPES tt_data TYPE STANDARD TABLE OF ty_data . DATA lt_data TYPE tt_data . DATA lt_raw TYPE truxs_t_text_data . CALL FUNCTION 'TEXT_CONVERT_XLS_TO_SAP' EXPORTING i_line_header = abap_false i_tab_raw_data = lt_raw i_filename = 'C:\\import.xls' TABLES i_tab_converted_data = lt_data EXCEPTIONS conversion_failed = 1 OTHERS = 2 . ALSM_EXCEL_TO_INTERNAL_TABLE \u00b6 \u8be5\u65b9\u6cd5\u53ef\u83b7\u53d6EXCEL\u5355\u5143\u683c\u5185\u5bb9\uff0c\u5904\u7406\u7075\u6d3b\u3002 \u793a\u4f8b\u4ee3\u7801 TYPES : BEGIN OF ty_data , field1 TYPE string , field2 TYPE string , END OF ty_data . TYPES tt_data TYPE STANDARD TABLE OF ty_data . DATA lt_data TYPE tt_data . DATA ls_data TYPE ty_data . DATA lt_intern TYPE STANDARD TABLE OF alsmex_tabline . DATA ls_intern TYPE alsmex_tabline . CALL FUNCTION 'ALSM_EXCEL_TO_INTERNAL_TABLE' EXPORTING filename = 'C:\\import.xls' i_begin_col = 1 i_begin_row = 2 \" \u8df3\u8fc7\u9996\u884c i_end_col = 2 i_end_row = 9999 TABLES intern = lt_intern EXCEPTIONS inconsistent_parameters = 1 upload_ole = 2 OTHERS = 3 . SORT lt_intern BY row col . LOOP AT lt_intern INTO ls_intern . AT NEW row . CLEAR ls_data . ENDAT . CASE ls_intern - col . WHEN '0001' . ls_data - field1 = ls_intern - value . WHEN '0002' . ls_data - field2 = ls_intern - value . WHEN OTHERS . ENDCASE . AT END OF row . INSERT ls_data INTO TABLE lt_data . ENDAT . ENDLOOP . OLE \u00b6 \u4e0a\u53e4\u5de5\u5177\uff0c\u5efa\u8bae\u653e\u5f03 DOI \u00b6 \u6ca1\u7528\u8fc7\uff0c\u4e0d\u61c2","title":"Excel\u4e0a\u4f20\u4e0b\u8f7d"},{"location":"others/xlsx_io/#excel","text":"\u6574\u7406\u4e0b\u5e38\u7528\u7684\u65b9\u6cd5\u3002","title":"EXCEL\u4e0a\u4f20\u4e0b\u8f7d"},{"location":"others/xlsx_io/#cl_ehfnd_xlsx","text":"SAP\u7684\u5185\u7f6e\u65b9\u6cd5\uff0c\u901a\u8fc7\u89e3\u6790XLSX\u4e2d\u7684XML\u6587\u4ef6\uff0c\u5b9e\u73b0\u9ad8\u901f\u8bfb\u53d6\u6570\u636e\uff0c\u9996\u63a8\u3002 \u793a\u4f8b\u4ee3\u7801 TYPES : BEGIN OF ty_data , field1 TYPE string , field2 TYPE string , END OF ty_data . DATA : lt_data TYPE STANDARD TABLE OF ty_data , ls_data TYPE ty_data . \" \u83b7\u53d6\u4e0a\u4f20\u6587\u4ef6\u8def\u5f84 DATA ( l_file ) = cl_openxml_helper => browse_local_file_open ( iv_title = 'Choose' iv_filename = 'Import.xlsx' iv_extpattern = '*.xlsx|*.xlsx' ). TRY . \" \u83b7\u53d6\u6587\u4ef6\u5185\u5bb9 DATA ( l_buffer ) = cl_openxml_helper => load_local_file ( l_file ). \" \u89e3\u6790\u6587\u4ef6 DATA ( lo_xlsx ) = cl_ehfnd_xlsx => get_instance ( ). DATA ( lo_doc ) = lo_xlsx -> load_doc ( l_buffer ). DATA ( lt_sheet_info ) = lo_doc -> get_sheets ( ). DATA ( lo_sheet ) = lo_doc -> get_sheet_by_id ( lt_sheet_info [ 1 ] - sheet_id ). CATCH cx_openxml_format cx_openxml_not_found cx_openxml_not_allowed . RETURN . ENDTRY . \" \u83b7\u53d6\u4e0a\u4f20\u884c\u6570 DATA l_row TYPE i . DATA l_row_last TYPE i . l_row_last = lo_sheet -> get_last_row_number ( ). l_row = 1 . \" \u8df3\u8fc7\u62ac\u5934\u884c \" \u9010\u884c\u5904\u7406 WHILE l_row < l_row_last . l_row = l_row + 1 . CLEAR ls_data . ls_data - field1 = lo_sheet -> get_cell_content ( iv_row = l_row iv_column = 1 ). ls_data - field2 = lo_sheet -> get_cell_content ( iv_row = l_row iv_column = 2 ). INSERT ls_data INTO TABLE lt_data . ENDWHILE .","title":"CL_EHFND_XLSX"},{"location":"others/xlsx_io/#_1","text":"CL_EHFND_XLSX\u4f7f\u7528\u4e0a\u6bd4\u5176\u4ed6\u65b9\u6cd5\u90fd\u663e\u5f97\u7e41\u7410\uff0c\u4e0d\u59a8\u5199\u4e9b\u5de5\u5177\u4ee3\u7801\u6765\u7b80\u5316\u3002 ZCL_XLSX_IO CLASS zcl_xlsx_io DEFINITION PUBLIC FINAL CREATE PUBLIC . PUBLIC SECTION . DATA mo_xlsx TYPE REF TO cl_ehfnd_xlsx . DATA mo_doc TYPE REF TO if_ehfnd_xlsx_doc . DATA mo_sheet TYPE REF TO if_ehfnd_xlsx_sheet . CLASS-METHODS download_smw0_templete IMPORTING ! i_objid TYPE w3objid ! i_name TYPE string OPTIONAL . CLASS-METHODS get_smw0_templete IMPORTING ! i_objid TYPE w3objid RETURNING VALUE ( r_buffer ) TYPE xstring . CLASS-METHODS replace_sharedstrings IMPORTING ! it_replace TYPE ANY TABLE CHANGING ! c_doc TYPE xstring . CLASS-METHODS get_local_file IMPORTING ! i_filename TYPE string OPTIONAL RETURNING VALUE ( r_buffer ) TYPE xstring . CLASS-METHODS import IMPORTING ! i_filename TYPE string OPTIONAL ! i_skip_row TYPE i DEFAULT 1 CHANGING ! ct_data TYPE ANY TABLE . CLASS-METHODS export IMPORTING ! i_filename TYPE string OPTIONAL ! it_data TYPE ANY TABLE . CLASS-METHODS get_instance IMPORTING ! i_buffer TYPE xstring OPTIONAL RETURNING VALUE ( ro_instance ) TYPE REF TO zcl_xlsx_io . CLASS-METHODS get_reader IMPORTING ! i_filename TYPE string OPTIONAL RETURNING VALUE ( ro_instance ) TYPE REF TO zcl_xlsx_io . CLASS-METHODS get_writer RETURNING VALUE ( ro_instance ) TYPE REF TO zcl_xlsx_io . CLASS-METHODS conv IMPORTING ! dataflow TYPE string ! convexit TYPE string OPTIONAL ! input TYPE data EXPORTING ! output TYPE data . METHODS start IMPORTING ! i_row TYPE i OPTIONAL ! i_column TYPE i OPTIONAL . METHODS stop . METHODS row_id RETURNING VALUE ( r_row ) TYPE i . METHODS column_id RETURNING VALUE ( r_column ) TYPE i . METHODS has_next_row RETURNING VALUE ( r_flag ) TYPE abap_bool . METHODS has_next_column RETURNING VALUE ( r_flag ) TYPE abap_bool . METHODS next_row IMPORTING ! i_row TYPE i DEFAULT 1 . METHODS next_column IMPORTING ! i_column TYPE i DEFAULT 1 . METHODS read_column IMPORTING ! i_column TYPE i EXPORTING ! e_value TYPE data RETURNING VALUE ( r_value ) TYPE string . METHODS read_next_column EXPORTING ! e_value TYPE data RETURNING VALUE ( r_value ) TYPE string . METHODS write_column IMPORTING ! i_value TYPE data ! i_conv TYPE xfeld DEFAULT abap_false ! i_column TYPE i . METHODS write_next_column IMPORTING ! i_value TYPE data ! i_conv TYPE xfeld DEFAULT abap_false . METHODS save IMPORTING ! i_filename TYPE string OPTIONAL . PROTECTED SECTION . PRIVATE SECTION . DATA m_row TYPE i . DATA m_column TYPE i . DATA m_row_last TYPE i . DATA m_column_last TYPE i . ENDCLASS . CLASS zcl_xlsx_io IMPLEMENTATION . METHOD column_id . r_column = m_column . ENDMETHOD . METHOD conv . DATA l_subrc TYPE subrc VALUE 4 . DATA l_value TYPE string . DATA l_convexit TYPE string . DATA l_fm_convexit TYPE rs38l_fnam . \" \u8f6c\u6362\u4f8b\u7a0b\u51fd\u6570 DESCRIBE FIELD output TYPE DATA ( l_type ) EDIT MASK DATA ( l_mask ). \" EDIT MASK\u53d6\u51fa\u6765\u7684\u503c\u5982\uff1a==ALPHA\u3001==MATN1 CLEAR l_convexit . IF convexit IS SUPPLIED . l_convexit = convexit . ELSEIF strlen ( l_mask ) > 2 . l_convexit = l_mask + 2 . ELSEIF l_type = 'N' . \" \u5982\u679c\u662fNUMC\u7c7b\u578b\uff0c\u9ed8\u8ba4ALPHA\u8f6c\u6362 l_convexit = 'ALPHA' . ENDIF . CASE l_type . WHEN 'D' OR 'T' . \" \u65e5\u671f\u65f6\u95f4\u683c\u5f0f l_value = input . REPLACE ALL OCCURRENCES OF REGEX '[^0-9]' IN l_value WITH '' . output = l_value . WHEN OTHERS . \" \u68c0\u67e5\u5b57\u6bb5\u662f\u5426\u6709\u8f93\u51fa\u8f6c\u6362 IF l_convexit IS INITIAL . output = input . ELSE . TRY . \" EDIT MASK\u4e0d\u652f\u6301STRING\uff0c\u8fd8\u662f\u8981\u7528CONVEXIT\u7684\u65b9\u6cd5 l_fm_convexit = | CONVERSION_EXIT_ { l_convexit } _ { dataflow }|. CALL FUNCTION l_fm_convexit EXPORTING input = input IMPORTING output = output EXCEPTIONS OTHERS = 99 . IF sy - subrc <> 0 . output = input . \" \u8f6c\u6362\u9519\u8bef\uff0c\u76f4\u63a5\u8f93\u5165 ENDIF . CATCH cx_root . output = input . ENDTRY . ENDIF . ENDCASE . \" CONDENSE\u5fc5\u987b\u662fCharacter-Like IF l_type = 'C' OR l_type = 'N' OR l_type = 'g' . CONDENSE output . \" \u53bb\u9664\u591a\u4f59\u7a7a\u683c ENDIF . ENDMETHOD . METHOD download_smw0_templete . DATA : ls_wwwdatatab TYPE wwwdatatab , l_rc TYPE sy - subrc , l_defaultfilename TYPE string , ls_wwwdata_tab TYPE wwwdatatab , l_object_name TYPE w3objid , l_filename TYPE string , l_default_file_name TYPE string , l_fullpath TYPE string , l_down_path TYPE localfile , ls_wwwdata TYPE wwwdata , l_path TYPE string . l_default_file_name = i_name . CALL METHOD cl_gui_frontend_services => file_save_dialog EXPORTING window_title = '\u9009\u62e9\u672c\u5730\u6587\u4ef6\u4fdd\u5b58\u8def\u5f84' default_file_name = l_default_file_name default_extension = '*.xlsx' file_filter = 'EXCEL FILES(*.xlsx)|*.xlsx' CHANGING filename = l_filename path = l_path fullpath = l_fullpath EXCEPTIONS cntl_error = 1 error_no_gui = 2 not_supported_by_gui = 3 OTHERS = 5 . IF sy - subrc <> 0 . RETURN . ENDIF . SELECT SINGLE * FROM wwwdata INNER JOIN tadir ON wwwdata~objid = tadir~obj_name INTO CORRESPONDING FIELDS OF ls_wwwdata_tab WHERE wwwdata~srtf2 = 0 AND wwwdata~relid = 'MI' AND tadir~pgmid = 'R3TR' AND tadir~object = 'W3MI' AND tadir~obj_name = i_objid . IF sy - subrc <> 0 . MESSAGE | \u6a21\u677f\u6587\u4ef6[ { i_objid } ]\u4e0d\u5b58\u5728 | TYPE 'S' DISPLAY LIKE 'E' . RETURN . ENDIF . l_down_path = l_fullpath . CALL FUNCTION 'DOWNLOAD_WEB_OBJECT' EXPORTING key = ls_wwwdata_tab destination = l_down_path IMPORTING rc = l_rc . IF sy - subrc = 0 . MESSAGE | \u6a21\u677f\u4e0b\u8f7d\u6210\u529f | TYPE 'S' . ELSE . MESSAGE | \u6a21\u677f\u4e0b\u8f7d\u5931\u8d25 | TYPE 'S' . ENDIF . ENDMETHOD . METHOD export . DATA lo_tabledescr TYPE REF TO cl_abap_tabledescr . DATA lo_structdescr TYPE REF TO cl_abap_structdescr . lo_tabledescr ?= cl_abap_typedescr => describe_by_data ( it_data ). lo_structdescr ?= lo_tabledescr -> get_table_line_type ( ). \" \u83b7\u53d6\u5185\u8868\u4fe1\u606f DATA ( lt_component ) = lo_structdescr -> get_components ( ). \" \u6df1\u5ea6\u7ed3\u6784\u5904\u7406\u592a\u9ebb\u70e6\uff0c\u4e0d\u8003\u8651\u4e86\uff0c\u6709\u9700\u8981\u53ef\u4ee5\u81ea\u5df1\u8c03\u6574 DELETE lt_component WHERE type IS NOT INSTANCE OF cl_abap_elemdescr . IF lt_component IS INITIAL . MESSAGE '\u5bfc\u51fa\u5931\u8d25' TYPE 'S' DISPLAY LIKE 'E' . RETURN . ENDIF . DATA ( lo_writer ) = zcl_xlsx_io => get_instance ( ). lo_writer -> start ( ). \" \u51c6\u5907\u5199\u5165 \" \u5199\u5165\u62ac\u5934\u6587\u672c\u884c lo_writer -> next_row ( ). LOOP AT lt_component INTO DATA ( ls_component ). lo_writer -> write_next_column ( ls_component - name ). ENDLOOP . \" \u5199\u5165\u6570\u636e\u884c LOOP AT it_data ASSIGNING FIELD - SYMBOL ( <ls_data> ). lo_writer -> next_row ( ). LOOP AT lt_component INTO ls_component . FIELD-SYMBOLS <fs_field> TYPE any . ASSIGN COMPONENT ls_component - name OF STRUCTURE <ls_data> TO <fs_field> . IF <fs_field> IS ASSIGNED . lo_writer -> write_next_column ( <fs_field> ). UNASSIGN <fs_field> . ELSE . lo_writer -> next_column ( ). ENDIF . ENDLOOP . ENDLOOP . \" \u5bfc\u51fa\u5230\u672c\u5730 lo_writer -> save ( i_filename = i_filename ). ENDMETHOD . METHOD get_instance . ro_instance = NEW # ( ). TRY . ro_instance -> mo_xlsx = cl_ehfnd_xlsx => get_instance ( ). IF i_buffer IS SUPPLIED . ro_instance -> mo_doc = ro_instance -> mo_xlsx -> load_doc ( iv_file_data = i_buffer ). ELSE . ro_instance -> mo_doc = ro_instance -> mo_xlsx -> create_doc ( ). ENDIF . DATA ( lt_sheet_info ) = ro_instance -> mo_doc -> get_sheets ( ). ro_instance -> mo_sheet = ro_instance -> mo_doc -> get_sheet_by_id ( lt_sheet_info [ 1 ] - sheet_id ). CATCH cx_openxml_format cx_openxml_not_found cx_openxml_not_allowed . CLEAR ro_instance . ENDTRY . ENDMETHOD . METHOD get_local_file . DATA l_filename TYPE string . IF i_filename IS NOT INITIAL . l_filename = i_filename . ELSE . l_filename = cl_openxml_helper => browse_local_file_open ( iv_title = 'Choose' iv_filename = 'Import.xlsx' iv_extpattern = '*.xlsx|*.xlsx' ). ENDIF . CHECK l_filename IS NOT INITIAL . TRY . r_buffer = cl_openxml_helper => load_local_file ( l_filename ). CATCH cx_openxml_not_found . CLEAR r_buffer . ENDTRY . ENDMETHOD . METHOD get_reader . DATA ( l_buffer ) = zcl_xlsx_io => get_local_file ( i_filename ). ro_instance = zcl_xlsx_io => get_instance ( i_buffer = l_buffer ). ENDMETHOD . METHOD get_smw0_templete . DATA : lt_mime TYPE STANDARD TABLE OF w3mime , ls_id TYPE wwwdataid , ls_key TYPE wwwdatatab . ls_key - relid = 'MI' . ls_key - objid = i_objid . CALL FUNCTION 'WWWDATA_IMPORT' EXPORTING key = ls_key TABLES mime = lt_mime EXCEPTIONS wrong_object_type = 1 import_error = 2 OTHERS = 3 . IF sy - subrc <> 0 . MESSAGE | \u6a21\u677f[ { i_objid } ]\u83b7\u53d6\u5931\u8d25 | TYPE 'S' DISPLAY LIKE 'E' . RETURN . ENDIF . SELECT SINGLE value FROM wwwparams WHERE relid = @ ls_key - relid AND objid = @ ls_key - objid AND name EQ 'filesize' INTO @ DATA ( l_param ). DATA l_length TYPE i . l_length = l_param . CALL FUNCTION 'SCMS_BINARY_TO_XSTRING' EXPORTING input_length = l_length IMPORTING buffer = r_buffer TABLES binary_tab = lt_mime EXCEPTIONS failed = 1 OTHERS = 2 . IF sy - subrc <> 0 . CLEAR r_buffer . ENDIF . ENDMETHOD . METHOD get_writer . ro_instance = get_instance ( ). ENDMETHOD . METHOD has_next_column . r_flag = xsdbool ( m_column_last > m_column ). ENDMETHOD . METHOD has_next_row . r_flag = xsdbool ( m_row_last > m_row ). ENDMETHOD . METHOD import . DATA lr_data TYPE REF TO data . FIELD-SYMBOLS <fs_data> TYPE any . FIELD-SYMBOLS <fs_field> TYPE any . \" \u6784\u9020\u5de5\u4f5c\u533a CREATE DATA lr_data LIKE LINE OF ct_data[] . ASSIGN lr_data->* TO <fs_data> . CHECK <fs_data> IS ASSIGNED . DATA ( l_buffer ) = get_local_file ( i_filename = i_filename ). CHECK l_buffer IS NOT INITIAL . DATA ( lo_reader ) = zcl_xlsx_io => get_instance ( i_buffer = l_buffer ). CHECK lo_reader IS NOT INITIAL . \" \u51c6\u5907\u8bfb\u53d6 lo_reader -> start ( ). \" \u8df3\u8fc7\u62ac\u5934\u884c DO i_skip_row TIMES . lo_reader -> next_row ( ). ENDDO . \" \u8bfb\u53d6\u6570\u636e\u884c WHILE lo_reader -> has_next_row ( ) = abap_true . lo_reader -> next_row ( ). CLEAR <fs_data> . DO . ASSIGN COMPONENT sy - index OF STRUCTURE <fs_data> TO <fs_field> . IF <fs_field> IS ASSIGNED . <fs_field> = lo_reader -> read_next_column ( ). UNASSIGN <fs_field> . ELSE . EXIT . ENDIF . ENDDO . INSERT <fs_data> INTO TABLE ct_data . ENDWHILE . ENDMETHOD . METHOD next_column . m_column = m_column + i_column . ENDMETHOD . METHOD next_row . m_row = m_row + i_row . CLEAR m_column . m_column_last = mo_sheet -> get_last_column_number_in_row ( m_row ). ENDMETHOD . METHOD read_column . r_value = mo_sheet -> get_cell_content ( iv_row = m_row iv_column = i_column ). IF e_value IS SUPPLIED . me -> conv ( EXPORTING dataflow = 'INPUT' input = r_value IMPORTING output = e_value ). ENDIF . ENDMETHOD . METHOD read_next_column . next_column ( ). r_value = read_column ( m_column ). IF e_value IS SUPPLIED . me -> conv ( EXPORTING dataflow = 'INPUT' input = r_value IMPORTING output = e_value ). ENDIF . ENDMETHOD . METHOD row_id . r_row = m_row . ENDMETHOD . METHOD save . DATA l_filename TYPE string . IF i_filename IS NOT INITIAL . l_filename = i_filename . ELSE . l_filename = cl_openxml_helper => browse_local_file_save ( iv_title = 'Save as' iv_filename = 'Export.xlsx' iv_extpattern = '*.xlsx|*.xlsx' ). ENDIF . CHECK l_filename IS NOT INITIAL . TRY . cl_openxml_helper => store_local_file ( im_file_name = l_filename im_data = mo_doc -> save ( ) ). CATCH cx_openxml_format cx_openxml_not_found cx_openxml_not_allowed cx_dynamic_check INTO DATA ( lx_openxml ). MESSAGE lx_openxml -> get_longtext ( ) TYPE 'S' DISPLAY LIKE 'E' . ENDTRY . ENDMETHOD . METHOD start . m_row_last = mo_sheet -> get_last_row_number ( ). m_row = i_row . m_column = i_column . ENDMETHOD . METHOD stop . m_row = m_row_last . IF m_row > 0 . m_column_last = mo_sheet -> get_last_column_number_in_row ( m_row ). m_column = m_column_last . ENDIF . ENDMETHOD . METHOD write_column . DATA l_value TYPE string . IF i_conv = abap_true . me -> conv ( EXPORTING dataflow = 'OUTPUT' input = i_value IMPORTING output = l_value ). ELSE . l_value = i_value . ENDIF . mo_sheet -> set_cell_content ( iv_row = m_row iv_column = i_column iv_value = l_value ). ENDMETHOD . METHOD write_next_column . next_column ( ). write_column ( i_column = m_column i_conv = i_conv i_value = i_value ). ENDMETHOD . METHOD replace_sharedstrings . \" \u7a0b\u5e8f\u8981\u6c42IT_REPLACE\u81f3\u5c11\u4e24\u5217\uff0c\u4ee3\u7801\u4f1a\u5c06\u5de6\u5217\u5185\u5bb9\u66ff\u6362\u4e3a\u53f3\u5217\u5185\u5bb9 CHECK it_replace IS NOT INITIAL . CHECK c_doc IS NOT INITIAL . FIELD-SYMBOLS <fs_replace_t> TYPE ANY TABLE . FIELD-SYMBOLS <fs_replace> TYPE any . FIELD-SYMBOLS <fs_from> TYPE any . FIELD-SYMBOLS <fs_to> TYPE any . TRY . DATA ( lo_doc ) = cl_xlsx_document => load_document ( c_doc ). DATA ( lo_workbook_part ) = lo_doc -> get_workbookpart ( ). DATA ( lo_sharedstrings_part ) = lo_workbook_part -> get_sharedstringspart ( ). DATA ( l_sharedstrings_xml ) = lo_sharedstrings_part -> get_data ( ). DATA ( l_sharedstrings_str ) = cl_openxml_helper => xstring_to_string ( l_sharedstrings_xml ). ASSIGN it_replace TO <fs_replace_t> . LOOP AT <fs_replace_t> ASSIGNING <fs_replace> . ASSIGN COMPONENT 1 OF STRUCTURE <fs_replace> TO <fs_from> . ASSIGN COMPONENT 2 OF STRUCTURE <fs_replace> TO <fs_to> . IF <fs_from> IS ASSIGNED AND <fs_to> IS ASSIGNED . IF <fs_from> IS NOT INITIAL . REPLACE ALL OCCURRENCES OF <fs_from> IN l_sharedstrings_str WITH <fs_to> IN CHARACTER MODE . ENDIF . ENDIF . UNASSIGN <fs_from> . UNASSIGN <fs_to> . ENDLOOP . l_sharedstrings_xml = cl_openxml_helper => string_to_xstring ( l_sharedstrings_str ). lo_sharedstrings_part -> feed_data ( l_sharedstrings_xml ). c_doc = lo_doc -> get_package_data ( ). CATCH cx_openxml_not_found cx_openxml_format cx_openxml_not_allowed INTO DATA ( lx_openxml ). MESSAGE lx_openxml -> get_text ( ) TYPE 'S' DISPLAY LIKE 'E' . CATCH cx_root INTO DATA ( lx_root ). MESSAGE lx_root -> get_text ( ) TYPE 'S' DISPLAY LIKE 'E' . ENDTRY . ENDMETHOD . ENDCLASS . \u793a\u4f8b\u4ee3\u7801 TYPES : BEGIN OF ty_data , field1 TYPE string , field2 TYPE string , END OF ty_data . DATA lt_data TYPE STANDARD TABLE OF ty_data . lt_data = VALUE # ( ( field1 = 'A1' field2 = 'B1' ) ( field1 = 'A2' field2 = 'B2' ) ). \" \u5bfc\u51fa zcl_xlsx_io => export ( lt_data ). \" \u5bfc\u5165 CLEAR lt_data . zcl_xlsx_io => import ( CHANGING ct_data = lt_data ).","title":"\u5c01\u88c5\u7b80\u5316"},{"location":"others/xlsx_io/#_2","text":"\u5bf9\u4e8e\u56fa\u5b9a\u6a21\u677f\u6587\u4ef6\uff0c\u4e0d\u59a8\u76f4\u63a5\u66ff\u6362\u91cc\u9762\u7684\u6587\u672c\u5185\u5bb9 \u793a\u4f8b\u4ee3\u7801 DATA ( l_buffer ) = zcl_xlsx_io => get_smw0_templete ( CONV # ( sy - tcode ) ). \" \u83b7\u53d6SMW0\u6a21\u677f\u6587\u4ef6 TRY . DATA ( lo_doc ) = cl_xlsx_document => load_document ( l_buffer ). DATA ( lo_workbook_part ) = lo_doc -> get_workbookpart ( ). DATA ( lo_sharedstrings_part ) = lo_workbook_part -> get_sharedstringspart ( ). \" \u76f4\u63a5\u66ff\u6362\u5373\u53ef \" \u4e5f\u8bd5\u8fc7\u89e3\u6790XML\u6587\u4ef6\uff0c\u4f46\u5bcc\u6587\u672c\u683c\u5f0f\u96be\u4ee5\u5904\u7406 DATA ( l_sharedstrings_xml ) = lo_sharedstrings_part -> get_data ( ). LOOP AT lt_replace INTO DATA ( ls_replace ). DATA ( l_from ) = cl_openxml_helper => string_to_xstring ( ls_replace - from ). IF l_from IS NOT INITIAL . DATA ( l_to ) = cl_openxml_helper => string_to_xstring ( ls_replace - to ). REPLACE ALL OCCURRENCES OF l_from IN l_sharedstrings_xml WITH l_to IN BYTE MODE . ENDIF . CLEAR l_from . CLEAR l_to . ENDLOOP . lo_sharedstrings_part -> feed_data ( l_sharedstrings_xml ). \" \u56de\u5199 l_buffer = lo_doc -> get_package_data ( ). \" \u83b7\u53d6\u66ff\u6362\u540e\u7684\u6587\u4ef6 CATCH cx_openxml_not_found cx_openxml_format cx_openxml_not_allowed INTO DATA ( lx_openxml ). MESSAGE lx_openxml -> get_text ( ) TYPE 'S' DISPLAY LIKE 'E' . ENDTRY .","title":"\u6587\u672c\u66ff\u6362"},{"location":"others/xlsx_io/#abap2xlsx","text":"\u7b2c\u4e09\u65b9\u5de5\u5177\uff0c\u901a\u8fc7\u89e3\u6790XLSX\u4e2d\u7684XML\u6587\u4ef6\uff0c\u5b9e\u73b0\u9ad8\u901f\u8bfb\u53d6\u6570\u636e\u3002\u76f8\u6bd4CL_EHFND_XLSX\uff0c\u63d0\u4f9b\u4e86\u66f4\u9f50\u5168\u7684\u6837\u5f0f\u8bbe\u7f6e\u3002","title":"ABAP2XLSX"},{"location":"others/xlsx_io/#xlsx-workbanch","text":"\u7b2c\u4e09\u65b9\u5de5\u5177\uff0c\u7c7b\u4f3cSMARTFORMS\uff0c\u9884\u5148\u8bbe\u7f6e\u597dEXCEL\u6a21\u677f\u4e0e\u8f93\u5165\u53c2\u6570\uff0c\u968f\u540e\u53ef\u5728\u7a0b\u5e8f\u4e2d\u76f4\u63a5\u8c03\u7528\u83b7\u53d6\uff0c\u9002\u5408\u5bfc\u51fa\u7279\u5b9a\u683c\u5f0f\u7684\u9700\u6c42\u3002","title":"XLSX WORKBANCH"},{"location":"others/xlsx_io/#text_convert_xls_to_sap","text":"\u8be5\u65b9\u6cd5\u53ef\u5c06EXCEL\u5185\u5bb9\u76f4\u63a5\u6620\u5c04\u5230ABAP\u5185\u8868\u4e2d\u3002 \u793a\u4f8b\u4ee3\u7801 TYPES : BEGIN OF ty_data , field1 TYPE string , field2 TYPE string , END OF ty_data . TYPES tt_data TYPE STANDARD TABLE OF ty_data . DATA lt_data TYPE tt_data . DATA lt_raw TYPE truxs_t_text_data . CALL FUNCTION 'TEXT_CONVERT_XLS_TO_SAP' EXPORTING i_line_header = abap_false i_tab_raw_data = lt_raw i_filename = 'C:\\import.xls' TABLES i_tab_converted_data = lt_data EXCEPTIONS conversion_failed = 1 OTHERS = 2 .","title":"TEXT_CONVERT_XLS_TO_SAP"},{"location":"others/xlsx_io/#alsm_excel_to_internal_table","text":"\u8be5\u65b9\u6cd5\u53ef\u83b7\u53d6EXCEL\u5355\u5143\u683c\u5185\u5bb9\uff0c\u5904\u7406\u7075\u6d3b\u3002 \u793a\u4f8b\u4ee3\u7801 TYPES : BEGIN OF ty_data , field1 TYPE string , field2 TYPE string , END OF ty_data . TYPES tt_data TYPE STANDARD TABLE OF ty_data . DATA lt_data TYPE tt_data . DATA ls_data TYPE ty_data . DATA lt_intern TYPE STANDARD TABLE OF alsmex_tabline . DATA ls_intern TYPE alsmex_tabline . CALL FUNCTION 'ALSM_EXCEL_TO_INTERNAL_TABLE' EXPORTING filename = 'C:\\import.xls' i_begin_col = 1 i_begin_row = 2 \" \u8df3\u8fc7\u9996\u884c i_end_col = 2 i_end_row = 9999 TABLES intern = lt_intern EXCEPTIONS inconsistent_parameters = 1 upload_ole = 2 OTHERS = 3 . SORT lt_intern BY row col . LOOP AT lt_intern INTO ls_intern . AT NEW row . CLEAR ls_data . ENDAT . CASE ls_intern - col . WHEN '0001' . ls_data - field1 = ls_intern - value . WHEN '0002' . ls_data - field2 = ls_intern - value . WHEN OTHERS . ENDCASE . AT END OF row . INSERT ls_data INTO TABLE lt_data . ENDAT . ENDLOOP .","title":"ALSM_EXCEL_TO_INTERNAL_TABLE"},{"location":"others/xlsx_io/#ole","text":"\u4e0a\u53e4\u5de5\u5177\uff0c\u5efa\u8bae\u653e\u5f03","title":"OLE"},{"location":"others/xlsx_io/#doi","text":"\u6ca1\u7528\u8fc7\uff0c\u4e0d\u61c2","title":"DOI"},{"location":"others/zcl_text/","text":"\u6587\u672c\u53d6\u503c\u5de5\u5177 \u00b6 \u62a5\u8868\u90e8\u5206\u5b57\u6bb5\u9700\u8981\u53d6\u6587\u672c\uff0c\u8fd9\u91cc\u5c06\u9891\u7387\u8f83\u9ad8\u7684\u5b57\u6bb5\u6574\u7406\u51fa\u6765\uff0c\u4ee5\u540e\u5c31\u4e0d\u7528\u91cd\u590d\u5199SQL\u67e5\u8868\u4e86\u3002 ECC\u914c\u60c5\u4f7f\u7528\uff0c\u7a0b\u5e8f\u6bcf\u5b57\u6bb5\u53d6\u503c\u5c31\u901a\u8fc7[SELECT SINGLE]\u8bbf\u95ee\u6570\u636e\u5e93\uff0c\u6027\u80fd\u8fdc\u4e0d\u5982\u76f4\u63a5\u6279\u91cf\u67e5\u8be2\u3002 HANA\u6027\u80fd\u6709\u5de8\u5927\u63d0\u5347\uff0c\u53ef\u4ee5\u5ffd\u7565\u8fd9\u90e8\u5206\u635f\u5931 ZCL_TEXT CLASS zcl_text DEFINITION PUBLIC FINAL CREATE PRIVATE . PUBLIC SECTION . CLASS-DATA bukrs TYPE REF TO zcl_text READ - ONLY . CLASS-DATA bp TYPE REF TO zcl_text READ - ONLY . CLASS-DATA matnr TYPE REF TO zcl_text READ - ONLY . CLASS-DATA werks TYPE REF TO zcl_text READ - ONLY . CLASS-DATA user TYPE REF TO zcl_text . CLASS-METHODS class_constructor . CLASS-METHODS create IMPORTING ! i_name TYPE string RETURNING VALUE ( ro_text ) TYPE REF TO zcl_text . CLASS-METHODS domain IMPORTING ! i_domname TYPE domname RETURNING VALUE ( ro_text ) TYPE REF TO zcl_text . CLASS-METHODS create_ausp IMPORTING ! i_objectkey TYPE bapi1003_key - object ! i_objecttable TYPE bapi1003_key - objecttable OPTIONAL ! i_classnum TYPE bapi1003_key - classnum OPTIONAL ! i_classtype TYPE bapi1003_key - classtype OPTIONAL RETURNING VALUE ( ro_text ) TYPE REF TO zcl_text . METHODS get IMPORTING ! i_key TYPE data RETURNING VALUE ( r_value ) TYPE string . CLASS-METHODS long_text IMPORTING ! i_id TYPE thead - tdid ! i_language TYPE thead - tdspras DEFAULT '1' ! i_name TYPE thead - tdname ! i_object TYPE thead - tdobject EXPORTING ! et_tline TYPE tline_t ! e_value TYPE string RETURNING VALUE ( r_value ) TYPE string . PROTECTED SECTION . PRIVATE SECTION . TYPES : BEGIN OF ty_text , key TYPE string , value TYPE string , END OF ty_text . TYPES : tt_text TYPE SORTED TABLE OF ty_text WITH NON-UNIQUE KEY key . TYPES : BEGIN OF ty_text_instance , name TYPE string , o_text TYPE REF TO zcl_text , END OF ty_text_instance . TYPES : tt_text_instance TYPE SORTED TABLE OF ty_text_instance WITH NON-UNIQUE KEY name . TYPES : BEGIN OF ty_domains , domname TYPE domname , o_text TYPE REF TO zcl_text , END OF ty_domains . TYPES : tt_domnames TYPE SORTED TABLE OF ty_domains WITH NON-UNIQUE KEY domname . TYPES : BEGIN OF ty_ausp , objectkey TYPE bapi1003_key - object , objecttable TYPE bapi1003_key - objecttable , classnum TYPE bapi1003_key - classnum , classtype TYPE bapi1003_key - classtype , o_text TYPE REF TO zcl_text , END OF ty_ausp . TYPES : tt_ausp TYPE SORTED TABLE OF ty_ausp WITH NON-UNIQUE KEY objectkey objecttable classnum classtype . DATA mt_text TYPE tt_text . DATA m_name TYPE string . DATA m_method TYPE abap_methname . CLASS-DATA mt_text_instance TYPE tt_text_instance . CLASS-DATA mt_domains TYPE tt_domnames . CLASS-DATA mt_ausp TYPE tt_ausp . CLASS-DATA mo_objectdescr TYPE REF TO cl_abap_objectdescr . METHODS constructor IMPORTING ! i_name TYPE string . METHODS _bukrs IMPORTING ! i_key TYPE data RETURNING VALUE ( r_value ) TYPE string . METHODS _bp IMPORTING ! i_key TYPE data RETURNING VALUE ( r_value ) TYPE string . METHODS _matnr IMPORTING ! i_key TYPE data RETURNING VALUE ( r_value ) TYPE string . METHODS _werks IMPORTING ! i_key TYPE data RETURNING VALUE ( r_value ) TYPE string . METHODS _lgort IMPORTING ! i_key TYPE data RETURNING VALUE ( r_value ) TYPE string . METHODS _prctr IMPORTING ! i_key TYPE data RETURNING VALUE ( r_value ) TYPE string . METHODS _waers IMPORTING ! i_key TYPE data RETURNING VALUE ( r_value ) TYPE string . METHODS _domain IMPORTING ! i_key TYPE data RETURNING VALUE ( r_value ) TYPE string . METHODS _ausp IMPORTING ! i_key TYPE data RETURNING VALUE ( r_value ) TYPE string . METHODS _user IMPORTING ! i_key TYPE data RETURNING VALUE ( r_value ) TYPE string . METHODS _not_found IMPORTING ! i_key TYPE data RETURNING VALUE ( r_value ) TYPE string . ENDCLASS . CLASS zcl_text IMPLEMENTATION . METHOD class_constructor . \" \u5206\u6790\u81ea\u8eab\uff0c\u83b7\u53d6\u53ef\u4ee5\u63d0\u4f9b\u7684\u6587\u672c\u5904\u7406\u65b9\u6cd5 mo_objectdescr ?= cl_abap_typedescr => describe_by_name ( 'ZCL_TEXT' ). \" \u8bbe\u7f6e\u51e0\u4e2a\u5e38\u7528\u7684 bukrs = create ( 'BUKRS' ). bp = create ( 'BP' ). matnr = create ( 'MATNR' ). werks = create ( 'WERKS' ). user = create ( 'USER' ). ENDMETHOD . METHOD constructor . m_name = i_name . m_method = | _ { m_name }|. ENDMETHOD . METHOD create . \" V3\uff0c\u76f8\u6bd4\u4e4b\u524d\uff0c\u7cbe\u7b80\u4e3a\u5355\u6587\u4ef6\uff0c\u65b9\u4fbf\u642c\u8fd0 DATA ( l_name ) = to_upper ( i_name ). \" \u68c0\u67e5\u7f13\u5b58\u8bb0\u5f55 READ TABLE mt_text_instance INTO DATA ( ls_text_instance ) WITH KEY name = l_name BINARY SEARCH . IF sy - subrc <> 0 . \" \u6ca1\u6709\u5c31\u65b0\u5efa\u4e00\u6761\u8bb0\u5f55\u7f13\u5b58 CLEAR ls_text_instance . ls_text_instance - name = l_name . \" \u68c0\u67e5\u662f\u5426\u5b58\u5728\u76f8\u5e94\u5904\u7406\u65b9\u6cd5 DATA l_method TYPE abap_methname . l_method = | _ { l_name }|. READ TABLE mo_objectdescr -> methods TRANSPORTING NO FIELDS WITH KEY name = l_method BINARY SEARCH . IF sy - subrc <> 0 . l_name = 'NOT_FOUND' . ENDIF . ls_text_instance - o_text = NEW zcl_text ( l_name ). INSERT ls_text_instance INTO TABLE mt_text_instance . ENDIF . ro_text = ls_text_instance - o_text . ENDMETHOD . METHOD create_ausp . DATA l_object_key TYPE ausp - objek . READ TABLE mt_ausp INTO DATA ( ls_ausp ) WITH KEY objectkey = i_objectkey objecttable = i_objecttable classnum = i_classnum classtype = i_classtype BINARY SEARCH . IF sy - subrc <> 0 . CLEAR ls_ausp . ls_ausp - objectkey = i_objectkey . ls_ausp - objecttable = i_objecttable . ls_ausp - classnum = i_classnum . ls_ausp - classtype = i_classtype . ls_ausp - o_text = NEW zcl_text ( 'AUSP' ). * \" \u7279\u5f81\u53d6\u503c\u76f8\u5173\u8868\uff1a * \" AUSP\uff0c\u7279\u5f81\u503c\u8868 * \" KSSK\uff0cKSSK-OBJEK = AUSP-OBJEK\uff0c\u7b80\u5355\u7406\u89e3\u4e3a\u5355\u5bf9\u8c61\u5206\u7c7b\uff0c\u6839\u636e\u5bf9\u8c61\u53f7\u5173\u8054\u7279\u5f81 * \" INOB\uff0cINOB-CUOBJ = AUSP-OBJEK\uff0c\u591a\u5bf9\u8c61\u5206\u7c7b\uff0c\u6839\u636e\u5185\u90e8\u5bf9\u8c61\u53f7\u5173\u8054\u7279\u5f81 * \" \u5b58\u5728\u952e\u503c\u91cd\u590d\u7684\u60c5\u51b5\uff0c\u65e0\u6cd5\u5bf9\u5168\u90e8\u60c5\u51b5\u8fdb\u884c\u63a8\u5bfc * \" \u4e00\u4e2a\u952e\u503c\u53ef\u80fd\u5bf9\u5e94\u4e0d\u540c\u4e1a\u52a1\uff0c\u5f3a\u884c\u63a8\u5bfc\u4f1a\u8ba9\u95ee\u9898\u6392\u67e5\u53d8\u5f97\u56f0\u96be * \" \u5982\u679c\u89c9\u5f97\u65e0\u6240\u8c13\uff0c\u5012\u662f\u53ef\u4ee5\u542f\u7528\u8fd9\u6bb5\u63a8\u5bfc\u903b\u8f91 * IF ls_ausp-objecttable IS INITIAL * OR ls_ausp-classnum IS INITIAL * OR ls_ausp-classtype IS INITIAL. * \" \u5148\u6839\u636e\u5bf9\u8c61\u53f7\u63a8\u5bfc * SELECT SINGLE * tcla~obtab AS objecttable, * klah~class AS classnum, * kssk~klart AS classtype * FROM kssk * JOIN tcla ON kssk~klart = tcla~klart * JOIN klah ON kssk~clint = klah~clint * WHERE kssk~objek = @ls_ausp-objectkey * INTO @DATA(ls_object_key). * IF sy-subrc <> 0. * \" \u518d\u6839\u636e\u5185\u90e8\u5bf9\u8c61\u53f7\u63a8\u5bfc * SELECT SINGLE * inob~obtab AS objecttable, * klah~class AS classnum, * inob~klart AS classtype * FROM inob * JOIN kssk ON inob~cuobj = kssk~objek * JOIN klah ON kssk~clint = klah~clint * WHERE inob~objek = @ls_ausp-objectkey * INTO @ls_object_key. * ENDIF. * * IF ls_ausp-objecttable IS INITIAL. * ls_ausp-objecttable = ls_object_key-objecttable. * ENDIF. * * IF ls_ausp-classnum IS INITIAL. * ls_ausp-classnum = ls_object_key-classnum. * ENDIF. * * IF ls_ausp-classtype IS INITIAL. * ls_ausp-classtype = ls_object_key-classtype. * ENDIF. * ENDIF. DATA : lt_allocvaluesnum TYPE STANDARD TABLE OF bapi1003_alloc_values_num , lt_allocvalueschar TYPE STANDARD TABLE OF bapi1003_alloc_values_char , lt_allocvaluescurr TYPE STANDARD TABLE OF bapi1003_alloc_values_curr , lt_return TYPE STANDARD TABLE OF bapiret2 . CALL FUNCTION 'BAPI_OBJCL_GETDETAIL' EXPORTING objectkey_long = ls_ausp - objectkey objecttable = ls_ausp - objecttable classnum = ls_ausp - classnum classtype = ls_ausp - classtype TABLES allocvaluesnum = lt_allocvaluesnum allocvalueschar = lt_allocvalueschar allocvaluescurr = lt_allocvaluescurr return = lt_return . \" NUM(\u6570\u5b57)\uff0cDATE(\u65e5\u671f)\uff0cTIME(\u65f6\u95f4) LOOP AT lt_allocvaluesnum INTO DATA ( ls_allocvaluesnum ). \" \u83b7\u53d6\u51fa\u6765\u7684\u662fFLOAT\u683c\u5f0f\u6570\u636e\uff0c\u9700\u8981\u989d\u5916\u8fdb\u884c\u8f6c\u6362 INSERT VALUE # ( key = ls_allocvaluesnum - charact value = |{ ls_allocvaluesnum - value_from NUMBER = RAW }| ) INTO TABLE ls_ausp - o_text -> mt_text . ENDLOOP . \" CHAR(\u5b57\u7b26) LOOP AT lt_allocvalueschar INTO DATA ( ls_allocvalueschar ). INSERT VALUE # ( key = ls_allocvalueschar - charact value = ls_allocvalueschar - value_char_long ) INTO TABLE ls_ausp - o_text -> mt_text . ENDLOOP . \" CURR(\u91d1\u989d) LOOP AT lt_allocvaluescurr INTO DATA ( ls_allocvaluescurr ). \" \u83b7\u53d6\u51fa\u6765\u7684\u662fFLOAT\u683c\u5f0f\u6570\u636e\uff0c\u9700\u8981\u989d\u5916\u8fdb\u884c\u8f6c\u6362 \" \u6ca1\u9047\u8fc7\u8fd9\u79cd\u683c\u5f0f\u7684\u6570\u636e\uff0c\u4e0d\u77e5\u9053\u8981\u4e0d\u8981\u53c2\u8003\u8d27\u5e01 INSERT VALUE # ( key = ls_allocvaluescurr - charact value = |{ ls_allocvaluesnum - value_from NUMBER = RAW }| * value = |{ ls_allocvaluesnum-value_from NUMBER = RAW CURRENCY = ls_allocvaluesnum-unit_from }| ) INTO TABLE ls_ausp - o_text -> mt_text . ENDLOOP . INSERT ls_ausp INTO TABLE mt_ausp . ENDIF . ro_text = ls_ausp - o_text . ENDMETHOD . METHOD domain . READ TABLE mt_domains INTO DATA ( ls_domain ) WITH KEY domname = i_domname BINARY SEARCH . IF sy - subrc <> 0 . CLEAR ls_domain . ls_domain - domname = i_domname . ls_domain - o_text = NEW zcl_text ( 'DOMAIN' ). SELECT domvalue_l AS key , ddtext AS value FROM dd07t WHERE domname = @ i_domname AND ddlanguage = '1' AND as4local = 'A' INTO TABLE @ ls_domain - o_text -> mt_text . INSERT ls_domain INTO TABLE mt_domains . ENDIF . ro_text = ls_domain - o_text . ENDMETHOD . METHOD get . CHECK i_key IS NOT INITIAL . CHECK m_name <> 'NOT_FOUND' . \" \u68c0\u67e5\u7f13\u5b58 READ TABLE mt_text INTO DATA ( ls_text ) WITH KEY key = i_key . IF sy - subrc = 0 . r_value = ls_text - value . RETURN . ENDIF . TRY . \" \u8df3\u8f6c\u5230\u5bf9\u5e94\u65b9\u6cd5\u5904\u7406 CALL METHOD me -> ( m_method ) EXPORTING i_key = i_key RECEIVING r_value = r_value . CATCH cx_root . ENDTRY . \" \u7f13\u5b58\u8bb0\u5f55 CLEAR ls_text . ls_text - key = i_key . ls_text - value = r_value . INSERT ls_text INTO TABLE mt_text . ENDMETHOD . METHOD long_text . \" \u60f3\u4e86\u4e0b\uff0c\u8fd8\u662f\u4e0d\u7f13\u5b58\u4e86 CALL FUNCTION 'READ_TEXT' EXPORTING id = i_id language = i_language name = i_name object = i_object TABLES lines = et_tline EXCEPTIONS id = 1 language = 2 name = 3 not_found = 4 object = 5 reference_check = 6 wrong_access_to_archive = 7 . IF sy - subrc = 0 . CALL FUNCTION 'IDMX_DI_TLINE_INTO_STRING' EXPORTING it_tline = et_tline IMPORTING ev_text_string = r_value . IF e_value IS SUPPLIED . e_value = r_value . ENDIF . ENDIF . ENDMETHOD . METHOD _ausp . ENDMETHOD . METHOD _bp . SELECT SINGLE concat ( name_org1 , name_org2 ) AS name FROM but000 WHERE partner = @ i_key INTO @ r_value . ENDMETHOD . METHOD _bukrs . SELECT SINGLE butxt FROM t001 WHERE bukrs = @ i_key INTO @ r_value . ENDMETHOD . METHOD _domain . ENDMETHOD . METHOD _lgort . SELECT SINGLE lgobe FROM t001l WHERE lgort = @ i_key INTO @ r_value . ENDMETHOD . METHOD _matnr . SELECT SINGLE maktx FROM makt WHERE matnr = @ i_key AND spras = '1' INTO @ r_value . ENDMETHOD . METHOD _not_found . ENDMETHOD . METHOD _prctr . SELECT SINGLE ltext FROM cepct WHERE spras = '1' AND prctr = @ i_key INTO @ r_value . ENDMETHOD . METHOD _user . SELECT SINGLE concat ( adrp~name_first , adrp~name_last ) FROM usr21 JOIN adrp ON usr21~persnumber = adrp~persnumber WHERE usr21~bname = @ i_key INTO @ r_value . IF r_value IS INITIAL . r_value = i_key . ENDIF . ENDMETHOD . METHOD _waers . SELECT SINGLE ltext FROM tcurt WHERE spras = '1' AND waers = @ i_key INTO @ r_value . ENDMETHOD . METHOD _werks . SELECT SINGLE name1 FROM t001w WHERE werks = @ i_key INTO @ r_value . ENDMETHOD . ENDCLASS . \u6d4b\u8bd5\u7528\u4f8b DATA l_value TYPE string . \" \u793a\u4f8b1\uff0c\u53d6\u9884\u7559\u9879 l_value = zcl_text => bukrs -> get ( '0001' ). \" \u793a\u4f8b2\uff0c\u901a\u5e38\u53d6\u503c l_value = zcl_text => create ( 'WERKS' ) -> get ( '0001' ). \" \u793a\u4f8b3\uff0c\u53d6\u57df\u503c l_value = zcl_text => domain ( 'XFELD' ) -> get ( 'X' ). \" \u793a\u4f8b4\uff0c\u53d6\u957f\u6587\u672c l_value = zcl_text => long_text ( i_id = 'Z001' i_name = '0010012345' i_object = 'VBBK' ). \" \u793a\u4f8b5\uff0c\u53d6\u7279\u5f81\u503c DATA ls_mara TYPE mara . DATA ( lo_ausp ) = zcl_text => create_ausp ( i_objectkey = |{ ls_mara - matnr }| i_objecttable = 'MARA' * i_classnum = '' \" \u4e0d\u586b\u7684\u8bdd\u81ea\u52a8\u63a8\u5bfc i_classtype = '001' ). \" \u7269\u6599\u5206\u7c7b l_value = lo_ausp -> get ( 'A0001' ). l_value = lo_ausp -> get ( 'A0002' ).","title":"\u6587\u672c\u53d6\u503c\u5de5\u5177"},{"location":"others/zcl_text/#_1","text":"\u62a5\u8868\u90e8\u5206\u5b57\u6bb5\u9700\u8981\u53d6\u6587\u672c\uff0c\u8fd9\u91cc\u5c06\u9891\u7387\u8f83\u9ad8\u7684\u5b57\u6bb5\u6574\u7406\u51fa\u6765\uff0c\u4ee5\u540e\u5c31\u4e0d\u7528\u91cd\u590d\u5199SQL\u67e5\u8868\u4e86\u3002 ECC\u914c\u60c5\u4f7f\u7528\uff0c\u7a0b\u5e8f\u6bcf\u5b57\u6bb5\u53d6\u503c\u5c31\u901a\u8fc7[SELECT SINGLE]\u8bbf\u95ee\u6570\u636e\u5e93\uff0c\u6027\u80fd\u8fdc\u4e0d\u5982\u76f4\u63a5\u6279\u91cf\u67e5\u8be2\u3002 HANA\u6027\u80fd\u6709\u5de8\u5927\u63d0\u5347\uff0c\u53ef\u4ee5\u5ffd\u7565\u8fd9\u90e8\u5206\u635f\u5931 ZCL_TEXT CLASS zcl_text DEFINITION PUBLIC FINAL CREATE PRIVATE . PUBLIC SECTION . CLASS-DATA bukrs TYPE REF TO zcl_text READ - ONLY . CLASS-DATA bp TYPE REF TO zcl_text READ - ONLY . CLASS-DATA matnr TYPE REF TO zcl_text READ - ONLY . CLASS-DATA werks TYPE REF TO zcl_text READ - ONLY . CLASS-DATA user TYPE REF TO zcl_text . CLASS-METHODS class_constructor . CLASS-METHODS create IMPORTING ! i_name TYPE string RETURNING VALUE ( ro_text ) TYPE REF TO zcl_text . CLASS-METHODS domain IMPORTING ! i_domname TYPE domname RETURNING VALUE ( ro_text ) TYPE REF TO zcl_text . CLASS-METHODS create_ausp IMPORTING ! i_objectkey TYPE bapi1003_key - object ! i_objecttable TYPE bapi1003_key - objecttable OPTIONAL ! i_classnum TYPE bapi1003_key - classnum OPTIONAL ! i_classtype TYPE bapi1003_key - classtype OPTIONAL RETURNING VALUE ( ro_text ) TYPE REF TO zcl_text . METHODS get IMPORTING ! i_key TYPE data RETURNING VALUE ( r_value ) TYPE string . CLASS-METHODS long_text IMPORTING ! i_id TYPE thead - tdid ! i_language TYPE thead - tdspras DEFAULT '1' ! i_name TYPE thead - tdname ! i_object TYPE thead - tdobject EXPORTING ! et_tline TYPE tline_t ! e_value TYPE string RETURNING VALUE ( r_value ) TYPE string . PROTECTED SECTION . PRIVATE SECTION . TYPES : BEGIN OF ty_text , key TYPE string , value TYPE string , END OF ty_text . TYPES : tt_text TYPE SORTED TABLE OF ty_text WITH NON-UNIQUE KEY key . TYPES : BEGIN OF ty_text_instance , name TYPE string , o_text TYPE REF TO zcl_text , END OF ty_text_instance . TYPES : tt_text_instance TYPE SORTED TABLE OF ty_text_instance WITH NON-UNIQUE KEY name . TYPES : BEGIN OF ty_domains , domname TYPE domname , o_text TYPE REF TO zcl_text , END OF ty_domains . TYPES : tt_domnames TYPE SORTED TABLE OF ty_domains WITH NON-UNIQUE KEY domname . TYPES : BEGIN OF ty_ausp , objectkey TYPE bapi1003_key - object , objecttable TYPE bapi1003_key - objecttable , classnum TYPE bapi1003_key - classnum , classtype TYPE bapi1003_key - classtype , o_text TYPE REF TO zcl_text , END OF ty_ausp . TYPES : tt_ausp TYPE SORTED TABLE OF ty_ausp WITH NON-UNIQUE KEY objectkey objecttable classnum classtype . DATA mt_text TYPE tt_text . DATA m_name TYPE string . DATA m_method TYPE abap_methname . CLASS-DATA mt_text_instance TYPE tt_text_instance . CLASS-DATA mt_domains TYPE tt_domnames . CLASS-DATA mt_ausp TYPE tt_ausp . CLASS-DATA mo_objectdescr TYPE REF TO cl_abap_objectdescr . METHODS constructor IMPORTING ! i_name TYPE string . METHODS _bukrs IMPORTING ! i_key TYPE data RETURNING VALUE ( r_value ) TYPE string . METHODS _bp IMPORTING ! i_key TYPE data RETURNING VALUE ( r_value ) TYPE string . METHODS _matnr IMPORTING ! i_key TYPE data RETURNING VALUE ( r_value ) TYPE string . METHODS _werks IMPORTING ! i_key TYPE data RETURNING VALUE ( r_value ) TYPE string . METHODS _lgort IMPORTING ! i_key TYPE data RETURNING VALUE ( r_value ) TYPE string . METHODS _prctr IMPORTING ! i_key TYPE data RETURNING VALUE ( r_value ) TYPE string . METHODS _waers IMPORTING ! i_key TYPE data RETURNING VALUE ( r_value ) TYPE string . METHODS _domain IMPORTING ! i_key TYPE data RETURNING VALUE ( r_value ) TYPE string . METHODS _ausp IMPORTING ! i_key TYPE data RETURNING VALUE ( r_value ) TYPE string . METHODS _user IMPORTING ! i_key TYPE data RETURNING VALUE ( r_value ) TYPE string . METHODS _not_found IMPORTING ! i_key TYPE data RETURNING VALUE ( r_value ) TYPE string . ENDCLASS . CLASS zcl_text IMPLEMENTATION . METHOD class_constructor . \" \u5206\u6790\u81ea\u8eab\uff0c\u83b7\u53d6\u53ef\u4ee5\u63d0\u4f9b\u7684\u6587\u672c\u5904\u7406\u65b9\u6cd5 mo_objectdescr ?= cl_abap_typedescr => describe_by_name ( 'ZCL_TEXT' ). \" \u8bbe\u7f6e\u51e0\u4e2a\u5e38\u7528\u7684 bukrs = create ( 'BUKRS' ). bp = create ( 'BP' ). matnr = create ( 'MATNR' ). werks = create ( 'WERKS' ). user = create ( 'USER' ). ENDMETHOD . METHOD constructor . m_name = i_name . m_method = | _ { m_name }|. ENDMETHOD . METHOD create . \" V3\uff0c\u76f8\u6bd4\u4e4b\u524d\uff0c\u7cbe\u7b80\u4e3a\u5355\u6587\u4ef6\uff0c\u65b9\u4fbf\u642c\u8fd0 DATA ( l_name ) = to_upper ( i_name ). \" \u68c0\u67e5\u7f13\u5b58\u8bb0\u5f55 READ TABLE mt_text_instance INTO DATA ( ls_text_instance ) WITH KEY name = l_name BINARY SEARCH . IF sy - subrc <> 0 . \" \u6ca1\u6709\u5c31\u65b0\u5efa\u4e00\u6761\u8bb0\u5f55\u7f13\u5b58 CLEAR ls_text_instance . ls_text_instance - name = l_name . \" \u68c0\u67e5\u662f\u5426\u5b58\u5728\u76f8\u5e94\u5904\u7406\u65b9\u6cd5 DATA l_method TYPE abap_methname . l_method = | _ { l_name }|. READ TABLE mo_objectdescr -> methods TRANSPORTING NO FIELDS WITH KEY name = l_method BINARY SEARCH . IF sy - subrc <> 0 . l_name = 'NOT_FOUND' . ENDIF . ls_text_instance - o_text = NEW zcl_text ( l_name ). INSERT ls_text_instance INTO TABLE mt_text_instance . ENDIF . ro_text = ls_text_instance - o_text . ENDMETHOD . METHOD create_ausp . DATA l_object_key TYPE ausp - objek . READ TABLE mt_ausp INTO DATA ( ls_ausp ) WITH KEY objectkey = i_objectkey objecttable = i_objecttable classnum = i_classnum classtype = i_classtype BINARY SEARCH . IF sy - subrc <> 0 . CLEAR ls_ausp . ls_ausp - objectkey = i_objectkey . ls_ausp - objecttable = i_objecttable . ls_ausp - classnum = i_classnum . ls_ausp - classtype = i_classtype . ls_ausp - o_text = NEW zcl_text ( 'AUSP' ). * \" \u7279\u5f81\u53d6\u503c\u76f8\u5173\u8868\uff1a * \" AUSP\uff0c\u7279\u5f81\u503c\u8868 * \" KSSK\uff0cKSSK-OBJEK = AUSP-OBJEK\uff0c\u7b80\u5355\u7406\u89e3\u4e3a\u5355\u5bf9\u8c61\u5206\u7c7b\uff0c\u6839\u636e\u5bf9\u8c61\u53f7\u5173\u8054\u7279\u5f81 * \" INOB\uff0cINOB-CUOBJ = AUSP-OBJEK\uff0c\u591a\u5bf9\u8c61\u5206\u7c7b\uff0c\u6839\u636e\u5185\u90e8\u5bf9\u8c61\u53f7\u5173\u8054\u7279\u5f81 * \" \u5b58\u5728\u952e\u503c\u91cd\u590d\u7684\u60c5\u51b5\uff0c\u65e0\u6cd5\u5bf9\u5168\u90e8\u60c5\u51b5\u8fdb\u884c\u63a8\u5bfc * \" \u4e00\u4e2a\u952e\u503c\u53ef\u80fd\u5bf9\u5e94\u4e0d\u540c\u4e1a\u52a1\uff0c\u5f3a\u884c\u63a8\u5bfc\u4f1a\u8ba9\u95ee\u9898\u6392\u67e5\u53d8\u5f97\u56f0\u96be * \" \u5982\u679c\u89c9\u5f97\u65e0\u6240\u8c13\uff0c\u5012\u662f\u53ef\u4ee5\u542f\u7528\u8fd9\u6bb5\u63a8\u5bfc\u903b\u8f91 * IF ls_ausp-objecttable IS INITIAL * OR ls_ausp-classnum IS INITIAL * OR ls_ausp-classtype IS INITIAL. * \" \u5148\u6839\u636e\u5bf9\u8c61\u53f7\u63a8\u5bfc * SELECT SINGLE * tcla~obtab AS objecttable, * klah~class AS classnum, * kssk~klart AS classtype * FROM kssk * JOIN tcla ON kssk~klart = tcla~klart * JOIN klah ON kssk~clint = klah~clint * WHERE kssk~objek = @ls_ausp-objectkey * INTO @DATA(ls_object_key). * IF sy-subrc <> 0. * \" \u518d\u6839\u636e\u5185\u90e8\u5bf9\u8c61\u53f7\u63a8\u5bfc * SELECT SINGLE * inob~obtab AS objecttable, * klah~class AS classnum, * inob~klart AS classtype * FROM inob * JOIN kssk ON inob~cuobj = kssk~objek * JOIN klah ON kssk~clint = klah~clint * WHERE inob~objek = @ls_ausp-objectkey * INTO @ls_object_key. * ENDIF. * * IF ls_ausp-objecttable IS INITIAL. * ls_ausp-objecttable = ls_object_key-objecttable. * ENDIF. * * IF ls_ausp-classnum IS INITIAL. * ls_ausp-classnum = ls_object_key-classnum. * ENDIF. * * IF ls_ausp-classtype IS INITIAL. * ls_ausp-classtype = ls_object_key-classtype. * ENDIF. * ENDIF. DATA : lt_allocvaluesnum TYPE STANDARD TABLE OF bapi1003_alloc_values_num , lt_allocvalueschar TYPE STANDARD TABLE OF bapi1003_alloc_values_char , lt_allocvaluescurr TYPE STANDARD TABLE OF bapi1003_alloc_values_curr , lt_return TYPE STANDARD TABLE OF bapiret2 . CALL FUNCTION 'BAPI_OBJCL_GETDETAIL' EXPORTING objectkey_long = ls_ausp - objectkey objecttable = ls_ausp - objecttable classnum = ls_ausp - classnum classtype = ls_ausp - classtype TABLES allocvaluesnum = lt_allocvaluesnum allocvalueschar = lt_allocvalueschar allocvaluescurr = lt_allocvaluescurr return = lt_return . \" NUM(\u6570\u5b57)\uff0cDATE(\u65e5\u671f)\uff0cTIME(\u65f6\u95f4) LOOP AT lt_allocvaluesnum INTO DATA ( ls_allocvaluesnum ). \" \u83b7\u53d6\u51fa\u6765\u7684\u662fFLOAT\u683c\u5f0f\u6570\u636e\uff0c\u9700\u8981\u989d\u5916\u8fdb\u884c\u8f6c\u6362 INSERT VALUE # ( key = ls_allocvaluesnum - charact value = |{ ls_allocvaluesnum - value_from NUMBER = RAW }| ) INTO TABLE ls_ausp - o_text -> mt_text . ENDLOOP . \" CHAR(\u5b57\u7b26) LOOP AT lt_allocvalueschar INTO DATA ( ls_allocvalueschar ). INSERT VALUE # ( key = ls_allocvalueschar - charact value = ls_allocvalueschar - value_char_long ) INTO TABLE ls_ausp - o_text -> mt_text . ENDLOOP . \" CURR(\u91d1\u989d) LOOP AT lt_allocvaluescurr INTO DATA ( ls_allocvaluescurr ). \" \u83b7\u53d6\u51fa\u6765\u7684\u662fFLOAT\u683c\u5f0f\u6570\u636e\uff0c\u9700\u8981\u989d\u5916\u8fdb\u884c\u8f6c\u6362 \" \u6ca1\u9047\u8fc7\u8fd9\u79cd\u683c\u5f0f\u7684\u6570\u636e\uff0c\u4e0d\u77e5\u9053\u8981\u4e0d\u8981\u53c2\u8003\u8d27\u5e01 INSERT VALUE # ( key = ls_allocvaluescurr - charact value = |{ ls_allocvaluesnum - value_from NUMBER = RAW }| * value = |{ ls_allocvaluesnum-value_from NUMBER = RAW CURRENCY = ls_allocvaluesnum-unit_from }| ) INTO TABLE ls_ausp - o_text -> mt_text . ENDLOOP . INSERT ls_ausp INTO TABLE mt_ausp . ENDIF . ro_text = ls_ausp - o_text . ENDMETHOD . METHOD domain . READ TABLE mt_domains INTO DATA ( ls_domain ) WITH KEY domname = i_domname BINARY SEARCH . IF sy - subrc <> 0 . CLEAR ls_domain . ls_domain - domname = i_domname . ls_domain - o_text = NEW zcl_text ( 'DOMAIN' ). SELECT domvalue_l AS key , ddtext AS value FROM dd07t WHERE domname = @ i_domname AND ddlanguage = '1' AND as4local = 'A' INTO TABLE @ ls_domain - o_text -> mt_text . INSERT ls_domain INTO TABLE mt_domains . ENDIF . ro_text = ls_domain - o_text . ENDMETHOD . METHOD get . CHECK i_key IS NOT INITIAL . CHECK m_name <> 'NOT_FOUND' . \" \u68c0\u67e5\u7f13\u5b58 READ TABLE mt_text INTO DATA ( ls_text ) WITH KEY key = i_key . IF sy - subrc = 0 . r_value = ls_text - value . RETURN . ENDIF . TRY . \" \u8df3\u8f6c\u5230\u5bf9\u5e94\u65b9\u6cd5\u5904\u7406 CALL METHOD me -> ( m_method ) EXPORTING i_key = i_key RECEIVING r_value = r_value . CATCH cx_root . ENDTRY . \" \u7f13\u5b58\u8bb0\u5f55 CLEAR ls_text . ls_text - key = i_key . ls_text - value = r_value . INSERT ls_text INTO TABLE mt_text . ENDMETHOD . METHOD long_text . \" \u60f3\u4e86\u4e0b\uff0c\u8fd8\u662f\u4e0d\u7f13\u5b58\u4e86 CALL FUNCTION 'READ_TEXT' EXPORTING id = i_id language = i_language name = i_name object = i_object TABLES lines = et_tline EXCEPTIONS id = 1 language = 2 name = 3 not_found = 4 object = 5 reference_check = 6 wrong_access_to_archive = 7 . IF sy - subrc = 0 . CALL FUNCTION 'IDMX_DI_TLINE_INTO_STRING' EXPORTING it_tline = et_tline IMPORTING ev_text_string = r_value . IF e_value IS SUPPLIED . e_value = r_value . ENDIF . ENDIF . ENDMETHOD . METHOD _ausp . ENDMETHOD . METHOD _bp . SELECT SINGLE concat ( name_org1 , name_org2 ) AS name FROM but000 WHERE partner = @ i_key INTO @ r_value . ENDMETHOD . METHOD _bukrs . SELECT SINGLE butxt FROM t001 WHERE bukrs = @ i_key INTO @ r_value . ENDMETHOD . METHOD _domain . ENDMETHOD . METHOD _lgort . SELECT SINGLE lgobe FROM t001l WHERE lgort = @ i_key INTO @ r_value . ENDMETHOD . METHOD _matnr . SELECT SINGLE maktx FROM makt WHERE matnr = @ i_key AND spras = '1' INTO @ r_value . ENDMETHOD . METHOD _not_found . ENDMETHOD . METHOD _prctr . SELECT SINGLE ltext FROM cepct WHERE spras = '1' AND prctr = @ i_key INTO @ r_value . ENDMETHOD . METHOD _user . SELECT SINGLE concat ( adrp~name_first , adrp~name_last ) FROM usr21 JOIN adrp ON usr21~persnumber = adrp~persnumber WHERE usr21~bname = @ i_key INTO @ r_value . IF r_value IS INITIAL . r_value = i_key . ENDIF . ENDMETHOD . METHOD _waers . SELECT SINGLE ltext FROM tcurt WHERE spras = '1' AND waers = @ i_key INTO @ r_value . ENDMETHOD . METHOD _werks . SELECT SINGLE name1 FROM t001w WHERE werks = @ i_key INTO @ r_value . ENDMETHOD . ENDCLASS . \u6d4b\u8bd5\u7528\u4f8b DATA l_value TYPE string . \" \u793a\u4f8b1\uff0c\u53d6\u9884\u7559\u9879 l_value = zcl_text => bukrs -> get ( '0001' ). \" \u793a\u4f8b2\uff0c\u901a\u5e38\u53d6\u503c l_value = zcl_text => create ( 'WERKS' ) -> get ( '0001' ). \" \u793a\u4f8b3\uff0c\u53d6\u57df\u503c l_value = zcl_text => domain ( 'XFELD' ) -> get ( 'X' ). \" \u793a\u4f8b4\uff0c\u53d6\u957f\u6587\u672c l_value = zcl_text => long_text ( i_id = 'Z001' i_name = '0010012345' i_object = 'VBBK' ). \" \u793a\u4f8b5\uff0c\u53d6\u7279\u5f81\u503c DATA ls_mara TYPE mara . DATA ( lo_ausp ) = zcl_text => create_ausp ( i_objectkey = |{ ls_mara - matnr }| i_objecttable = 'MARA' * i_classnum = '' \" \u4e0d\u586b\u7684\u8bdd\u81ea\u52a8\u63a8\u5bfc i_classtype = '001' ). \" \u7269\u6599\u5206\u7c7b l_value = lo_ausp -> get ( 'A0001' ). l_value = lo_ausp -> get ( 'A0002' ).","title":"\u6587\u672c\u53d6\u503c\u5de5\u5177"},{"location":"pp/","text":"\u751f\u4ea7\u6a21\u5757\u6982\u8ff0 \u00b6","title":"PP\u6a21\u5757\u6982\u8ff0"},{"location":"pp/#_1","text":"","title":"\u751f\u4ea7\u6a21\u5757\u6982\u8ff0"},{"location":"pp/mrp/","text":"\u7269\u6599\u9700\u6c42\u8ba1\u5212\uff08MRP\uff09 \u00b6","title":"MRP"},{"location":"pp/mrp/#mrp","text":"","title":"\u7269\u6599\u9700\u6c42\u8ba1\u5212\uff08MRP\uff09"},{"location":"pp/pir/","text":"\u8ba1\u5212\u72ec\u7acb\u9700\u6c42\uff08PIR\uff09 \u00b6 PIR\u5220\u9664 \u00b6 \u793a\u4f8b\u4ee3\u7801 *&---------------------------------------------------------------------* *& Form FRM_PIR_DELETE *&---------------------------------------------------------------------* * text *----------------------------------------------------------------------* * -->P_<FS_HEAD>_MATNR text * -->P_P_WERKS text * -->P_P_VERSB text *----------------------------------------------------------------------* FORM frm_pir_delete USING p_matnr TYPE pbim - matnr p_werks TYPE pbim - werks p_versb TYPE pbim - versb . DATA lt_bdcdata TYPE STANDARD TABLE OF bdcdata WITH EMPTY KEY . DEFINE _bdc_dynpro . APPEND VALUE # ( program = &1 dynpro = &2 dynbegin = 'X' ) TO lt_bdcdata . END-OF-DEFINITION . DEFINE _bdc_field . APPEND VALUE # ( fnam = &1 fval = &2 ) TO lt_bdcdata . END-OF-DEFINITION . \" MD62\u7b5b\u9009\u9875\u9762 _bdc_dynpro 'SAPMM60X' '0106' . _bdc_field : 'BDC_OKCODE' '/00' , 'AM60X-MATAW' 'X' , 'AM60X-MATNR' p_matnr , 'AM60X-PRGRP' '' , 'AM60X-PBDNR' '' , 'RM60X-BEDAE' '' , 'AM60X-WERKS' p_werks , 'AM60X-VERAW' 'X' , 'RM60X-VERSB' p_versb . \" \u5168\u9009 _bdc_dynpro 'SAPLM60E' '0200' . _bdc_field : 'BDC_OKCODE' '=ALMK' . \" \u70b9\u51fb\u5220\u9664\u6309\u94ae _bdc_dynpro 'SAPLM60E' '0200' . _bdc_field : 'BDC_OKCODE' '=POLO' . \" \u70b9\u51fb\u786e\u8ba4 _bdc_dynpro 'SAPLSPO1' '0500' . _bdc_field : 'BDC_OKCODE' '=OPT1' . \" \u4fdd\u5b58 _bdc_dynpro 'SAPLM60E' '0200' . _bdc_field : 'BDC_OKCODE' '=SICH' . DATA ls_option TYPE ctu_params . ls_option - dismode = 'N' . \" \u540e\u53f0 ls_option - updmode = 'L' . \" \u672c\u5730 ls_option - nobinpt = 'X' . \" \u6709\u5f39\u7a97\uff0c\u9700\u8981\u542f\u7528\u8fd9\u4e2a\u6807\u8bc6 DATA lt_message TYPE STANDARD TABLE OF bdcmsgcoll WITH EMPTY KEY . CALL TRANSACTION 'MD62' USING lt_bdcdata OPTIONS FROM ls_option MESSAGES INTO lt_message . \" \u4e0d\u7ba1\u5982\u4f55\uff0cBDC\u90fd\u56de\u6eda\u4e0d\u4e86\uff0c\u76f4\u63a5\u63d0\u4ea4\u4e86\u4e8b COMMIT WORK AND WAIT . ENDFORM . \" FRM_PIR_DELETE PIR\u7ef4\u62a4 \u00b6 \u793a\u4f8b\u4ee3\u7801 FORM frm_import_pir . \" \u5bfc\u5165\u6570\u636e\u6821\u9a8c FIELD-SYMBOLS <fs_data_tab> TYPE STANDARD TABLE . ASSIGN gr_data_tab->* TO <fs_data_tab> . CHECK <fs_data_tab> IS NOT INITIAL . \" \u7248\u672c\u4e0b\u5168\u90e8\u8ba1\u5212\u72ec\u7acb\u9700\u6c42 TYPES : BEGIN OF ty_pbim , matnr TYPE pbim - matnr , werks TYPE pbim - werks , bedae TYPE pbim - bedae , versb TYPE pbim - versb , pbdnr TYPE pbim - pbdnr , vervs TYPE pbim - vervs , loevr TYPE pbim - loevr , END OF ty_pbim . TYPES tt_pbim TYPE STANDARD TABLE OF ty_pbim WITH EMPTY KEY . DATA lt_pbim TYPE tt_pbim . \" \u4f30\u8ba1\u662f\u6307\u4ee3\u7269\u6599\uff1f DATA l_bedae TYPE pbim - bedae VALUE 'VSF' . DATA l_pbdnr TYPE pbim - pbdnr VALUE '' . DATA l_vervs TYPE pbim - vervs VALUE 'X' . \" \u67e5\u8be2\u7248\u672c\u4e0b\uff0c\u6240\u6709\u9884\u6d4b\u6570\u636e SELECT matnr werks bedae versb pbdnr vervs loevr FROM pbim INTO TABLE lt_pbim WHERE werks = p_werks AND bedae = l_bedae AND versb = p_versb AND pbdnr = l_pbdnr . SORT lt_pbim BY matnr werks bedae versb pbdnr . \" \u521b\u5efa/\u4fee\u6539 DATA ls_pir_item TYPE bapisitemr . DATA lt_pir_schedule_in TYPE TABLE OF bapisshdin . DATA lt_return TYPE TABLE OF bapireturn1 . \" \u6574\u4f53\u7684\u4e00\u4e2a\u72b6\u6001 DATA l_err TYPE xflag . \" \u9010\u884c\u6267\u884c LOOP AT <fs_data_tab> ASSIGNING <fs_data> . ASSIGN COMPONENT gc_suffix - head OF STRUCTURE <fs_data> TO <fs_head> . ASSIGN COMPONENT gc_suffix - forecast OF STRUCTURE <fs_data> TO FIELD - SYMBOL ( <fs_forecast> ). CLEAR ls_pir_item . ls_pir_item - material = <fs_head> - matnr . \" \u7269\u6599 ls_pir_item - plant = p_werks . \" \u5de5\u5382 ls_pir_item - requ_type = l_bedae . \" \u9700\u6c42\u7c7b\u578b ls_pir_item - version = p_versb . \" \u7248\u672c ls_pir_item - req_number = l_pbdnr . \" \u9700\u6c42\u8ba1\u5212 ls_pir_item - vers_activ = l_vervs . \" \u6fc0\u6d3b CLEAR lt_pir_schedule_in . LOOP AT gt_date_list REFERENCE INTO DATA ( lr_date ). ASSIGN COMPONENT lr_date -> fieldname OF STRUCTURE <fs_forecast> TO FIELD - SYMBOL ( <fs_nump> ). \" \u6709\u4e2a\u7591\u95ee\uff0c\u5bfc\u5165\u4e3a0\u662f\u4e0d\u662f\u5c31\u4e0d\u7528\u5bfc\u5165\u4e86\uff1f IF <fs_nump> IS NOT INITIAL . APPEND VALUE # ( req_date = lr_date -> date req_qty = <fs_nump> date_type = '1' \" \u8868\u793a\uff1a\u5929 prod_ves = <fs_head> - verid ) TO lt_pir_schedule_in REFERENCE INTO DATA ( lr_pir_schedule_in ). ENDIF . ENDLOOP . \" \u68c0\u67e5\u7248\u672c\u4e0b\u7684\u7269\u6599\u662f\u5426\u5b58\u5728 READ TABLE lt_pbim TRANSPORTING NO FIELDS WITH KEY matnr = ls_pir_item - material werks = ls_pir_item - plant bedae = ls_pir_item - requ_type versb = ls_pir_item - version pbdnr = ls_pir_item - req_number BINARY SEARCH . IF sy - subrc = 0 . \" \u5220\u9664\u9700\u8981\u5bfc\u5165\u7684\u884c DELETE lt_pbim INDEX sy - tabix . \" \u4fee\u6539 CALL FUNCTION 'BAPI_REQUIREMENTS_CHANGE' EXPORTING material = ls_pir_item - material plant = ls_pir_item - plant requirementstype = ls_pir_item - requ_type version = ls_pir_item - version reqmtsplannumber = ls_pir_item - req_number vers_activ = ls_pir_item - vers_activ do_commit = ' ' delete_old = 'X' TABLES requirements_schedule_in = lt_pir_schedule_in return = lt_return . ELSE . CLEAR lt_return . CALL FUNCTION 'BAPI_REQUIREMENTS_CREATE' EXPORTING requirements_item = ls_pir_item do_commit = ' ' \" \u6700\u540e\u7edf\u4e00\u63d0\u4ea4\u7edf\u4e00\u56de\u6eda TABLES requirements_schedule_in = lt_pir_schedule_in return = lt_return . ENDIF . \" \u9519\u8bef\u6d88\u606f LOOP AT lt_return REFERENCE INTO DATA ( lr_return ) WHERE type CA 'AXE' . <fs_head> - status = 'E' . <fs_head> - icon = icon_red_light . MESSAGE ID lr_return -> id TYPE lr_return -> type NUMBER lr_return -> number WITH lr_return -> message_v1 lr_return -> message_v2 lr_return -> message_v3 lr_return -> message_v4 INTO DATA ( l_msg ). <fs_head> - message = |{ <fs_head> - message }{ l_msg } ; |. ENDLOOP . IF <fs_head> - status = 'E' . l_err = 'X' . ENDIF . ENDLOOP . \" \u56de\u6eda IF l_err = 'X' . CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK' . RETURN . ENDIF . \" \u4e0d\u51fa\u9519\u7684\u60c5\u51b5\uff0c\u5168\u90e8\u63d0\u4ea4 CHECK l_err = '' . CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = 'X' . \" \u5bfc\u5165\u6210\u529f\u540e\uff0c\u901a\u8fc7BDC\u5220\u9664\u5176\u4ed6\u7248\u672c\u53f7 \" \u4e0d\u5728\u5bfc\u5165\u524d\u5220\u9664\u7684\u539f\u56e0\uff0c\u662f\u4e3a\u4e86\u4fdd\u6301\u6570\u636e\u4e00\u81f4\u6027 \" \uff08BDC\u65e0\u6cd5\u56de\u6eda\uff0c\u5982\u679cBDC\u5220\u9664\u6210\u529f\uff0c\u540e\u9762\u5bfc\u5165\u5931\u8d25\uff0c\u5c06\u65e0\u6cd5\u56de\u9000\u5230\u521d\u59cb\u72b6\u6001\uff09 \" \u5220\u9664\u7684\u9879\u76ee\u65e0\u6cd5\u518d\u6b21\u5220\u9664\uff0c\u6240\u4ee5\u4e5f\u8981\u6392\u9664 DELETE lt_pbim WHERE loevr <> '' . \" \u901a\u8fc7BDC\u5220\u9664\u5176\u4f59\u6ca1\u6709\u5bfc\u5165\u7684\u7269\u6599\u6570\u636e LOOP AT lt_pbim REFERENCE INTO DATA ( lr_pbim ). PERFORM frm_pir_delete USING lr_pbim -> matnr lr_pbim -> werks lr_pbim -> versb . ENDLOOP . ENDFORM . \" frm_import_pir","title":"PIR"},{"location":"pp/pir/#pir","text":"","title":"\u8ba1\u5212\u72ec\u7acb\u9700\u6c42\uff08PIR\uff09"},{"location":"pp/pir/#pir_1","text":"\u793a\u4f8b\u4ee3\u7801 *&---------------------------------------------------------------------* *& Form FRM_PIR_DELETE *&---------------------------------------------------------------------* * text *----------------------------------------------------------------------* * -->P_<FS_HEAD>_MATNR text * -->P_P_WERKS text * -->P_P_VERSB text *----------------------------------------------------------------------* FORM frm_pir_delete USING p_matnr TYPE pbim - matnr p_werks TYPE pbim - werks p_versb TYPE pbim - versb . DATA lt_bdcdata TYPE STANDARD TABLE OF bdcdata WITH EMPTY KEY . DEFINE _bdc_dynpro . APPEND VALUE # ( program = &1 dynpro = &2 dynbegin = 'X' ) TO lt_bdcdata . END-OF-DEFINITION . DEFINE _bdc_field . APPEND VALUE # ( fnam = &1 fval = &2 ) TO lt_bdcdata . END-OF-DEFINITION . \" MD62\u7b5b\u9009\u9875\u9762 _bdc_dynpro 'SAPMM60X' '0106' . _bdc_field : 'BDC_OKCODE' '/00' , 'AM60X-MATAW' 'X' , 'AM60X-MATNR' p_matnr , 'AM60X-PRGRP' '' , 'AM60X-PBDNR' '' , 'RM60X-BEDAE' '' , 'AM60X-WERKS' p_werks , 'AM60X-VERAW' 'X' , 'RM60X-VERSB' p_versb . \" \u5168\u9009 _bdc_dynpro 'SAPLM60E' '0200' . _bdc_field : 'BDC_OKCODE' '=ALMK' . \" \u70b9\u51fb\u5220\u9664\u6309\u94ae _bdc_dynpro 'SAPLM60E' '0200' . _bdc_field : 'BDC_OKCODE' '=POLO' . \" \u70b9\u51fb\u786e\u8ba4 _bdc_dynpro 'SAPLSPO1' '0500' . _bdc_field : 'BDC_OKCODE' '=OPT1' . \" \u4fdd\u5b58 _bdc_dynpro 'SAPLM60E' '0200' . _bdc_field : 'BDC_OKCODE' '=SICH' . DATA ls_option TYPE ctu_params . ls_option - dismode = 'N' . \" \u540e\u53f0 ls_option - updmode = 'L' . \" \u672c\u5730 ls_option - nobinpt = 'X' . \" \u6709\u5f39\u7a97\uff0c\u9700\u8981\u542f\u7528\u8fd9\u4e2a\u6807\u8bc6 DATA lt_message TYPE STANDARD TABLE OF bdcmsgcoll WITH EMPTY KEY . CALL TRANSACTION 'MD62' USING lt_bdcdata OPTIONS FROM ls_option MESSAGES INTO lt_message . \" \u4e0d\u7ba1\u5982\u4f55\uff0cBDC\u90fd\u56de\u6eda\u4e0d\u4e86\uff0c\u76f4\u63a5\u63d0\u4ea4\u4e86\u4e8b COMMIT WORK AND WAIT . ENDFORM . \" FRM_PIR_DELETE","title":"PIR\u5220\u9664"},{"location":"pp/pir/#pir_2","text":"\u793a\u4f8b\u4ee3\u7801 FORM frm_import_pir . \" \u5bfc\u5165\u6570\u636e\u6821\u9a8c FIELD-SYMBOLS <fs_data_tab> TYPE STANDARD TABLE . ASSIGN gr_data_tab->* TO <fs_data_tab> . CHECK <fs_data_tab> IS NOT INITIAL . \" \u7248\u672c\u4e0b\u5168\u90e8\u8ba1\u5212\u72ec\u7acb\u9700\u6c42 TYPES : BEGIN OF ty_pbim , matnr TYPE pbim - matnr , werks TYPE pbim - werks , bedae TYPE pbim - bedae , versb TYPE pbim - versb , pbdnr TYPE pbim - pbdnr , vervs TYPE pbim - vervs , loevr TYPE pbim - loevr , END OF ty_pbim . TYPES tt_pbim TYPE STANDARD TABLE OF ty_pbim WITH EMPTY KEY . DATA lt_pbim TYPE tt_pbim . \" \u4f30\u8ba1\u662f\u6307\u4ee3\u7269\u6599\uff1f DATA l_bedae TYPE pbim - bedae VALUE 'VSF' . DATA l_pbdnr TYPE pbim - pbdnr VALUE '' . DATA l_vervs TYPE pbim - vervs VALUE 'X' . \" \u67e5\u8be2\u7248\u672c\u4e0b\uff0c\u6240\u6709\u9884\u6d4b\u6570\u636e SELECT matnr werks bedae versb pbdnr vervs loevr FROM pbim INTO TABLE lt_pbim WHERE werks = p_werks AND bedae = l_bedae AND versb = p_versb AND pbdnr = l_pbdnr . SORT lt_pbim BY matnr werks bedae versb pbdnr . \" \u521b\u5efa/\u4fee\u6539 DATA ls_pir_item TYPE bapisitemr . DATA lt_pir_schedule_in TYPE TABLE OF bapisshdin . DATA lt_return TYPE TABLE OF bapireturn1 . \" \u6574\u4f53\u7684\u4e00\u4e2a\u72b6\u6001 DATA l_err TYPE xflag . \" \u9010\u884c\u6267\u884c LOOP AT <fs_data_tab> ASSIGNING <fs_data> . ASSIGN COMPONENT gc_suffix - head OF STRUCTURE <fs_data> TO <fs_head> . ASSIGN COMPONENT gc_suffix - forecast OF STRUCTURE <fs_data> TO FIELD - SYMBOL ( <fs_forecast> ). CLEAR ls_pir_item . ls_pir_item - material = <fs_head> - matnr . \" \u7269\u6599 ls_pir_item - plant = p_werks . \" \u5de5\u5382 ls_pir_item - requ_type = l_bedae . \" \u9700\u6c42\u7c7b\u578b ls_pir_item - version = p_versb . \" \u7248\u672c ls_pir_item - req_number = l_pbdnr . \" \u9700\u6c42\u8ba1\u5212 ls_pir_item - vers_activ = l_vervs . \" \u6fc0\u6d3b CLEAR lt_pir_schedule_in . LOOP AT gt_date_list REFERENCE INTO DATA ( lr_date ). ASSIGN COMPONENT lr_date -> fieldname OF STRUCTURE <fs_forecast> TO FIELD - SYMBOL ( <fs_nump> ). \" \u6709\u4e2a\u7591\u95ee\uff0c\u5bfc\u5165\u4e3a0\u662f\u4e0d\u662f\u5c31\u4e0d\u7528\u5bfc\u5165\u4e86\uff1f IF <fs_nump> IS NOT INITIAL . APPEND VALUE # ( req_date = lr_date -> date req_qty = <fs_nump> date_type = '1' \" \u8868\u793a\uff1a\u5929 prod_ves = <fs_head> - verid ) TO lt_pir_schedule_in REFERENCE INTO DATA ( lr_pir_schedule_in ). ENDIF . ENDLOOP . \" \u68c0\u67e5\u7248\u672c\u4e0b\u7684\u7269\u6599\u662f\u5426\u5b58\u5728 READ TABLE lt_pbim TRANSPORTING NO FIELDS WITH KEY matnr = ls_pir_item - material werks = ls_pir_item - plant bedae = ls_pir_item - requ_type versb = ls_pir_item - version pbdnr = ls_pir_item - req_number BINARY SEARCH . IF sy - subrc = 0 . \" \u5220\u9664\u9700\u8981\u5bfc\u5165\u7684\u884c DELETE lt_pbim INDEX sy - tabix . \" \u4fee\u6539 CALL FUNCTION 'BAPI_REQUIREMENTS_CHANGE' EXPORTING material = ls_pir_item - material plant = ls_pir_item - plant requirementstype = ls_pir_item - requ_type version = ls_pir_item - version reqmtsplannumber = ls_pir_item - req_number vers_activ = ls_pir_item - vers_activ do_commit = ' ' delete_old = 'X' TABLES requirements_schedule_in = lt_pir_schedule_in return = lt_return . ELSE . CLEAR lt_return . CALL FUNCTION 'BAPI_REQUIREMENTS_CREATE' EXPORTING requirements_item = ls_pir_item do_commit = ' ' \" \u6700\u540e\u7edf\u4e00\u63d0\u4ea4\u7edf\u4e00\u56de\u6eda TABLES requirements_schedule_in = lt_pir_schedule_in return = lt_return . ENDIF . \" \u9519\u8bef\u6d88\u606f LOOP AT lt_return REFERENCE INTO DATA ( lr_return ) WHERE type CA 'AXE' . <fs_head> - status = 'E' . <fs_head> - icon = icon_red_light . MESSAGE ID lr_return -> id TYPE lr_return -> type NUMBER lr_return -> number WITH lr_return -> message_v1 lr_return -> message_v2 lr_return -> message_v3 lr_return -> message_v4 INTO DATA ( l_msg ). <fs_head> - message = |{ <fs_head> - message }{ l_msg } ; |. ENDLOOP . IF <fs_head> - status = 'E' . l_err = 'X' . ENDIF . ENDLOOP . \" \u56de\u6eda IF l_err = 'X' . CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK' . RETURN . ENDIF . \" \u4e0d\u51fa\u9519\u7684\u60c5\u51b5\uff0c\u5168\u90e8\u63d0\u4ea4 CHECK l_err = '' . CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = 'X' . \" \u5bfc\u5165\u6210\u529f\u540e\uff0c\u901a\u8fc7BDC\u5220\u9664\u5176\u4ed6\u7248\u672c\u53f7 \" \u4e0d\u5728\u5bfc\u5165\u524d\u5220\u9664\u7684\u539f\u56e0\uff0c\u662f\u4e3a\u4e86\u4fdd\u6301\u6570\u636e\u4e00\u81f4\u6027 \" \uff08BDC\u65e0\u6cd5\u56de\u6eda\uff0c\u5982\u679cBDC\u5220\u9664\u6210\u529f\uff0c\u540e\u9762\u5bfc\u5165\u5931\u8d25\uff0c\u5c06\u65e0\u6cd5\u56de\u9000\u5230\u521d\u59cb\u72b6\u6001\uff09 \" \u5220\u9664\u7684\u9879\u76ee\u65e0\u6cd5\u518d\u6b21\u5220\u9664\uff0c\u6240\u4ee5\u4e5f\u8981\u6392\u9664 DELETE lt_pbim WHERE loevr <> '' . \" \u901a\u8fc7BDC\u5220\u9664\u5176\u4f59\u6ca1\u6709\u5bfc\u5165\u7684\u7269\u6599\u6570\u636e LOOP AT lt_pbim REFERENCE INTO DATA ( lr_pbim ). PERFORM frm_pir_delete USING lr_pbim -> matnr lr_pbim -> werks lr_pbim -> versb . ENDLOOP . ENDFORM . \" frm_import_pir","title":"PIR\u7ef4\u62a4"},{"location":"pp/pp_confirmation/","text":"\u751f\u4ea7\u62a5\u5de5 \u00b6 \u793a\u4f8b\u4ee3\u7801 \u00b6 BAPI_PRODORDCONF_GET_TT_PROP \uff1a\u67e5\u8be2\u5de5\u5355\u4fe1\u606f BAPI_PRODORDCONF_CREATE_TT \uff1a\u521b\u5efa\u6216\u7ef4\u62a4\u62a5\u5de5 \u793a\u4f8b\u4ee3\u7801\uff1a\u521b\u5efa \" \u5904\u7406\u72b6\u6001 DATA l_mtype TYPE bapi_mtype . DATA l_msg TYPE bapi_msg . DATA : lt_timetickets TYPE STANDARD TABLE OF bapi_pp_timeticket , ls_timetickets TYPE bapi_pp_timeticket , ls_bapiret1 TYPE bapiret1 . CLEAR lt_timetickets . LOOP AT lt_input INTO ls_input . CLEAR ls_timetickets . ls_timetickets - orderid = ls_input - aufnr . \" \u751f\u4ea7\u8ba2\u5355\u53f7 ls_timetickets - operation = ls_input - posnr . \" \u5de5\u5e8f ls_timetickets - postg_date = ls_input - budat . \" \u65e5\u671f ls_timetickets - yield = ls_input - gmnga . \" \u751f\u4ea7\u6570\u91cf APPEND ls_timetickets TO lt_timetickets . ENDLOOP . \" \u62a5\u5de5 CLEAR ls_bapiret1 . CALL FUNCTION 'BAPI_PRODORDCONF_CREATE_TT' IMPORTING return = ls_bapiret1 TABLES timetickets = lt_timetickets . IF ls_bapiret1 - type CA 'AEX' . l_mtype = 'E' . MESSAGE ID ls_bapiret1 - id TYPE ls_bapiret1 - type NUMBER ls_bapiret1 - number WITH ls_bapiret1 - message_v1 ls_bapiret1 - message_v2 ls_bapiret1 - message_v3 ls_bapiret1 - message_v4 INTO l_msg . CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK' . ELSE . l_mtype = 'S' . l_msg = | \u62a5\u5de5\u5df2\u5904\u7406 |. CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = 'X' . ENDIF . \u793a\u4f8b\u4ee3\u7801\uff1a\u7ef4\u62a4","title":"\u62a5\u5de5\u786e\u8ba4"},{"location":"pp/pp_confirmation/#_1","text":"","title":"\u751f\u4ea7\u62a5\u5de5"},{"location":"pp/pp_confirmation/#_2","text":"BAPI_PRODORDCONF_GET_TT_PROP \uff1a\u67e5\u8be2\u5de5\u5355\u4fe1\u606f BAPI_PRODORDCONF_CREATE_TT \uff1a\u521b\u5efa\u6216\u7ef4\u62a4\u62a5\u5de5 \u793a\u4f8b\u4ee3\u7801\uff1a\u521b\u5efa \" \u5904\u7406\u72b6\u6001 DATA l_mtype TYPE bapi_mtype . DATA l_msg TYPE bapi_msg . DATA : lt_timetickets TYPE STANDARD TABLE OF bapi_pp_timeticket , ls_timetickets TYPE bapi_pp_timeticket , ls_bapiret1 TYPE bapiret1 . CLEAR lt_timetickets . LOOP AT lt_input INTO ls_input . CLEAR ls_timetickets . ls_timetickets - orderid = ls_input - aufnr . \" \u751f\u4ea7\u8ba2\u5355\u53f7 ls_timetickets - operation = ls_input - posnr . \" \u5de5\u5e8f ls_timetickets - postg_date = ls_input - budat . \" \u65e5\u671f ls_timetickets - yield = ls_input - gmnga . \" \u751f\u4ea7\u6570\u91cf APPEND ls_timetickets TO lt_timetickets . ENDLOOP . \" \u62a5\u5de5 CLEAR ls_bapiret1 . CALL FUNCTION 'BAPI_PRODORDCONF_CREATE_TT' IMPORTING return = ls_bapiret1 TABLES timetickets = lt_timetickets . IF ls_bapiret1 - type CA 'AEX' . l_mtype = 'E' . MESSAGE ID ls_bapiret1 - id TYPE ls_bapiret1 - type NUMBER ls_bapiret1 - number WITH ls_bapiret1 - message_v1 ls_bapiret1 - message_v2 ls_bapiret1 - message_v3 ls_bapiret1 - message_v4 INTO l_msg . CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK' . ELSE . l_mtype = 'S' . l_msg = | \u62a5\u5de5\u5df2\u5904\u7406 |. CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = 'X' . ENDIF . \u793a\u4f8b\u4ee3\u7801\uff1a\u7ef4\u62a4","title":"\u793a\u4f8b\u4ee3\u7801"},{"location":"pp/pp_gi/","text":"\u751f\u4ea7\u6295\u6599 \u00b6 \u53c2\u8003MIGO\u53d1\u8d27","title":"\u9886\u9000\u6599"},{"location":"pp/pp_gi/#_1","text":"\u53c2\u8003MIGO\u53d1\u8d27","title":"\u751f\u4ea7\u6295\u6599"},{"location":"pp/pp_gr/","text":"\u751f\u4ea7\u8ba2\u5355\u6536\u8d27 \u00b6 \u53c2\u8003MIGO\u751f\u4ea7\u6536\u8d27","title":"\u751f\u4ea7\u8ba2\u5355\u6536\u8d27"},{"location":"pp/pp_gr/#_1","text":"\u53c2\u8003MIGO\u751f\u4ea7\u6536\u8d27","title":"\u751f\u4ea7\u8ba2\u5355\u6536\u8d27"},{"location":"pp/pp_order/","text":"\u751f\u4ea7\u8ba2\u5355 \u00b6","title":"\u751f\u4ea7\u5de5\u5355"},{"location":"pp/pp_order/#_1","text":"","title":"\u751f\u4ea7\u8ba2\u5355"},{"location":"pp/pp_order_close/","text":"\u5de5\u5355\u5173\u95ed \u00b6 \u6280\u672f\u6027\u5b8c\u6210\uff08TECO\uff09\u751f\u4ea7\u8ba2\u5355 \u00b6 \u793a\u4f8b\u4ee3\u7801 DATA : lt_orders TYPE STANDARD TABLE OF bapi_order_key , lt_detail_return TYPE STANDARD TABLE OF bapi_order_return , ls_return TYPE bapiret2 . CLEAR lt_orders . CLEAR lt_detail_return . CLEAR ls_return . INSERT VALUE # ( order_number = ls_input - aufnr ) INTO TABLE lt_orders . \" \u6280\u672f\u6027\u5b8c\u6210\u751f\u4ea7\u8ba2\u5355 CALL FUNCTION 'BAPI_PRODORD_COMPLETE_TECH' IMPORTING return = ls_return TABLES orders = lt_orders detail_return = lt_detail_return . IF ls_return - type = 'E' . l_mtype = 'E' . MESSAGE ID ls_return - id TYPE ls_return - type NUMBER ls_return - number WITH ls_return - message_v1 ls_return - message_v2 ls_return - message_v3 ls_return - message_v4 INTO l_msg . CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK' . ELSE . l_mtype = 'S' . l_msg = | \u5df2\u5904\u7406 |. CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = 'X' . ENDIF . \u64a4\u9500TECO \u00b6 \u7528\u65b9\u6cd5STATUS_CHANGE_INTERN\u64a4\u9500TECO\uff0c\u4f46\u662f\u65e0\u6cd5\u6e05\u9664AUFK-IDAT2\u6280\u672f\u5b8c\u6210\u65e5\u671f\uff0c\u6216\u8bb8\u53ef\u4ee5\u76f4\u63a5\u6539\u8868\u6765\u53bb\u9664\u8fd9\u4e2a\u5b57\u6bb5\u4fe1\u606f? \u793a\u4f8b\u4ee3\u7801 DATA lt_jstat TYPE STANDARD TABLE OF jstat WITH EMPTY KEY . CLEAR lt_jstat . CALL FUNCTION 'STATUS_READ' EXPORTING objnr = i_objnr TABLES status = lt_jstat EXCEPTIONS object_not_found = 1 OTHERS = 2 . IF sy - subrc = 0 . * Implement suitable error handling here LOOP AT lt_jstat REFERENCE INTO DATA ( lr_jstat ). CASE lr_jstat -> stat . WHEN 'I0002' . \" REL lr_jstat -> inact = '' . WHEN 'I0045' . \" TECO lr_jstat -> inact = 'X' . WHEN OTHERS . ENDCASE . ENDLOOP . CALL FUNCTION 'STATUS_CHANGE_INTERN' EXPORTING objnr = i_objnr TABLES status = lt_jstat EXCEPTIONS object_not_found = 1 status_inconsistent = 2 status_not_allowed = 3 OTHERS = 4 . IF sy - subrc <> 0 . * Implement suitable error handling here ENDIF . ENDIF . \u64a4\u9500TECO\uff08BDC\u5b9e\u73b0\uff09 \u00b6 \u793a\u4f8b\u4ee3\u7801 FORM frm_bdc_status_change USING i_aufnr TYPE aufk - aufnr i_teco TYPE xflag CHANGING c_subrc TYPE sy - subrc . DATA lt_bdcdata TYPE STANDARD TABLE OF bdcdata WITH EMPTY KEY . DEFINE _bdc_dynpro . append value # ( program = &1 dynpro = &2 dynbegin = 'X' ) to lt_bdcdata . END-OF-DEFINITION . DEFINE _bdc_field . append value # ( fnam = &1 fval = &2 ) to lt_bdcdata . END-OF-DEFINITION . \" CO02\u9996\u9875\uff0c\u9009\u62e9\u603b\u89c8\uff0c\u8f93\u5165\u8ba2\u5355\u53f7\uff0cENTER\u8fdb\u5165 _bdc_dynpro 'SAPLCOKO1' '0110' . _bdc_field : 'BDC_OKCODE' '/00' , 'R62CLORD-FLG_OVIEW' 'X' , 'CAUFVD-AUFNR' i_aufnr . \" =TABS: TECO \u6280\u672f\u6027\u5173\u95ed \" =TABR: undo TECO \u53d6\u6d88\u6280\u672f\u6027\u5173\u95ed _bdc_dynpro 'SAPLCOKO1' '0115' . IF i_teco = 'X' . _bdc_field 'BDC_OKCODE' '=TABS' . ELSE . _bdc_field 'BDC_OKCODE' '=TABR' . ENDIF . \" \u4fdd\u5b58 _bdc_dynpro 'SAPLCOKO1' '0115' . _bdc_field 'BDC_OKCODE' '=BU' . \" \u4fdd\u5b58\u65f6\u5f39\u7a97\u9009\u62e9\u201c\u662f\u201d _bdc_dynpro 'SAPLSPO1' '0300' . _bdc_field 'BDC_OKCODE' '=YES' . DATA ls_option TYPE ctu_params . ls_option - dismode = 'N' . \" \u540e\u53f0 ls_option - updmode = 'L' . \" \u672c\u5730 ls_option - nobinpt = 'X' . \" \u6709\u5f39\u7a97\uff0c\u9700\u8981\u542f\u7528\u8fd9\u4e2a\u6807\u8bc6 DATA lt_message TYPE STANDARD TABLE OF bdcmsgcoll WITH EMPTY KEY . CALL TRANSACTION 'CO02' USING lt_bdcdata OPTIONS FROM ls_option MESSAGES INTO lt_message . \" \u4e0d\u7ba1\u5982\u4f55\uff0cBDC\u90fd\u56de\u6eda\u4e0d\u4e86\uff0c\u76f4\u63a5\u63d0\u4ea4\u4e86\u4e8b COMMIT WORK AND WAIT . ENDFORM . \" frm_bdc_status_change","title":"\u5de5\u5355\u5173\u95ed"},{"location":"pp/pp_order_close/#_1","text":"","title":"\u5de5\u5355\u5173\u95ed"},{"location":"pp/pp_order_close/#teco","text":"\u793a\u4f8b\u4ee3\u7801 DATA : lt_orders TYPE STANDARD TABLE OF bapi_order_key , lt_detail_return TYPE STANDARD TABLE OF bapi_order_return , ls_return TYPE bapiret2 . CLEAR lt_orders . CLEAR lt_detail_return . CLEAR ls_return . INSERT VALUE # ( order_number = ls_input - aufnr ) INTO TABLE lt_orders . \" \u6280\u672f\u6027\u5b8c\u6210\u751f\u4ea7\u8ba2\u5355 CALL FUNCTION 'BAPI_PRODORD_COMPLETE_TECH' IMPORTING return = ls_return TABLES orders = lt_orders detail_return = lt_detail_return . IF ls_return - type = 'E' . l_mtype = 'E' . MESSAGE ID ls_return - id TYPE ls_return - type NUMBER ls_return - number WITH ls_return - message_v1 ls_return - message_v2 ls_return - message_v3 ls_return - message_v4 INTO l_msg . CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK' . ELSE . l_mtype = 'S' . l_msg = | \u5df2\u5904\u7406 |. CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = 'X' . ENDIF .","title":"\u6280\u672f\u6027\u5b8c\u6210\uff08TECO\uff09\u751f\u4ea7\u8ba2\u5355"},{"location":"pp/pp_order_close/#teco_1","text":"\u7528\u65b9\u6cd5STATUS_CHANGE_INTERN\u64a4\u9500TECO\uff0c\u4f46\u662f\u65e0\u6cd5\u6e05\u9664AUFK-IDAT2\u6280\u672f\u5b8c\u6210\u65e5\u671f\uff0c\u6216\u8bb8\u53ef\u4ee5\u76f4\u63a5\u6539\u8868\u6765\u53bb\u9664\u8fd9\u4e2a\u5b57\u6bb5\u4fe1\u606f? \u793a\u4f8b\u4ee3\u7801 DATA lt_jstat TYPE STANDARD TABLE OF jstat WITH EMPTY KEY . CLEAR lt_jstat . CALL FUNCTION 'STATUS_READ' EXPORTING objnr = i_objnr TABLES status = lt_jstat EXCEPTIONS object_not_found = 1 OTHERS = 2 . IF sy - subrc = 0 . * Implement suitable error handling here LOOP AT lt_jstat REFERENCE INTO DATA ( lr_jstat ). CASE lr_jstat -> stat . WHEN 'I0002' . \" REL lr_jstat -> inact = '' . WHEN 'I0045' . \" TECO lr_jstat -> inact = 'X' . WHEN OTHERS . ENDCASE . ENDLOOP . CALL FUNCTION 'STATUS_CHANGE_INTERN' EXPORTING objnr = i_objnr TABLES status = lt_jstat EXCEPTIONS object_not_found = 1 status_inconsistent = 2 status_not_allowed = 3 OTHERS = 4 . IF sy - subrc <> 0 . * Implement suitable error handling here ENDIF . ENDIF .","title":"\u64a4\u9500TECO"},{"location":"pp/pp_order_close/#tecobdc","text":"\u793a\u4f8b\u4ee3\u7801 FORM frm_bdc_status_change USING i_aufnr TYPE aufk - aufnr i_teco TYPE xflag CHANGING c_subrc TYPE sy - subrc . DATA lt_bdcdata TYPE STANDARD TABLE OF bdcdata WITH EMPTY KEY . DEFINE _bdc_dynpro . append value # ( program = &1 dynpro = &2 dynbegin = 'X' ) to lt_bdcdata . END-OF-DEFINITION . DEFINE _bdc_field . append value # ( fnam = &1 fval = &2 ) to lt_bdcdata . END-OF-DEFINITION . \" CO02\u9996\u9875\uff0c\u9009\u62e9\u603b\u89c8\uff0c\u8f93\u5165\u8ba2\u5355\u53f7\uff0cENTER\u8fdb\u5165 _bdc_dynpro 'SAPLCOKO1' '0110' . _bdc_field : 'BDC_OKCODE' '/00' , 'R62CLORD-FLG_OVIEW' 'X' , 'CAUFVD-AUFNR' i_aufnr . \" =TABS: TECO \u6280\u672f\u6027\u5173\u95ed \" =TABR: undo TECO \u53d6\u6d88\u6280\u672f\u6027\u5173\u95ed _bdc_dynpro 'SAPLCOKO1' '0115' . IF i_teco = 'X' . _bdc_field 'BDC_OKCODE' '=TABS' . ELSE . _bdc_field 'BDC_OKCODE' '=TABR' . ENDIF . \" \u4fdd\u5b58 _bdc_dynpro 'SAPLCOKO1' '0115' . _bdc_field 'BDC_OKCODE' '=BU' . \" \u4fdd\u5b58\u65f6\u5f39\u7a97\u9009\u62e9\u201c\u662f\u201d _bdc_dynpro 'SAPLSPO1' '0300' . _bdc_field 'BDC_OKCODE' '=YES' . DATA ls_option TYPE ctu_params . ls_option - dismode = 'N' . \" \u540e\u53f0 ls_option - updmode = 'L' . \" \u672c\u5730 ls_option - nobinpt = 'X' . \" \u6709\u5f39\u7a97\uff0c\u9700\u8981\u542f\u7528\u8fd9\u4e2a\u6807\u8bc6 DATA lt_message TYPE STANDARD TABLE OF bdcmsgcoll WITH EMPTY KEY . CALL TRANSACTION 'CO02' USING lt_bdcdata OPTIONS FROM ls_option MESSAGES INTO lt_message . \" \u4e0d\u7ba1\u5982\u4f55\uff0cBDC\u90fd\u56de\u6eda\u4e0d\u4e86\uff0c\u76f4\u63a5\u63d0\u4ea4\u4e86\u4e8b COMMIT WORK AND WAIT . ENDFORM . \" frm_bdc_status_change","title":"\u64a4\u9500TECO\uff08BDC\u5b9e\u73b0\uff09"},{"location":"pp/pp_planning/","text":"\u751f\u4ea7\u8ba1\u5212 \u00b6","title":"\u751f\u4ea7\u8ba1\u5212"},{"location":"pp/pp_planning/#_1","text":"","title":"\u751f\u4ea7\u8ba1\u5212"},{"location":"pp/pp_routing/","text":"\u5de5\u827a\u8def\u7ebf \u00b6 \u793a\u4f8b\u4ee3\u7801 *----------------------------------------------------------------------* ***INCLUDE LZGRP_PP_021D01. *----------------------------------------------------------------------* *&---------------------------------------------------------------------* *& Class lcl_bapi_proxy *&---------------------------------------------------------------------* * Text *----------------------------------------------------------------------* CLASS lcl_routing_create_proxy DEFINITION . PUBLIC SECTION . METHODS : \"! \u521d\u59cb\u5316\u53c2\u6570 init , \"! \u6309\u63a5\u53e3\u53c2\u6570\u7c7b\u578b\u586b\u5145\u6570\u636e \"! @parameter head | \"! @parameter items | fill_data_by_type1 IMPORTING head TYPE zspp_0029_head items TYPE zttpp_0029_item , \"! \u6d4b\u8bd5\u8fd0\u884c \"! @parameter result | testrun RETURNING VALUE ( result ) TYPE xflag , \"! \u521b\u5efa\u5de5\u827a\u8def\u7ebf execute , \"! \u83b7\u53d6\u68c0\u67e5/\u521b\u5efa/\u5176\u4ed6\u5904\u7406\u6d88\u606f \"! @parameter type | \"! @parameter message | get_message EXPORTING type TYPE bapi_mtype message TYPE bapi_msg , \"! \u4f7f\u7528BAPI_ROUTING_EXISTENCE_CHECK\u68c0\u67e5\u5de5\u827a\u8def\u7ebf\u662f\u5426\u5b58\u5728 \"! @parameter group | \"! @parameter groupcounter | \"! @parameter validfrom | \"! @parameter validtodate | \"! @parameter result | check_exists IMPORTING group TYPE bapi1012_tsk_c - task_list_group groupcounter TYPE bapi1012_tsk_c - group_counter validfrom TYPE bapi1012_tsk_c - valid_from validtodate TYPE bapi1012_tsk_c - valid_to_date OPTIONAL RETURNING VALUE ( result ) TYPE xflag , \"! \u6839\u636e\u5de5\u5382/\u7269\u6599/\u4ea7\u7ebf\u68c0\u67e5\u5de5\u827a\u8def\u7ebf\u662f\u5426\u5b58\u5728 \"! @parameter werks | \"! @parameter matnr | \"! @parameter plnnr_alt | \"! @parameter result | check_exist_by_mapl IMPORTING werks TYPE werks_d matnr TYPE matnr plnnr_alt TYPE cp_plnnr_a RETURNING VALUE ( result ) TYPE xflag , \"! \u91cd\u590d\u7269\u6599\u4e0e\u5de5\u5382\u7684\u5de5\u827a\u8def\u7ebf\u4e0b\u6700\u65b0\u7684\u8ba1\u6570 \"! @parameter matnr | \"! @parameter werks | \"! @parameter countor | next_counter IMPORTING werks TYPE werks_d matnr TYPE matnr EXPORTING group TYPE bapi1012_tsk_c - task_list_group counter TYPE bapi1012_tsk_c - group_counter . PRIVATE SECTION . DATA ms_group TYPE bapi1012_tsk_c . DATA mt_task TYPE STANDARD TABLE OF bapi1012_tsk_c WITH EMPTY KEY . DATA mt_mat_task TYPE STANDARD TABLE OF bapi1012_mtk_c WITH EMPTY KEY . DATA mt_operation TYPE STANDARD TABLE OF bapi1012_opr_c WITH EMPTY KEY . DATA mt_return TYPE STANDARD TABLE OF bapiret2 WITH EMPTY KEY . ENDCLASS . \"lcl_bapi_proxy *&---------------------------------------------------------------------* *& Class lcl_bapi_proxy *&---------------------------------------------------------------------* CLASS lcl_routing_create_proxy IMPLEMENTATION . \" \u6d4b\u8bd5\u8fd0\u884c METHOD testrun . DATA l_testrun TYPE bapiflag . l_testrun - bapiflag = 'X' . CALL FUNCTION 'BAPI_ROUTING_CREATE' EXPORTING testrun = l_testrun IMPORTING group = ms_group - task_list_group groupcounter = ms_group - group_counter TABLES task = mt_task materialtaskallocation = mt_mat_task operation = mt_operation return = mt_return . READ TABLE mt_return TRANSPORTING NO FIELDS WITH KEY type = 'E' . IF sy - subrc = 0 . CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK' . RETURN . ENDIF . result = 'X' . ENDMETHOD . \" \u8fd0\u884c METHOD execute . \" \u521b\u5efa\u5de5\u827a\u8def\u7ebf CLEAR mt_return . CALL FUNCTION 'BAPI_ROUTING_CREATE' IMPORTING group = ms_group - task_list_group groupcounter = ms_group - group_counter TABLES task = mt_task materialtaskallocation = mt_mat_task operation = mt_operation return = mt_return . READ TABLE mt_return TRANSPORTING NO FIELDS WITH KEY type = 'E' . IF sy - subrc = 0 . CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK' . RETURN . ENDIF . CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = 'X' . ENDMETHOD . \" \u83b7\u53d6\u6d88\u606f METHOD get_message . READ TABLE mt_return TRANSPORTING NO FIELDS WITH KEY type = 'E' . IF sy - subrc = 0 . type = 'E' . LOOP AT mt_return REFERENCE INTO DATA ( lr_return ). MESSAGE ID lr_return -> id TYPE lr_return -> type NUMBER lr_return -> number WITH lr_return -> message_v1 lr_return -> message_v2 lr_return -> message_v3 lr_return -> message_v4 INTO DATA ( l_message ). message = |{ message }{ l_message } ; |. ENDLOOP . ELSE . type = 'S' . message = | \u5de5\u827a\u8def\u7ebf\u88ab\u4fdd\u5b58\u4e8e\u7ec4 { ms_group - task_list_group }|. ENDIF . ENDMETHOD . \" \u6839\u636e\u63a5\u53e3\u53c2\u6570\u586b\u5145\u6570\u636e METHOD fill_data_by_type1 . \" \u62ac\u5934 APPEND INITIAL LINE TO mt_task REFERENCE INTO DATA ( lr_task ). lr_task -> plant = head - werks . \" \u5de5\u5382 \" \u5bf9\u4e8e\u91cd\u590d\u7269\u6599\u548c\u5de5\u5382\uff0c\u4e0d\u662f\u65b0\u5efa\u4e00\u6761\u5de5\u827a\u8def\u7ebf\uff0c\u800c\u662f\u5728\u539f\u6709\u7ec4\u4e0b\u65b0\u589e\u8ba1\u6570 next_counter ( EXPORTING matnr = head - matnr werks = head - werks IMPORTING group = lr_task -> task_list_group counter = lr_task -> group_counter ). lr_task -> old_number_of_task_list = head - plnnr_alt . \" \u4ea7\u7ebf lr_task -> description = head - ktext . \" \u5de5\u827a\u8def\u7ebf\u63cf\u8ff0 lr_task -> task_list_usage = '1' . \" \u7528\u9014\uff0c\u9ed8\u8ba4\u503c lr_task -> task_list_status = '4' . \" \u72b6\u6001\uff0c\u9ed8\u8ba4\u503c lr_task -> task_measure_unit = 'PCS' . lr_task -> task_measure_unit_iso = 'PCS' . lr_task -> lot_size_from = head - losvn . \" \u6279\u91cf\u4e0b\u9650 lr_task -> lot_size_to = head - losbs . \" \u6279\u91cf\u4e0a\u9650 lr_task -> valid_from = head - datuv . \" \u6709\u6548\u8d77\u59cb\u65e5\u671f lr_task -> valid_to_date = '99991231' . \" \u6709\u6548\u7ed3\u675f\u65e5\u671f \" \u7269\u6599\u6307\u6d3e APPEND INITIAL LINE TO mt_mat_task REFERENCE INTO DATA ( lr_mat_task ). lr_mat_task -> material = head - matnr . \" \u6210\u54c1\u7f16\u7801 lr_mat_task -> plant = head - werks . \" \u5de5\u5382 lr_mat_task -> valid_from = head - datuv . \" \u6709\u6548\u8d77\u59cb\u65e5\u671f lr_mat_task -> valid_to_date = '99991231' . \" \u6709\u6548\u7ed3\u675f\u65e5\u671f \" \u5de5\u5e8f LOOP AT items REFERENCE INTO DATA ( lr_item ). APPEND INITIAL LINE TO mt_operation REFERENCE INTO DATA ( lr_operation ). lr_operation -> activity = lr_item -> vornr . \" \u5de5\u5e8f\u7f16\u53f7 lr_operation -> description = lr_item -> ltxa1 . \" \u5de5\u5e8f\u77ed\u6587\u672c lr_operation -> standard_text_key = lr_item -> vlsch . \" \u6807\u51c6\u6587\u672c\u7801 lr_operation -> plant = head - werks . lr_operation -> work_cntr = lr_item -> arbpl . \" \u5de5\u4f5c\u4e2d\u5fc3 lr_operation -> control_key = lr_item -> steus . \" \u63a7\u5236\u7801 lr_operation -> base_quantity = lr_item -> bmsch . \" \u5de5\u5e8f\u57fa\u672c\u6570\u91cf lr_operation -> valid_from = head - datuv . \" \u6709\u6548\u8d77\u59cb\u65e5\u671f lr_operation -> valid_to_date = '99991231' . \" \u6709\u6548\u7ed3\u675f\u65e5\u671f lr_operation -> denominator = '1' . lr_operation -> nominator = '1' . \" \u8ba1\u91cf\u5355\u4f4d lr_operation -> operation_measure_unit = lr_item -> meinh . CALL FUNCTION 'CONVERSION_EXIT_CUNIT_INPUT' EXPORTING input = lr_operation -> operation_measure_unit IMPORTING output = lr_operation -> operation_measure_unit . \" \u8ba1\u91cf\u5355\u4f4d lr_operation -> operation_measure_unit_iso = lr_item -> meinh . CALL FUNCTION 'CONVERSION_EXIT_CUNIT_INPUT' EXPORTING input = lr_operation -> operation_measure_unit_iso IMPORTING output = lr_operation -> operation_measure_unit_iso . lr_operation -> no_of_employee = lr_item -> anzma . \" \u96c7\u5458\u6570\u91cf lr_operation -> valid_from = head - datuv . \" \u6709\u6548\u8d77\u59cb\u65e5\u671f lr_operation -> valid_to_date = '99991231' . \" \u6709\u6548\u7ed3\u675f\u65e5\u671f \" \u91cd\u590d\u4ee3\u7801 DEFINE _set_acti . lr_operation -> std_unit_0 &1 = lr_item -> vge0 &1 . lr_operation -> std_unit_0 &1 _iso = lr_item -> vge0 &1 . lr_operation -> std_value_0 &1 = lr_item -> vgw0 &1 . END-OF-DEFINITION . _set_acti 1 . \" \u6298\u65e7\u644a\u9500 _set_acti 2 . \" \u76f4\u63a5\u4eba\u5de5 _set_acti 3 . \" \u95f4\u63a5\u4eba\u5de5 _set_acti 4 . \" \u52a8\u529b\u8d39 _set_acti 5 . \" \u751f\u4ea7\u8017\u6750 _set_acti 6 . \" \u7ef4\u4fee\u4fdd\u517b ENDLOOP . ENDMETHOD . \" \u521d\u59cb\u5316\u53c2\u6570 METHOD init . CLEAR ms_group . CLEAR mt_task . CLEAR mt_mat_task . CLEAR mt_operation . CLEAR mt_return . ENDMETHOD . \" \u68c0\u67e5\u5de5\u5e8f\u662f\u5426\u5df2\u7ecf\u5b58\u5728 METHOD check_exists . DATA lt_return TYPE STANDARD TABLE OF bapiret2 . CALL FUNCTION 'BAPI_ROUTING_EXISTENCE_CHECK' EXPORTING group = group groupcounter = groupcounter validfrom = validfrom validtodate = validtodate TABLES return = lt_return . READ TABLE lt_return TRANSPORTING NO FIELDS WITH KEY type = 'E' . IF sy - subrc = 0 . result = 'X' . ENDIF . ENDMETHOD . \" \u68c0\u67e5\u5de5\u827a\u8def\u7ebf\u662f\u5426\u5b58\u5728 METHOD check_exist_by_mapl . DATA l_plnnr_alt TYPE plko - plnnr_alt . SELECT SINGLE plnnr_alt INTO @ l_plnnr_alt FROM mapl LEFT JOIN plko ON plko~plnty = mapl~plnty AND plko~plnnr = mapl~plnnr AND plko~plnal = mapl~plnal AND plko~zaehl = mapl~zaehl WHERE mapl~werks = @ werks AND mapl~matnr = @ matnr AND plko~plnnr_alt = @ plnnr_alt . IF sy - subrc = 0 . result = 'X' . ENDIF . ENDMETHOD . \" \u91cd\u590d\u7269\u6599\u4e0e\u5de5\u5382\u4e0b\u6700\u65b0\u7684\u8ba1\u6570 METHOD next_counter . SELECT SINGLE plnnr INTO @ group FROM mapl WHERE matnr = @ matnr AND werks = @ werks AND plnty = 'N' . IF sy - subrc = 0 . SELECT SINGLE MAX ( plnal ) INTO @ counter FROM plko WHERE plko~plnty = 'N' AND plko~plnnr = @ group . counter = counter + 1 . ENDIF . ENDMETHOD . ENDCLASS . *&---------------------------------------------------------------------* *& Class lcl_routing_change_proxy *&---------------------------------------------------------------------* CLASS lcl_routing_change_proxy DEFINITION . PUBLIC SECTION . METHODS : init , fill_data_by_type1 IMPORTING head TYPE zspp_0029_head items TYPE zttpp_0029_item , execute , get_message EXPORTING type TYPE bapi_mtype message TYPE bapi_msg . PRIVATE SECTION . DATA ms_maint_hdr TYPE cps_task_list_maint_hdr . DATA ms_task TYPE cps_task_list_maint_tsk . DATA ms_taskx TYPE cps_task_list_maint_tsk_x . DATA mt_mat_task TYPE STANDARD TABLE OF cps_task_list_maint_mtk . DATA mt_mat_taskx TYPE STANDARD TABLE OF cps_task_list_maint_mtk_x . DATA mt_operation TYPE STANDARD TABLE OF cps_task_list_maint_opr . DATA mt_operationx TYPE STANDARD TABLE OF cps_task_list_maint_opr_x . DATA mt_return TYPE bapiret2_t . ENDCLASS . \"lcl_bapi_proxy *&---------------------------------------------------------------------* *& Class lcl_routing_change_proxy *&---------------------------------------------------------------------* CLASS lcl_routing_change_proxy IMPLEMENTATION . \" \u8fd0\u884c METHOD execute . \" \u4fee\u6539\u5de5\u827a\u8def\u7ebf CALL FUNCTION 'CPCC_S_TASK_LIST_MAINTAIN' EXPORTING change_no = ms_maint_hdr - change_no key_date = ms_maint_hdr - key_date task_list_type = ms_maint_hdr - task_list_type task_list_group = ms_maint_hdr - task_list_group group_counter = ms_maint_hdr - group_counter material = ms_maint_hdr - material plant = ms_maint_hdr - plant task_maintain_mode = 'M' task = ms_task task_x = ms_taskx TABLES operations = mt_operation operations_x = mt_operationx return = mt_return . READ TABLE mt_return TRANSPORTING NO FIELDS WITH KEY type = 'E' . IF sy - subrc = 0 . CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK' . RETURN . ENDIF . CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = 'X' . ENDMETHOD . \" \u83b7\u53d6\u6d88\u606f METHOD get_message . READ TABLE mt_return TRANSPORTING NO FIELDS WITH KEY type = 'E' . IF sy - subrc = 0 . type = 'E' . LOOP AT mt_return REFERENCE INTO DATA ( lr_return ). MESSAGE ID lr_return -> id TYPE lr_return -> type NUMBER lr_return -> number WITH lr_return -> message_v1 lr_return -> message_v2 lr_return -> message_v3 lr_return -> message_v4 INTO DATA ( l_message ). message = |{ message }{ l_message } ; |. ENDLOOP . ELSE . type = 'S' . message = '\u4fee\u6539\u5de5\u827a\u8def\u7ebf\u6210\u529f' . ENDIF . ENDMETHOD . \" \u6839\u636e\u63a5\u53e3\u53c2\u6570\u586b\u5145\u6570\u636e METHOD fill_data_by_type1 . \" \u7528\u4e8e\u67e5\u8be2\u5de5\u827a\u8def\u7ebf\uff0c\u4ee5\u786e\u5b9a\u5de5\u827a\u8def\u7ebf\u884c\u9879\u76ee\u662f\u4fee\u6539\u8fd8\u662f\u65b0\u589e DATA lt_query_input TYPE zttpp_0027_input . DATA lt_query_output TYPE zttpp_0027_output . APPEND VALUE # ( zsqlx = '\u4fee\u6539' werks = head - werks matnr = head - matnr plnnr_alt = head - plnnr_alt ) TO lt_query_input . \" \u5de5\u827a\u8def\u7ebf\u67e5\u8be2 CALL FUNCTION 'ZPP_OA_ROUTING_QUERY_ESB' EXPORTING it_input = lt_query_input IMPORTING et_output = lt_query_output . SORT lt_query_output BY vornr . \" \u62ac\u5934 ms_maint_hdr - key_date = sy - datum . ms_maint_hdr - task_list_type = 'N' . ms_maint_hdr - task_list_group = head - plnnr . \" \u5de5\u827a\u8def\u7ebf\u7ec4 ms_maint_hdr - group_counter = head - plnal . \" \u7ec4\u8ba1\u6570\u5668 ms_maint_hdr - material = head - matnr . \" \u7269\u6599 ms_maint_hdr - plant = head - werks . \" \u5de5\u5382 DEFINE _set_task_field . ms_task - &1 = &2 . ms_taskx - &1 = 'X' . END-OF-DEFINITION . _set_task_field plant head - werks . \" \u5de5\u5382 _set_task_field old_number_of_task_list head - plnnr_alt . \" \u4ea7\u7ebf _set_task_field description head - ktext . \" \u5de5\u827a\u8def\u7ebf\u63cf\u8ff0 _set_task_field task_list_usage '1' . \" \u7528\u9014\uff0c\u9ed8\u8ba4\u503c _set_task_field task_list_status '4' . \" \u72b6\u6001\uff0c\u9ed8\u8ba4\u503c _set_task_field lot_size_from head - losvn . \" \u6279\u91cf\u4e0b\u9650 _set_task_field lot_size_to head - losbs . \" \u4ea7\u7ebf\u6279\u91cf\u4e0a\u9650 _set_task_field task_measure_unit 'PCS' . \" \u5355\u4f4d LOOP AT items REFERENCE INTO DATA ( lr_item ). \" \u5de5\u5e8f APPEND INITIAL LINE TO mt_operation REFERENCE INTO DATA ( lr_operation ). APPEND INITIAL LINE TO mt_operationx REFERENCE INTO DATA ( lr_operationx ). \" \u68c0\u67e5\u5de5\u5e8f\u662f\u5426\u5b58\u5728\uff0c\u5b58\u5728\u4fee\u6539\uff0c\u4e0d\u5b58\u5728\u65b0\u589e READ TABLE lt_query_output REFERENCE INTO DATA ( lr_query_output ) WITH KEY vornr = lr_item -> vornr BINARY SEARCH . IF sy - subrc = 0 . lr_operation -> maintain_mode = 'M' . ELSE . lr_operation -> maintain_mode = 'C' . ENDIF . \" \u5de5\u5e8f\u7f16\u53f7 lr_operation -> activity = lr_item -> vornr . lr_operationx -> activity = 'X' . lr_operation -> activity_old = lr_item -> vornr . lr_operation -> flag_bar_pointer = '1' . DEFINE _set_operation_filed . lr_operation -> &1 = &2 . lr_operationx -> &1 = 'X' . END-OF-DEFINITION . _set_operation_filed plant head - werks . \" \u5de5\u5382 _set_operation_filed description lr_item -> ltxa1 . \" \u5de5\u5e8f\u77ed\u6587\u672c _set_operation_filed standard_text_key lr_item -> vlsch . \" \u6807\u51c6\u6587\u672c\u7801 _set_operation_filed work_cntr lr_item -> arbpl . \" \u5de5\u4f5c\u4e2d\u5fc3 _set_operation_filed control_key lr_item -> steus . \" \u63a7\u5236\u7801 _set_operation_filed base_quantity lr_item -> bmsch . \" \u5de5\u5e8f\u57fa\u672c\u6570\u91cf _set_operation_filed operation_measure_unit lr_item -> meinh . \" \u8ba1\u91cf\u5355\u4f4d _set_operation_filed no_of_employee lr_item -> anzma . \" \u96c7\u5458\u6570\u91cf _set_operation_filed denominator '1' . _set_operation_filed nominator '1' . \" \u91cd\u590d\u4ee3\u7801 DEFINE _set_acti . _set_operation_filed std_unit_0 &1 lr_item -> vge0 &1 . * _set_operation_filed std_unit_0&1_iso lr_item->vge0&1. _set_operation_filed std_value_0 &1 lr_item -> vgw0 &1 . END-OF-DEFINITION . _set_acti 1 . \" \u6298\u65e7\u644a\u9500 _set_acti 2 . \" \u76f4\u63a5\u4eba\u5de5 _set_acti 3 . \" \u95f4\u63a5\u4eba\u5de5 _set_acti 4 . \" \u52a8\u529b\u8d39 _set_acti 5 . \" \u751f\u4ea7\u8017\u6750 _set_acti 6 . \" \u7ef4\u4fee\u4fdd\u517b ENDLOOP . ENDMETHOD . \" \u521d\u59cb\u5316\u53c2\u6570 METHOD init . CLEAR ms_maint_hdr . CLEAR ms_task . CLEAR ms_taskx . CLEAR mt_mat_task . CLEAR mt_mat_taskx . CLEAR mt_operation . CLEAR mt_operationx . CLEAR mt_return . ENDMETHOD . ENDCLASS .","title":"\u5de5\u827a\u8def\u7ebf"},{"location":"pp/pp_routing/#_1","text":"\u793a\u4f8b\u4ee3\u7801 *----------------------------------------------------------------------* ***INCLUDE LZGRP_PP_021D01. *----------------------------------------------------------------------* *&---------------------------------------------------------------------* *& Class lcl_bapi_proxy *&---------------------------------------------------------------------* * Text *----------------------------------------------------------------------* CLASS lcl_routing_create_proxy DEFINITION . PUBLIC SECTION . METHODS : \"! \u521d\u59cb\u5316\u53c2\u6570 init , \"! \u6309\u63a5\u53e3\u53c2\u6570\u7c7b\u578b\u586b\u5145\u6570\u636e \"! @parameter head | \"! @parameter items | fill_data_by_type1 IMPORTING head TYPE zspp_0029_head items TYPE zttpp_0029_item , \"! \u6d4b\u8bd5\u8fd0\u884c \"! @parameter result | testrun RETURNING VALUE ( result ) TYPE xflag , \"! \u521b\u5efa\u5de5\u827a\u8def\u7ebf execute , \"! \u83b7\u53d6\u68c0\u67e5/\u521b\u5efa/\u5176\u4ed6\u5904\u7406\u6d88\u606f \"! @parameter type | \"! @parameter message | get_message EXPORTING type TYPE bapi_mtype message TYPE bapi_msg , \"! \u4f7f\u7528BAPI_ROUTING_EXISTENCE_CHECK\u68c0\u67e5\u5de5\u827a\u8def\u7ebf\u662f\u5426\u5b58\u5728 \"! @parameter group | \"! @parameter groupcounter | \"! @parameter validfrom | \"! @parameter validtodate | \"! @parameter result | check_exists IMPORTING group TYPE bapi1012_tsk_c - task_list_group groupcounter TYPE bapi1012_tsk_c - group_counter validfrom TYPE bapi1012_tsk_c - valid_from validtodate TYPE bapi1012_tsk_c - valid_to_date OPTIONAL RETURNING VALUE ( result ) TYPE xflag , \"! \u6839\u636e\u5de5\u5382/\u7269\u6599/\u4ea7\u7ebf\u68c0\u67e5\u5de5\u827a\u8def\u7ebf\u662f\u5426\u5b58\u5728 \"! @parameter werks | \"! @parameter matnr | \"! @parameter plnnr_alt | \"! @parameter result | check_exist_by_mapl IMPORTING werks TYPE werks_d matnr TYPE matnr plnnr_alt TYPE cp_plnnr_a RETURNING VALUE ( result ) TYPE xflag , \"! \u91cd\u590d\u7269\u6599\u4e0e\u5de5\u5382\u7684\u5de5\u827a\u8def\u7ebf\u4e0b\u6700\u65b0\u7684\u8ba1\u6570 \"! @parameter matnr | \"! @parameter werks | \"! @parameter countor | next_counter IMPORTING werks TYPE werks_d matnr TYPE matnr EXPORTING group TYPE bapi1012_tsk_c - task_list_group counter TYPE bapi1012_tsk_c - group_counter . PRIVATE SECTION . DATA ms_group TYPE bapi1012_tsk_c . DATA mt_task TYPE STANDARD TABLE OF bapi1012_tsk_c WITH EMPTY KEY . DATA mt_mat_task TYPE STANDARD TABLE OF bapi1012_mtk_c WITH EMPTY KEY . DATA mt_operation TYPE STANDARD TABLE OF bapi1012_opr_c WITH EMPTY KEY . DATA mt_return TYPE STANDARD TABLE OF bapiret2 WITH EMPTY KEY . ENDCLASS . \"lcl_bapi_proxy *&---------------------------------------------------------------------* *& Class lcl_bapi_proxy *&---------------------------------------------------------------------* CLASS lcl_routing_create_proxy IMPLEMENTATION . \" \u6d4b\u8bd5\u8fd0\u884c METHOD testrun . DATA l_testrun TYPE bapiflag . l_testrun - bapiflag = 'X' . CALL FUNCTION 'BAPI_ROUTING_CREATE' EXPORTING testrun = l_testrun IMPORTING group = ms_group - task_list_group groupcounter = ms_group - group_counter TABLES task = mt_task materialtaskallocation = mt_mat_task operation = mt_operation return = mt_return . READ TABLE mt_return TRANSPORTING NO FIELDS WITH KEY type = 'E' . IF sy - subrc = 0 . CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK' . RETURN . ENDIF . result = 'X' . ENDMETHOD . \" \u8fd0\u884c METHOD execute . \" \u521b\u5efa\u5de5\u827a\u8def\u7ebf CLEAR mt_return . CALL FUNCTION 'BAPI_ROUTING_CREATE' IMPORTING group = ms_group - task_list_group groupcounter = ms_group - group_counter TABLES task = mt_task materialtaskallocation = mt_mat_task operation = mt_operation return = mt_return . READ TABLE mt_return TRANSPORTING NO FIELDS WITH KEY type = 'E' . IF sy - subrc = 0 . CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK' . RETURN . ENDIF . CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = 'X' . ENDMETHOD . \" \u83b7\u53d6\u6d88\u606f METHOD get_message . READ TABLE mt_return TRANSPORTING NO FIELDS WITH KEY type = 'E' . IF sy - subrc = 0 . type = 'E' . LOOP AT mt_return REFERENCE INTO DATA ( lr_return ). MESSAGE ID lr_return -> id TYPE lr_return -> type NUMBER lr_return -> number WITH lr_return -> message_v1 lr_return -> message_v2 lr_return -> message_v3 lr_return -> message_v4 INTO DATA ( l_message ). message = |{ message }{ l_message } ; |. ENDLOOP . ELSE . type = 'S' . message = | \u5de5\u827a\u8def\u7ebf\u88ab\u4fdd\u5b58\u4e8e\u7ec4 { ms_group - task_list_group }|. ENDIF . ENDMETHOD . \" \u6839\u636e\u63a5\u53e3\u53c2\u6570\u586b\u5145\u6570\u636e METHOD fill_data_by_type1 . \" \u62ac\u5934 APPEND INITIAL LINE TO mt_task REFERENCE INTO DATA ( lr_task ). lr_task -> plant = head - werks . \" \u5de5\u5382 \" \u5bf9\u4e8e\u91cd\u590d\u7269\u6599\u548c\u5de5\u5382\uff0c\u4e0d\u662f\u65b0\u5efa\u4e00\u6761\u5de5\u827a\u8def\u7ebf\uff0c\u800c\u662f\u5728\u539f\u6709\u7ec4\u4e0b\u65b0\u589e\u8ba1\u6570 next_counter ( EXPORTING matnr = head - matnr werks = head - werks IMPORTING group = lr_task -> task_list_group counter = lr_task -> group_counter ). lr_task -> old_number_of_task_list = head - plnnr_alt . \" \u4ea7\u7ebf lr_task -> description = head - ktext . \" \u5de5\u827a\u8def\u7ebf\u63cf\u8ff0 lr_task -> task_list_usage = '1' . \" \u7528\u9014\uff0c\u9ed8\u8ba4\u503c lr_task -> task_list_status = '4' . \" \u72b6\u6001\uff0c\u9ed8\u8ba4\u503c lr_task -> task_measure_unit = 'PCS' . lr_task -> task_measure_unit_iso = 'PCS' . lr_task -> lot_size_from = head - losvn . \" \u6279\u91cf\u4e0b\u9650 lr_task -> lot_size_to = head - losbs . \" \u6279\u91cf\u4e0a\u9650 lr_task -> valid_from = head - datuv . \" \u6709\u6548\u8d77\u59cb\u65e5\u671f lr_task -> valid_to_date = '99991231' . \" \u6709\u6548\u7ed3\u675f\u65e5\u671f \" \u7269\u6599\u6307\u6d3e APPEND INITIAL LINE TO mt_mat_task REFERENCE INTO DATA ( lr_mat_task ). lr_mat_task -> material = head - matnr . \" \u6210\u54c1\u7f16\u7801 lr_mat_task -> plant = head - werks . \" \u5de5\u5382 lr_mat_task -> valid_from = head - datuv . \" \u6709\u6548\u8d77\u59cb\u65e5\u671f lr_mat_task -> valid_to_date = '99991231' . \" \u6709\u6548\u7ed3\u675f\u65e5\u671f \" \u5de5\u5e8f LOOP AT items REFERENCE INTO DATA ( lr_item ). APPEND INITIAL LINE TO mt_operation REFERENCE INTO DATA ( lr_operation ). lr_operation -> activity = lr_item -> vornr . \" \u5de5\u5e8f\u7f16\u53f7 lr_operation -> description = lr_item -> ltxa1 . \" \u5de5\u5e8f\u77ed\u6587\u672c lr_operation -> standard_text_key = lr_item -> vlsch . \" \u6807\u51c6\u6587\u672c\u7801 lr_operation -> plant = head - werks . lr_operation -> work_cntr = lr_item -> arbpl . \" \u5de5\u4f5c\u4e2d\u5fc3 lr_operation -> control_key = lr_item -> steus . \" \u63a7\u5236\u7801 lr_operation -> base_quantity = lr_item -> bmsch . \" \u5de5\u5e8f\u57fa\u672c\u6570\u91cf lr_operation -> valid_from = head - datuv . \" \u6709\u6548\u8d77\u59cb\u65e5\u671f lr_operation -> valid_to_date = '99991231' . \" \u6709\u6548\u7ed3\u675f\u65e5\u671f lr_operation -> denominator = '1' . lr_operation -> nominator = '1' . \" \u8ba1\u91cf\u5355\u4f4d lr_operation -> operation_measure_unit = lr_item -> meinh . CALL FUNCTION 'CONVERSION_EXIT_CUNIT_INPUT' EXPORTING input = lr_operation -> operation_measure_unit IMPORTING output = lr_operation -> operation_measure_unit . \" \u8ba1\u91cf\u5355\u4f4d lr_operation -> operation_measure_unit_iso = lr_item -> meinh . CALL FUNCTION 'CONVERSION_EXIT_CUNIT_INPUT' EXPORTING input = lr_operation -> operation_measure_unit_iso IMPORTING output = lr_operation -> operation_measure_unit_iso . lr_operation -> no_of_employee = lr_item -> anzma . \" \u96c7\u5458\u6570\u91cf lr_operation -> valid_from = head - datuv . \" \u6709\u6548\u8d77\u59cb\u65e5\u671f lr_operation -> valid_to_date = '99991231' . \" \u6709\u6548\u7ed3\u675f\u65e5\u671f \" \u91cd\u590d\u4ee3\u7801 DEFINE _set_acti . lr_operation -> std_unit_0 &1 = lr_item -> vge0 &1 . lr_operation -> std_unit_0 &1 _iso = lr_item -> vge0 &1 . lr_operation -> std_value_0 &1 = lr_item -> vgw0 &1 . END-OF-DEFINITION . _set_acti 1 . \" \u6298\u65e7\u644a\u9500 _set_acti 2 . \" \u76f4\u63a5\u4eba\u5de5 _set_acti 3 . \" \u95f4\u63a5\u4eba\u5de5 _set_acti 4 . \" \u52a8\u529b\u8d39 _set_acti 5 . \" \u751f\u4ea7\u8017\u6750 _set_acti 6 . \" \u7ef4\u4fee\u4fdd\u517b ENDLOOP . ENDMETHOD . \" \u521d\u59cb\u5316\u53c2\u6570 METHOD init . CLEAR ms_group . CLEAR mt_task . CLEAR mt_mat_task . CLEAR mt_operation . CLEAR mt_return . ENDMETHOD . \" \u68c0\u67e5\u5de5\u5e8f\u662f\u5426\u5df2\u7ecf\u5b58\u5728 METHOD check_exists . DATA lt_return TYPE STANDARD TABLE OF bapiret2 . CALL FUNCTION 'BAPI_ROUTING_EXISTENCE_CHECK' EXPORTING group = group groupcounter = groupcounter validfrom = validfrom validtodate = validtodate TABLES return = lt_return . READ TABLE lt_return TRANSPORTING NO FIELDS WITH KEY type = 'E' . IF sy - subrc = 0 . result = 'X' . ENDIF . ENDMETHOD . \" \u68c0\u67e5\u5de5\u827a\u8def\u7ebf\u662f\u5426\u5b58\u5728 METHOD check_exist_by_mapl . DATA l_plnnr_alt TYPE plko - plnnr_alt . SELECT SINGLE plnnr_alt INTO @ l_plnnr_alt FROM mapl LEFT JOIN plko ON plko~plnty = mapl~plnty AND plko~plnnr = mapl~plnnr AND plko~plnal = mapl~plnal AND plko~zaehl = mapl~zaehl WHERE mapl~werks = @ werks AND mapl~matnr = @ matnr AND plko~plnnr_alt = @ plnnr_alt . IF sy - subrc = 0 . result = 'X' . ENDIF . ENDMETHOD . \" \u91cd\u590d\u7269\u6599\u4e0e\u5de5\u5382\u4e0b\u6700\u65b0\u7684\u8ba1\u6570 METHOD next_counter . SELECT SINGLE plnnr INTO @ group FROM mapl WHERE matnr = @ matnr AND werks = @ werks AND plnty = 'N' . IF sy - subrc = 0 . SELECT SINGLE MAX ( plnal ) INTO @ counter FROM plko WHERE plko~plnty = 'N' AND plko~plnnr = @ group . counter = counter + 1 . ENDIF . ENDMETHOD . ENDCLASS . *&---------------------------------------------------------------------* *& Class lcl_routing_change_proxy *&---------------------------------------------------------------------* CLASS lcl_routing_change_proxy DEFINITION . PUBLIC SECTION . METHODS : init , fill_data_by_type1 IMPORTING head TYPE zspp_0029_head items TYPE zttpp_0029_item , execute , get_message EXPORTING type TYPE bapi_mtype message TYPE bapi_msg . PRIVATE SECTION . DATA ms_maint_hdr TYPE cps_task_list_maint_hdr . DATA ms_task TYPE cps_task_list_maint_tsk . DATA ms_taskx TYPE cps_task_list_maint_tsk_x . DATA mt_mat_task TYPE STANDARD TABLE OF cps_task_list_maint_mtk . DATA mt_mat_taskx TYPE STANDARD TABLE OF cps_task_list_maint_mtk_x . DATA mt_operation TYPE STANDARD TABLE OF cps_task_list_maint_opr . DATA mt_operationx TYPE STANDARD TABLE OF cps_task_list_maint_opr_x . DATA mt_return TYPE bapiret2_t . ENDCLASS . \"lcl_bapi_proxy *&---------------------------------------------------------------------* *& Class lcl_routing_change_proxy *&---------------------------------------------------------------------* CLASS lcl_routing_change_proxy IMPLEMENTATION . \" \u8fd0\u884c METHOD execute . \" \u4fee\u6539\u5de5\u827a\u8def\u7ebf CALL FUNCTION 'CPCC_S_TASK_LIST_MAINTAIN' EXPORTING change_no = ms_maint_hdr - change_no key_date = ms_maint_hdr - key_date task_list_type = ms_maint_hdr - task_list_type task_list_group = ms_maint_hdr - task_list_group group_counter = ms_maint_hdr - group_counter material = ms_maint_hdr - material plant = ms_maint_hdr - plant task_maintain_mode = 'M' task = ms_task task_x = ms_taskx TABLES operations = mt_operation operations_x = mt_operationx return = mt_return . READ TABLE mt_return TRANSPORTING NO FIELDS WITH KEY type = 'E' . IF sy - subrc = 0 . CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK' . RETURN . ENDIF . CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = 'X' . ENDMETHOD . \" \u83b7\u53d6\u6d88\u606f METHOD get_message . READ TABLE mt_return TRANSPORTING NO FIELDS WITH KEY type = 'E' . IF sy - subrc = 0 . type = 'E' . LOOP AT mt_return REFERENCE INTO DATA ( lr_return ). MESSAGE ID lr_return -> id TYPE lr_return -> type NUMBER lr_return -> number WITH lr_return -> message_v1 lr_return -> message_v2 lr_return -> message_v3 lr_return -> message_v4 INTO DATA ( l_message ). message = |{ message }{ l_message } ; |. ENDLOOP . ELSE . type = 'S' . message = '\u4fee\u6539\u5de5\u827a\u8def\u7ebf\u6210\u529f' . ENDIF . ENDMETHOD . \" \u6839\u636e\u63a5\u53e3\u53c2\u6570\u586b\u5145\u6570\u636e METHOD fill_data_by_type1 . \" \u7528\u4e8e\u67e5\u8be2\u5de5\u827a\u8def\u7ebf\uff0c\u4ee5\u786e\u5b9a\u5de5\u827a\u8def\u7ebf\u884c\u9879\u76ee\u662f\u4fee\u6539\u8fd8\u662f\u65b0\u589e DATA lt_query_input TYPE zttpp_0027_input . DATA lt_query_output TYPE zttpp_0027_output . APPEND VALUE # ( zsqlx = '\u4fee\u6539' werks = head - werks matnr = head - matnr plnnr_alt = head - plnnr_alt ) TO lt_query_input . \" \u5de5\u827a\u8def\u7ebf\u67e5\u8be2 CALL FUNCTION 'ZPP_OA_ROUTING_QUERY_ESB' EXPORTING it_input = lt_query_input IMPORTING et_output = lt_query_output . SORT lt_query_output BY vornr . \" \u62ac\u5934 ms_maint_hdr - key_date = sy - datum . ms_maint_hdr - task_list_type = 'N' . ms_maint_hdr - task_list_group = head - plnnr . \" \u5de5\u827a\u8def\u7ebf\u7ec4 ms_maint_hdr - group_counter = head - plnal . \" \u7ec4\u8ba1\u6570\u5668 ms_maint_hdr - material = head - matnr . \" \u7269\u6599 ms_maint_hdr - plant = head - werks . \" \u5de5\u5382 DEFINE _set_task_field . ms_task - &1 = &2 . ms_taskx - &1 = 'X' . END-OF-DEFINITION . _set_task_field plant head - werks . \" \u5de5\u5382 _set_task_field old_number_of_task_list head - plnnr_alt . \" \u4ea7\u7ebf _set_task_field description head - ktext . \" \u5de5\u827a\u8def\u7ebf\u63cf\u8ff0 _set_task_field task_list_usage '1' . \" \u7528\u9014\uff0c\u9ed8\u8ba4\u503c _set_task_field task_list_status '4' . \" \u72b6\u6001\uff0c\u9ed8\u8ba4\u503c _set_task_field lot_size_from head - losvn . \" \u6279\u91cf\u4e0b\u9650 _set_task_field lot_size_to head - losbs . \" \u4ea7\u7ebf\u6279\u91cf\u4e0a\u9650 _set_task_field task_measure_unit 'PCS' . \" \u5355\u4f4d LOOP AT items REFERENCE INTO DATA ( lr_item ). \" \u5de5\u5e8f APPEND INITIAL LINE TO mt_operation REFERENCE INTO DATA ( lr_operation ). APPEND INITIAL LINE TO mt_operationx REFERENCE INTO DATA ( lr_operationx ). \" \u68c0\u67e5\u5de5\u5e8f\u662f\u5426\u5b58\u5728\uff0c\u5b58\u5728\u4fee\u6539\uff0c\u4e0d\u5b58\u5728\u65b0\u589e READ TABLE lt_query_output REFERENCE INTO DATA ( lr_query_output ) WITH KEY vornr = lr_item -> vornr BINARY SEARCH . IF sy - subrc = 0 . lr_operation -> maintain_mode = 'M' . ELSE . lr_operation -> maintain_mode = 'C' . ENDIF . \" \u5de5\u5e8f\u7f16\u53f7 lr_operation -> activity = lr_item -> vornr . lr_operationx -> activity = 'X' . lr_operation -> activity_old = lr_item -> vornr . lr_operation -> flag_bar_pointer = '1' . DEFINE _set_operation_filed . lr_operation -> &1 = &2 . lr_operationx -> &1 = 'X' . END-OF-DEFINITION . _set_operation_filed plant head - werks . \" \u5de5\u5382 _set_operation_filed description lr_item -> ltxa1 . \" \u5de5\u5e8f\u77ed\u6587\u672c _set_operation_filed standard_text_key lr_item -> vlsch . \" \u6807\u51c6\u6587\u672c\u7801 _set_operation_filed work_cntr lr_item -> arbpl . \" \u5de5\u4f5c\u4e2d\u5fc3 _set_operation_filed control_key lr_item -> steus . \" \u63a7\u5236\u7801 _set_operation_filed base_quantity lr_item -> bmsch . \" \u5de5\u5e8f\u57fa\u672c\u6570\u91cf _set_operation_filed operation_measure_unit lr_item -> meinh . \" \u8ba1\u91cf\u5355\u4f4d _set_operation_filed no_of_employee lr_item -> anzma . \" \u96c7\u5458\u6570\u91cf _set_operation_filed denominator '1' . _set_operation_filed nominator '1' . \" \u91cd\u590d\u4ee3\u7801 DEFINE _set_acti . _set_operation_filed std_unit_0 &1 lr_item -> vge0 &1 . * _set_operation_filed std_unit_0&1_iso lr_item->vge0&1. _set_operation_filed std_value_0 &1 lr_item -> vgw0 &1 . END-OF-DEFINITION . _set_acti 1 . \" \u6298\u65e7\u644a\u9500 _set_acti 2 . \" \u76f4\u63a5\u4eba\u5de5 _set_acti 3 . \" \u95f4\u63a5\u4eba\u5de5 _set_acti 4 . \" \u52a8\u529b\u8d39 _set_acti 5 . \" \u751f\u4ea7\u8017\u6750 _set_acti 6 . \" \u7ef4\u4fee\u4fdd\u517b ENDLOOP . ENDMETHOD . \" \u521d\u59cb\u5316\u53c2\u6570 METHOD init . CLEAR ms_maint_hdr . CLEAR ms_task . CLEAR ms_taskx . CLEAR mt_mat_task . CLEAR mt_mat_taskx . CLEAR mt_operation . CLEAR mt_operationx . CLEAR mt_return . ENDMETHOD . ENDCLASS .","title":"\u5de5\u827a\u8def\u7ebf"},{"location":"pp/pp_version/","text":"\u751f\u4ea7\u62a5\u5de5 \u00b6","title":"\u751f\u4ea7\u7248\u672c"},{"location":"pp/pp_version/#_1","text":"","title":"\u751f\u4ea7\u62a5\u5de5"},{"location":"report/","text":"\u5e38\u7528\u62a5\u8868 \u00b6 \u62a5\u8868\u8981\u600e\u4e48\u5c55\u793a\uff0c\u5177\u4f53\u8fd8\u662f\u770b\u9879\u76ee\u5b9e\u9645\u9700\u6c42\uff0c\u6211\u8fd9\u8fb9\u53ea\u80fd\u7ed9\u51fa\u5927\u81f4\u601d\u8def\u3002 \u8d22\u52a1\u4e09\u5927\u62a5\u8868\u57fa\u672c\u53ef\u4ee5\u7167\u642c\uff0c\u4e00\u822c\u4e5f\u5c31\u914d\u7f6e\u7684\u79d1\u76ee\u7a0d\u6709\u5dee\u5f02","title":"\u62a5\u8868\u6982\u8ff0"},{"location":"report/#_1","text":"\u62a5\u8868\u8981\u600e\u4e48\u5c55\u793a\uff0c\u5177\u4f53\u8fd8\u662f\u770b\u9879\u76ee\u5b9e\u9645\u9700\u6c42\uff0c\u6211\u8fd9\u8fb9\u53ea\u80fd\u7ed9\u51fa\u5927\u81f4\u601d\u8def\u3002 \u8d22\u52a1\u4e09\u5927\u62a5\u8868\u57fa\u672c\u53ef\u4ee5\u7167\u642c\uff0c\u4e00\u822c\u4e5f\u5c31\u914d\u7f6e\u7684\u79d1\u76ee\u7a0d\u6709\u5dee\u5f02","title":"\u5e38\u7528\u62a5\u8868"},{"location":"report/stock/","text":"\u5e93\u5b58\u62a5\u8868 \u00b6 \u5efa\u8bae\u4f7f\u7528\u6807\u51c6\u62a5\u8868J3RFLVMOBVEDH\u4f5c\u4e3a\u53d6\u6570\u4f9d\u636e\uff0c\u57fa\u672c\u80fd\u6ee1\u8db3\u6b63\u5e38\u7684\u60c5\u51b5\uff0c\u518d\u8865\u5145\u4e00\u4e9b\u7279\u6b8a\u7684\u53d6\u503c\u903b\u8f91\uff0c\u4e00\u4e2a\u5e93\u5b58\u62a5\u8868\u5c31\u5b8c\u6210\u4e86\u3002 \u793a\u4f8b\u4ee3\u7801","title":"\u5e93\u5b58\u62a5\u8868"},{"location":"report/stock/#_1","text":"\u5efa\u8bae\u4f7f\u7528\u6807\u51c6\u62a5\u8868J3RFLVMOBVEDH\u4f5c\u4e3a\u53d6\u6570\u4f9d\u636e\uff0c\u57fa\u672c\u80fd\u6ee1\u8db3\u6b63\u5e38\u7684\u60c5\u51b5\uff0c\u518d\u8865\u5145\u4e00\u4e9b\u7279\u6b8a\u7684\u53d6\u503c\u903b\u8f91\uff0c\u4e00\u4e2a\u5e93\u5b58\u62a5\u8868\u5c31\u5b8c\u6210\u4e86\u3002 \u793a\u4f8b\u4ee3\u7801","title":"\u5e93\u5b58\u62a5\u8868"},{"location":"sd/","text":"SD\u6a21\u5757\u6982\u8ff0 \u00b6 \u6211\u7406\u89e3\u7684SD\uff08\uff09\uff0c\u9500\u552e\u548c\u5206\u9500\u6a21\u5757\uff0c\u5305\u62ec\u91c7\u8d2d\u6536\u8d27\uff0c\u9500\u552e\u5355\uff0c\u9500\u552e\u53d1\u8d27\uff0c\u6536\u8d27\u548c\u53d1\u8d27\u8fc7\u8d26\uff0cMIGO\u7b49\u3002","title":"SD\u6a21\u5757\u6982\u8ff0"},{"location":"sd/#sd","text":"\u6211\u7406\u89e3\u7684SD\uff08\uff09\uff0c\u9500\u552e\u548c\u5206\u9500\u6a21\u5757\uff0c\u5305\u62ec\u91c7\u8d2d\u6536\u8d27\uff0c\u9500\u552e\u5355\uff0c\u9500\u552e\u53d1\u8d27\uff0c\u6536\u8d27\u548c\u53d1\u8d27\u8fc7\u8d26\uff0cMIGO\u7b49\u3002","title":"SD\u6a21\u5757\u6982\u8ff0"},{"location":"sd/outbound_delivery/","text":"\u4ea4\u8d27\u5355 \u00b6","title":"\uff08\u5916\u5411\uff09\u4ea4\u8d27\u5355"},{"location":"sd/outbound_delivery/#_1","text":"","title":"\u4ea4\u8d27\u5355"},{"location":"sd/outbound_delivery_post/","text":"\u53d1\u8d27\u8fc7\u8d26 \u00b6 VL09N\u53d1\u8d27\u8fc7\u8d26 \u00b6 \u7531\u4e8e\u5168\u5c40\u53c2\u6570\u7f13\u5b58\u95ee\u9898\uff0c\u5efa\u8bae\u65b0\u5efa\u7a0b\u5e8f\u8fdb\u884c\u5904\u7406\u3002 \u793a\u4f8b\u4ee3\u7801 *&---------------------------------------------------------------------* *& Report Z_GTM_RPT_0095_VL_VL09 *&---------------------------------------------------------------------* *& *&---------------------------------------------------------------------* REPORT z_gtm_rpt_0095_vl_vl09 . PARAMETERS p_vbeln TYPE likp - vbeln . PARAMETERS p_mid TYPE char20 NO-DISPLAY . AT SELECTION-SCREEN . PERFORM frm_vl09 . *&---------------------------------------------------------------------* *& Form frm_vl09 *&---------------------------------------------------------------------* *& text *&---------------------------------------------------------------------* *& --> p1 text *& <-- p2 text *&---------------------------------------------------------------------* FORM frm_vl09 . DATA es_emkpf TYPE emkpf . DATA t_mesg TYPE STANDARD TABLE OF mesg . SELECT SINGLE wadat_ist , vbtyp FROM likp WHERE vbeln = @ p_vbeln INTO @ DATA ( ls_likp ). SET PARAMETER ID 'BAPI_TCODE' FIELD 'VL09' . \" \u8fd9BUG\u6709\u70b9\u96be\u53d7\uff0c\u5982\u679c\u8fde\u7eed\u51b2\u9500\u4ea4\u8d27\u5355\uff0c\u4f1a\u5bfc\u81f4\u7b2c\u4e8c\u6b21\u64cd\u4f5c\u5931\u8d25 \" \u56e0\u6b64\u901a\u8fc7\u5207\u6362\u7a0b\u5e8f\u6765\u91cd\u7f6e\u8fd9\u4e2a\u8fc7\u7a0b CALL FUNCTION 'WS_REVERSE_GOODS_ISSUE' EXPORTING i_vbeln = p_vbeln i_budat = sy - datum i_tcode = 'VL09' i_vbtyp = ls_likp - vbtyp IMPORTING es_emkpf = es_emkpf TABLES t_mesg = t_mesg EXCEPTIONS error_reverse_goods_issue = 1 OTHERS = 2 . IF sy - subrc <> 0 . * Implement suitable error handling here ENDIF . SET PARAMETER ID 'BAPI_TCODE' FIELD '' . IF es_emkpf - mblnr IS NOT INITIAL . CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = abap_true . ELSE . CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK' . ENDIF . \" \u8fd4\u56de\u6267\u884c\u7ed3\u679c IF p_mid IS NOT INITIAL . EXPORT es_emkpf = es_emkpf t_mesg = t_mesg TO MEMORY ID p_mid . ENDIF . ENDFORM .","title":"\u53d1\u8d27\u8fc7\u8d26"},{"location":"sd/outbound_delivery_post/#_1","text":"","title":"\u53d1\u8d27\u8fc7\u8d26"},{"location":"sd/outbound_delivery_post/#vl09n","text":"\u7531\u4e8e\u5168\u5c40\u53c2\u6570\u7f13\u5b58\u95ee\u9898\uff0c\u5efa\u8bae\u65b0\u5efa\u7a0b\u5e8f\u8fdb\u884c\u5904\u7406\u3002 \u793a\u4f8b\u4ee3\u7801 *&---------------------------------------------------------------------* *& Report Z_GTM_RPT_0095_VL_VL09 *&---------------------------------------------------------------------* *& *&---------------------------------------------------------------------* REPORT z_gtm_rpt_0095_vl_vl09 . PARAMETERS p_vbeln TYPE likp - vbeln . PARAMETERS p_mid TYPE char20 NO-DISPLAY . AT SELECTION-SCREEN . PERFORM frm_vl09 . *&---------------------------------------------------------------------* *& Form frm_vl09 *&---------------------------------------------------------------------* *& text *&---------------------------------------------------------------------* *& --> p1 text *& <-- p2 text *&---------------------------------------------------------------------* FORM frm_vl09 . DATA es_emkpf TYPE emkpf . DATA t_mesg TYPE STANDARD TABLE OF mesg . SELECT SINGLE wadat_ist , vbtyp FROM likp WHERE vbeln = @ p_vbeln INTO @ DATA ( ls_likp ). SET PARAMETER ID 'BAPI_TCODE' FIELD 'VL09' . \" \u8fd9BUG\u6709\u70b9\u96be\u53d7\uff0c\u5982\u679c\u8fde\u7eed\u51b2\u9500\u4ea4\u8d27\u5355\uff0c\u4f1a\u5bfc\u81f4\u7b2c\u4e8c\u6b21\u64cd\u4f5c\u5931\u8d25 \" \u56e0\u6b64\u901a\u8fc7\u5207\u6362\u7a0b\u5e8f\u6765\u91cd\u7f6e\u8fd9\u4e2a\u8fc7\u7a0b CALL FUNCTION 'WS_REVERSE_GOODS_ISSUE' EXPORTING i_vbeln = p_vbeln i_budat = sy - datum i_tcode = 'VL09' i_vbtyp = ls_likp - vbtyp IMPORTING es_emkpf = es_emkpf TABLES t_mesg = t_mesg EXCEPTIONS error_reverse_goods_issue = 1 OTHERS = 2 . IF sy - subrc <> 0 . * Implement suitable error handling here ENDIF . SET PARAMETER ID 'BAPI_TCODE' FIELD '' . IF es_emkpf - mblnr IS NOT INITIAL . CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = abap_true . ELSE . CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK' . ENDIF . \" \u8fd4\u56de\u6267\u884c\u7ed3\u679c IF p_mid IS NOT INITIAL . EXPORT es_emkpf = es_emkpf t_mesg = t_mesg TO MEMORY ID p_mid . ENDIF . ENDFORM .","title":"VL09N\u53d1\u8d27\u8fc7\u8d26"},{"location":"sd/sale_document/","text":"\u9500\u552e\u8ba2\u5355 \u00b6","title":"\u9500\u552e\u8ba2\u5355"},{"location":"sd/sale_document/#_1","text":"","title":"\u9500\u552e\u8ba2\u5355"}]}