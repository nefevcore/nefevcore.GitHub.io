{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ABAP\u5f00\u53d1\u6587\u6863 \u00b6 \u603b\u7ed3\u4e0b\u5f00\u53d1\u7ecf\u9a8c\uff0c\u6574\u7406\u7684\u65b9\u5411\u6709\u4e0b\u9762\u51e0\u70b9 \u5b8c\u6574\u5b9e\u65bd\u6d41\u7a0b \u6587\u6863\u4f1a\u6309\u7167ERP\u6807\u51c6\u5b9e\u65bd\u6d41\u7a0b\u6765\u6574\u7406\uff0c\u4ece\u5404\u7c7b\u4e3b\u6570\u636e\u5f55\u5165\uff0c\u5230\u4e1a\u52a1\u5b9e\u65bd\uff0c\u518d\u5230\u8d22\u52a1\u7ed3\u7b97\uff0c\u6700\u7ec8\u5b8c\u6210\u54c1\u4f1a\u662f\u4e00\u4efd\u5f00\u53d1\u5b9e\u65bd\u6307\u5bfc\u3002 \u793a\u4f8b\u4ee3\u7801\u4e0e\u5f02\u5e38\u60c5\u51b5\u5206\u6790 \u4e0d\u540c\u9879\u76ee\uff0c\u4e0d\u540c\u9700\u6c42\uff0c\u5c11\u6709\u5b8c\u5168\u4e00\u6837\u7684\u4ee3\u7801\u3002\u56e0\u6b64\u8be5\u6587\u6863\u53ea\u80fd\u63d0\u4f9b\u793a\u4f8b\u4ee3\u7801\u4f5c\u4e3a\u53c2\u8003\uff0c\u8f85\u4ee5\u5f02\u5e38\u60c5\u51b5\u5206\u6790\u8bf4\u660e\uff0c\u5f00\u53d1\u4eba\u5458\u5e94\u5f53\u7ed3\u5408\u5b9e\u9645\u60c5\u51b5\u8fdb\u884c\u8c03\u6574\u3002 \u6587\u6863\u6709\u8bef\u6216\u4e0d\u5b8c\u5584\uff0c\u6b22\u8fce\u53cd\u9988","title":"\u6982\u8ff0"},{"location":"#abap","text":"\u603b\u7ed3\u4e0b\u5f00\u53d1\u7ecf\u9a8c\uff0c\u6574\u7406\u7684\u65b9\u5411\u6709\u4e0b\u9762\u51e0\u70b9 \u5b8c\u6574\u5b9e\u65bd\u6d41\u7a0b \u6587\u6863\u4f1a\u6309\u7167ERP\u6807\u51c6\u5b9e\u65bd\u6d41\u7a0b\u6765\u6574\u7406\uff0c\u4ece\u5404\u7c7b\u4e3b\u6570\u636e\u5f55\u5165\uff0c\u5230\u4e1a\u52a1\u5b9e\u65bd\uff0c\u518d\u5230\u8d22\u52a1\u7ed3\u7b97\uff0c\u6700\u7ec8\u5b8c\u6210\u54c1\u4f1a\u662f\u4e00\u4efd\u5f00\u53d1\u5b9e\u65bd\u6307\u5bfc\u3002 \u793a\u4f8b\u4ee3\u7801\u4e0e\u5f02\u5e38\u60c5\u51b5\u5206\u6790 \u4e0d\u540c\u9879\u76ee\uff0c\u4e0d\u540c\u9700\u6c42\uff0c\u5c11\u6709\u5b8c\u5168\u4e00\u6837\u7684\u4ee3\u7801\u3002\u56e0\u6b64\u8be5\u6587\u6863\u53ea\u80fd\u63d0\u4f9b\u793a\u4f8b\u4ee3\u7801\u4f5c\u4e3a\u53c2\u8003\uff0c\u8f85\u4ee5\u5f02\u5e38\u60c5\u51b5\u5206\u6790\u8bf4\u660e\uff0c\u5f00\u53d1\u4eba\u5458\u5e94\u5f53\u7ed3\u5408\u5b9e\u9645\u60c5\u51b5\u8fdb\u884c\u8c03\u6574\u3002 \u6587\u6863\u6709\u8bef\u6216\u4e0d\u5b8c\u5584\uff0c\u6b22\u8fce\u53cd\u9988","title":"ABAP\u5f00\u53d1\u6587\u6863"},{"location":"fico/","text":"FICO\u6a21\u5757\u6982\u8ff0 \u00b6 \u8d22\u52a1\u7684\u5185\u5bb9\u5f88\u591a\uff0c\u5927\u90e8\u5206\u662f\u62a5\u8868\uff0c\u4e00\u65f6\u534a\u4f1a\u60f3\u4e0d\u8d77\u6765\uff0c\u9047\u5230\u518d\u8865\u5145","title":"FICO\u6a21\u5757\u6982\u8ff0"},{"location":"fico/#fico","text":"\u8d22\u52a1\u7684\u5185\u5bb9\u5f88\u591a\uff0c\u5927\u90e8\u5206\u662f\u62a5\u8868\uff0c\u4e00\u65f6\u534a\u4f1a\u60f3\u4e0d\u8d77\u6765\uff0c\u9047\u5230\u518d\u8865\u5145","title":"FICO\u6a21\u5757\u6982\u8ff0"},{"location":"fico/balance/","text":"\u8d44\u4ea7\u8d1f\u503a\u8868 \u00b6","title":"\u8d44\u4ea7\u8d1f\u503a\u8868"},{"location":"fico/balance/#_1","text":"","title":"\u8d44\u4ea7\u8d1f\u503a\u8868"},{"location":"fico/cash_flow/","text":"\u73b0\u91d1\u6d41\u91cf\u8868 \u00b6","title":"\u73b0\u91d1\u6d41\u91cf\u8868"},{"location":"fico/cash_flow/#_1","text":"","title":"\u73b0\u91d1\u6d41\u91cf\u8868"},{"location":"fico/income/","text":"\u5229\u6da6\u8868 \u00b6","title":"\u5229\u6da6\u8868"},{"location":"fico/income/#_1","text":"","title":"\u5229\u6da6\u8868"},{"location":"fico/invoice_check/","text":"\u53d1\u7968\u6821\u9a8c \u00b6","title":"\u53d1\u7968\u6821\u9a8c"},{"location":"fico/invoice_check/#_1","text":"","title":"\u53d1\u7968\u6821\u9a8c"},{"location":"fico/invoice_park/","text":"\u53d1\u7968\u9884\u5236 \u00b6","title":"\u53d1\u7968\u9884\u5236"},{"location":"fico/invoice_park/#_1","text":"","title":"\u53d1\u7968\u9884\u5236"},{"location":"fico/invoice_post/","text":"\u53d1\u7968\u8fc7\u8d26 \u00b6","title":"\u53d1\u7968\u8fc7\u8d26"},{"location":"fico/invoice_post/#_1","text":"","title":"\u53d1\u7968\u8fc7\u8d26"},{"location":"gtm/","text":"\u8d38\u6613\u7ba1\u7406\u6a21\u5757 \u00b6 \u4e3b\u8981\u662fWTEW\u5de5\u4f5c\u53f0\u914d\u7f6e\uff0c\u5408\u540c\u3001\u5408\u540c\u5173\u8054\u3001\u5408\u540c\u5ba1\u6279\u7b49","title":"GTM\u6a21\u5757\u6982\u8ff0"},{"location":"gtm/#_1","text":"\u4e3b\u8981\u662fWTEW\u5de5\u4f5c\u53f0\u914d\u7f6e\uff0c\u5408\u540c\u3001\u5408\u540c\u5173\u8054\u3001\u5408\u540c\u5ba1\u6279\u7b49","title":"\u8d38\u6613\u7ba1\u7406\u6a21\u5757"},{"location":"gtm/contract/","text":"\u5408\u540c \u00b6 \u5408\u540c\u521b\u5efa \u00b6 \u5408\u540c\u7ef4\u62a4 \u00b6 \u5408\u540c\u5173\u8054 \u00b6 \u5408\u540c\u5ba1\u6279 \u00b6 \u5408\u540c\u5173\u95ed \u00b6 WTEW\u914d\u7f6e \u00b6","title":"\u5408\u540c"},{"location":"gtm/contract/#_1","text":"","title":"\u5408\u540c"},{"location":"gtm/contract/#_2","text":"","title":"\u5408\u540c\u521b\u5efa"},{"location":"gtm/contract/#_3","text":"","title":"\u5408\u540c\u7ef4\u62a4"},{"location":"gtm/contract/#_4","text":"","title":"\u5408\u540c\u5173\u8054"},{"location":"gtm/contract/#_5","text":"","title":"\u5408\u540c\u5ba1\u6279"},{"location":"gtm/contract/#_6","text":"","title":"\u5408\u540c\u5173\u95ed"},{"location":"gtm/contract/#wtew","text":"","title":"WTEW\u914d\u7f6e"},{"location":"gtm/contract_approval/","text":"\u5408\u540c\u5ba1\u6279 \u00b6","title":"\u5408\u540c\u5ba1\u6279"},{"location":"gtm/contract_approval/#_1","text":"","title":"\u5408\u540c\u5ba1\u6279"},{"location":"gtm/contract_assoc/","text":"\u5408\u540c\u5173\u8054 \u00b6","title":"\u5408\u540c\u5173\u8054"},{"location":"gtm/contract_assoc/#_1","text":"","title":"\u5408\u540c\u5173\u8054"},{"location":"gtm/wtew/","text":"WTEW\u5de5\u4f5c\u53f0 \u00b6","title":"WTEW"},{"location":"gtm/wtew/#wtew","text":"","title":"WTEW\u5de5\u4f5c\u53f0"},{"location":"master_data/","text":"\u4e3b\u6570\u636e\u6982\u8ff0 \u00b6 \u8bb2\u8ff0\u5404\u7c7b\u4e3b\u6570\u636e\u7684\u7ef4\u62a4\u3002 \u5148\u8868\u660e\uff0c\u9664\u901a\u5e38\u5bfc\u5165\u65b9\u6848\u5916\uff0c\u6211\u8fd8\u5c06\u8bbe\u8ba1\u4e00\u79cd\u53e6\u4e00\u79cd\u5bfc\u5165\u65b9\u6848\uff0c\u611f\u5174\u8da3\u53ef\u4ee5\u7ee7\u7eed\u9605\u8bfb\u672c\u9875\u3002 \u6709\u4ec0\u4e48\u7279\u6b8a\uff1f \u00b6 \u505a\u4e2a\u601d\u7ef4\u5b9e\u9a8c\uff0c\u73b0\u6709\u4e00\u7ec4\u6570\u636e\uff0c\u8981\u5bfc\u5165\u5bf9\u5e94\u6570\u636e\u5e93\u8868\u3002 \u7528\u6237\u63d0\u51fa\u7b2c\u4e00\u4e2a\u9700\u6c42\uff1a\u201c \u4ec5\u9700 \u8fd9\u4e9b\u5b57\u6bb5\u201d\uff0c\u4e0d\u96be\uff0c\u4e0d\u5199\u6216\u6ce8\u91ca\u5176\u4ed6\u5b57\u6bb5\u5373\u53ef\u3002 \u7528\u6237\u63d0\u51fa\u7b2c\u4e8c\u4e2a\u9700\u6c42\uff1a\u201c \u67d0\u79cd\u60c5\u51b5\u4e0b \u624d\u5bfc\u5165\u8fd9\u4e9b\u5b57\u6bb5\u201d\uff0c\u4e5f\u4e0d\u96be\uff0c\u591a\u52a0\u51e0\u4e2a\u5224\u65ad\u5373\u53ef\u3002 \u53ef\u4ee5\u53d1\u73b0\uff0c\u4e3b\u6570\u636e\u5bfc\u5165\u7684\u9ebb\u70e6\u4e0d\u5728\u4e8e\u5bfc\u5165\uff0c\u800c\u662f\u63a7\u5236\u5b57\u6bb5\u662f\u5426\u5bfc\u5165\u3002\u56e0\u6b64\u8bbe\u8ba1\u7684\u65f6\u5019\uff0c\u4e5f\u5e94\u8be5\u4ee5 \u63a7\u5236\u5b57\u6bb5\u662f\u5426\u5bfc\u5165 \u4e3a\u6838\u5fc3\u3002 \u4e3b\u6570\u636e\u5bfc\u5165\uff0c\u591a\u6570\u90fd\u4f1a\u8981\u6c42\u65e5\u5fd7\u4fe1\u606f\uff0c\u8fd9\u4e2a\u4e0d\u662f\u6587\u6863\u8981\u6574\u7406\u7684\uff0c\u770b\u81ea\u5df1\u8bbe\u8ba1\u3002","title":"\u4e3b\u6570\u636e\u6982\u8ff0"},{"location":"master_data/#_1","text":"\u8bb2\u8ff0\u5404\u7c7b\u4e3b\u6570\u636e\u7684\u7ef4\u62a4\u3002 \u5148\u8868\u660e\uff0c\u9664\u901a\u5e38\u5bfc\u5165\u65b9\u6848\u5916\uff0c\u6211\u8fd8\u5c06\u8bbe\u8ba1\u4e00\u79cd\u53e6\u4e00\u79cd\u5bfc\u5165\u65b9\u6848\uff0c\u611f\u5174\u8da3\u53ef\u4ee5\u7ee7\u7eed\u9605\u8bfb\u672c\u9875\u3002","title":"\u4e3b\u6570\u636e\u6982\u8ff0"},{"location":"master_data/#_2","text":"\u505a\u4e2a\u601d\u7ef4\u5b9e\u9a8c\uff0c\u73b0\u6709\u4e00\u7ec4\u6570\u636e\uff0c\u8981\u5bfc\u5165\u5bf9\u5e94\u6570\u636e\u5e93\u8868\u3002 \u7528\u6237\u63d0\u51fa\u7b2c\u4e00\u4e2a\u9700\u6c42\uff1a\u201c \u4ec5\u9700 \u8fd9\u4e9b\u5b57\u6bb5\u201d\uff0c\u4e0d\u96be\uff0c\u4e0d\u5199\u6216\u6ce8\u91ca\u5176\u4ed6\u5b57\u6bb5\u5373\u53ef\u3002 \u7528\u6237\u63d0\u51fa\u7b2c\u4e8c\u4e2a\u9700\u6c42\uff1a\u201c \u67d0\u79cd\u60c5\u51b5\u4e0b \u624d\u5bfc\u5165\u8fd9\u4e9b\u5b57\u6bb5\u201d\uff0c\u4e5f\u4e0d\u96be\uff0c\u591a\u52a0\u51e0\u4e2a\u5224\u65ad\u5373\u53ef\u3002 \u53ef\u4ee5\u53d1\u73b0\uff0c\u4e3b\u6570\u636e\u5bfc\u5165\u7684\u9ebb\u70e6\u4e0d\u5728\u4e8e\u5bfc\u5165\uff0c\u800c\u662f\u63a7\u5236\u5b57\u6bb5\u662f\u5426\u5bfc\u5165\u3002\u56e0\u6b64\u8bbe\u8ba1\u7684\u65f6\u5019\uff0c\u4e5f\u5e94\u8be5\u4ee5 \u63a7\u5236\u5b57\u6bb5\u662f\u5426\u5bfc\u5165 \u4e3a\u6838\u5fc3\u3002 \u4e3b\u6570\u636e\u5bfc\u5165\uff0c\u591a\u6570\u90fd\u4f1a\u8981\u6c42\u65e5\u5fd7\u4fe1\u606f\uff0c\u8fd9\u4e2a\u4e0d\u662f\u6587\u6863\u8981\u6574\u7406\u7684\uff0c\u770b\u81ea\u5df1\u8bbe\u8ba1\u3002","title":"\u6709\u4ec0\u4e48\u7279\u6b8a\uff1f"},{"location":"master_data/bom/","text":"BOM \u00b6 \u89c1\u7269\u6599\u6e05\u5355\u7c7b\u522b STLTY \u503c\u57df\uff0c\u6709\u4e0d\u5c11\u7c7b\u578b\uff0c\u6211\u76ee\u524d\u53ea\u7528\u5230\u4e24\u79cd\u3002 \u53d8\u66f4\u53f7 \u00b6 \u4f7f\u7528 CCAP_ECN_CREATE \u521b\u5efa\u53d8\u66f4\u53f7\u3002 \u53d8\u66f4\u53f7\u521b\u5efa\u51fd\u6570 FUNCTION zfm_ecn_check IMPORTING i_datuv TYPE datuv i_verid TYPE verid EXPORTING e_change_no TYPE aennr e_mtype TYPE bapi_mtype e_msg TYPE bapi_msg . IF i_datuv IS INITIAL OR i_datuv = '' . e_mtype = 'E' . e_msg = | [\u7248\u672c\u542f\u7528\u65f6\u95f4]\u4e3a\u7a7a |. RETURN . ENDIF . IF i_verid IS INITIAL . e_mtype = 'E' . e_msg = | [\u751f\u4ea7\u7248\u672c]\u4e3a\u7a7a |. RETURN . ENDIF . \" \u66f4\u6539\u53f7\u53ef\u4ee5\u968f\u610f\u7f16\u5199\uff0c\u4e00\u822c\u7528\u65e5\u671f+\u7248\u672c\u751f\u6210 DATA l_change_no TYPE aenr_api01 - change_no . l_change_no = |{ i_datuv }{ i_verid }|. CALL FUNCTION 'CONVERSION_EXIT_AENNR_INPUT' EXPORTING input = l_change_no IMPORTING output = l_change_no EXCEPTIONS length_error = 1 . \" \u68c0\u67e5\u66f4\u6539\u53f7\u662f\u5426\u5b58\u5728 SELECT SINGLE COUNT ( * ) FROM aenr WHERE aennr = @ l_change_no . IF sy - subrc = 0 . e_change_no = l_change_no . e_mtype = 'S' . RETURN . ENDIF . \" \u4e0d\u5b58\u5728\u5219\u521b\u5efa DATA : ls_header TYPE aenr_api01 , ls_object_bom TYPE aenv_api01 , ls_object_bom_mat TYPE aenv_api01 , ls_object_bom_psp TYPE aenv_api01 , ls_object_tlist_n TYPE aenv_api01 , ls_object_tlist_q TYPE aenv_api01 , ls_object_char TYPE aenv_api01 , ls_object_cls TYPE aenv_api01 , lv_number TYPE aenrb - aennr . ls_header - change_no = l_change_no . ls_header - status = '01' . ls_header - valid_from = |{ i_datuv DATE = USER }|. \" \u4e0b\u9762FM\u9700\u8981\u5916\u90e8\u683c\u5f0f ls_header - descript = | BOM/\u5de5\u827a\u6570\u636e\u7ef4\u62a4 |. ls_object_bom - active = 'X' . ls_object_bom_mat - active = 'X' . ls_object_bom_mat - obj_requ = 'X' . ls_object_bom_mat - mgtrec_gen = 'X' . ls_object_bom_psp - active = 'X' . ls_object_bom_psp - obj_requ = 'X' . ls_object_bom_psp - mgtrec_gen = 'X' . ls_object_tlist_n - active = 'X' . ls_object_tlist_n - obj_requ = 'X' . ls_object_tlist_n - mgtrec_gen = 'X' . ls_object_tlist_q - active = 'X' . ls_object_tlist_q - obj_requ = 'X' . ls_object_tlist_q - mgtrec_gen = 'X' . ls_object_char - active = 'X' . ls_object_cls - active = 'X' . SET UPDATE TASK LOCAL . \" \u521b\u5efaECN CLEAR l_change_no . CALL FUNCTION 'CCAP_ECN_CREATE' EXPORTING change_header = ls_header object_bom = ls_object_bom object_bom_mat = ls_object_bom_mat object_bom_psp = ls_object_bom_psp object_tlist_n = ls_object_tlist_n object_tlist_q = ls_object_tlist_q object_char = ls_object_char object_cls = ls_object_cls fl_commit_and_wait = 'X' IMPORTING change_no = l_change_no EXCEPTIONS change_no_already_exists = 1 error = 2 OTHERS = 3 . IF sy - subrc <> 0 . e_mtype = 'E' . MESSAGE ID sy - msgid TYPE sy - msgty NUMBER sy - msgno WITH sy - msgv1 sy - msgv2 sy - msgv3 sy - msgv4 INTO e_msg . RETURN . ENDIF . CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = 'X' . e_change_no = l_change_no . e_mtype = 'S' . ENDFUNCTION . (M) \u7269\u6599BOM \u00b6 \u7269\u6599BOM\u7528 CSAP_MAT_BOM_READ \u8bfb\u53d6\uff0c CSAP_MAT_BOM_CREATE \u521b\u5efa\uff0c CSAP_MAT_BOM_MAINTAIN \u7ef4\u62a4\u3002 \u5b9e\u8df5\u53d1\u73b0\uff0c\u521b\u5efa\u548c\u7ef4\u62a4\u7684\u51fd\u6570\u7686\u4e0d\u652f\u6301\u5907\u9009\u6e05\u5355(STLAL)\u6269\u5c55\uff0c\u5982\u9700\u6269\u5c55\uff0c\u4f7f\u7528 BAPI_MATERIAL_BOM_GROUP_CREATE \u3002 \u7269\u6599BOM\u7ef4\u62a4\u51fd\u6570 FUNCTION zfm_mat_bom_maintain IMPORTING i_mast TYPE mast i_stko TYPE stko EXPORTING e_mtype TYPE bapi_mtype e_msg TYPE bapi_msg et_bapiret2 TYPE bapiret2_t TABLES it_stpo LIKE stpo . \" \u9700\u8981\u6ce8\u610f\uff0cCSAP_MAT_BOM_MAINTAIN\u8981\u6c42\u53c2\u6570\u90fd\u662f\u5916\u90e8\u683c\u5f0f DATA l_mtype TYPE bapi_mtype . DATA l_msg TYPE bapi_msg . DATA : ls_csap_mbom TYPE csap_mbom , ls_stko_api01 TYPE stko_api01 , ls_stko_api02 TYPE stko_api02 , lt_stpo_api01 TYPE STANDARD TABLE OF stpo_api01 , ls_stpo_api01 TYPE stpo_api01 . CLEAR ls_csap_mbom . ls_csap_mbom - matnr = i_mast - matnr . ls_csap_mbom - werks = i_mast - werks . ls_csap_mbom - stlan = i_mast - stlan . ls_csap_mbom - stlal = i_mast - stlal . ls_csap_mbom - datuv = |{ i_stko - datuv DATE = USER }|. \" \u5916\u90e8\u65e5\u671f\u683c\u5f0f ls_csap_mbom - aennr = i_stko - aennr . CLEAR ls_stko_api01 . IF i_stko - bmeng IS NOT INITIAL . ls_stko_api01 - base_quan = |{ i_stko - bmeng NUMBER = USER }|. ELSE . ls_stko_api01 - base_quan = 1 . ENDIF . ls_stko_api01 - alt_text = i_stko - stktx . ls_stko_api01 - bom_status = i_stko - stlst . LOOP AT it_stpo INTO DATA ( ls_stpo ). CLEAR ls_stpo_api01 . ls_stpo_api01 - item_no = ls_stpo - posnr . \" \u884c\u53f7 ls_stpo_api01 - item_categ = 'L' . ls_stpo_api01 - component = ls_stpo - idnrk . \" \u7ec4\u4ef6\u7269\u6599 ls_stpo_api01 - comp_qty = ls_stpo - menge . \" \u7ec4\u4ef6\u6570\u91cf * ls_stpo_api03-comp_unit = ls_stpo-meins. \" \u7ec4\u4ef6\u8ba1\u91cf\u5355\u4f4d CALL FUNCTION 'CONVERSION_EXIT_CUNIT_OUTPUT' EXPORTING input = ls_stpo - meins IMPORTING output = ls_stpo_api01 - comp_unit EXCEPTIONS unit_not_found = 1 . ls_stpo_api01 - valid_from = ls_stpo - datuv . \" \u6709\u6548\u671f\u4ece ls_stpo_api01 - change_no = ls_stpo - aennr . \" \u53d8\u66f4\u53f7 ls_stpo_api01 - sortstring = ls_stpo - sortf . \" \u5de5\u5e8f\uff08\u6392\u5e8f\u5b57\u6bb5\uff09 ls_stpo_api01 - rel_prod = 'X' . ls_stpo_api01 - rel_cost = 'X' . \" \u589e\u5f3a\u5b57\u6bb5 ls_stpo_api01 - zspec1 = ls_stpo - zspec1 . ls_stpo_api01 - zspec3 = ls_stpo - zspec2 . ls_stpo_api01 - zspec2 = ls_stpo - zspec3 . INSERT ls_stpo_api01 INTO TABLE lt_stpo_api01 . ENDLOOP . * \" CSAP_MAT_BOM_MAINTAIN\u9650\u5236\uff0c\u65e0\u6cd5\u6269\u5c55\u5907\u9009BOM * \" \u8df3\u8f6c\u5230\u53e6\u4e00\u4e2a\u65b9\u6cd5\uff0c\u901a\u8fc7BAPI_MATERIAL_BOM_GROUP_CREATE\u521b\u5efa * IF ls_csap_mbom-stlal <> '01'. * CALL FUNCTION 'ZFM_MAT_BGR_CREATE' * EXPORTING * i_mast = i_mast * i_stko = i_stko * IMPORTING * e_mtype = e_mtype * e_msg = e_msg * TABLES * it_stpo = it_stpo[]. * IF e_mtype = 'E'. * RETURN. * ENDIF. * ENDIF. \" \u68c0\u67e5\u662f\u5426\u5df2\u5b58\u5728 DATA : lt_stko_api02_old TYPE STANDARD TABLE OF stko_api02 , lt_stpo_api02_old TYPE STANDARD TABLE OF stpo_api02 . CALL FUNCTION 'CSAP_MAT_BOM_READ' EXPORTING material = ls_csap_mbom - matnr plant = ls_csap_mbom - werks bom_usage = ls_csap_mbom - stlan alternative = ls_csap_mbom - stlal valid_from = ls_csap_mbom - datuv change_no = ls_csap_mbom - aennr TABLES t_stpo = lt_stpo_api02_old t_stko = lt_stko_api02_old EXCEPTIONS error = 1 OTHERS = 2 . IF sy - subrc = 0 . READ TABLE lt_stko_api02_old INTO DATA ( ls_stko_api02_upd ) INDEX 1 . \" \u89c1LCSDIFEH\u4e2d\u7684rc29k_stko_compare\u5b50\u4f8b\u7a0b\uff0c\u62ac\u5934\u53ea\u6709\u90e8\u5206\u5b57\u6bb5\u53ef\u4fee\u6539 \" \u6570\u91cf\u3001\u5355\u4f4d\u3001\u62ac\u5934\u6587\u672c\u90fd\u4e0d\u5728\u4fee\u6539\u8303\u56f4\u5185 * ls_stko_api02_upd-alt_text = ls_stko_api01-alt_text. ls_stko_api01 = CORRESPONDING # ( ls_stko_api02_upd ). DATA lt_stpo_api03 TYPE STANDARD TABLE OF stpo_api03 . SORT lt_stpo_api01 BY item_no . SORT lt_stpo_api02_old BY item_no . \" \u4fee\u6539 LOOP AT lt_stpo_api01 INTO ls_stpo_api01 . READ TABLE lt_stpo_api02_old INTO DATA ( ls_stpo_api02_upd ) WITH KEY item_no = ls_stpo_api01 - item_no BINARY SEARCH . IF sy - subrc = 0 . DELETE lt_stpo_api02_old INDEX sy - tabix . ls_stpo_api02_upd - item_no = ls_stpo_api01 - item_no . ls_stpo_api02_upd - item_categ = ls_stpo_api01 - item_categ . ls_stpo_api02_upd - component = ls_stpo_api01 - component . ls_stpo_api02_upd - comp_qty = ls_stpo_api01 - comp_qty . ls_stpo_api02_upd - comp_unit = ls_stpo_api01 - comp_unit . ls_stpo_api02_upd - valid_from = ls_stpo_api01 - valid_from . ls_stpo_api02_upd - change_no = ls_stpo_api01 - change_no . ls_stpo_api02_upd - rel_prod = ls_stpo_api01 - rel_prod . ls_stpo_api02_upd - rel_cost = ls_stpo_api01 - rel_cost . ls_stpo_api02_upd - zspec1 = ls_stpo_api01 - zspec1 . ls_stpo_api02_upd - zspec2 = ls_stpo_api01 - zspec2 . ls_stpo_api02_upd - zspec3 = ls_stpo_api01 - zspec3 . INSERT CORRESPONDING # ( ls_stpo_api02_upd ) INTO TABLE lt_stpo_api03 . ELSE . INSERT CORRESPONDING # ( ls_stpo_api01 ) INTO TABLE lt_stpo_api03 . ENDIF . ENDLOOP . \" \u5220\u9664\u591a\u4f59\u7684\u65e7\u9879\u76ee LOOP AT lt_stpo_api02_old INTO DATA ( ls_stpo_api02_del ). ls_stpo_api02_del - fldelete = abap_true . INSERT CORRESPONDING # ( ls_stpo_api02_del ) INTO TABLE lt_stpo_api03 . ENDLOOP . SORT lt_stpo_api03 BY item_no . SET UPDATE TASK LOCAL . CALL FUNCTION 'CSAP_MAT_BOM_MAINTAIN' EXPORTING material = ls_csap_mbom - matnr plant = ls_csap_mbom - werks bom_usage = ls_csap_mbom - stlan alternative = ls_csap_mbom - stlal valid_from = ls_csap_mbom - datuv change_no = ls_csap_mbom - aennr i_stko = ls_stko_api01 fl_bom_create = 'X' fl_new_item = 'X' IMPORTING o_stko = ls_stko_api02 TABLES t_stpo = lt_stpo_api03 EXCEPTIONS error = 1 OTHERS = 2 . ELSE . SET UPDATE TASK LOCAL . CALL FUNCTION 'CSAP_MAT_BOM_CREATE' EXPORTING material = ls_csap_mbom - matnr plant = ls_csap_mbom - werks bom_usage = ls_csap_mbom - stlan alternative = ls_csap_mbom - stlal valid_from = ls_csap_mbom - datuv change_no = ls_csap_mbom - aennr i_stko = ls_stko_api01 IMPORTING bom_no = ls_stko_api02 - bom_no TABLES t_stpo = lt_stpo_api01 EXCEPTIONS error = 1 OTHERS = 2 . ENDIF . IF sy - subrc <> 0 . e_mtype = 'E' . MESSAGE ID sy - msgid TYPE sy - msgty NUMBER sy - msgno WITH sy - msgv1 sy - msgv2 sy - msgv3 sy - msgv4 INTO e_msg . MESSAGE e_msg TYPE 'S' DISPLAY LIKE 'E' . CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK' . ELSE . e_mtype = 'S' . e_msg = | \u5df2\u5904\u7406 |. MESSAGE e_msg TYPE 'S' . CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = 'X' . ENDIF . ENDFUNCTION . (M) \u7269\u6599BOM\u7ec4 \u00b6 \u901a\u8fc7 BAPI_MATERIAL_BOM_GROUP_CREATE \u5b9e\u73b0\u591a\u4e2a\u5907\u9009BOM\u7684\u521b\u5efa\u3002 \u7269\u6599BOM\u7ec4\u521b\u5efa\u51fd\u6570 FUNCTION zfm_mat_bgr_create IMPORTING i_mast TYPE mast i_stko TYPE stko EXPORTING e_mtype TYPE bapi_mtype e_msg TYPE bapi_msg et_bapiret2 TYPE bapiret2_t TABLES it_stpo LIKE stpo . DATA l_mtype TYPE bapi_mtype . DATA l_msg TYPE bapi_msg . DATA : testrun TYPE bapiflag , lt_bomgroup TYPE STANDARD TABLE OF bapi1080_bgr_c , ls_bomgroup TYPE bapi1080_bgr_c , lt_variants TYPE STANDARD TABLE OF bapi1080_bom_c , ls_variants TYPE bapi1080_bom_c , lt_materialrelations TYPE STANDARD TABLE OF bapi1080_mbm_c , ls_materialrelations TYPE bapi1080_mbm_c , lt_items TYPE STANDARD TABLE OF bapi1080_itm_c , ls_items TYPE bapi1080_itm_c , lt_itemassignments TYPE STANDARD TABLE OF bapi1080_rel_itm_bom_c , ls_itemassignments TYPE bapi1080_rel_itm_bom_c , lt_bomsubitems TYPE STANDARD TABLE OF bapi1080_sui_c , lt_bomsubitemas TYPE STANDARD TABLE OF bapi1080_rel_sui_itm_c , lt_texts TYPE STANDARD TABLE OF bapi1080_txt_c . \" \u6807\u8bc6 DATA l_uuid TYPE sysuuid_c32 . TRY . l_uuid = cl_system_uuid => create_uuid_c32_static ( ). CATCH cx_uuid_error . l_uuid = sy - datum && sy - uzeit && sy - uname . ENDTRY . \" \u65b0\u589e/\u7ef4\u62a4 DATA l_funciton TYPE cs_function . SELECT SINGLE COUNT ( * ) FROM mast WHERE matnr = @ i_mast - matnr AND werks = @ i_mast - werks AND stlan = @ i_mast - stlan AND stlal = @ i_mast - stlal . IF sy - subrc = 0 . \" \u4fee\u6539\u7528CSAP_MAT_BOM_MAINTAIN\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u662f\u4e3a\u4e86\u6269\u5c55\u5907\u9009BOM e_mtype = 'S' . e_msg = '\u5df2\u5904\u7406' . RETURN . ELSE . l_funciton = 'NEW' . ENDIF . \" OBJECT_TYPE\u7684\u57df\u503c\uff0c\u4e5f\u5907\u6ce8\u4e0b\uff0c\u514d\u5f97\u770b\u4e0d\u61c2 \" BGR - Bill of material group \" BOM - Material BOM assembly variant/alternative \" ITM - BOM item \" SUI - BOM Sub-Item \" OBJECT ID DATA l_head_object_id TYPE cs_object_id . l_head_object_id = 'HEAD' . CLEAR ls_bomgroup . ls_bomgroup - bom_group_identification = l_uuid . ls_bomgroup - object_type = 'BGR' . ls_bomgroup - object_id = l_head_object_id . ls_bomgroup - bom_usage = i_mast - stlan . \" BOM\u7528\u9014 ls_bomgroup - created_in_plant = i_mast - werks . \" \u5de5\u5382 INSERT ls_bomgroup INTO TABLE lt_bomgroup . \" \uff1f\uff1f\uff1f\u4e3a\u4ec0\u4e48\u6ca1\u6709STLTY\u53c2\u6570 CLEAR ls_variants . ls_variants - bom_group_identification = l_uuid . ls_variants - object_type = 'BOM' . ls_variants - object_id = l_head_object_id . ls_variants - alternative_bom = i_mast - stlal . \" \u5907\u9009\u7269\u6599\u6e05\u5355 ls_variants - alt_text = i_stko - stktx . \" \u6587\u672c ls_variants - bom_status = i_stko - stlst . \" BOM\u72b6\u6001 ls_variants - change_no = i_stko - aennr . \" \u53d8\u66f4\u53f7 ls_variants - valid_from_date = i_stko - datuv . ls_variants - function = l_funciton . INSERT ls_variants INTO TABLE lt_variants . CLEAR ls_materialrelations . ls_materialrelations - bom_group_identification = l_uuid . ls_materialrelations - material = ls_materialrelations - material_guid = ls_materialrelations - material_external = ls_materialrelations - material_long = i_mast - matnr . \" \u7269\u6599\u7f16\u7801 ls_materialrelations - plant = i_mast - werks . \" \u5de5\u5382 ls_materialrelations - bom_usage = i_mast - stlan . \" BOM\u7528\u9014 ls_materialrelations - alternative_bom = i_mast - stlal . \" \u5907\u9009\u7269\u6599\u6e05\u5355 INSERT ls_materialrelations INTO TABLE lt_materialrelations . LOOP AT it_stpo INTO DATA ( ls_stpo ). DATA ( l_tabix ) = sy - tabix * 10 . \" OBJECT ID DATA l_item_object_id TYPE cs_object_id . l_item_object_id = | ITEM { l_tabix }|. CLEAR ls_items . ls_items - bom_group_identification = l_uuid . ls_items - object_type = 'ITM' . ls_items - object_id = l_item_object_id . ls_items - item_no = |{ ls_stpo - posnr ALPHA = IN }|. \" \u884c\u53f7 ls_items - component = ls_stpo - idnrk . \" \u7ec4\u4ef6\u7269\u6599 ls_items - comp_qty = ls_stpo - menge . \" \u7ec4\u4ef6\u6570\u91cf ls_items - comp_unit = ls_stpo - meins . \" \u7ec4\u4ef6\u8ba1\u91cf\u5355\u4f4d ls_items - ltxt_lang = '1' . ls_items - valid_from_date = ls_stpo - datuv . \" \u6709\u6548\u8d77\u59cb\u65e5\u671f ls_items - change_no = ls_stpo - aennr . \" \u53d8\u66f4\u53f7 INSERT ls_items INTO TABLE lt_items . CLEAR ls_itemassignments . ls_itemassignments - bom_group_identification = l_uuid . ls_itemassignments - sub_object_type = 'ITM' . ls_itemassignments - sub_object_id = l_item_object_id . ls_itemassignments - super_object_type = 'BOM' . ls_itemassignments - super_object_id = l_head_object_id . ls_itemassignments - valid_from_date = sy - datum . ls_itemassignments - function = l_funciton . INSERT ls_itemassignments INTO TABLE lt_itemassignments . ENDLOOP . CALL FUNCTION 'BAPI_MATERIAL_BOM_GROUP_CREATE' EXPORTING all_error = 'X' TABLES bomgroup = lt_bomgroup variants = lt_variants items = lt_items materialrelations = lt_materialrelations itemassignments = lt_itemassignments return = et_bapiret2[] . CLEAR l_mtype . CLEAR l_msg . LOOP AT et_bapiret2 INTO DATA ( ls_return ) WHERE type CA 'AXE' . MESSAGE ID ls_return - id TYPE ls_return - type NUMBER ls_return - number WITH ls_return - message_v1 ls_return - message_v2 ls_return - message_v3 ls_return - message_v4 INTO l_msg . e_msg = |{ e_msg }{ l_msg } ; |. ENDLOOP . IF sy - subrc = 0 . e_mtype = 'E' . MESSAGE ID sy - msgid TYPE sy - msgty NUMBER sy - msgno WITH sy - msgv1 sy - msgv2 sy - msgv3 sy - msgv4 INTO e_msg . MESSAGE e_msg TYPE 'S' DISPLAY LIKE 'E' . CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK' . ELSE . e_mtype = 'S' . e_msg = | \u5df2\u5904\u7406 |. MESSAGE e_msg TYPE 'S' . CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = 'X' . ENDIF . ENDFUNCTION . (P) WBS BOM \u00b6 WBS BOM\u7528 CSAP_BOM_READ \u8bfb\u53d6\uff0c CSAP_BOM_CREATE \u521b\u5efa\uff0c CSAP_BOM_MAINTAIN \u7ef4\u62a4 WBS BOM\u7ef4\u62a4\u51fd\u6570 FUNCTION zfm_wbs_bom_maintain IMPORTING i_prps TYPE prps i_prst TYPE prst i_stko TYPE stko EXPORTING e_mtype TYPE bapi_mtype e_msg TYPE bapi_msg et_bapiret2 TYPE bapiret2_t TABLES it_stpo LIKE stpo . DATA : ls_ecsin TYPE csin , ls_stzub TYPE stzub , lt_stkob TYPE STANDARD TABLE OF stkob , ls_stkob TYPE stkob , lt_stpob TYPE STANDARD TABLE OF stpob , ls_stpob TYPE stpob . CLEAR ls_ecsin . ls_ecsin - matnr = i_prst - matnr . ls_ecsin - werks = i_prst - werks . ls_ecsin - pspnr = i_prps - pspnr . \" WBS\u7f16\u53f7 ls_ecsin - stlty = i_stko - stlty . \" BOM\u7c7b\u578b ls_ecsin - stlan = i_prst - stlan . \" BOM\u7528\u9014 \" \u6570\u91cf IF i_stko - bmeng IS NOT INITIAL . ls_ecsin - emeng = i_stko - bmeng . ELSE . ls_ecsin - emeng = 1 . ENDIF . ls_ecsin - aennr = i_prps - aennr . \" \u53d8\u66f4\u53f7 CLEAR ls_stkob . ls_stkob - stlty = i_stko - stlty . \" BOM\u7c7b\u578b ls_stkob - bmeng = i_stko - bmeng . ls_stkob - stktx = i_stko - stktx . CLEAR lt_stpob . LOOP AT it_stpo INTO DATA ( ls_stpo ). CLEAR ls_stpob . ls_stpob - posnr = ls_stpo - posnr . ls_stpob - datuv = ls_stpo - datuv . ls_stpob - stlty = ls_stpo - stlty . ls_stpob - postp = 'L' . ls_stpob - idnrk = ls_stpo - idnrk . ls_stpob - menge = ls_stpo - menge . ls_stpob - meins = ls_stpo - meins . ls_stpob - aennr = ls_stpo - aennr . ls_stpob - sortf = ls_stpo - sortf . \" \u5de5\u5e8f ls_stpob - zspec1 = ls_stpo - zspec1 . ls_stpob - zspec2 = ls_stpo - zspec2 . ls_stpob - zspec3 = ls_stpo - zspec3 . \" \u4f9b\u5e94\u5546/\u724c\u53f7/\u4ea7\u5730\u4e0d\u4e3a\u7a7a\u7684\u65f6\u5019 IF ls_stpo - zspec1 IS NOT INITIAL OR ls_stpo - zspec2 IS NOT INITIAL OR ls_stpo - zspec3 IS NOT INITIAL . ls_stpob - dspst = '1' . ENDIF . INSERT ls_stpob INTO TABLE lt_stpob . ENDLOOP . \" \u68c0\u67e5\u662f\u5426\u5df2\u5b58\u5728 DATA : lt_stkob_old TYPE STANDARD TABLE OF stkob , lt_stpob_old TYPE STANDARD TABLE OF stpob . CALL FUNCTION 'CSAI_BOM_READ' EXPORTING ecsin = ls_ecsin TABLES t_stkob = lt_stkob_old t_stpob = lt_stpob_old EXCEPTIONS error = 1 OTHERS = 2 . IF sy - subrc = 0 . \" \u62ac\u5934\u53ea\u6709\u63cf\u8ff0\u5141\u8bb8\u88ab\u4fee\u6539 READ TABLE lt_stkob_old INTO DATA ( ls_stkob_old ) INDEX 1 . ls_stkob_old - stktx = ls_stkob - stktx . ls_stkob = ls_stkob_old . SORT lt_stpob BY posnr . SORT lt_stpob_old BY posnr . \" \u4fee\u6539 LOOP AT lt_stpob REFERENCE INTO DATA ( lr_stpob ). lr_stpob -> vbkz = lr_stpob -> mvbkz = 'I' . \" \u65b0\u589e READ TABLE lt_stpob_old INTO DATA ( ls_stpob_upd ) WITH KEY posnr = lr_stpob -> posnr BINARY SEARCH . IF sy - subrc = 0 . DELETE lt_stpob_old INDEX sy - tabix . ls_stpob_upd - vbkz = ls_stpob_upd - mvbkz = 'U' . \" \u4fee\u6539 ls_stpob_upd - posnr = lr_stpob -> posnr . ls_stpob_upd - stlty = lr_stpob -> stlty . ls_stpob_upd - datuv = lr_stpob -> datuv . ls_stpob_upd - postp = lr_stpob -> postp . ls_stpob_upd - idnrk = lr_stpob -> idnrk . ls_stpob_upd - menge = lr_stpob -> menge . ls_stpob_upd - meins = lr_stpob -> meins . ls_stpob_upd - aennr = lr_stpob -> aennr . ls_stpob_upd - sortf = lr_stpob -> sortf . ls_stpob_upd - zspec1 = lr_stpob -> zspec1 . ls_stpob_upd - zspec2 = lr_stpob -> zspec2 . ls_stpob_upd - zspec3 = lr_stpob -> zspec3 . ls_stpob_upd - dspst = lr_stpob -> dspst . lr_stpob->* = ls_stpob_upd . * \" \u7528\u5b50\u9879\u76ee\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u4fee\u6539 * ls_stpob_upd-vgknt = ls_stpob_upd-stlkn. * ls_stpob_upd-vgpzl = ls_stpob_upd-stpoz. * CLEAR ls_stpob_upd-stlkn. * CLEAR ls_stpob_upd-stpoz. ENDIF . ENDLOOP . \" \u5220\u9664\u591a\u4f59\u7684\u65e7\u9879\u76ee LOOP AT lt_stpob_old INTO DATA ( ls_stpob_del ). ls_stpob_del - lkenz = abap_true . ls_stpob_del - vbkz = ls_stpob_upd - mvbkz = 'D' . \" \u5220\u9664\u6807\u8bc6 INSERT ls_stpob_del INTO TABLE lt_stpob . ENDLOOP . SORT lt_stpob BY posnr . \" \u7ef4\u62a4BOM CALL FUNCTION 'CSAI_BOM_MAINTAIN' EXPORTING ecsin = ls_ecsin estkob = ls_stkob estzub = ls_stzub IMPORTING astzub = ls_stzub TABLES t_stpob = lt_stpob EXCEPTIONS error = 1 OTHERS = 2 . ELSE . \" \u65b0\u589eBOM CALL FUNCTION 'CSAI_BOM_CREATE' EXPORTING ecsin = ls_ecsin estkob = ls_stkob estzub = ls_stzub IMPORTING astlnr = ls_stzub - stlnr TABLES t_stpob = lt_stpob EXCEPTIONS error = 1 OTHERS = 2 . ENDIF . IF sy - subrc <> 0 OR sy - msgty = 'E' . e_mtype = 'E' . MESSAGE ID sy - msgid TYPE sy - msgty NUMBER sy - msgno INTO e_msg WITH sy - msgv1 sy - msgv2 sy - msgv3 sy - msgv4 . CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK' . ELSE . e_mtype = 'S' . e_msg = | \u5df2\u5904\u7406 |. MESSAGE e_msg TYPE 'S' . CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = 'X' . ENDIF . ENDFUNCTION .","title":"BOM"},{"location":"master_data/bom/#bom","text":"\u89c1\u7269\u6599\u6e05\u5355\u7c7b\u522b STLTY \u503c\u57df\uff0c\u6709\u4e0d\u5c11\u7c7b\u578b\uff0c\u6211\u76ee\u524d\u53ea\u7528\u5230\u4e24\u79cd\u3002","title":"BOM"},{"location":"master_data/bom/#_1","text":"\u4f7f\u7528 CCAP_ECN_CREATE \u521b\u5efa\u53d8\u66f4\u53f7\u3002 \u53d8\u66f4\u53f7\u521b\u5efa\u51fd\u6570 FUNCTION zfm_ecn_check IMPORTING i_datuv TYPE datuv i_verid TYPE verid EXPORTING e_change_no TYPE aennr e_mtype TYPE bapi_mtype e_msg TYPE bapi_msg . IF i_datuv IS INITIAL OR i_datuv = '' . e_mtype = 'E' . e_msg = | [\u7248\u672c\u542f\u7528\u65f6\u95f4]\u4e3a\u7a7a |. RETURN . ENDIF . IF i_verid IS INITIAL . e_mtype = 'E' . e_msg = | [\u751f\u4ea7\u7248\u672c]\u4e3a\u7a7a |. RETURN . ENDIF . \" \u66f4\u6539\u53f7\u53ef\u4ee5\u968f\u610f\u7f16\u5199\uff0c\u4e00\u822c\u7528\u65e5\u671f+\u7248\u672c\u751f\u6210 DATA l_change_no TYPE aenr_api01 - change_no . l_change_no = |{ i_datuv }{ i_verid }|. CALL FUNCTION 'CONVERSION_EXIT_AENNR_INPUT' EXPORTING input = l_change_no IMPORTING output = l_change_no EXCEPTIONS length_error = 1 . \" \u68c0\u67e5\u66f4\u6539\u53f7\u662f\u5426\u5b58\u5728 SELECT SINGLE COUNT ( * ) FROM aenr WHERE aennr = @ l_change_no . IF sy - subrc = 0 . e_change_no = l_change_no . e_mtype = 'S' . RETURN . ENDIF . \" \u4e0d\u5b58\u5728\u5219\u521b\u5efa DATA : ls_header TYPE aenr_api01 , ls_object_bom TYPE aenv_api01 , ls_object_bom_mat TYPE aenv_api01 , ls_object_bom_psp TYPE aenv_api01 , ls_object_tlist_n TYPE aenv_api01 , ls_object_tlist_q TYPE aenv_api01 , ls_object_char TYPE aenv_api01 , ls_object_cls TYPE aenv_api01 , lv_number TYPE aenrb - aennr . ls_header - change_no = l_change_no . ls_header - status = '01' . ls_header - valid_from = |{ i_datuv DATE = USER }|. \" \u4e0b\u9762FM\u9700\u8981\u5916\u90e8\u683c\u5f0f ls_header - descript = | BOM/\u5de5\u827a\u6570\u636e\u7ef4\u62a4 |. ls_object_bom - active = 'X' . ls_object_bom_mat - active = 'X' . ls_object_bom_mat - obj_requ = 'X' . ls_object_bom_mat - mgtrec_gen = 'X' . ls_object_bom_psp - active = 'X' . ls_object_bom_psp - obj_requ = 'X' . ls_object_bom_psp - mgtrec_gen = 'X' . ls_object_tlist_n - active = 'X' . ls_object_tlist_n - obj_requ = 'X' . ls_object_tlist_n - mgtrec_gen = 'X' . ls_object_tlist_q - active = 'X' . ls_object_tlist_q - obj_requ = 'X' . ls_object_tlist_q - mgtrec_gen = 'X' . ls_object_char - active = 'X' . ls_object_cls - active = 'X' . SET UPDATE TASK LOCAL . \" \u521b\u5efaECN CLEAR l_change_no . CALL FUNCTION 'CCAP_ECN_CREATE' EXPORTING change_header = ls_header object_bom = ls_object_bom object_bom_mat = ls_object_bom_mat object_bom_psp = ls_object_bom_psp object_tlist_n = ls_object_tlist_n object_tlist_q = ls_object_tlist_q object_char = ls_object_char object_cls = ls_object_cls fl_commit_and_wait = 'X' IMPORTING change_no = l_change_no EXCEPTIONS change_no_already_exists = 1 error = 2 OTHERS = 3 . IF sy - subrc <> 0 . e_mtype = 'E' . MESSAGE ID sy - msgid TYPE sy - msgty NUMBER sy - msgno WITH sy - msgv1 sy - msgv2 sy - msgv3 sy - msgv4 INTO e_msg . RETURN . ENDIF . CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = 'X' . e_change_no = l_change_no . e_mtype = 'S' . ENDFUNCTION .","title":"\u53d8\u66f4\u53f7"},{"location":"master_data/bom/#m-bom","text":"\u7269\u6599BOM\u7528 CSAP_MAT_BOM_READ \u8bfb\u53d6\uff0c CSAP_MAT_BOM_CREATE \u521b\u5efa\uff0c CSAP_MAT_BOM_MAINTAIN \u7ef4\u62a4\u3002 \u5b9e\u8df5\u53d1\u73b0\uff0c\u521b\u5efa\u548c\u7ef4\u62a4\u7684\u51fd\u6570\u7686\u4e0d\u652f\u6301\u5907\u9009\u6e05\u5355(STLAL)\u6269\u5c55\uff0c\u5982\u9700\u6269\u5c55\uff0c\u4f7f\u7528 BAPI_MATERIAL_BOM_GROUP_CREATE \u3002 \u7269\u6599BOM\u7ef4\u62a4\u51fd\u6570 FUNCTION zfm_mat_bom_maintain IMPORTING i_mast TYPE mast i_stko TYPE stko EXPORTING e_mtype TYPE bapi_mtype e_msg TYPE bapi_msg et_bapiret2 TYPE bapiret2_t TABLES it_stpo LIKE stpo . \" \u9700\u8981\u6ce8\u610f\uff0cCSAP_MAT_BOM_MAINTAIN\u8981\u6c42\u53c2\u6570\u90fd\u662f\u5916\u90e8\u683c\u5f0f DATA l_mtype TYPE bapi_mtype . DATA l_msg TYPE bapi_msg . DATA : ls_csap_mbom TYPE csap_mbom , ls_stko_api01 TYPE stko_api01 , ls_stko_api02 TYPE stko_api02 , lt_stpo_api01 TYPE STANDARD TABLE OF stpo_api01 , ls_stpo_api01 TYPE stpo_api01 . CLEAR ls_csap_mbom . ls_csap_mbom - matnr = i_mast - matnr . ls_csap_mbom - werks = i_mast - werks . ls_csap_mbom - stlan = i_mast - stlan . ls_csap_mbom - stlal = i_mast - stlal . ls_csap_mbom - datuv = |{ i_stko - datuv DATE = USER }|. \" \u5916\u90e8\u65e5\u671f\u683c\u5f0f ls_csap_mbom - aennr = i_stko - aennr . CLEAR ls_stko_api01 . IF i_stko - bmeng IS NOT INITIAL . ls_stko_api01 - base_quan = |{ i_stko - bmeng NUMBER = USER }|. ELSE . ls_stko_api01 - base_quan = 1 . ENDIF . ls_stko_api01 - alt_text = i_stko - stktx . ls_stko_api01 - bom_status = i_stko - stlst . LOOP AT it_stpo INTO DATA ( ls_stpo ). CLEAR ls_stpo_api01 . ls_stpo_api01 - item_no = ls_stpo - posnr . \" \u884c\u53f7 ls_stpo_api01 - item_categ = 'L' . ls_stpo_api01 - component = ls_stpo - idnrk . \" \u7ec4\u4ef6\u7269\u6599 ls_stpo_api01 - comp_qty = ls_stpo - menge . \" \u7ec4\u4ef6\u6570\u91cf * ls_stpo_api03-comp_unit = ls_stpo-meins. \" \u7ec4\u4ef6\u8ba1\u91cf\u5355\u4f4d CALL FUNCTION 'CONVERSION_EXIT_CUNIT_OUTPUT' EXPORTING input = ls_stpo - meins IMPORTING output = ls_stpo_api01 - comp_unit EXCEPTIONS unit_not_found = 1 . ls_stpo_api01 - valid_from = ls_stpo - datuv . \" \u6709\u6548\u671f\u4ece ls_stpo_api01 - change_no = ls_stpo - aennr . \" \u53d8\u66f4\u53f7 ls_stpo_api01 - sortstring = ls_stpo - sortf . \" \u5de5\u5e8f\uff08\u6392\u5e8f\u5b57\u6bb5\uff09 ls_stpo_api01 - rel_prod = 'X' . ls_stpo_api01 - rel_cost = 'X' . \" \u589e\u5f3a\u5b57\u6bb5 ls_stpo_api01 - zspec1 = ls_stpo - zspec1 . ls_stpo_api01 - zspec3 = ls_stpo - zspec2 . ls_stpo_api01 - zspec2 = ls_stpo - zspec3 . INSERT ls_stpo_api01 INTO TABLE lt_stpo_api01 . ENDLOOP . * \" CSAP_MAT_BOM_MAINTAIN\u9650\u5236\uff0c\u65e0\u6cd5\u6269\u5c55\u5907\u9009BOM * \" \u8df3\u8f6c\u5230\u53e6\u4e00\u4e2a\u65b9\u6cd5\uff0c\u901a\u8fc7BAPI_MATERIAL_BOM_GROUP_CREATE\u521b\u5efa * IF ls_csap_mbom-stlal <> '01'. * CALL FUNCTION 'ZFM_MAT_BGR_CREATE' * EXPORTING * i_mast = i_mast * i_stko = i_stko * IMPORTING * e_mtype = e_mtype * e_msg = e_msg * TABLES * it_stpo = it_stpo[]. * IF e_mtype = 'E'. * RETURN. * ENDIF. * ENDIF. \" \u68c0\u67e5\u662f\u5426\u5df2\u5b58\u5728 DATA : lt_stko_api02_old TYPE STANDARD TABLE OF stko_api02 , lt_stpo_api02_old TYPE STANDARD TABLE OF stpo_api02 . CALL FUNCTION 'CSAP_MAT_BOM_READ' EXPORTING material = ls_csap_mbom - matnr plant = ls_csap_mbom - werks bom_usage = ls_csap_mbom - stlan alternative = ls_csap_mbom - stlal valid_from = ls_csap_mbom - datuv change_no = ls_csap_mbom - aennr TABLES t_stpo = lt_stpo_api02_old t_stko = lt_stko_api02_old EXCEPTIONS error = 1 OTHERS = 2 . IF sy - subrc = 0 . READ TABLE lt_stko_api02_old INTO DATA ( ls_stko_api02_upd ) INDEX 1 . \" \u89c1LCSDIFEH\u4e2d\u7684rc29k_stko_compare\u5b50\u4f8b\u7a0b\uff0c\u62ac\u5934\u53ea\u6709\u90e8\u5206\u5b57\u6bb5\u53ef\u4fee\u6539 \" \u6570\u91cf\u3001\u5355\u4f4d\u3001\u62ac\u5934\u6587\u672c\u90fd\u4e0d\u5728\u4fee\u6539\u8303\u56f4\u5185 * ls_stko_api02_upd-alt_text = ls_stko_api01-alt_text. ls_stko_api01 = CORRESPONDING # ( ls_stko_api02_upd ). DATA lt_stpo_api03 TYPE STANDARD TABLE OF stpo_api03 . SORT lt_stpo_api01 BY item_no . SORT lt_stpo_api02_old BY item_no . \" \u4fee\u6539 LOOP AT lt_stpo_api01 INTO ls_stpo_api01 . READ TABLE lt_stpo_api02_old INTO DATA ( ls_stpo_api02_upd ) WITH KEY item_no = ls_stpo_api01 - item_no BINARY SEARCH . IF sy - subrc = 0 . DELETE lt_stpo_api02_old INDEX sy - tabix . ls_stpo_api02_upd - item_no = ls_stpo_api01 - item_no . ls_stpo_api02_upd - item_categ = ls_stpo_api01 - item_categ . ls_stpo_api02_upd - component = ls_stpo_api01 - component . ls_stpo_api02_upd - comp_qty = ls_stpo_api01 - comp_qty . ls_stpo_api02_upd - comp_unit = ls_stpo_api01 - comp_unit . ls_stpo_api02_upd - valid_from = ls_stpo_api01 - valid_from . ls_stpo_api02_upd - change_no = ls_stpo_api01 - change_no . ls_stpo_api02_upd - rel_prod = ls_stpo_api01 - rel_prod . ls_stpo_api02_upd - rel_cost = ls_stpo_api01 - rel_cost . ls_stpo_api02_upd - zspec1 = ls_stpo_api01 - zspec1 . ls_stpo_api02_upd - zspec2 = ls_stpo_api01 - zspec2 . ls_stpo_api02_upd - zspec3 = ls_stpo_api01 - zspec3 . INSERT CORRESPONDING # ( ls_stpo_api02_upd ) INTO TABLE lt_stpo_api03 . ELSE . INSERT CORRESPONDING # ( ls_stpo_api01 ) INTO TABLE lt_stpo_api03 . ENDIF . ENDLOOP . \" \u5220\u9664\u591a\u4f59\u7684\u65e7\u9879\u76ee LOOP AT lt_stpo_api02_old INTO DATA ( ls_stpo_api02_del ). ls_stpo_api02_del - fldelete = abap_true . INSERT CORRESPONDING # ( ls_stpo_api02_del ) INTO TABLE lt_stpo_api03 . ENDLOOP . SORT lt_stpo_api03 BY item_no . SET UPDATE TASK LOCAL . CALL FUNCTION 'CSAP_MAT_BOM_MAINTAIN' EXPORTING material = ls_csap_mbom - matnr plant = ls_csap_mbom - werks bom_usage = ls_csap_mbom - stlan alternative = ls_csap_mbom - stlal valid_from = ls_csap_mbom - datuv change_no = ls_csap_mbom - aennr i_stko = ls_stko_api01 fl_bom_create = 'X' fl_new_item = 'X' IMPORTING o_stko = ls_stko_api02 TABLES t_stpo = lt_stpo_api03 EXCEPTIONS error = 1 OTHERS = 2 . ELSE . SET UPDATE TASK LOCAL . CALL FUNCTION 'CSAP_MAT_BOM_CREATE' EXPORTING material = ls_csap_mbom - matnr plant = ls_csap_mbom - werks bom_usage = ls_csap_mbom - stlan alternative = ls_csap_mbom - stlal valid_from = ls_csap_mbom - datuv change_no = ls_csap_mbom - aennr i_stko = ls_stko_api01 IMPORTING bom_no = ls_stko_api02 - bom_no TABLES t_stpo = lt_stpo_api01 EXCEPTIONS error = 1 OTHERS = 2 . ENDIF . IF sy - subrc <> 0 . e_mtype = 'E' . MESSAGE ID sy - msgid TYPE sy - msgty NUMBER sy - msgno WITH sy - msgv1 sy - msgv2 sy - msgv3 sy - msgv4 INTO e_msg . MESSAGE e_msg TYPE 'S' DISPLAY LIKE 'E' . CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK' . ELSE . e_mtype = 'S' . e_msg = | \u5df2\u5904\u7406 |. MESSAGE e_msg TYPE 'S' . CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = 'X' . ENDIF . ENDFUNCTION .","title":"(M) \u7269\u6599BOM"},{"location":"master_data/bom/#m-bom_1","text":"\u901a\u8fc7 BAPI_MATERIAL_BOM_GROUP_CREATE \u5b9e\u73b0\u591a\u4e2a\u5907\u9009BOM\u7684\u521b\u5efa\u3002 \u7269\u6599BOM\u7ec4\u521b\u5efa\u51fd\u6570 FUNCTION zfm_mat_bgr_create IMPORTING i_mast TYPE mast i_stko TYPE stko EXPORTING e_mtype TYPE bapi_mtype e_msg TYPE bapi_msg et_bapiret2 TYPE bapiret2_t TABLES it_stpo LIKE stpo . DATA l_mtype TYPE bapi_mtype . DATA l_msg TYPE bapi_msg . DATA : testrun TYPE bapiflag , lt_bomgroup TYPE STANDARD TABLE OF bapi1080_bgr_c , ls_bomgroup TYPE bapi1080_bgr_c , lt_variants TYPE STANDARD TABLE OF bapi1080_bom_c , ls_variants TYPE bapi1080_bom_c , lt_materialrelations TYPE STANDARD TABLE OF bapi1080_mbm_c , ls_materialrelations TYPE bapi1080_mbm_c , lt_items TYPE STANDARD TABLE OF bapi1080_itm_c , ls_items TYPE bapi1080_itm_c , lt_itemassignments TYPE STANDARD TABLE OF bapi1080_rel_itm_bom_c , ls_itemassignments TYPE bapi1080_rel_itm_bom_c , lt_bomsubitems TYPE STANDARD TABLE OF bapi1080_sui_c , lt_bomsubitemas TYPE STANDARD TABLE OF bapi1080_rel_sui_itm_c , lt_texts TYPE STANDARD TABLE OF bapi1080_txt_c . \" \u6807\u8bc6 DATA l_uuid TYPE sysuuid_c32 . TRY . l_uuid = cl_system_uuid => create_uuid_c32_static ( ). CATCH cx_uuid_error . l_uuid = sy - datum && sy - uzeit && sy - uname . ENDTRY . \" \u65b0\u589e/\u7ef4\u62a4 DATA l_funciton TYPE cs_function . SELECT SINGLE COUNT ( * ) FROM mast WHERE matnr = @ i_mast - matnr AND werks = @ i_mast - werks AND stlan = @ i_mast - stlan AND stlal = @ i_mast - stlal . IF sy - subrc = 0 . \" \u4fee\u6539\u7528CSAP_MAT_BOM_MAINTAIN\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u662f\u4e3a\u4e86\u6269\u5c55\u5907\u9009BOM e_mtype = 'S' . e_msg = '\u5df2\u5904\u7406' . RETURN . ELSE . l_funciton = 'NEW' . ENDIF . \" OBJECT_TYPE\u7684\u57df\u503c\uff0c\u4e5f\u5907\u6ce8\u4e0b\uff0c\u514d\u5f97\u770b\u4e0d\u61c2 \" BGR - Bill of material group \" BOM - Material BOM assembly variant/alternative \" ITM - BOM item \" SUI - BOM Sub-Item \" OBJECT ID DATA l_head_object_id TYPE cs_object_id . l_head_object_id = 'HEAD' . CLEAR ls_bomgroup . ls_bomgroup - bom_group_identification = l_uuid . ls_bomgroup - object_type = 'BGR' . ls_bomgroup - object_id = l_head_object_id . ls_bomgroup - bom_usage = i_mast - stlan . \" BOM\u7528\u9014 ls_bomgroup - created_in_plant = i_mast - werks . \" \u5de5\u5382 INSERT ls_bomgroup INTO TABLE lt_bomgroup . \" \uff1f\uff1f\uff1f\u4e3a\u4ec0\u4e48\u6ca1\u6709STLTY\u53c2\u6570 CLEAR ls_variants . ls_variants - bom_group_identification = l_uuid . ls_variants - object_type = 'BOM' . ls_variants - object_id = l_head_object_id . ls_variants - alternative_bom = i_mast - stlal . \" \u5907\u9009\u7269\u6599\u6e05\u5355 ls_variants - alt_text = i_stko - stktx . \" \u6587\u672c ls_variants - bom_status = i_stko - stlst . \" BOM\u72b6\u6001 ls_variants - change_no = i_stko - aennr . \" \u53d8\u66f4\u53f7 ls_variants - valid_from_date = i_stko - datuv . ls_variants - function = l_funciton . INSERT ls_variants INTO TABLE lt_variants . CLEAR ls_materialrelations . ls_materialrelations - bom_group_identification = l_uuid . ls_materialrelations - material = ls_materialrelations - material_guid = ls_materialrelations - material_external = ls_materialrelations - material_long = i_mast - matnr . \" \u7269\u6599\u7f16\u7801 ls_materialrelations - plant = i_mast - werks . \" \u5de5\u5382 ls_materialrelations - bom_usage = i_mast - stlan . \" BOM\u7528\u9014 ls_materialrelations - alternative_bom = i_mast - stlal . \" \u5907\u9009\u7269\u6599\u6e05\u5355 INSERT ls_materialrelations INTO TABLE lt_materialrelations . LOOP AT it_stpo INTO DATA ( ls_stpo ). DATA ( l_tabix ) = sy - tabix * 10 . \" OBJECT ID DATA l_item_object_id TYPE cs_object_id . l_item_object_id = | ITEM { l_tabix }|. CLEAR ls_items . ls_items - bom_group_identification = l_uuid . ls_items - object_type = 'ITM' . ls_items - object_id = l_item_object_id . ls_items - item_no = |{ ls_stpo - posnr ALPHA = IN }|. \" \u884c\u53f7 ls_items - component = ls_stpo - idnrk . \" \u7ec4\u4ef6\u7269\u6599 ls_items - comp_qty = ls_stpo - menge . \" \u7ec4\u4ef6\u6570\u91cf ls_items - comp_unit = ls_stpo - meins . \" \u7ec4\u4ef6\u8ba1\u91cf\u5355\u4f4d ls_items - ltxt_lang = '1' . ls_items - valid_from_date = ls_stpo - datuv . \" \u6709\u6548\u8d77\u59cb\u65e5\u671f ls_items - change_no = ls_stpo - aennr . \" \u53d8\u66f4\u53f7 INSERT ls_items INTO TABLE lt_items . CLEAR ls_itemassignments . ls_itemassignments - bom_group_identification = l_uuid . ls_itemassignments - sub_object_type = 'ITM' . ls_itemassignments - sub_object_id = l_item_object_id . ls_itemassignments - super_object_type = 'BOM' . ls_itemassignments - super_object_id = l_head_object_id . ls_itemassignments - valid_from_date = sy - datum . ls_itemassignments - function = l_funciton . INSERT ls_itemassignments INTO TABLE lt_itemassignments . ENDLOOP . CALL FUNCTION 'BAPI_MATERIAL_BOM_GROUP_CREATE' EXPORTING all_error = 'X' TABLES bomgroup = lt_bomgroup variants = lt_variants items = lt_items materialrelations = lt_materialrelations itemassignments = lt_itemassignments return = et_bapiret2[] . CLEAR l_mtype . CLEAR l_msg . LOOP AT et_bapiret2 INTO DATA ( ls_return ) WHERE type CA 'AXE' . MESSAGE ID ls_return - id TYPE ls_return - type NUMBER ls_return - number WITH ls_return - message_v1 ls_return - message_v2 ls_return - message_v3 ls_return - message_v4 INTO l_msg . e_msg = |{ e_msg }{ l_msg } ; |. ENDLOOP . IF sy - subrc = 0 . e_mtype = 'E' . MESSAGE ID sy - msgid TYPE sy - msgty NUMBER sy - msgno WITH sy - msgv1 sy - msgv2 sy - msgv3 sy - msgv4 INTO e_msg . MESSAGE e_msg TYPE 'S' DISPLAY LIKE 'E' . CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK' . ELSE . e_mtype = 'S' . e_msg = | \u5df2\u5904\u7406 |. MESSAGE e_msg TYPE 'S' . CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = 'X' . ENDIF . ENDFUNCTION .","title":"(M) \u7269\u6599BOM\u7ec4"},{"location":"master_data/bom/#p-wbs-bom","text":"WBS BOM\u7528 CSAP_BOM_READ \u8bfb\u53d6\uff0c CSAP_BOM_CREATE \u521b\u5efa\uff0c CSAP_BOM_MAINTAIN \u7ef4\u62a4 WBS BOM\u7ef4\u62a4\u51fd\u6570 FUNCTION zfm_wbs_bom_maintain IMPORTING i_prps TYPE prps i_prst TYPE prst i_stko TYPE stko EXPORTING e_mtype TYPE bapi_mtype e_msg TYPE bapi_msg et_bapiret2 TYPE bapiret2_t TABLES it_stpo LIKE stpo . DATA : ls_ecsin TYPE csin , ls_stzub TYPE stzub , lt_stkob TYPE STANDARD TABLE OF stkob , ls_stkob TYPE stkob , lt_stpob TYPE STANDARD TABLE OF stpob , ls_stpob TYPE stpob . CLEAR ls_ecsin . ls_ecsin - matnr = i_prst - matnr . ls_ecsin - werks = i_prst - werks . ls_ecsin - pspnr = i_prps - pspnr . \" WBS\u7f16\u53f7 ls_ecsin - stlty = i_stko - stlty . \" BOM\u7c7b\u578b ls_ecsin - stlan = i_prst - stlan . \" BOM\u7528\u9014 \" \u6570\u91cf IF i_stko - bmeng IS NOT INITIAL . ls_ecsin - emeng = i_stko - bmeng . ELSE . ls_ecsin - emeng = 1 . ENDIF . ls_ecsin - aennr = i_prps - aennr . \" \u53d8\u66f4\u53f7 CLEAR ls_stkob . ls_stkob - stlty = i_stko - stlty . \" BOM\u7c7b\u578b ls_stkob - bmeng = i_stko - bmeng . ls_stkob - stktx = i_stko - stktx . CLEAR lt_stpob . LOOP AT it_stpo INTO DATA ( ls_stpo ). CLEAR ls_stpob . ls_stpob - posnr = ls_stpo - posnr . ls_stpob - datuv = ls_stpo - datuv . ls_stpob - stlty = ls_stpo - stlty . ls_stpob - postp = 'L' . ls_stpob - idnrk = ls_stpo - idnrk . ls_stpob - menge = ls_stpo - menge . ls_stpob - meins = ls_stpo - meins . ls_stpob - aennr = ls_stpo - aennr . ls_stpob - sortf = ls_stpo - sortf . \" \u5de5\u5e8f ls_stpob - zspec1 = ls_stpo - zspec1 . ls_stpob - zspec2 = ls_stpo - zspec2 . ls_stpob - zspec3 = ls_stpo - zspec3 . \" \u4f9b\u5e94\u5546/\u724c\u53f7/\u4ea7\u5730\u4e0d\u4e3a\u7a7a\u7684\u65f6\u5019 IF ls_stpo - zspec1 IS NOT INITIAL OR ls_stpo - zspec2 IS NOT INITIAL OR ls_stpo - zspec3 IS NOT INITIAL . ls_stpob - dspst = '1' . ENDIF . INSERT ls_stpob INTO TABLE lt_stpob . ENDLOOP . \" \u68c0\u67e5\u662f\u5426\u5df2\u5b58\u5728 DATA : lt_stkob_old TYPE STANDARD TABLE OF stkob , lt_stpob_old TYPE STANDARD TABLE OF stpob . CALL FUNCTION 'CSAI_BOM_READ' EXPORTING ecsin = ls_ecsin TABLES t_stkob = lt_stkob_old t_stpob = lt_stpob_old EXCEPTIONS error = 1 OTHERS = 2 . IF sy - subrc = 0 . \" \u62ac\u5934\u53ea\u6709\u63cf\u8ff0\u5141\u8bb8\u88ab\u4fee\u6539 READ TABLE lt_stkob_old INTO DATA ( ls_stkob_old ) INDEX 1 . ls_stkob_old - stktx = ls_stkob - stktx . ls_stkob = ls_stkob_old . SORT lt_stpob BY posnr . SORT lt_stpob_old BY posnr . \" \u4fee\u6539 LOOP AT lt_stpob REFERENCE INTO DATA ( lr_stpob ). lr_stpob -> vbkz = lr_stpob -> mvbkz = 'I' . \" \u65b0\u589e READ TABLE lt_stpob_old INTO DATA ( ls_stpob_upd ) WITH KEY posnr = lr_stpob -> posnr BINARY SEARCH . IF sy - subrc = 0 . DELETE lt_stpob_old INDEX sy - tabix . ls_stpob_upd - vbkz = ls_stpob_upd - mvbkz = 'U' . \" \u4fee\u6539 ls_stpob_upd - posnr = lr_stpob -> posnr . ls_stpob_upd - stlty = lr_stpob -> stlty . ls_stpob_upd - datuv = lr_stpob -> datuv . ls_stpob_upd - postp = lr_stpob -> postp . ls_stpob_upd - idnrk = lr_stpob -> idnrk . ls_stpob_upd - menge = lr_stpob -> menge . ls_stpob_upd - meins = lr_stpob -> meins . ls_stpob_upd - aennr = lr_stpob -> aennr . ls_stpob_upd - sortf = lr_stpob -> sortf . ls_stpob_upd - zspec1 = lr_stpob -> zspec1 . ls_stpob_upd - zspec2 = lr_stpob -> zspec2 . ls_stpob_upd - zspec3 = lr_stpob -> zspec3 . ls_stpob_upd - dspst = lr_stpob -> dspst . lr_stpob->* = ls_stpob_upd . * \" \u7528\u5b50\u9879\u76ee\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u4fee\u6539 * ls_stpob_upd-vgknt = ls_stpob_upd-stlkn. * ls_stpob_upd-vgpzl = ls_stpob_upd-stpoz. * CLEAR ls_stpob_upd-stlkn. * CLEAR ls_stpob_upd-stpoz. ENDIF . ENDLOOP . \" \u5220\u9664\u591a\u4f59\u7684\u65e7\u9879\u76ee LOOP AT lt_stpob_old INTO DATA ( ls_stpob_del ). ls_stpob_del - lkenz = abap_true . ls_stpob_del - vbkz = ls_stpob_upd - mvbkz = 'D' . \" \u5220\u9664\u6807\u8bc6 INSERT ls_stpob_del INTO TABLE lt_stpob . ENDLOOP . SORT lt_stpob BY posnr . \" \u7ef4\u62a4BOM CALL FUNCTION 'CSAI_BOM_MAINTAIN' EXPORTING ecsin = ls_ecsin estkob = ls_stkob estzub = ls_stzub IMPORTING astzub = ls_stzub TABLES t_stpob = lt_stpob EXCEPTIONS error = 1 OTHERS = 2 . ELSE . \" \u65b0\u589eBOM CALL FUNCTION 'CSAI_BOM_CREATE' EXPORTING ecsin = ls_ecsin estkob = ls_stkob estzub = ls_stzub IMPORTING astlnr = ls_stzub - stlnr TABLES t_stpob = lt_stpob EXCEPTIONS error = 1 OTHERS = 2 . ENDIF . IF sy - subrc <> 0 OR sy - msgty = 'E' . e_mtype = 'E' . MESSAGE ID sy - msgid TYPE sy - msgty NUMBER sy - msgno INTO e_msg WITH sy - msgv1 sy - msgv2 sy - msgv3 sy - msgv4 . CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK' . ELSE . e_mtype = 'S' . e_msg = | \u5df2\u5904\u7406 |. MESSAGE e_msg TYPE 'S' . CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = 'X' . ENDIF . ENDFUNCTION .","title":"(P) WBS BOM"},{"location":"master_data/bp/","text":"\u4e1a\u52a1\u4f19\u4f34 \u00b6","title":"\u4e1a\u52a1\u4f19\u4f34"},{"location":"master_data/bp/#_1","text":"","title":"\u4e1a\u52a1\u4f19\u4f34"},{"location":"master_data/material/","text":"\u7269\u6599 \u00b6 \u7269\u6599\u7ef4\u62a4 \u00b6 BAPI_MATERIAL_SAVEDATA \uff0c\u6bcf\u6b21\u53ea\u80fd\u6269\u5c55\u4e00\u4e2a\u5de5\u5382\u3002 BAPI_MATERIAL_SAVEREPLICA \uff0c\u5141\u8bb8\u6269\u5c55\u591a\u4e2a\u5de5\u5382\uff0c\u4e0b\u9762\u4f7f\u7528\u8be5\u51fd\u6570\u7ef4\u62a4\u7269\u6599\u3002 \u66f4\u65b0\u5931\u8d25\u7684\u60c5\u51b5 \u00b6 \u5355\u72ec\u66f4\u65b0\u8ba1\u5212\u4ef7\u683c1\uff08\u6210\u672c\u6838\u7b97\u89c6\u56fe2\uff09\u5931\u8d25\uff0c\u7531\u4e8e \u4ee3\u7801 \u00b6 \u51fd\u6570\u5f62\u5f0f FUNCTION zfm_demo_material_save_2 \" You can use the template 'functionModuleParameter' to add here the signature! . *&---------------------------------------------------------------------* *& \u6279\u5bfc\u6570\u636e *&---------------------------------------------------------------------* \" \u6f14\u793a\u7528\uff0c\u5047\u8bbe\u8fd9\u662f\u7a0b\u5e8f\u7684\u5165\u53c2\u548c\u51fa\u53c2 TYPES : BEGIN OF ty_data , matnr TYPE mara - matnr , mbrsh TYPE mara - mbrsh , mtart TYPE mara - mtart , maktx TYPE makt - maktx , werks TYPE werks_d , vkorg TYPE vkorg , mtype TYPE bapi_mtype , msg TYPE bapi_msg , END OF ty_data . TYPES tt_data TYPE STANDARD TABLE OF ty_data . DATA lt_data TYPE tt_data . DATA l_matnr TYPE matnr . DATA l_mtype TYPE bapi_mtype . DATA l_msg TYPE bapi_msg . *&---------------------------------------------------------------------* *& BAPI\u6570\u636e\u58f0\u660e *&---------------------------------------------------------------------* DATA l_global_data TYPE bapie1global_data . DATA : lt_headdata TYPE STANDARD TABLE OF bapie1matheader , lt_clientdata TYPE STANDARD TABLE OF bapie1mara , lt_clientdatax TYPE STANDARD TABLE OF bapie1marax , lt_plantdata TYPE STANDARD TABLE OF bapie1marc , lt_plantdatax TYPE STANDARD TABLE OF bapie1marcx , lt_forecastparameters TYPE STANDARD TABLE OF bapie1mpop , lt_forecastparametersx TYPE STANDARD TABLE OF bapie1mpopx , lt_planningdata TYPE STANDARD TABLE OF bapie1mpgd , lt_planningdatax TYPE STANDARD TABLE OF bapie1mpgdx , lt_storagelocationdata TYPE STANDARD TABLE OF bapie1mard , lt_storagelocationdatax TYPE STANDARD TABLE OF bapie1mardx , lt_valuationdata TYPE STANDARD TABLE OF bapie1mbew , lt_valuationdatax TYPE STANDARD TABLE OF bapie1mbewx , lt_warehousenumberdata TYPE STANDARD TABLE OF bapie1mlgn , lt_warehousenumberdatax TYPE STANDARD TABLE OF bapie1mlgnx , lt_salesdata TYPE STANDARD TABLE OF bapie1mvke , lt_salesdatax TYPE STANDARD TABLE OF bapie1mvkex , lt_storagetypedata TYPE STANDARD TABLE OF bapie1mlgt , lt_storagetypedatax TYPE STANDARD TABLE OF bapie1mlgtx , lt_materialdescription TYPE STANDARD TABLE OF bapie1makt , lt_unitsofmeasure TYPE STANDARD TABLE OF bapie1marm , lt_unitsofmeasurex TYPE STANDARD TABLE OF bapie1marmx , lt_internationalartnos TYPE STANDARD TABLE OF bapie1mean , lt_materiallongtext TYPE STANDARD TABLE OF bapie1mltx , lt_taxclassifications TYPE STANDARD TABLE OF bapie1mlan , lt_prtdata TYPE STANDARD TABLE OF bapie1mfhm , lt_prtdatax TYPE STANDARD TABLE OF bapie1mfhmx , lt_extensionin TYPE STANDARD TABLE OF bapie1parex , lt_extensioninx TYPE STANDARD TABLE OF bapie1parexx , lt_forecastvalues TYPE STANDARD TABLE OF bapie1mprw , lt_unplndconsumption TYPE STANDARD TABLE OF bapie1mveu , lt_totalconsumption TYPE STANDARD TABLE OF bapie1mveg . DATA : ls_headdata TYPE bapie1matheader , ls_clientdata TYPE bapie1mara , ls_clientdatax TYPE bapie1marax , ls_plantdata TYPE bapie1marc , ls_plantdatax TYPE bapie1marcx , ls_forecastparameters TYPE bapie1mpop , ls_forecastparametersx TYPE bapie1mpopx , ls_planningdata TYPE bapie1mpgd , ls_planningdatax TYPE bapie1mpgdx , ls_storagelocationdata TYPE bapie1mard , ls_storagelocationdatax TYPE bapie1mardx , ls_valuationdata TYPE bapie1mbew , ls_valuationdatax TYPE bapie1mbewx , ls_warehousenumberdata TYPE bapie1mlgn , ls_warehousenumberdatax TYPE bapie1mlgnx , ls_salesdata TYPE bapie1mvke , ls_salesdatax TYPE bapie1mvkex , ls_storagetypedata TYPE bapie1mlgt , ls_storagetypedatax TYPE bapie1mlgtx , ls_materialdescription TYPE bapie1makt , ls_unitsofmeasure TYPE bapie1marm , ls_unitsofmeasurex TYPE bapie1marmx , ls_internationalartnos TYPE bapie1mean , ls_materiallongtext TYPE bapie1mltx , ls_taxclassifications TYPE bapie1mlan , ls_prtdata TYPE bapie1mfhm , ls_prtdatax TYPE bapie1mfhmx , ls_extensionin TYPE bapie1parex , ls_extensioninx TYPE bapie1parexx , ls_forecastvalues TYPE bapie1mprw , ls_unplndconsumption TYPE bapie1mveu , ls_totalconsumption TYPE bapie1mveg . DATA : lt_return TYPE STANDARD TABLE OF bapie1ret2 , ls_return TYPE bapiret2 . *&---------------------------------------------------------------------* *& \u5206\u6279\u5904\u7406 *&---------------------------------------------------------------------* LOOP AT lt_data INTO DATA ( ls_data ) GROUP BY ( matnr = ls_data - matnr ) INTO DATA ( ls_data_grp ). \" \u4efb\u53d6\u4e00\u884c\u4f5c\u4e3a\u62ac\u5934 LOOP AT GROUP ls_data_grp INTO DATA ( ls_data_head ). EXIT . ENDLOOP . *&---------------------------------------------------------------------* *& \u7269\u6599\u53f7 *&---------------------------------------------------------------------* \" \u5927\u591a\u90fd\u662f\u5916\u90e8\u6307\u5b9a\u7269\u6599\u53f7\uff0c\u5982\u9700\u6d41\u6c34\u53ef\u81ea\u884c\u8c03\u6574 CLEAR l_matnr . CALL FUNCTION 'CONVERSION_EXIT_MATN1_INPUT' EXPORTING input = ls_data_head - matnr IMPORTING output = l_matnr EXCEPTIONS length_error = 1 OTHERS = 2 . *&---------------------------------------------------------------------* *& \u8bbe\u7f6e\u9700\u8981\u5bfc\u5165\u7684\u7269\u6599\u548c\u89c6\u56fe *&---------------------------------------------------------------------* CLEAR ls_headdata . ls_headdata - material_long = l_matnr . \" \u7269\u6599 ls_headdata - ind_sector = ls_data_head - mbrsh . \" \u884c\u4e1a\u9886\u57df ls_headdata - matl_type = ls_data_head - mtart . \" \u7269\u6599\u7c7b\u578b ls_headdata - basic_view = abap_true . ls_headdata - sales_view = abap_true . ls_headdata - purchase_view = abap_true . ls_headdata - mrp_view = abap_true . ls_headdata - forecast_view = abap_true . ls_headdata - work_sched_view = abap_true . ls_headdata - prt_view = abap_true . ls_headdata - storage_view = abap_true . ls_headdata - warehouse_view = abap_true . ls_headdata - quality_view = abap_true . ls_headdata - account_view = abap_true . ls_headdata - cost_view = abap_true . INSERT ls_headdata INTO TABLE lt_headdata . *&---------------------------------------------------------------------* *& \u57fa\u7840\u89c6\u56fe *&---------------------------------------------------------------------* DATA ls_mara_ga TYPE mara . DATA ls_bapi_mara_ga TYPE bapi_mara_ga . CLEAR ls_mara_ga . CLEAR ls_bapi_mara_ga . ls_mara_ga = CORRESPONDING # ( ls_data_head ). CALL FUNCTION 'MAP2E_MARA_TO_BAPI_MARA_GA' EXPORTING mara = ls_mara_ga CHANGING bapi_mara_ga = ls_bapi_mara_ga . CLEAR ls_clientdata . ls_clientdata = CORRESPONDING # ( ls_bapi_mara_ga ). ls_clientdata - material_long = l_matnr . CLEAR ls_clientdatax . PERFORM map_data_to_datax USING 'BAPIE1MARAX' ls_clientdata CHANGING ls_clientdatax . INSERT ls_clientdata INTO TABLE lt_clientdata . INSERT ls_clientdatax INTO TABLE lt_clientdatax . *&---------------------------------------------------------------------* *& \u5de5\u5382\u89c6\u56fe *&---------------------------------------------------------------------* DATA ls_marc_ga TYPE marc . DATA ls_bapi_marc_ga TYPE bapi_marc_ga . LOOP AT GROUP ls_data_grp INTO ls_data . CLEAR ls_marc_ga . CLEAR ls_bapi_marc_ga . ls_marc_ga = CORRESPONDING # ( ls_data ). CALL FUNCTION 'MAP2E_MARC_TO_BAPI_MARC_GA' EXPORTING marc = ls_marc_ga h_waers = 'CNY' CHANGING bapi_marc_ga = ls_bapi_marc_ga EXCEPTIONS error_converting_curr_amount = 1 . IF sy - subrc = 0 . CONTINUE . ENDIF . CLEAR ls_plantdata . ls_plantdata = CORRESPONDING # ( ls_bapi_marc_ga ). ls_plantdata - material_long = l_matnr . CLEAR ls_plantdatax . PERFORM map_data_to_datax USING 'BAPIE1MARCX' ls_plantdata CHANGING ls_plantdatax . INSERT ls_plantdata INTO TABLE lt_plantdata . INSERT ls_plantdatax INTO TABLE lt_plantdatax . ENDLOOP . SORT lt_plantdata BY plant . SORT lt_plantdatax BY plant . DELETE ADJACENT DUPLICATES FROM lt_plantdata COMPARING plant . DELETE ADJACENT DUPLICATES FROM lt_plantdatax COMPARING plant . **&---------------------------------------------------------------------* **& MPOP **&---------------------------------------------------------------------* * DATA ls_mpop_ga TYPE mpop. * DATA ls_bapi_mpop_ga TYPE bapi_mpop_ga. * * LOOP AT GROUP ls_data_grp INTO ls_data. * CLEAR ls_mpop_ga. * CLEAR ls_bapi_mpop_ga. * ls_mpop_ga = CORRESPONDING #( ls_data ). * CALL FUNCTION 'MAP2E_MPOP_TO_BAPI_MPOP_GA' * EXPORTING * mpop = ls_mpop_ga * CHANGING * bapi_mpop_ga = ls_bapi_mpop_ga. * * CLEAR ls_forecastparameters. * ls_forecastparameters = CORRESPONDING #( ls_bapi_mpop_ga ). * ls_forecastparameters-material_long = l_matnr. * * CLEAR ls_forecastparametersx. * PERFORM map_data_to_datax USING 'BAPIE1MPOPX' ls_forecastparameters CHANGING ls_forecastparametersx. * * INSERT ls_forecastparameters INTO TABLE lt_forecastparameters. * INSERT ls_forecastparametersx INTO TABLE lt_forecastparametersx. * ENDLOOP. * * SORT lt_forecastparameters BY plant. * SORT lt_forecastparametersx BY plant. * DELETE ADJACENT DUPLICATES FROM lt_forecastparameters COMPARING plant. * DELETE ADJACENT DUPLICATES FROM lt_forecastparametersx COMPARING plant. **&---------------------------------------------------------------------* **& MPGD **&---------------------------------------------------------------------* * DATA ls_mpgd_ga TYPE mpgd. * DATA ls_bapi_mpgd_ga TYPE bapi_mpgd_ga. * * LOOP AT GROUP ls_data_grp INTO ls_data. * CLEAR ls_mpgd_ga. * CLEAR ls_bapi_mpgd_ga. * ls_mpgd_ga = CORRESPONDING #( ls_data ). * CALL FUNCTION 'MAP2E_MPGD_TO_BAPI_MPGD_GA' * EXPORTING * mpgd = ls_mpgd_ga * CHANGING * bapi_mpgd_ga = ls_bapi_mpgd_ga. * * CLEAR ls_planningdata. * ls_planningdata = CORRESPONDING #( ls_bapi_mpgd_ga ). * ls_planningdata-material_long = l_matnr. * * CLEAR ls_planningdatax. * PERFORM map_data_to_datax USING 'BAPIE1MPGDX' ls_planningdata CHANGING ls_planningdatax. * * INSERT ls_planningdata INTO TABLE lt_planningdata. * INSERT ls_planningdatax INTO TABLE lt_planningdatax. * ENDLOOP. * * SORT lt_planningdata BY plant. * SORT lt_planningdatax BY plant. * DELETE ADJACENT DUPLICATES FROM lt_planningdata COMPARING plant. * DELETE ADJACENT DUPLICATES FROM lt_planningdatax COMPARING plant. *&---------------------------------------------------------------------* *& \u5e93\u4f4d\u89c6\u56fe *&---------------------------------------------------------------------* DATA ls_mard_ga TYPE mard . DATA ls_bapi_mard_ga TYPE bapi_mard_ga . LOOP AT GROUP ls_data_grp INTO ls_data . CLEAR ls_mard_ga . CLEAR ls_bapi_mard_ga . ls_mard_ga = CORRESPONDING # ( ls_data ). CALL FUNCTION 'MAP2E_MARD_TO_BAPI_MARD_GA' EXPORTING mard = ls_mard_ga CHANGING bapi_mard_ga = ls_bapi_mard_ga . CLEAR ls_storagelocationdata . ls_storagelocationdata = CORRESPONDING # ( ls_bapi_mard_ga ). ls_storagelocationdata - material_long = l_matnr . CLEAR ls_storagelocationdatax . PERFORM map_data_to_datax USING 'BAPIE1MARDX' ls_storagelocationdata CHANGING ls_storagelocationdatax . INSERT ls_storagelocationdata INTO TABLE lt_storagelocationdata . INSERT ls_storagelocationdatax INTO TABLE lt_storagelocationdatax . ENDLOOP . SORT lt_storagelocationdata BY plant stge_loc . SORT lt_storagelocationdatax BY plant stge_loc . DELETE ADJACENT DUPLICATES FROM lt_storagelocationdata COMPARING plant stge_loc . DELETE ADJACENT DUPLICATES FROM lt_storagelocationdatax COMPARING plant stge_loc . *&---------------------------------------------------------------------* *& \u8bc4\u4f30\u89c6\u56fe *&---------------------------------------------------------------------* DATA ls_mbew_ga TYPE mbew . DATA ls_bapi_mbew_ga TYPE bapi_mbew_ga . LOOP AT GROUP ls_data_grp INTO ls_data . CLEAR ls_mbew_ga . CLEAR ls_bapi_mbew_ga . ls_mbew_ga = CORRESPONDING # ( ls_data ). CALL FUNCTION 'MAP2E_MBEW_TO_BAPI_MBEW_GA' EXPORTING mbew = ls_mbew_ga h_waers = 'CNY' CHANGING bapi_mbew_ga = ls_bapi_mbew_ga EXCEPTIONS error_converting_curr_amount = 1 . IF sy - subrc <> 0 . CONTINUE . ENDIF . CLEAR ls_valuationdata . ls_valuationdata = CORRESPONDING # ( ls_bapi_mbew_ga ). ls_valuationdata - material_long = l_matnr . CLEAR ls_valuationdatax . PERFORM map_data_to_datax USING 'BAPIE1MBEWX' ls_valuationdata CHANGING ls_valuationdatax . INSERT ls_valuationdata INTO TABLE lt_valuationdata . INSERT ls_valuationdatax INTO TABLE lt_valuationdatax . ENDLOOP . SORT lt_valuationdata BY val_area val_type . SORT lt_valuationdatax BY val_area val_type . DELETE ADJACENT DUPLICATES FROM lt_valuationdata COMPARING val_area val_type . DELETE ADJACENT DUPLICATES FROM lt_valuationdatax COMPARING val_area val_type . *&---------------------------------------------------------------------* *& MLGN *&---------------------------------------------------------------------* DATA ls_mlgn_ga TYPE mlgn . DATA ls_bapi_mlgn_ga TYPE bapi_mlgn_ga . LOOP AT GROUP ls_data_grp INTO ls_data . CLEAR ls_mlgn_ga . CLEAR ls_bapi_mlgn_ga . ls_mlgn_ga = CORRESPONDING # ( ls_data ). CALL FUNCTION 'MAP2E_MLGN_TO_BAPI_MLGN_GA' EXPORTING mlgn = ls_mlgn_ga CHANGING bapi_mlgn_ga = ls_bapi_mlgn_ga . CLEAR ls_plantdata . ls_plantdata = CORRESPONDING # ( ls_bapi_mlgn_ga ). ls_plantdata - material_long = l_matnr . CLEAR ls_plantdatax . PERFORM map_data_to_datax USING 'BAPIE1MLGNX' ls_plantdata CHANGING ls_plantdatax . INSERT ls_plantdata INTO TABLE lt_plantdata . INSERT ls_plantdatax INTO TABLE lt_plantdatax . ENDLOOP . SORT lt_plantdata BY plant . SORT lt_plantdatax BY plant . DELETE ADJACENT DUPLICATES FROM lt_plantdata COMPARING plant . DELETE ADJACENT DUPLICATES FROM lt_plantdatax COMPARING plant . *&---------------------------------------------------------------------* *& \u9500\u552e\u89c6\u56fe *&---------------------------------------------------------------------* DATA ls_mvke_ga TYPE mvke . DATA ls_bapi_mvke_ga TYPE bapi_mvke_ga . LOOP AT GROUP ls_data_grp INTO ls_data . CLEAR ls_mvke_ga . CLEAR ls_bapi_mvke_ga . ls_mvke_ga = CORRESPONDING # ( ls_data ). CALL FUNCTION 'MAP2E_MVKE_TO_BAPI_MVKE_GA' EXPORTING mvke = ls_mvke_ga CHANGING bapi_mvke_ga = ls_bapi_mvke_ga . CLEAR ls_salesdata . ls_salesdata = CORRESPONDING # ( ls_bapi_mvke_ga ). ls_salesdata - material_long = l_matnr . CLEAR ls_salesdatax . PERFORM map_data_to_datax USING 'BAPIE1MVKEX' ls_salesdata CHANGING ls_salesdatax . INSERT ls_salesdata INTO TABLE lt_salesdata . INSERT ls_salesdatax INTO TABLE lt_salesdatax . ENDLOOP . SORT lt_salesdata BY sales_org distr_chan . SORT lt_salesdatax BY sales_org distr_chan . DELETE ADJACENT DUPLICATES FROM lt_salesdata COMPARING sales_org distr_chan . DELETE ADJACENT DUPLICATES FROM lt_salesdatax COMPARING sales_org distr_chan . *&---------------------------------------------------------------------* *& MLGT *&---------------------------------------------------------------------* DATA ls_mlgt_ga TYPE mlgt . DATA ls_bapi_mlgt_ga TYPE bapi_mlgt_ga . LOOP AT GROUP ls_data_grp INTO ls_data . CLEAR ls_mlgt_ga . CLEAR ls_bapi_mlgt_ga . ls_mlgt_ga = CORRESPONDING # ( ls_data ). CALL FUNCTION 'MAP2E_MLGT_TO_BAPI_MLGT_GA' EXPORTING mlgt = ls_mlgt_ga CHANGING bapi_mlgt_ga = ls_bapi_mlgt_ga . CLEAR ls_storagetypedata . ls_storagetypedata = CORRESPONDING # ( ls_bapi_mlgt_ga ). ls_storagetypedata - material_long = l_matnr . CLEAR ls_storagetypedatax . PERFORM map_data_to_datax USING 'BAPIE1MLGTX' ls_storagetypedata CHANGING ls_storagetypedatax . INSERT ls_storagetypedata INTO TABLE lt_storagetypedata . INSERT ls_storagetypedatax INTO TABLE lt_storagetypedatax . ENDLOOP . SORT lt_storagetypedata BY whse_no stge_type . SORT lt_storagetypedatax BY whse_no stge_type . DELETE ADJACENT DUPLICATES FROM lt_storagetypedata COMPARING whse_no stge_type . DELETE ADJACENT DUPLICATES FROM lt_storagetypedatax COMPARING whse_no stge_type . *&---------------------------------------------------------------------* *& \u7269\u6599\u63cf\u8ff0 *&---------------------------------------------------------------------* CLEAR ls_materialdescription . ls_materialdescription - material_long = l_matnr . ls_materialdescription - langu = '1' . ls_materialdescription - matl_desc = ls_data_head - maktx . INSERT ls_materialdescription INTO TABLE lt_materialdescription . SORT lt_materialdescription BY langu . DELETE ADJACENT DUPLICATES FROM lt_materialdescription COMPARING langu . **&---------------------------------------------------------------------* **& \u7a0e **&---------------------------------------------------------------------* * CLEAR ls_taxclassifications. * ls_taxclassifications-material_long = l_matnr. * ls_taxclassifications-depcountry = ls_data_head-aland. * ls_taxclassifications-tax_ind = ls_data_head-taxim. * * IF ls_data_head-taxm1 IS NOT INITIAL. * ls_taxclassifications-tax_type_1 = ls_data_head-taxm1. * ls_taxclassifications-taxclass_1 = ls_data_head-taxim. * ENDIF. * * IF ls_data_head-taxm2 IS NOT INITIAL. * ls_taxclassifications-tax_type_2 = ls_data_head-taxm2. * ls_taxclassifications-taxclass_2 = ls_data_head-taxim. * ENDIF. * * IF ls_data_head-taxm3 IS NOT INITIAL. * ls_taxclassifications-tax_type_3 = ls_data_head-taxm3. * ls_taxclassifications-taxclass_3 = ls_data_head-taxim. * ENDIF. * * IF ls_data_head-taxm4 IS NOT INITIAL. * ls_taxclassifications-tax_type_4 = ls_data_head-taxm4. * ls_taxclassifications-taxclass_4 = ls_data_head-taxim. * ENDIF. * * IF ls_data_head-taxm5 IS NOT INITIAL. * ls_taxclassifications-tax_type_5 = ls_data_head-taxm5. * ls_taxclassifications-taxclass_5 = ls_data_head-taxim. * ENDIF. * * IF ls_data_head-taxm6 IS NOT INITIAL. * ls_taxclassifications-tax_type_6 = ls_data_head-taxm6. * ls_taxclassifications-taxclass_6 = ls_data_head-taxim. * ENDIF. * * IF ls_data_head-taxm7 IS NOT INITIAL. * ls_taxclassifications-tax_type_7 = ls_data_head-taxm7. * ls_taxclassifications-taxclass_7 = ls_data_head-taxim. * ENDIF. * * IF ls_data_head-taxm8 IS NOT INITIAL. * ls_taxclassifications-tax_type_8 = ls_data_head-taxm8. * ls_taxclassifications-taxclass_8 = ls_data_head-taxim. * ENDIF. * * IF ls_data_head-taxm9 IS NOT INITIAL. * ls_taxclassifications-tax_type_9 = ls_data_head-taxm9. * ls_taxclassifications-taxclass_9 = ls_data_head-taxim. * ENDIF. * * INSERT ls_taxclassifications INTO TABLE lt_taxclassifications. **&---------------------------------------------------------------------* **& MARM **&---------------------------------------------------------------------* * DATA ls_marm_ga TYPE marm. * DATA ls_bapi_marm_ga TYPE bapi_marm_ga. * * LOOP AT GROUP ls_data_grp INTO ls_data. * CLEAR ls_marm_ga. * CLEAR ls_unitsofmeasure. * ls_marm_ga = CORRESPONDING #( ls_data ). * CALL FUNCTION 'MAP2E_MARM_TO_BAPIE1MARM' * EXPORTING * marm = ls_marm_ga * CHANGING * bapie1marm = ls_unitsofmeasure. * ls_unitsofmeasure-material_long = l_matnr. * * CLEAR ls_unitsofmeasurex. * PERFORM map_data_to_datax USING 'BAPIE1MARMX' ls_unitsofmeasure CHANGING ls_unitsofmeasurex. * * INSERT ls_unitsofmeasure INTO TABLE lt_unitsofmeasure. * INSERT ls_unitsofmeasurex INTO TABLE lt_unitsofmeasurex. * ENDLOOP. * * SORT lt_unitsofmeasure BY alt_unit alt_unit_iso. * SORT lt_unitsofmeasurex BY alt_unit alt_unit_iso. * DELETE ADJACENT DUPLICATES FROM lt_unitsofmeasure COMPARING alt_unit alt_unit_iso. * DELETE ADJACENT DUPLICATES FROM lt_unitsofmeasurex COMPARING alt_unit alt_unit_iso. *&---------------------------------------------------------------------* *& \u5bfc\u5165\u7269\u6599 *&---------------------------------------------------------------------* CLEAR lt_return . CALL FUNCTION 'BAPI_MATERIAL_SAVEREPLICA' EXPORTING noappllog = l_global_data - no_appl_log nochangedoc = l_global_data - no_change_doc testrun = l_global_data - testrun inpfldcheck = l_global_data - inp_fld_check TABLES headdata = lt_headdata clientdata = lt_clientdata clientdatax = lt_clientdatax plantdata = lt_plantdata plantdatax = lt_plantdatax forecastparameters = lt_forecastparameters forecastparametersx = lt_forecastparametersx planningdata = lt_planningdata planningdatax = lt_planningdatax storagelocationdata = lt_storagelocationdata storagelocationdatax = lt_storagelocationdatax valuationdata = lt_valuationdata valuationdatax = lt_valuationdatax warehousenumberdata = lt_warehousenumberdata warehousenumberdatax = lt_warehousenumberdatax salesdata = lt_salesdata salesdatax = lt_salesdatax storagetypedata = lt_storagetypedata storagetypedatax = lt_storagetypedatax materialdescription = lt_materialdescription unitsofmeasure = lt_unitsofmeasure unitsofmeasurex = lt_unitsofmeasurex * internationalartnos = lt_internationalartnos * materiallongtext = lt_materiallongtext taxclassifications = lt_taxclassifications * prtdata = lt_prtdata * prtdatax = lt_prtdatax extensionin = lt_extensionin extensioninx = lt_extensioninx * forecastvalues = lt_forecastvalues * unplndconsumption = lt_unplndconsumption * totalconsumption = lt_totalconsumption returnmessages = lt_return . CLEAR l_mtype . CLEAR l_msg . LOOP AT lt_return INTO ls_return WHERE type CA 'AXE' . MESSAGE ID ls_return - id TYPE ls_return - type NUMBER ls_return - number WITH ls_return - message_v1 ls_return - message_v2 ls_return - message_v3 ls_return - message_v4 INTO ls_return - message . l_msg = |{ l_msg }{ ls_return - message }|. ENDLOOP . IF sy - subrc = 0 . l_mtype = 'E' . CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK' . ELSE . l_matnr = lt_headdata [ 1 ] - material_long . l_mtype = 'S' . l_msg = '\u5df2\u5904\u7406' . CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = abap_true . ENDIF . \" \u56de\u5199\u6d88\u606f LOOP AT GROUP ls_data_grp REFERENCE INTO DATA ( lr_data ). lr_data -> mtype = l_mtype . lr_data -> msg = l_msg . ENDLOOP . ENDLOOP . ENDFUNCTION . *&---------------------------------------------------------------------* *& \u540c\u540dBAPIUPDATE\u5b57\u6bb5\u8d4b\u503c *&---------------------------------------------------------------------* FORM map_data_to_datax USING i_name TYPE tabname i_data TYPE data CHANGING c_datax TYPE data . FIELD-SYMBOLS <wa> TYPE any . FIELD-SYMBOLS <wax> TYPE any . SELECT fieldname , rollname FROM dd03l WHERE tabname = @ i_name INTO TABLE @ DATA ( lt_field ). LOOP AT lt_field INTO DATA ( ls_field ). ASSIGN COMPONENT ls_field - fieldname OF STRUCTURE i_data TO <wa> . ASSIGN COMPONENT ls_field - fieldname OF STRUCTURE c_datax TO <wax> . IF <wa> IS ASSIGNED AND <wax> IS ASSIGNED . IF ls_field - rollname = 'BAPIUPDATE' . IF <wa> IS NOT INITIAL AND <wa> <> '' . <wax> = abap_true . ENDIF . ELSE . <wax> = <wa> . ENDIF . ENDIF . ENDLOOP . ENDFORM . \u7269\u6599\u5206\u7c7b\u89c6\u56fe \u00b6 BAPI_OBJCL_CREATE \uff0c\u521b\u5efa\u7269\u6599\u5206\u7c7b\u89c6\u56fe BAPI_OBJCL_CHANGE \uff0c\u4fee\u6539\u7269\u6599\u5206\u7c7b\u89c6\u56fe BAPI_OBJCL_EXISTENCECHECK \uff0c\u68c0\u67e5\u7269\u6599\u662f\u5426\u5b58\u5728\u5206\u7c7b\u89c6\u56fe BAPI_OBJCL_GETDETAIL \uff0c\u83b7\u53d6\u7269\u6599\u5206\u7c7b\u7279\u5f81\u503c \u7269\u6599\u5206\u7c7b\u89c6\u56fe\u7ef4\u62a4 IDOC\u7269\u6599\u540c\u6b65 \u00b6 SAP\u7cfb\u7edf\u95f4\u8fc1\u79fb\u6216\u540c\u6b65\u7269\u6599\uff0c\u63a8\u8350\u4f7f\u7528IDOC\u5b9e\u73b0\uff0c\u4e0b\u9762\u8bb2\u8ff0\u5b9e\u73b0\u8fc7\u7a0b\u3002 IDOC\u540c\u6b65\u7269\u6599","title":"\u7269\u6599"},{"location":"master_data/material/#_1","text":"","title":"\u7269\u6599"},{"location":"master_data/material/#_2","text":"BAPI_MATERIAL_SAVEDATA \uff0c\u6bcf\u6b21\u53ea\u80fd\u6269\u5c55\u4e00\u4e2a\u5de5\u5382\u3002 BAPI_MATERIAL_SAVEREPLICA \uff0c\u5141\u8bb8\u6269\u5c55\u591a\u4e2a\u5de5\u5382\uff0c\u4e0b\u9762\u4f7f\u7528\u8be5\u51fd\u6570\u7ef4\u62a4\u7269\u6599\u3002","title":"\u7269\u6599\u7ef4\u62a4"},{"location":"master_data/material/#_3","text":"\u5355\u72ec\u66f4\u65b0\u8ba1\u5212\u4ef7\u683c1\uff08\u6210\u672c\u6838\u7b97\u89c6\u56fe2\uff09\u5931\u8d25\uff0c\u7531\u4e8e","title":"\u66f4\u65b0\u5931\u8d25\u7684\u60c5\u51b5"},{"location":"master_data/material/#_4","text":"\u51fd\u6570\u5f62\u5f0f FUNCTION zfm_demo_material_save_2 \" You can use the template 'functionModuleParameter' to add here the signature! . *&---------------------------------------------------------------------* *& \u6279\u5bfc\u6570\u636e *&---------------------------------------------------------------------* \" \u6f14\u793a\u7528\uff0c\u5047\u8bbe\u8fd9\u662f\u7a0b\u5e8f\u7684\u5165\u53c2\u548c\u51fa\u53c2 TYPES : BEGIN OF ty_data , matnr TYPE mara - matnr , mbrsh TYPE mara - mbrsh , mtart TYPE mara - mtart , maktx TYPE makt - maktx , werks TYPE werks_d , vkorg TYPE vkorg , mtype TYPE bapi_mtype , msg TYPE bapi_msg , END OF ty_data . TYPES tt_data TYPE STANDARD TABLE OF ty_data . DATA lt_data TYPE tt_data . DATA l_matnr TYPE matnr . DATA l_mtype TYPE bapi_mtype . DATA l_msg TYPE bapi_msg . *&---------------------------------------------------------------------* *& BAPI\u6570\u636e\u58f0\u660e *&---------------------------------------------------------------------* DATA l_global_data TYPE bapie1global_data . DATA : lt_headdata TYPE STANDARD TABLE OF bapie1matheader , lt_clientdata TYPE STANDARD TABLE OF bapie1mara , lt_clientdatax TYPE STANDARD TABLE OF bapie1marax , lt_plantdata TYPE STANDARD TABLE OF bapie1marc , lt_plantdatax TYPE STANDARD TABLE OF bapie1marcx , lt_forecastparameters TYPE STANDARD TABLE OF bapie1mpop , lt_forecastparametersx TYPE STANDARD TABLE OF bapie1mpopx , lt_planningdata TYPE STANDARD TABLE OF bapie1mpgd , lt_planningdatax TYPE STANDARD TABLE OF bapie1mpgdx , lt_storagelocationdata TYPE STANDARD TABLE OF bapie1mard , lt_storagelocationdatax TYPE STANDARD TABLE OF bapie1mardx , lt_valuationdata TYPE STANDARD TABLE OF bapie1mbew , lt_valuationdatax TYPE STANDARD TABLE OF bapie1mbewx , lt_warehousenumberdata TYPE STANDARD TABLE OF bapie1mlgn , lt_warehousenumberdatax TYPE STANDARD TABLE OF bapie1mlgnx , lt_salesdata TYPE STANDARD TABLE OF bapie1mvke , lt_salesdatax TYPE STANDARD TABLE OF bapie1mvkex , lt_storagetypedata TYPE STANDARD TABLE OF bapie1mlgt , lt_storagetypedatax TYPE STANDARD TABLE OF bapie1mlgtx , lt_materialdescription TYPE STANDARD TABLE OF bapie1makt , lt_unitsofmeasure TYPE STANDARD TABLE OF bapie1marm , lt_unitsofmeasurex TYPE STANDARD TABLE OF bapie1marmx , lt_internationalartnos TYPE STANDARD TABLE OF bapie1mean , lt_materiallongtext TYPE STANDARD TABLE OF bapie1mltx , lt_taxclassifications TYPE STANDARD TABLE OF bapie1mlan , lt_prtdata TYPE STANDARD TABLE OF bapie1mfhm , lt_prtdatax TYPE STANDARD TABLE OF bapie1mfhmx , lt_extensionin TYPE STANDARD TABLE OF bapie1parex , lt_extensioninx TYPE STANDARD TABLE OF bapie1parexx , lt_forecastvalues TYPE STANDARD TABLE OF bapie1mprw , lt_unplndconsumption TYPE STANDARD TABLE OF bapie1mveu , lt_totalconsumption TYPE STANDARD TABLE OF bapie1mveg . DATA : ls_headdata TYPE bapie1matheader , ls_clientdata TYPE bapie1mara , ls_clientdatax TYPE bapie1marax , ls_plantdata TYPE bapie1marc , ls_plantdatax TYPE bapie1marcx , ls_forecastparameters TYPE bapie1mpop , ls_forecastparametersx TYPE bapie1mpopx , ls_planningdata TYPE bapie1mpgd , ls_planningdatax TYPE bapie1mpgdx , ls_storagelocationdata TYPE bapie1mard , ls_storagelocationdatax TYPE bapie1mardx , ls_valuationdata TYPE bapie1mbew , ls_valuationdatax TYPE bapie1mbewx , ls_warehousenumberdata TYPE bapie1mlgn , ls_warehousenumberdatax TYPE bapie1mlgnx , ls_salesdata TYPE bapie1mvke , ls_salesdatax TYPE bapie1mvkex , ls_storagetypedata TYPE bapie1mlgt , ls_storagetypedatax TYPE bapie1mlgtx , ls_materialdescription TYPE bapie1makt , ls_unitsofmeasure TYPE bapie1marm , ls_unitsofmeasurex TYPE bapie1marmx , ls_internationalartnos TYPE bapie1mean , ls_materiallongtext TYPE bapie1mltx , ls_taxclassifications TYPE bapie1mlan , ls_prtdata TYPE bapie1mfhm , ls_prtdatax TYPE bapie1mfhmx , ls_extensionin TYPE bapie1parex , ls_extensioninx TYPE bapie1parexx , ls_forecastvalues TYPE bapie1mprw , ls_unplndconsumption TYPE bapie1mveu , ls_totalconsumption TYPE bapie1mveg . DATA : lt_return TYPE STANDARD TABLE OF bapie1ret2 , ls_return TYPE bapiret2 . *&---------------------------------------------------------------------* *& \u5206\u6279\u5904\u7406 *&---------------------------------------------------------------------* LOOP AT lt_data INTO DATA ( ls_data ) GROUP BY ( matnr = ls_data - matnr ) INTO DATA ( ls_data_grp ). \" \u4efb\u53d6\u4e00\u884c\u4f5c\u4e3a\u62ac\u5934 LOOP AT GROUP ls_data_grp INTO DATA ( ls_data_head ). EXIT . ENDLOOP . *&---------------------------------------------------------------------* *& \u7269\u6599\u53f7 *&---------------------------------------------------------------------* \" \u5927\u591a\u90fd\u662f\u5916\u90e8\u6307\u5b9a\u7269\u6599\u53f7\uff0c\u5982\u9700\u6d41\u6c34\u53ef\u81ea\u884c\u8c03\u6574 CLEAR l_matnr . CALL FUNCTION 'CONVERSION_EXIT_MATN1_INPUT' EXPORTING input = ls_data_head - matnr IMPORTING output = l_matnr EXCEPTIONS length_error = 1 OTHERS = 2 . *&---------------------------------------------------------------------* *& \u8bbe\u7f6e\u9700\u8981\u5bfc\u5165\u7684\u7269\u6599\u548c\u89c6\u56fe *&---------------------------------------------------------------------* CLEAR ls_headdata . ls_headdata - material_long = l_matnr . \" \u7269\u6599 ls_headdata - ind_sector = ls_data_head - mbrsh . \" \u884c\u4e1a\u9886\u57df ls_headdata - matl_type = ls_data_head - mtart . \" \u7269\u6599\u7c7b\u578b ls_headdata - basic_view = abap_true . ls_headdata - sales_view = abap_true . ls_headdata - purchase_view = abap_true . ls_headdata - mrp_view = abap_true . ls_headdata - forecast_view = abap_true . ls_headdata - work_sched_view = abap_true . ls_headdata - prt_view = abap_true . ls_headdata - storage_view = abap_true . ls_headdata - warehouse_view = abap_true . ls_headdata - quality_view = abap_true . ls_headdata - account_view = abap_true . ls_headdata - cost_view = abap_true . INSERT ls_headdata INTO TABLE lt_headdata . *&---------------------------------------------------------------------* *& \u57fa\u7840\u89c6\u56fe *&---------------------------------------------------------------------* DATA ls_mara_ga TYPE mara . DATA ls_bapi_mara_ga TYPE bapi_mara_ga . CLEAR ls_mara_ga . CLEAR ls_bapi_mara_ga . ls_mara_ga = CORRESPONDING # ( ls_data_head ). CALL FUNCTION 'MAP2E_MARA_TO_BAPI_MARA_GA' EXPORTING mara = ls_mara_ga CHANGING bapi_mara_ga = ls_bapi_mara_ga . CLEAR ls_clientdata . ls_clientdata = CORRESPONDING # ( ls_bapi_mara_ga ). ls_clientdata - material_long = l_matnr . CLEAR ls_clientdatax . PERFORM map_data_to_datax USING 'BAPIE1MARAX' ls_clientdata CHANGING ls_clientdatax . INSERT ls_clientdata INTO TABLE lt_clientdata . INSERT ls_clientdatax INTO TABLE lt_clientdatax . *&---------------------------------------------------------------------* *& \u5de5\u5382\u89c6\u56fe *&---------------------------------------------------------------------* DATA ls_marc_ga TYPE marc . DATA ls_bapi_marc_ga TYPE bapi_marc_ga . LOOP AT GROUP ls_data_grp INTO ls_data . CLEAR ls_marc_ga . CLEAR ls_bapi_marc_ga . ls_marc_ga = CORRESPONDING # ( ls_data ). CALL FUNCTION 'MAP2E_MARC_TO_BAPI_MARC_GA' EXPORTING marc = ls_marc_ga h_waers = 'CNY' CHANGING bapi_marc_ga = ls_bapi_marc_ga EXCEPTIONS error_converting_curr_amount = 1 . IF sy - subrc = 0 . CONTINUE . ENDIF . CLEAR ls_plantdata . ls_plantdata = CORRESPONDING # ( ls_bapi_marc_ga ). ls_plantdata - material_long = l_matnr . CLEAR ls_plantdatax . PERFORM map_data_to_datax USING 'BAPIE1MARCX' ls_plantdata CHANGING ls_plantdatax . INSERT ls_plantdata INTO TABLE lt_plantdata . INSERT ls_plantdatax INTO TABLE lt_plantdatax . ENDLOOP . SORT lt_plantdata BY plant . SORT lt_plantdatax BY plant . DELETE ADJACENT DUPLICATES FROM lt_plantdata COMPARING plant . DELETE ADJACENT DUPLICATES FROM lt_plantdatax COMPARING plant . **&---------------------------------------------------------------------* **& MPOP **&---------------------------------------------------------------------* * DATA ls_mpop_ga TYPE mpop. * DATA ls_bapi_mpop_ga TYPE bapi_mpop_ga. * * LOOP AT GROUP ls_data_grp INTO ls_data. * CLEAR ls_mpop_ga. * CLEAR ls_bapi_mpop_ga. * ls_mpop_ga = CORRESPONDING #( ls_data ). * CALL FUNCTION 'MAP2E_MPOP_TO_BAPI_MPOP_GA' * EXPORTING * mpop = ls_mpop_ga * CHANGING * bapi_mpop_ga = ls_bapi_mpop_ga. * * CLEAR ls_forecastparameters. * ls_forecastparameters = CORRESPONDING #( ls_bapi_mpop_ga ). * ls_forecastparameters-material_long = l_matnr. * * CLEAR ls_forecastparametersx. * PERFORM map_data_to_datax USING 'BAPIE1MPOPX' ls_forecastparameters CHANGING ls_forecastparametersx. * * INSERT ls_forecastparameters INTO TABLE lt_forecastparameters. * INSERT ls_forecastparametersx INTO TABLE lt_forecastparametersx. * ENDLOOP. * * SORT lt_forecastparameters BY plant. * SORT lt_forecastparametersx BY plant. * DELETE ADJACENT DUPLICATES FROM lt_forecastparameters COMPARING plant. * DELETE ADJACENT DUPLICATES FROM lt_forecastparametersx COMPARING plant. **&---------------------------------------------------------------------* **& MPGD **&---------------------------------------------------------------------* * DATA ls_mpgd_ga TYPE mpgd. * DATA ls_bapi_mpgd_ga TYPE bapi_mpgd_ga. * * LOOP AT GROUP ls_data_grp INTO ls_data. * CLEAR ls_mpgd_ga. * CLEAR ls_bapi_mpgd_ga. * ls_mpgd_ga = CORRESPONDING #( ls_data ). * CALL FUNCTION 'MAP2E_MPGD_TO_BAPI_MPGD_GA' * EXPORTING * mpgd = ls_mpgd_ga * CHANGING * bapi_mpgd_ga = ls_bapi_mpgd_ga. * * CLEAR ls_planningdata. * ls_planningdata = CORRESPONDING #( ls_bapi_mpgd_ga ). * ls_planningdata-material_long = l_matnr. * * CLEAR ls_planningdatax. * PERFORM map_data_to_datax USING 'BAPIE1MPGDX' ls_planningdata CHANGING ls_planningdatax. * * INSERT ls_planningdata INTO TABLE lt_planningdata. * INSERT ls_planningdatax INTO TABLE lt_planningdatax. * ENDLOOP. * * SORT lt_planningdata BY plant. * SORT lt_planningdatax BY plant. * DELETE ADJACENT DUPLICATES FROM lt_planningdata COMPARING plant. * DELETE ADJACENT DUPLICATES FROM lt_planningdatax COMPARING plant. *&---------------------------------------------------------------------* *& \u5e93\u4f4d\u89c6\u56fe *&---------------------------------------------------------------------* DATA ls_mard_ga TYPE mard . DATA ls_bapi_mard_ga TYPE bapi_mard_ga . LOOP AT GROUP ls_data_grp INTO ls_data . CLEAR ls_mard_ga . CLEAR ls_bapi_mard_ga . ls_mard_ga = CORRESPONDING # ( ls_data ). CALL FUNCTION 'MAP2E_MARD_TO_BAPI_MARD_GA' EXPORTING mard = ls_mard_ga CHANGING bapi_mard_ga = ls_bapi_mard_ga . CLEAR ls_storagelocationdata . ls_storagelocationdata = CORRESPONDING # ( ls_bapi_mard_ga ). ls_storagelocationdata - material_long = l_matnr . CLEAR ls_storagelocationdatax . PERFORM map_data_to_datax USING 'BAPIE1MARDX' ls_storagelocationdata CHANGING ls_storagelocationdatax . INSERT ls_storagelocationdata INTO TABLE lt_storagelocationdata . INSERT ls_storagelocationdatax INTO TABLE lt_storagelocationdatax . ENDLOOP . SORT lt_storagelocationdata BY plant stge_loc . SORT lt_storagelocationdatax BY plant stge_loc . DELETE ADJACENT DUPLICATES FROM lt_storagelocationdata COMPARING plant stge_loc . DELETE ADJACENT DUPLICATES FROM lt_storagelocationdatax COMPARING plant stge_loc . *&---------------------------------------------------------------------* *& \u8bc4\u4f30\u89c6\u56fe *&---------------------------------------------------------------------* DATA ls_mbew_ga TYPE mbew . DATA ls_bapi_mbew_ga TYPE bapi_mbew_ga . LOOP AT GROUP ls_data_grp INTO ls_data . CLEAR ls_mbew_ga . CLEAR ls_bapi_mbew_ga . ls_mbew_ga = CORRESPONDING # ( ls_data ). CALL FUNCTION 'MAP2E_MBEW_TO_BAPI_MBEW_GA' EXPORTING mbew = ls_mbew_ga h_waers = 'CNY' CHANGING bapi_mbew_ga = ls_bapi_mbew_ga EXCEPTIONS error_converting_curr_amount = 1 . IF sy - subrc <> 0 . CONTINUE . ENDIF . CLEAR ls_valuationdata . ls_valuationdata = CORRESPONDING # ( ls_bapi_mbew_ga ). ls_valuationdata - material_long = l_matnr . CLEAR ls_valuationdatax . PERFORM map_data_to_datax USING 'BAPIE1MBEWX' ls_valuationdata CHANGING ls_valuationdatax . INSERT ls_valuationdata INTO TABLE lt_valuationdata . INSERT ls_valuationdatax INTO TABLE lt_valuationdatax . ENDLOOP . SORT lt_valuationdata BY val_area val_type . SORT lt_valuationdatax BY val_area val_type . DELETE ADJACENT DUPLICATES FROM lt_valuationdata COMPARING val_area val_type . DELETE ADJACENT DUPLICATES FROM lt_valuationdatax COMPARING val_area val_type . *&---------------------------------------------------------------------* *& MLGN *&---------------------------------------------------------------------* DATA ls_mlgn_ga TYPE mlgn . DATA ls_bapi_mlgn_ga TYPE bapi_mlgn_ga . LOOP AT GROUP ls_data_grp INTO ls_data . CLEAR ls_mlgn_ga . CLEAR ls_bapi_mlgn_ga . ls_mlgn_ga = CORRESPONDING # ( ls_data ). CALL FUNCTION 'MAP2E_MLGN_TO_BAPI_MLGN_GA' EXPORTING mlgn = ls_mlgn_ga CHANGING bapi_mlgn_ga = ls_bapi_mlgn_ga . CLEAR ls_plantdata . ls_plantdata = CORRESPONDING # ( ls_bapi_mlgn_ga ). ls_plantdata - material_long = l_matnr . CLEAR ls_plantdatax . PERFORM map_data_to_datax USING 'BAPIE1MLGNX' ls_plantdata CHANGING ls_plantdatax . INSERT ls_plantdata INTO TABLE lt_plantdata . INSERT ls_plantdatax INTO TABLE lt_plantdatax . ENDLOOP . SORT lt_plantdata BY plant . SORT lt_plantdatax BY plant . DELETE ADJACENT DUPLICATES FROM lt_plantdata COMPARING plant . DELETE ADJACENT DUPLICATES FROM lt_plantdatax COMPARING plant . *&---------------------------------------------------------------------* *& \u9500\u552e\u89c6\u56fe *&---------------------------------------------------------------------* DATA ls_mvke_ga TYPE mvke . DATA ls_bapi_mvke_ga TYPE bapi_mvke_ga . LOOP AT GROUP ls_data_grp INTO ls_data . CLEAR ls_mvke_ga . CLEAR ls_bapi_mvke_ga . ls_mvke_ga = CORRESPONDING # ( ls_data ). CALL FUNCTION 'MAP2E_MVKE_TO_BAPI_MVKE_GA' EXPORTING mvke = ls_mvke_ga CHANGING bapi_mvke_ga = ls_bapi_mvke_ga . CLEAR ls_salesdata . ls_salesdata = CORRESPONDING # ( ls_bapi_mvke_ga ). ls_salesdata - material_long = l_matnr . CLEAR ls_salesdatax . PERFORM map_data_to_datax USING 'BAPIE1MVKEX' ls_salesdata CHANGING ls_salesdatax . INSERT ls_salesdata INTO TABLE lt_salesdata . INSERT ls_salesdatax INTO TABLE lt_salesdatax . ENDLOOP . SORT lt_salesdata BY sales_org distr_chan . SORT lt_salesdatax BY sales_org distr_chan . DELETE ADJACENT DUPLICATES FROM lt_salesdata COMPARING sales_org distr_chan . DELETE ADJACENT DUPLICATES FROM lt_salesdatax COMPARING sales_org distr_chan . *&---------------------------------------------------------------------* *& MLGT *&---------------------------------------------------------------------* DATA ls_mlgt_ga TYPE mlgt . DATA ls_bapi_mlgt_ga TYPE bapi_mlgt_ga . LOOP AT GROUP ls_data_grp INTO ls_data . CLEAR ls_mlgt_ga . CLEAR ls_bapi_mlgt_ga . ls_mlgt_ga = CORRESPONDING # ( ls_data ). CALL FUNCTION 'MAP2E_MLGT_TO_BAPI_MLGT_GA' EXPORTING mlgt = ls_mlgt_ga CHANGING bapi_mlgt_ga = ls_bapi_mlgt_ga . CLEAR ls_storagetypedata . ls_storagetypedata = CORRESPONDING # ( ls_bapi_mlgt_ga ). ls_storagetypedata - material_long = l_matnr . CLEAR ls_storagetypedatax . PERFORM map_data_to_datax USING 'BAPIE1MLGTX' ls_storagetypedata CHANGING ls_storagetypedatax . INSERT ls_storagetypedata INTO TABLE lt_storagetypedata . INSERT ls_storagetypedatax INTO TABLE lt_storagetypedatax . ENDLOOP . SORT lt_storagetypedata BY whse_no stge_type . SORT lt_storagetypedatax BY whse_no stge_type . DELETE ADJACENT DUPLICATES FROM lt_storagetypedata COMPARING whse_no stge_type . DELETE ADJACENT DUPLICATES FROM lt_storagetypedatax COMPARING whse_no stge_type . *&---------------------------------------------------------------------* *& \u7269\u6599\u63cf\u8ff0 *&---------------------------------------------------------------------* CLEAR ls_materialdescription . ls_materialdescription - material_long = l_matnr . ls_materialdescription - langu = '1' . ls_materialdescription - matl_desc = ls_data_head - maktx . INSERT ls_materialdescription INTO TABLE lt_materialdescription . SORT lt_materialdescription BY langu . DELETE ADJACENT DUPLICATES FROM lt_materialdescription COMPARING langu . **&---------------------------------------------------------------------* **& \u7a0e **&---------------------------------------------------------------------* * CLEAR ls_taxclassifications. * ls_taxclassifications-material_long = l_matnr. * ls_taxclassifications-depcountry = ls_data_head-aland. * ls_taxclassifications-tax_ind = ls_data_head-taxim. * * IF ls_data_head-taxm1 IS NOT INITIAL. * ls_taxclassifications-tax_type_1 = ls_data_head-taxm1. * ls_taxclassifications-taxclass_1 = ls_data_head-taxim. * ENDIF. * * IF ls_data_head-taxm2 IS NOT INITIAL. * ls_taxclassifications-tax_type_2 = ls_data_head-taxm2. * ls_taxclassifications-taxclass_2 = ls_data_head-taxim. * ENDIF. * * IF ls_data_head-taxm3 IS NOT INITIAL. * ls_taxclassifications-tax_type_3 = ls_data_head-taxm3. * ls_taxclassifications-taxclass_3 = ls_data_head-taxim. * ENDIF. * * IF ls_data_head-taxm4 IS NOT INITIAL. * ls_taxclassifications-tax_type_4 = ls_data_head-taxm4. * ls_taxclassifications-taxclass_4 = ls_data_head-taxim. * ENDIF. * * IF ls_data_head-taxm5 IS NOT INITIAL. * ls_taxclassifications-tax_type_5 = ls_data_head-taxm5. * ls_taxclassifications-taxclass_5 = ls_data_head-taxim. * ENDIF. * * IF ls_data_head-taxm6 IS NOT INITIAL. * ls_taxclassifications-tax_type_6 = ls_data_head-taxm6. * ls_taxclassifications-taxclass_6 = ls_data_head-taxim. * ENDIF. * * IF ls_data_head-taxm7 IS NOT INITIAL. * ls_taxclassifications-tax_type_7 = ls_data_head-taxm7. * ls_taxclassifications-taxclass_7 = ls_data_head-taxim. * ENDIF. * * IF ls_data_head-taxm8 IS NOT INITIAL. * ls_taxclassifications-tax_type_8 = ls_data_head-taxm8. * ls_taxclassifications-taxclass_8 = ls_data_head-taxim. * ENDIF. * * IF ls_data_head-taxm9 IS NOT INITIAL. * ls_taxclassifications-tax_type_9 = ls_data_head-taxm9. * ls_taxclassifications-taxclass_9 = ls_data_head-taxim. * ENDIF. * * INSERT ls_taxclassifications INTO TABLE lt_taxclassifications. **&---------------------------------------------------------------------* **& MARM **&---------------------------------------------------------------------* * DATA ls_marm_ga TYPE marm. * DATA ls_bapi_marm_ga TYPE bapi_marm_ga. * * LOOP AT GROUP ls_data_grp INTO ls_data. * CLEAR ls_marm_ga. * CLEAR ls_unitsofmeasure. * ls_marm_ga = CORRESPONDING #( ls_data ). * CALL FUNCTION 'MAP2E_MARM_TO_BAPIE1MARM' * EXPORTING * marm = ls_marm_ga * CHANGING * bapie1marm = ls_unitsofmeasure. * ls_unitsofmeasure-material_long = l_matnr. * * CLEAR ls_unitsofmeasurex. * PERFORM map_data_to_datax USING 'BAPIE1MARMX' ls_unitsofmeasure CHANGING ls_unitsofmeasurex. * * INSERT ls_unitsofmeasure INTO TABLE lt_unitsofmeasure. * INSERT ls_unitsofmeasurex INTO TABLE lt_unitsofmeasurex. * ENDLOOP. * * SORT lt_unitsofmeasure BY alt_unit alt_unit_iso. * SORT lt_unitsofmeasurex BY alt_unit alt_unit_iso. * DELETE ADJACENT DUPLICATES FROM lt_unitsofmeasure COMPARING alt_unit alt_unit_iso. * DELETE ADJACENT DUPLICATES FROM lt_unitsofmeasurex COMPARING alt_unit alt_unit_iso. *&---------------------------------------------------------------------* *& \u5bfc\u5165\u7269\u6599 *&---------------------------------------------------------------------* CLEAR lt_return . CALL FUNCTION 'BAPI_MATERIAL_SAVEREPLICA' EXPORTING noappllog = l_global_data - no_appl_log nochangedoc = l_global_data - no_change_doc testrun = l_global_data - testrun inpfldcheck = l_global_data - inp_fld_check TABLES headdata = lt_headdata clientdata = lt_clientdata clientdatax = lt_clientdatax plantdata = lt_plantdata plantdatax = lt_plantdatax forecastparameters = lt_forecastparameters forecastparametersx = lt_forecastparametersx planningdata = lt_planningdata planningdatax = lt_planningdatax storagelocationdata = lt_storagelocationdata storagelocationdatax = lt_storagelocationdatax valuationdata = lt_valuationdata valuationdatax = lt_valuationdatax warehousenumberdata = lt_warehousenumberdata warehousenumberdatax = lt_warehousenumberdatax salesdata = lt_salesdata salesdatax = lt_salesdatax storagetypedata = lt_storagetypedata storagetypedatax = lt_storagetypedatax materialdescription = lt_materialdescription unitsofmeasure = lt_unitsofmeasure unitsofmeasurex = lt_unitsofmeasurex * internationalartnos = lt_internationalartnos * materiallongtext = lt_materiallongtext taxclassifications = lt_taxclassifications * prtdata = lt_prtdata * prtdatax = lt_prtdatax extensionin = lt_extensionin extensioninx = lt_extensioninx * forecastvalues = lt_forecastvalues * unplndconsumption = lt_unplndconsumption * totalconsumption = lt_totalconsumption returnmessages = lt_return . CLEAR l_mtype . CLEAR l_msg . LOOP AT lt_return INTO ls_return WHERE type CA 'AXE' . MESSAGE ID ls_return - id TYPE ls_return - type NUMBER ls_return - number WITH ls_return - message_v1 ls_return - message_v2 ls_return - message_v3 ls_return - message_v4 INTO ls_return - message . l_msg = |{ l_msg }{ ls_return - message }|. ENDLOOP . IF sy - subrc = 0 . l_mtype = 'E' . CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK' . ELSE . l_matnr = lt_headdata [ 1 ] - material_long . l_mtype = 'S' . l_msg = '\u5df2\u5904\u7406' . CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = abap_true . ENDIF . \" \u56de\u5199\u6d88\u606f LOOP AT GROUP ls_data_grp REFERENCE INTO DATA ( lr_data ). lr_data -> mtype = l_mtype . lr_data -> msg = l_msg . ENDLOOP . ENDLOOP . ENDFUNCTION . *&---------------------------------------------------------------------* *& \u540c\u540dBAPIUPDATE\u5b57\u6bb5\u8d4b\u503c *&---------------------------------------------------------------------* FORM map_data_to_datax USING i_name TYPE tabname i_data TYPE data CHANGING c_datax TYPE data . FIELD-SYMBOLS <wa> TYPE any . FIELD-SYMBOLS <wax> TYPE any . SELECT fieldname , rollname FROM dd03l WHERE tabname = @ i_name INTO TABLE @ DATA ( lt_field ). LOOP AT lt_field INTO DATA ( ls_field ). ASSIGN COMPONENT ls_field - fieldname OF STRUCTURE i_data TO <wa> . ASSIGN COMPONENT ls_field - fieldname OF STRUCTURE c_datax TO <wax> . IF <wa> IS ASSIGNED AND <wax> IS ASSIGNED . IF ls_field - rollname = 'BAPIUPDATE' . IF <wa> IS NOT INITIAL AND <wa> <> '' . <wax> = abap_true . ENDIF . ELSE . <wax> = <wa> . ENDIF . ENDIF . ENDLOOP . ENDFORM .","title":"\u4ee3\u7801"},{"location":"master_data/material/#_5","text":"BAPI_OBJCL_CREATE \uff0c\u521b\u5efa\u7269\u6599\u5206\u7c7b\u89c6\u56fe BAPI_OBJCL_CHANGE \uff0c\u4fee\u6539\u7269\u6599\u5206\u7c7b\u89c6\u56fe BAPI_OBJCL_EXISTENCECHECK \uff0c\u68c0\u67e5\u7269\u6599\u662f\u5426\u5b58\u5728\u5206\u7c7b\u89c6\u56fe BAPI_OBJCL_GETDETAIL \uff0c\u83b7\u53d6\u7269\u6599\u5206\u7c7b\u7279\u5f81\u503c \u7269\u6599\u5206\u7c7b\u89c6\u56fe\u7ef4\u62a4","title":"\u7269\u6599\u5206\u7c7b\u89c6\u56fe"},{"location":"master_data/material/#idoc","text":"SAP\u7cfb\u7edf\u95f4\u8fc1\u79fb\u6216\u540c\u6b65\u7269\u6599\uff0c\u63a8\u8350\u4f7f\u7528IDOC\u5b9e\u73b0\uff0c\u4e0b\u9762\u8bb2\u8ff0\u5b9e\u73b0\u8fc7\u7a0b\u3002 IDOC\u540c\u6b65\u7269\u6599","title":"IDOC\u7269\u6599\u540c\u6b65"},{"location":"master_data/work_center/","text":"\u5de5\u4f5c\u4e2d\u5fc3 \u00b6 \u4f7f\u7528 CL_PP_WORK_CENTER_BO \u5bfc\u5165\u5de5\u4f5c\u4e2d\u5fc3 \u4e0a\u9762\u7c7b\u901a\u8fc7\u5c01\u88c5 CRAP_WORKCENTER_CREATE \u5b9e\u73b0\uff0c\u5e76\u591a\u4e86\u8fd4\u56de\u4fe1\u606f \u5de5\u4f5c\u4e2d\u5fc3\u5bfc\u5165 TYPES : BEGIN OF ty_data , \" \u521b\u5efa\u5de5\u4f5c\u4e2d\u5fc3\u5fc5\u586b\u5b57\u6bb5 arbpl TYPE crhd - arbpl , \" \u5de5\u4f5c\u4e2d\u5fc3 werks TYPE crhd - werks , \" \u5de5\u5382 kostl TYPE crco - kostl , \" \u6210\u672c\u4e2d\u5fc3 \" \u5904\u7406\u8fd4\u56de mtype TYPE bapi_mtype , msg TYPE bapi_msg , END OF ty_data . DATA lt_data TYPE STANDARD TABLE OF ty_data . DATA ls_crhd_api01 TYPE crhd_api01 . DATA ls_crhd_api02 TYPE crhd_api02 . DATA ls_crhd_api03 TYPE crhd_api03 . DATA ls_crhd_api05 TYPE crhd_api05 . DATA lt_kapa_api01 TYPE STANDARD TABLE OF kapa_api01 . DATA lt_kapa_api02 TYPE STANDARD TABLE OF kapa_api02 . DATA lt_crhd_api04 TYPE STANDARD TABLE OF crhd_api04 . DATA lt_crco_api01 TYPE STANDARD TABLE OF crco_api01 . DATA ls_kapa_api01 TYPE kapa_api01 . DATA ls_kapa_api02 TYPE kapa_api02 . DATA ls_crhd_api04 TYPE crhd_api04 . DATA ls_crco_api01 TYPE crco_api01 . DATA lt_return TYPE bapiret2_tab . DATA l_mtype TYPE bapi_mtype . DATA l_msg TYPE bapi_msg . \" \u67e5\u627e\u5de5\u5382\u5bf9\u5e94\u65e5\u5386 IF lt_data[] IS NOT INITIAL . SELECT werks , fabkl FROM t001w FOR ALL ENTRIES IN @ lt_data[] WHERE werks = @ lt_data - werks INTO TABLE @ DATA ( lt_t001w ). SORT lt_t001w BY werks . DELETE ADJACENT DUPLICATES FROM lt_t001w COMPARING werks . ENDIF . \" \u5206\u7ec4\u5904\u7406 LOOP AT lt_data INTO DATA ( ls_data ) WHERE mtype <> 'E' GROUP BY ( arbpl = ls_data - arbpl werks = ls_data - werks group_size = GROUP SIZE ) INTO DATA ( ls_data_grp ). \" \u91cd\u590d\u4ee3\u7801\uff0c\u9000\u51fa\u65f6\u5199\u5165\u5904\u7406\u7ed3\u679c DATA lr_data LIKE REF TO ls_data . DEFINE _contiune . CLEAR l_mtype . CLEAR l_msg . l_mtype = &1 . l_msg = &2 . LOOP AT GROUP ls_data_grp REFERENCE INTO lr_data . lr_data -> mtype = l_mtype . lr_data -> msg = l_msg . ENDLOOP . CONTINUE . END-OF-DEFINITION . \" \u53d6\u5de5\u5382\u76f8\u5173\u6570\u636e READ TABLE lt_t001w INTO DATA ( ls_t001w ) WITH KEY werks = ls_data_grp - werks BINARY SEARCH . IF sy - subrc <> 0 . l_msg = | \u5de5\u5382 { ls_data_grp - werks } \u4e0d\u5b58\u5728 |. _contiune 'E' l_msg . ENDIF . CLEAR ls_crhd_api01 . ls_crhd_api01 - arbpl = ls_data_grp - arbpl . ls_crhd_api01 - werks = ls_data_grp - werks . ls_crhd_api01 - verwe = '0001' . ls_crhd_api01 - ktext = |{ ls_data_grp - arbpl } - { ls_data_grp - werks }|. \" \u5de5\u4f5c\u4e2d\u5fc3\u6587\u672c CLEAR ls_crhd_api02 . ls_crhd_api02 - planv = '009' . ls_crhd_api02 - veran = 'DF' . ls_crhd_api02 - vgwts = 'DFDL' . CLEAR ls_crhd_api03 . ls_crhd_api03 - steus = 'DF01' . ls_crhd_api03 - vge01 = 'STD' . \" h - \u5185\u7801 ls_crhd_api03 - vge02 = 'STD' . \" h - \u5185\u7801 ls_crhd_api03 - vge03 = 'STD' . \" h - \u5185\u7801 ls_crhd_api03 - vge04 = 'KG' . \" kg - \u5185\u7801 ls_crhd_api03 - vge05 = 'STD' . \" h - \u5185\u7801 ls_crhd_api03 - vge06 = 'KG' . \" kg - \u5185\u7801 CLEAR ls_crhd_api05 . ls_crhd_api05 - kapart = '001' . ls_crhd_api05 - fort2 = 'DF_PP' . CLEAR lt_kapa_api01 . CLEAR ls_kapa_api01 . ls_kapa_api01 - canum = '1' . ls_kapa_api01 - kapart = '001' . \" \u8fd9\u4e2a\u4e0d\u586b\uff0c\u4e0b\u9762FM\u624d\u4f1a\u4f1a\u81ea\u52a8\u521b\u5efa\u80fd\u529b \" \u6216\u8005\u624b\u5de5\u8c03\u7528CRAP_CAPACITY_CREATE\u521b\u5efa\u80fd\u529b \" ls_kapa_api01-kapname = '\u673a\u5668'. ls_kapa_api01 - werks = ls_data_grp - werks . ls_kapa_api01 - ktext = '\u673a\u5668' . ls_kapa_api01 - kapid = ls_t001w - fabkl . \" \u4f7f\u7528\u5de5\u5382\u65e5\u5386 INSERT ls_kapa_api01 INTO TABLE lt_kapa_api01 . CLEAR lt_kapa_api02 . CLEAR ls_kapa_api02 . ls_kapa_api02 - canum = '1' . ls_kapa_api02 - planr = 'DF' . ls_kapa_api02 - kalid = ls_t001w - fabkl . ls_kapa_api02 - meins = 'STD' . \" h - \u5185\u7801 ls_kapa_api02 - begzt = '000000' . ls_kapa_api02 - endzt = '240000' . ls_kapa_api02 - ngrad = '100' . ls_kapa_api02 - aznor = ls_data_grp - group_size . \" \u6709\u591a\u5c11\u884c\u9879\u76ee INSERT ls_kapa_api02 INTO TABLE lt_kapa_api02 . CLEAR lt_crhd_api04 . CLEAR ls_crhd_api04 . ls_crhd_api04 - canum = '1' . ls_crhd_api04 - fork2 = 'DF_PP' . INSERT ls_crhd_api04 INTO TABLE lt_crhd_api04 . CLEAR lt_crco_api01 . LOOP AT GROUP ls_data_grp INTO ls_data . CLEAR ls_crco_api01 . ls_crco_api01 - kostl = ls_data - kostl . ls_crco_api01 - begda = sy - datum . ls_crco_api01 - endda = '99991231' . ls_crco_api01 - lstar1 = '1000' . ls_crco_api01 - lstar_ref1 = 'X' . ls_crco_api01 - leinh1 = 'STD' . \" h - \u5185\u7801 ls_crco_api01 - forml1 = 'DF_CO1' . ls_crco_api01 - lstar2 = '2000' . ls_crco_api01 - lstar_ref2 = 'X' . ls_crco_api01 - leinh2 = 'STD' . \" h - \u5185\u7801 ls_crco_api01 - forml2 = 'DF_CO2' . ls_crco_api01 - lstar3 = '3000' . ls_crco_api01 - lstar_ref3 = 'X' . ls_crco_api01 - leinh3 = 'STD' . \" h - \u5185\u7801 ls_crco_api01 - forml3 = 'DF_CO3' . ls_crco_api01 - lstar4 = '4000' . ls_crco_api01 - lstar_ref4 = 'X' . ls_crco_api01 - leinh4 = 'KG' . \" kg - \u5185\u7801 ls_crco_api01 - forml4 = 'DF_CO4' . ls_crco_api01 - lstar5 = '5000' . ls_crco_api01 - lstar_ref5 = 'X' . ls_crco_api01 - leinh5 = 'STD' . \" h - \u5185\u7801 ls_crco_api01 - forml5 = 'DF_CO5' . ls_crco_api01 - lstar6 = '6000' . ls_crco_api01 - lstar_ref6 = 'X' . ls_crco_api01 - leinh6 = 'KG' . \" kg - \u5185\u7801 ls_crco_api01 - forml6 = 'DF_CO6' . INSERT ls_crco_api01 INTO TABLE lt_crco_api01 . ENDLOOP . \" \u53ef\u80fd\u4e0d\u540c\u884c\u53ea\u662f\u8bbe\u5907\u7801\u4e0d\u4e00\u6837\uff0c\u800c\u6210\u672c\u4e2d\u5fc3\u662f\u4e00\u81f4\u7684 SORT lt_crco_api01 BY kostl . DELETE ADJACENT DUPLICATES FROM lt_crco_api01 COMPARING kostl . * CALL FUNCTION 'CRAP_WORKCENTER_CREATE' * EXPORTING * in_crhd_api01 = ls_crhd_api01 * in_crhd_api02 = ls_crhd_api02 * in_crhd_api03 = ls_crhd_api03 * in_crhd_api05 = ls_crhd_api05 * test = i_test * TABLES * in_kapa_api01 = lt_kapa_api01 * in_kapa_api02 = lt_kapa_api02 * in_crhd_api04 = lt_crhd_api04 * in_crco_api01 = lt_crco_api01. \" \u6362\u4e2a\u6807\u51c6\u5e26\u8fd4\u56de\u7684\uff0c\u65b9\u4fbf\u5c55\u793a\u6d88\u606f DATA ( lo_work_center ) = cl_pp_work_center_bo => get_instance ( ). CLEAR lt_return . lo_work_center -> create_work_center ( EXPORTING is_crhd_api01 = ls_crhd_api01 is_crhd_api02 = ls_crhd_api02 is_crhd_api03 = ls_crhd_api03 it_crhd_api04 = lt_crhd_api04 is_crhd_api05 = ls_crhd_api05 it_kapa_api01 = lt_kapa_api01 it_kapa_api02 = lt_kapa_api02 it_crco_api01 = lt_crco_api01 IMPORTING et_return = lt_return ). CLEAR l_mtype . CLEAR l_msg . LOOP AT lt_return INTO DATA ( ls_return ) WHERE type CA 'EA' . l_msg = |{ l_msg }{ ls_return - message } ; |. ENDLOOP . IF sy - subrc = 0 . _contiune 'E' l_msg . ELSE . _contiune 'S' '\u5de5\u4f5c\u4e2d\u5fc3\u5bfc\u5165\u6210\u529f' . ENDIF . ENDLOOP .","title":"\u5de5\u4f5c\u4e2d\u5fc3"},{"location":"master_data/work_center/#_1","text":"\u4f7f\u7528 CL_PP_WORK_CENTER_BO \u5bfc\u5165\u5de5\u4f5c\u4e2d\u5fc3 \u4e0a\u9762\u7c7b\u901a\u8fc7\u5c01\u88c5 CRAP_WORKCENTER_CREATE \u5b9e\u73b0\uff0c\u5e76\u591a\u4e86\u8fd4\u56de\u4fe1\u606f \u5de5\u4f5c\u4e2d\u5fc3\u5bfc\u5165 TYPES : BEGIN OF ty_data , \" \u521b\u5efa\u5de5\u4f5c\u4e2d\u5fc3\u5fc5\u586b\u5b57\u6bb5 arbpl TYPE crhd - arbpl , \" \u5de5\u4f5c\u4e2d\u5fc3 werks TYPE crhd - werks , \" \u5de5\u5382 kostl TYPE crco - kostl , \" \u6210\u672c\u4e2d\u5fc3 \" \u5904\u7406\u8fd4\u56de mtype TYPE bapi_mtype , msg TYPE bapi_msg , END OF ty_data . DATA lt_data TYPE STANDARD TABLE OF ty_data . DATA ls_crhd_api01 TYPE crhd_api01 . DATA ls_crhd_api02 TYPE crhd_api02 . DATA ls_crhd_api03 TYPE crhd_api03 . DATA ls_crhd_api05 TYPE crhd_api05 . DATA lt_kapa_api01 TYPE STANDARD TABLE OF kapa_api01 . DATA lt_kapa_api02 TYPE STANDARD TABLE OF kapa_api02 . DATA lt_crhd_api04 TYPE STANDARD TABLE OF crhd_api04 . DATA lt_crco_api01 TYPE STANDARD TABLE OF crco_api01 . DATA ls_kapa_api01 TYPE kapa_api01 . DATA ls_kapa_api02 TYPE kapa_api02 . DATA ls_crhd_api04 TYPE crhd_api04 . DATA ls_crco_api01 TYPE crco_api01 . DATA lt_return TYPE bapiret2_tab . DATA l_mtype TYPE bapi_mtype . DATA l_msg TYPE bapi_msg . \" \u67e5\u627e\u5de5\u5382\u5bf9\u5e94\u65e5\u5386 IF lt_data[] IS NOT INITIAL . SELECT werks , fabkl FROM t001w FOR ALL ENTRIES IN @ lt_data[] WHERE werks = @ lt_data - werks INTO TABLE @ DATA ( lt_t001w ). SORT lt_t001w BY werks . DELETE ADJACENT DUPLICATES FROM lt_t001w COMPARING werks . ENDIF . \" \u5206\u7ec4\u5904\u7406 LOOP AT lt_data INTO DATA ( ls_data ) WHERE mtype <> 'E' GROUP BY ( arbpl = ls_data - arbpl werks = ls_data - werks group_size = GROUP SIZE ) INTO DATA ( ls_data_grp ). \" \u91cd\u590d\u4ee3\u7801\uff0c\u9000\u51fa\u65f6\u5199\u5165\u5904\u7406\u7ed3\u679c DATA lr_data LIKE REF TO ls_data . DEFINE _contiune . CLEAR l_mtype . CLEAR l_msg . l_mtype = &1 . l_msg = &2 . LOOP AT GROUP ls_data_grp REFERENCE INTO lr_data . lr_data -> mtype = l_mtype . lr_data -> msg = l_msg . ENDLOOP . CONTINUE . END-OF-DEFINITION . \" \u53d6\u5de5\u5382\u76f8\u5173\u6570\u636e READ TABLE lt_t001w INTO DATA ( ls_t001w ) WITH KEY werks = ls_data_grp - werks BINARY SEARCH . IF sy - subrc <> 0 . l_msg = | \u5de5\u5382 { ls_data_grp - werks } \u4e0d\u5b58\u5728 |. _contiune 'E' l_msg . ENDIF . CLEAR ls_crhd_api01 . ls_crhd_api01 - arbpl = ls_data_grp - arbpl . ls_crhd_api01 - werks = ls_data_grp - werks . ls_crhd_api01 - verwe = '0001' . ls_crhd_api01 - ktext = |{ ls_data_grp - arbpl } - { ls_data_grp - werks }|. \" \u5de5\u4f5c\u4e2d\u5fc3\u6587\u672c CLEAR ls_crhd_api02 . ls_crhd_api02 - planv = '009' . ls_crhd_api02 - veran = 'DF' . ls_crhd_api02 - vgwts = 'DFDL' . CLEAR ls_crhd_api03 . ls_crhd_api03 - steus = 'DF01' . ls_crhd_api03 - vge01 = 'STD' . \" h - \u5185\u7801 ls_crhd_api03 - vge02 = 'STD' . \" h - \u5185\u7801 ls_crhd_api03 - vge03 = 'STD' . \" h - \u5185\u7801 ls_crhd_api03 - vge04 = 'KG' . \" kg - \u5185\u7801 ls_crhd_api03 - vge05 = 'STD' . \" h - \u5185\u7801 ls_crhd_api03 - vge06 = 'KG' . \" kg - \u5185\u7801 CLEAR ls_crhd_api05 . ls_crhd_api05 - kapart = '001' . ls_crhd_api05 - fort2 = 'DF_PP' . CLEAR lt_kapa_api01 . CLEAR ls_kapa_api01 . ls_kapa_api01 - canum = '1' . ls_kapa_api01 - kapart = '001' . \" \u8fd9\u4e2a\u4e0d\u586b\uff0c\u4e0b\u9762FM\u624d\u4f1a\u4f1a\u81ea\u52a8\u521b\u5efa\u80fd\u529b \" \u6216\u8005\u624b\u5de5\u8c03\u7528CRAP_CAPACITY_CREATE\u521b\u5efa\u80fd\u529b \" ls_kapa_api01-kapname = '\u673a\u5668'. ls_kapa_api01 - werks = ls_data_grp - werks . ls_kapa_api01 - ktext = '\u673a\u5668' . ls_kapa_api01 - kapid = ls_t001w - fabkl . \" \u4f7f\u7528\u5de5\u5382\u65e5\u5386 INSERT ls_kapa_api01 INTO TABLE lt_kapa_api01 . CLEAR lt_kapa_api02 . CLEAR ls_kapa_api02 . ls_kapa_api02 - canum = '1' . ls_kapa_api02 - planr = 'DF' . ls_kapa_api02 - kalid = ls_t001w - fabkl . ls_kapa_api02 - meins = 'STD' . \" h - \u5185\u7801 ls_kapa_api02 - begzt = '000000' . ls_kapa_api02 - endzt = '240000' . ls_kapa_api02 - ngrad = '100' . ls_kapa_api02 - aznor = ls_data_grp - group_size . \" \u6709\u591a\u5c11\u884c\u9879\u76ee INSERT ls_kapa_api02 INTO TABLE lt_kapa_api02 . CLEAR lt_crhd_api04 . CLEAR ls_crhd_api04 . ls_crhd_api04 - canum = '1' . ls_crhd_api04 - fork2 = 'DF_PP' . INSERT ls_crhd_api04 INTO TABLE lt_crhd_api04 . CLEAR lt_crco_api01 . LOOP AT GROUP ls_data_grp INTO ls_data . CLEAR ls_crco_api01 . ls_crco_api01 - kostl = ls_data - kostl . ls_crco_api01 - begda = sy - datum . ls_crco_api01 - endda = '99991231' . ls_crco_api01 - lstar1 = '1000' . ls_crco_api01 - lstar_ref1 = 'X' . ls_crco_api01 - leinh1 = 'STD' . \" h - \u5185\u7801 ls_crco_api01 - forml1 = 'DF_CO1' . ls_crco_api01 - lstar2 = '2000' . ls_crco_api01 - lstar_ref2 = 'X' . ls_crco_api01 - leinh2 = 'STD' . \" h - \u5185\u7801 ls_crco_api01 - forml2 = 'DF_CO2' . ls_crco_api01 - lstar3 = '3000' . ls_crco_api01 - lstar_ref3 = 'X' . ls_crco_api01 - leinh3 = 'STD' . \" h - \u5185\u7801 ls_crco_api01 - forml3 = 'DF_CO3' . ls_crco_api01 - lstar4 = '4000' . ls_crco_api01 - lstar_ref4 = 'X' . ls_crco_api01 - leinh4 = 'KG' . \" kg - \u5185\u7801 ls_crco_api01 - forml4 = 'DF_CO4' . ls_crco_api01 - lstar5 = '5000' . ls_crco_api01 - lstar_ref5 = 'X' . ls_crco_api01 - leinh5 = 'STD' . \" h - \u5185\u7801 ls_crco_api01 - forml5 = 'DF_CO5' . ls_crco_api01 - lstar6 = '6000' . ls_crco_api01 - lstar_ref6 = 'X' . ls_crco_api01 - leinh6 = 'KG' . \" kg - \u5185\u7801 ls_crco_api01 - forml6 = 'DF_CO6' . INSERT ls_crco_api01 INTO TABLE lt_crco_api01 . ENDLOOP . \" \u53ef\u80fd\u4e0d\u540c\u884c\u53ea\u662f\u8bbe\u5907\u7801\u4e0d\u4e00\u6837\uff0c\u800c\u6210\u672c\u4e2d\u5fc3\u662f\u4e00\u81f4\u7684 SORT lt_crco_api01 BY kostl . DELETE ADJACENT DUPLICATES FROM lt_crco_api01 COMPARING kostl . * CALL FUNCTION 'CRAP_WORKCENTER_CREATE' * EXPORTING * in_crhd_api01 = ls_crhd_api01 * in_crhd_api02 = ls_crhd_api02 * in_crhd_api03 = ls_crhd_api03 * in_crhd_api05 = ls_crhd_api05 * test = i_test * TABLES * in_kapa_api01 = lt_kapa_api01 * in_kapa_api02 = lt_kapa_api02 * in_crhd_api04 = lt_crhd_api04 * in_crco_api01 = lt_crco_api01. \" \u6362\u4e2a\u6807\u51c6\u5e26\u8fd4\u56de\u7684\uff0c\u65b9\u4fbf\u5c55\u793a\u6d88\u606f DATA ( lo_work_center ) = cl_pp_work_center_bo => get_instance ( ). CLEAR lt_return . lo_work_center -> create_work_center ( EXPORTING is_crhd_api01 = ls_crhd_api01 is_crhd_api02 = ls_crhd_api02 is_crhd_api03 = ls_crhd_api03 it_crhd_api04 = lt_crhd_api04 is_crhd_api05 = ls_crhd_api05 it_kapa_api01 = lt_kapa_api01 it_kapa_api02 = lt_kapa_api02 it_crco_api01 = lt_crco_api01 IMPORTING et_return = lt_return ). CLEAR l_mtype . CLEAR l_msg . LOOP AT lt_return INTO DATA ( ls_return ) WHERE type CA 'EA' . l_msg = |{ l_msg }{ ls_return - message } ; |. ENDLOOP . IF sy - subrc = 0 . _contiune 'E' l_msg . ELSE . _contiune 'S' '\u5de5\u4f5c\u4e2d\u5fc3\u5bfc\u5165\u6210\u529f' . ENDIF . ENDLOOP .","title":"\u5de5\u4f5c\u4e2d\u5fc3"},{"location":"mm/","text":"MM\u6a21\u5757\u6982\u8ff0 \u00b6 \u6211\u7406\u89e3\u7684MM\uff08Material Management\uff09\uff0c\u7269\u6599\u7ba1\u7406\u6a21\u5757\uff0c\u5305\u62ec\u4e86\u7269\u6599\u4e3b\u6570\u636e\uff0c\u91c7\u8d2d\u7ba1\u7406\uff0c\u5e93\u5b58\u7ba1\u7406\uff0c\u5171\u4e09\u4e2a\u90e8\u5206\u3002","title":"MM\u6a21\u5757\u6982\u8ff0"},{"location":"mm/#mm","text":"\u6211\u7406\u89e3\u7684MM\uff08Material Management\uff09\uff0c\u7269\u6599\u7ba1\u7406\u6a21\u5757\uff0c\u5305\u62ec\u4e86\u7269\u6599\u4e3b\u6570\u636e\uff0c\u91c7\u8d2d\u7ba1\u7406\uff0c\u5e93\u5b58\u7ba1\u7406\uff0c\u5171\u4e09\u4e2a\u90e8\u5206\u3002","title":"MM\u6a21\u5757\u6982\u8ff0"},{"location":"mm/inbound_delivery/","text":"\u5185\u5411\u4ea4\u8d27\u5355 \u00b6","title":"\u5185\u5411\u4ea4\u8d27\u5355"},{"location":"mm/inbound_delivery/#_1","text":"","title":"\u5185\u5411\u4ea4\u8d27\u5355"},{"location":"mm/inbound_delivery_post/","text":"\u91c7\u8d2d\u6536\u8d27\u8fc7\u8d26 \u00b6","title":"\u6536\u8d27\u8fc7\u8d26"},{"location":"mm/inbound_delivery_post/#_1","text":"","title":"\u91c7\u8d2d\u6536\u8d27\u8fc7\u8d26"},{"location":"mm/purchase/","text":"\u91c7\u8d2d\u8ba2\u5355 \u00b6","title":"\u91c7\u8d2d\u8ba2\u5355"},{"location":"mm/purchase/#_1","text":"","title":"\u91c7\u8d2d\u8ba2\u5355"},{"location":"others/","text":"\u5176\u4ed6\u6982\u8ff0 \u00b6 \u6682\u65f6\u6ca1\u60f3\u5230\u5206\u54ea\u4e2a\u6a21\u5757\u7684\uff0c\u90fd\u4f1a\u5199\u5230\u8fd9\u4e0b\u9762","title":"\u5176\u4ed6\u6982\u8ff0"},{"location":"others/#_1","text":"\u6682\u65f6\u6ca1\u60f3\u5230\u5206\u54ea\u4e2a\u6a21\u5757\u7684\uff0c\u90fd\u4f1a\u5199\u5230\u8fd9\u4e0b\u9762","title":"\u5176\u4ed6\u6982\u8ff0"},{"location":"others/alv/","text":"ALV \u00b6 \u6574\u7406\u4e0bALV\u7528\u5230\u7684\u4e24\u79cd\u65b9\u6cd5\uff0c\u4ee5\u53ca\u53ef\u80fd\u9047\u5230\u7684\u95ee\u9898 LVC \u00b6 LVC\u597d\u5728\u4e0d\u7528\u753b\u5c4f\u5e55\uff0c\u76f4\u63a5\u8c03\u7528\u5373\u53ef\u3002 INCLUDE_LVC *&---------------------------------------------------------------------* *& Form frm_display *&---------------------------------------------------------------------* *& text *&---------------------------------------------------------------------* *& --> p1 text *& <-- p2 text *&---------------------------------------------------------------------* FORM frm_display TABLES ct_data TYPE STANDARD TABLE . DATA ls_layout TYPE lvc_s_layo . DATA lt_fieldcat TYPE STANDARD TABLE OF lvc_s_fcat . PERFORM frm_set_layout CHANGING ls_layout . PERFORM frm_set_fieldcat TABLES lt_fieldcat . CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY_LVC' EXPORTING i_callback_program = sy - repid i_callback_pf_status_set = 'FRM_PF_STATUS' i_callback_user_command = 'FRM_USER_COMMAND' is_layout_lvc = ls_layout it_fieldcat_lvc = lt_fieldcat i_default = abap_true i_save = 'A' TABLES t_outtab = ct_data[] EXCEPTIONS program_error = 1 OTHERS = 2 . IF sy - subrc <> 0 . MESSAGE ID sy - msgid TYPE sy - msgty NUMBER sy - msgno WITH sy - msgv1 sy - msgv2 sy - msgv3 sy - msgv4 . ENDIF . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_set_layout *&---------------------------------------------------------------------* *& \u62a5\u8868\u5e03\u5c40\u8bbe\u7f6e *&---------------------------------------------------------------------* FORM frm_set_layout CHANGING cs_layout TYPE lvc_s_layo . CLEAR cs_layout . cs_layout - zebra = abap_true . \" \u6591\u9a6c\u7ebf cs_layout - cwidth_opt = abap_true . \" \u81ea\u52a8\u8c03\u6574ALVL\u5217\u5bbd cs_layout - sel_mode = 'A' . \" \u9009\u62e9\u6a21\u5f0f * CS_LAYOUT - box_fname = 'CHECKBOX' . \" \u9009\u62e9\u6846 * CS_LAYOUT - ctab_fname = 'COLTAB' . \" \u5355\u5143\u683c\u989c\u8272\u8bbe\u7f6e ENDFORM . *&---------------------------------------------------------------------* *& Form frm_set_fieldcat *&---------------------------------------------------------------------* *& \u5b57\u6bb5\u76ee\u5f55\u8bbe\u7f6e *&---------------------------------------------------------------------* FORM frm_set_fieldcat TABLES ct_fieldcat TYPE lvc_t_fcat . DATA ls_fieldcat TYPE lvc_s_fcat . DEFINE _init_fieldcat . CLEAR ls_fieldcat . ls_fieldcat - fieldname = &1 . ls_fieldcat - tooltip = ls_fieldcat - coltext = ls_fieldcat - seltext = ls_fieldcat - scrtext_l = ls_fieldcat - scrtext_m = ls_fieldcat - scrtext_s = &2 . ls_fieldcat - ref_table = &3 . ls_fieldcat - ref_field = &4 . INSERT ls_fieldcat INTO TABLE ct_fieldcat . END-OF-DEFINITION . _init_fieldcat 'ZSEL' '\u9009\u62e9\u9879' '' '' . _init_fieldcat 'MTYPE ' '\u5904\u7406\u72b6\u6001' '' '' . _init_fieldcat 'MSG ' '\u5904\u7406\u6d88\u606f' '' '' . \" \u4e2a\u6027\u5316\u81ea\u5df1\u8f93\u51fa\u6570\u636e\u683c\u5f0f LOOP AT ct_fieldcat REFERENCE INTO DATA ( lr_fieldcat ). \" \u5b57\u6bb5\u663e\u793a\u5c5e\u6027\u8bbe\u7f6e CASE lr_fieldcat -> fieldname . WHEN 'ZSEL' . lr_fieldcat -> checkbox = abap_true . lr_fieldcat -> edit = abap_true . lr_fieldcat -> hotspot = abap_true . WHEN 'MENGE' . lr_fieldcat -> qfieldname = 'MEINS' . WHEN OTHERS . ENDCASE . ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_pf_status *&---------------------------------------------------------------------* *& \u8bbe\u7f6eGUI\u72b6\u6001 *&---------------------------------------------------------------------* FORM frm_pf_status USING ct_extab TYPE slis_t_extab . SET PF-STATUS 'STATUS' . SET TITLEBAR 'TITLE' . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_user_command *&---------------------------------------------------------------------* *& \u529f\u80fd\u54cd\u5e94 *&---------------------------------------------------------------------* FORM frm_user_command USING cv_ucomm LIKE sy - ucomm cs_selfield TYPE slis_selfield . \" \u5237\u65b0\u5c4f\u5e55\u6570\u636e\u5230\u5185\u8868 DATA : lo_grid TYPE REF TO cl_gui_alv_grid . CALL FUNCTION 'GET_GLOBALS_FROM_SLVC_FULLSCR' IMPORTING e_grid = lo_grid . CALL METHOD lo_grid -> check_changed_data . PERFORM frm_get_data_selection . \" \u6309\u94ae\u529f\u80fd\u5b9e\u73b0 CASE cv_ucomm . WHEN '&IC1' . \" \u53cc\u51fb WHEN OTHERS . ENDCASE . \" \u5237\u65b0ALV \u663e\u793a\u503c cs_selfield - refresh = abap_true . cs_selfield - row_stable = abap_true . cs_selfield - col_stable = abap_true . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_get_data_selection *&---------------------------------------------------------------------* *& text *&---------------------------------------------------------------------* *& --> p1 text *& <-- p2 text *&---------------------------------------------------------------------* FORM frm_get_data_selection . \" \u5237\u65b0\u5c4f\u5e55\u6570\u636e\u5230\u5185\u8868 DATA : lo_grid TYPE REF TO cl_gui_alv_grid . CALL FUNCTION 'GET_GLOBALS_FROM_SLVC_FULLSCR' IMPORTING e_grid = lo_grid . \" \u83b7\u53d6ALV\u9009\u53d6\u884c DATA lt_rows TYPE lvc_t_row . CALL METHOD lo_grid -> get_selected_rows IMPORTING et_index_rows = lt_rows . LOOP AT lt_rows INTO DATA ( ls_row ). READ TABLE gt_data REFERENCE INTO DATA ( lr_data ) INDEX ls_row - index . IF sy - subrc = 0 . lr_data -> zsel = abap_true . ENDIF . ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_reset_data_selection *&---------------------------------------------------------------------* *& text *&---------------------------------------------------------------------* *& --> p1 text *& <-- p2 text *&---------------------------------------------------------------------* FORM frm_reset_data_selection . LOOP AT gt_data REFERENCE INTO DATA ( lr_data ). CLEAR lr_data -> zsel . ENDLOOP . ENDFORM . ALV GRID \u00b6 INCLUDE_ALV_GRID CLASS lcl_event_handler DEFINITION DEFERRED . DATA go_container TYPE REF TO cl_gui_container . DATA go_alv_grid TYPE REF TO cl_gui_alv_grid . DATA go_handler TYPE REF TO lcl_event_handler . *&---------------------------------------------------------------------* *& Form lcl_event_handler *&---------------------------------------------------------------------* CLASS lcl_event_handler DEFINITION . PUBLIC SECTION . \" \u6570\u636e\u53d8\u66f4\u4e8b\u4ef6 METHODS on_data_changed_finished FOR EVENT data_changed_finished OF cl_gui_alv_grid IMPORTING e_modified et_good_cells . \" \u5de5\u5177\u680f\u8c03\u6574 METHODS on_toolbar FOR EVENT toolbar OF cl_gui_alv_grid IMPORTING e_object e_interactive . \" \u54cd\u5e94\u5de5\u5177\u680f\u4e8b\u4ef6 \" \u70b9\u51fb\u6309\u94ae\u4e4b\u7c7b\u7684\u4e8b\u4ef6 METHODS on_user_command FOR EVENT user_command OF cl_gui_alv_grid IMPORTING e_ucomm . ENDCLASS . *&---------------------------------------------------------------------* *& Form lcl_event_handler *&---------------------------------------------------------------------* CLASS lcl_event_handler IMPLEMENTATION . *&---------------------------------------------------------------------* *& on_data_changed_finished *&---------------------------------------------------------------------* METHOD on_data_changed_finished . CHECK e_modified = abap_true . LOOP AT et_good_cells INTO DATA ( ls_cell ). READ TABLE gt_data REFERENCE INTO DATA ( lr_data ) INDEX ls_cell - row_id . IF sy - subrc = 0 . ENDIF . ENDLOOP . PERFORM frm_refresh_display . ENDMETHOD . *&---------------------------------------------------------------------* *& on_toolbar *&---------------------------------------------------------------------* METHOD on_toolbar . \" \u79fb\u9664\u7f16\u8f91\u76f8\u5173\u7684\u6309\u94ae DELETE e_object -> mt_toolbar WHERE function CS '&LOCAL&' . \" \u65b0\u589e\u6309\u94ae DATA ls_button LIKE LINE OF e_object -> mt_toolbar . CLEAR ls_button . ls_button - function = 'Z10' . ls_button - icon = icon_system_copy . ls_button - quickinfo = ls_button - text = '' . INSERT ls_button INTO TABLE e_object -> mt_toolbar . ENDMETHOD . *&---------------------------------------------------------------------* *& on_user_command *&---------------------------------------------------------------------* METHOD on_user_command . \" \u83b7\u53d6ALV\u9009\u53d6\u884c DATA lt_rows TYPE lvc_t_row . DATA ls_row TYPE lvc_s_row . CALL METHOD go_alv_grid -> get_selected_rows IMPORTING et_index_rows = lt_rows . CASE e_ucomm . WHEN 'Z10' . WHEN OTHERS . ENDCASE . PERFORM frm_refresh_display . ENDMETHOD . ENDCLASS . *&---------------------------------------------------------------------* *& Form frm_display *&---------------------------------------------------------------------* *& text *&---------------------------------------------------------------------* *& --> p1 text *& <-- p2 text *&---------------------------------------------------------------------* FORM frm_display TABLES ct_data TYPE STANDARD TABLE . IF go_container IS NOT BOUND . go_container = NEW cl_gui_custom_container ( 'CON_9000' ). ENDIF . IF go_alv_grid IS BOUND . PERFORM frm_refresh_display . RETURN . ENDIF . \" \u65b0\u5efa\u5bf9\u8c61 go_alv_grid = NEW cl_gui_alv_grid ( go_container ). DATA ls_layout TYPE lvc_s_layo . DATA lt_fieldcat TYPE STANDARD TABLE OF lvc_s_fcat . PERFORM frm_set_layout CHANGING ls_layout . PERFORM frm_set_fieldcat TABLES lt_fieldcat . PERFORM frm_set_event . PERFORM frm_set_style . PERFORM frm_set_color . \" \u5c55\u793a CALL METHOD go_alv_grid -> set_table_for_first_display EXPORTING is_layout = ls_layout CHANGING it_outtab = ct_data[] it_fieldcatalog = lt_fieldcat EXCEPTIONS invalid_parameter_combination = 1 program_error = 2 too_many_lines = 3 OTHERS = 4 . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_display *&---------------------------------------------------------------------* *& text *&---------------------------------------------------------------------* *& --> p1 text *& <-- p2 text *&---------------------------------------------------------------------* FORM frm_refresh_display . PERFORM frm_set_style . PERFORM frm_set_color . go_alv_grid -> refresh_table_display ( is_stable = CONV # ( 'XX' ) ). ENDFORM . *&---------------------------------------------------------------------* *& Form frm_set_layout *&---------------------------------------------------------------------* *& \u62a5\u8868\u5e03\u5c40\u8bbe\u7f6e *&---------------------------------------------------------------------* FORM frm_set_layout CHANGING cs_layout TYPE lvc_s_layo . CLEAR cs_layout . cs_layout - zebra = abap_true . \" \u6591\u9a6c\u7ebf cs_layout - cwidth_opt = abap_true . \" \u81ea\u52a8\u8c03\u6574ALVL\u5217\u5bbd cs_layout - sel_mode = 'A' . \" \u9009\u62e9\u6a21\u5f0f cs_layout - ctab_fname = 'T_SCOL' . \" \u5355\u5143\u683c\u989c\u8272\u8bbe\u7f6e cs_layout - stylefname = 'T_STYL' . \" \u5355\u5143\u683c\u63a7\u5236 ENDFORM . *&---------------------------------------------------------------------* *& Form frm_set_fieldcat *&---------------------------------------------------------------------* *& \u5b57\u6bb5\u76ee\u5f55\u8bbe\u7f6e *&---------------------------------------------------------------------* FORM frm_set_fieldcat TABLES ct_fieldcat TYPE lvc_t_fcat . DATA ls_fieldcat TYPE lvc_s_fcat . DEFINE _init_fieldcat . CLEAR ls_fieldcat . ls_fieldcat - fieldname = &1 . ls_fieldcat - tooltip = ls_fieldcat - coltext = ls_fieldcat - seltext = ls_fieldcat - scrtext_l = ls_fieldcat - scrtext_m = ls_fieldcat - scrtext_s = &2 . ls_fieldcat - ref_table = &3 . ls_fieldcat - ref_field = &4 . INSERT ls_fieldcat INTO TABLE ct_fieldcat . END-OF-DEFINITION . _init_fieldcat 'MTYPE' '\u68c0\u67e5\u72b6\u6001' '' '' . _init_fieldcat 'MSG ' '\u68c0\u67e5\u6d88\u606f' '' '' . \" \u4e2a\u6027\u5316\u81ea\u5df1\u8f93\u51fa\u6570\u636e\u683c\u5f0f LOOP AT ct_fieldcat REFERENCE INTO DATA ( lr_fieldcat ). \" \u7f16\u8f91\u72b6\u6001\uff0c\u9ed8\u8ba4\u53ef\u7f16\u8f91 lr_fieldcat -> edit = abap_true . CASE lr_fieldcat -> fieldname . WHEN 'MTYPE' OR 'MSG' . lr_fieldcat -> edit = abap_false . WHEN OTHERS . ENDCASE . ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_set_event *&---------------------------------------------------------------------* *& \u7ed1\u5b9aALV\u4e8b\u4ef6 *&---------------------------------------------------------------------* FORM frm_set_event . IF go_handler IS BOUND . RETURN . ENDIF . go_handler = NEW lcl_event_handler ( ). \" \u6570\u636e\u53d8\u66f4 go_alv_grid -> register_edit_event ( i_event_id = cl_gui_alv_grid => mc_evt_modified ). SET HANDLER go_handler -> on_data_changed_finished FOR go_alv_grid . \" \u5de5\u5177\u680f\u76f8\u5173 SET HANDLER go_handler -> on_toolbar FOR go_alv_grid . SET HANDLER go_handler -> on_user_command FOR go_alv_grid . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_set_style *&---------------------------------------------------------------------* *& text *&---------------------------------------------------------------------* *& --> p1 text *& <-- p2 text *&---------------------------------------------------------------------* FORM frm_set_style . DATA ls_styl TYPE lvc_s_styl . LOOP AT gt_data REFERENCE INTO DATA ( lr_data ). CLEAR lr_data -> t_styl . \" \u8bbe\u7f6eALV\u5b57\u6bb5\u6216\u884c\u7684\u72b6\u6001 \" \u5e38\u7528\u6709\u7981\u6b62\u7f16\u8f91CL_GUI_ALV_GRID=>MC_STYLE_DISABLED \" \u7981\u6b62\u5220\u9664\u884cCL_GUI_ALV_GRID=>MC_STYLE_NO_DELETE_ROW ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_set_color *&---------------------------------------------------------------------* *& text *&---------------------------------------------------------------------* *& --> p1 text *& <-- p2 text *&---------------------------------------------------------------------* FORM frm_set_color . DATA ls_scol TYPE lvc_s_scol . LOOP AT gt_data REFERENCE INTO DATA ( lr_data ). CLEAR lr_data -> t_scol . IF lr_data -> mtype = 'E' . CLEAR ls_scol . ls_scol - fname = 'MTYPE' . ls_scol - color = VALUE # ( col = '6' ). INSERT ls_scol INTO TABLE lr_data -> t_scol . CLEAR ls_scol . ls_scol - fname = 'MSG' . ls_scol - color = VALUE # ( col = '6' ). INSERT ls_scol INTO TABLE lr_data -> t_scol . ENDIF . ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Module STATUS_9000 OUTPUT *&---------------------------------------------------------------------* *& *&---------------------------------------------------------------------* MODULE status_9000 OUTPUT . PERFORM frm_display TABLES gt_data . SET PF-STATUS 'STATUS' . SET TITLEBAR 'TITLE' . ENDMODULE . *&---------------------------------------------------------------------* *& Module USER_COMMAND_9000 INPUT *&---------------------------------------------------------------------* * text *----------------------------------------------------------------------* MODULE user_command_9000 INPUT . CASE sy - ucomm . WHEN '&F03' OR '&F15' OR '&F12' . LEAVE TO SCREEN 0 . WHEN OTHERS . ENDCASE . CLEAR sy - ucomm . ENDMODULE .","title":"ALV\u76f8\u5173"},{"location":"others/alv/#alv","text":"\u6574\u7406\u4e0bALV\u7528\u5230\u7684\u4e24\u79cd\u65b9\u6cd5\uff0c\u4ee5\u53ca\u53ef\u80fd\u9047\u5230\u7684\u95ee\u9898","title":"ALV"},{"location":"others/alv/#lvc","text":"LVC\u597d\u5728\u4e0d\u7528\u753b\u5c4f\u5e55\uff0c\u76f4\u63a5\u8c03\u7528\u5373\u53ef\u3002 INCLUDE_LVC *&---------------------------------------------------------------------* *& Form frm_display *&---------------------------------------------------------------------* *& text *&---------------------------------------------------------------------* *& --> p1 text *& <-- p2 text *&---------------------------------------------------------------------* FORM frm_display TABLES ct_data TYPE STANDARD TABLE . DATA ls_layout TYPE lvc_s_layo . DATA lt_fieldcat TYPE STANDARD TABLE OF lvc_s_fcat . PERFORM frm_set_layout CHANGING ls_layout . PERFORM frm_set_fieldcat TABLES lt_fieldcat . CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY_LVC' EXPORTING i_callback_program = sy - repid i_callback_pf_status_set = 'FRM_PF_STATUS' i_callback_user_command = 'FRM_USER_COMMAND' is_layout_lvc = ls_layout it_fieldcat_lvc = lt_fieldcat i_default = abap_true i_save = 'A' TABLES t_outtab = ct_data[] EXCEPTIONS program_error = 1 OTHERS = 2 . IF sy - subrc <> 0 . MESSAGE ID sy - msgid TYPE sy - msgty NUMBER sy - msgno WITH sy - msgv1 sy - msgv2 sy - msgv3 sy - msgv4 . ENDIF . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_set_layout *&---------------------------------------------------------------------* *& \u62a5\u8868\u5e03\u5c40\u8bbe\u7f6e *&---------------------------------------------------------------------* FORM frm_set_layout CHANGING cs_layout TYPE lvc_s_layo . CLEAR cs_layout . cs_layout - zebra = abap_true . \" \u6591\u9a6c\u7ebf cs_layout - cwidth_opt = abap_true . \" \u81ea\u52a8\u8c03\u6574ALVL\u5217\u5bbd cs_layout - sel_mode = 'A' . \" \u9009\u62e9\u6a21\u5f0f * CS_LAYOUT - box_fname = 'CHECKBOX' . \" \u9009\u62e9\u6846 * CS_LAYOUT - ctab_fname = 'COLTAB' . \" \u5355\u5143\u683c\u989c\u8272\u8bbe\u7f6e ENDFORM . *&---------------------------------------------------------------------* *& Form frm_set_fieldcat *&---------------------------------------------------------------------* *& \u5b57\u6bb5\u76ee\u5f55\u8bbe\u7f6e *&---------------------------------------------------------------------* FORM frm_set_fieldcat TABLES ct_fieldcat TYPE lvc_t_fcat . DATA ls_fieldcat TYPE lvc_s_fcat . DEFINE _init_fieldcat . CLEAR ls_fieldcat . ls_fieldcat - fieldname = &1 . ls_fieldcat - tooltip = ls_fieldcat - coltext = ls_fieldcat - seltext = ls_fieldcat - scrtext_l = ls_fieldcat - scrtext_m = ls_fieldcat - scrtext_s = &2 . ls_fieldcat - ref_table = &3 . ls_fieldcat - ref_field = &4 . INSERT ls_fieldcat INTO TABLE ct_fieldcat . END-OF-DEFINITION . _init_fieldcat 'ZSEL' '\u9009\u62e9\u9879' '' '' . _init_fieldcat 'MTYPE ' '\u5904\u7406\u72b6\u6001' '' '' . _init_fieldcat 'MSG ' '\u5904\u7406\u6d88\u606f' '' '' . \" \u4e2a\u6027\u5316\u81ea\u5df1\u8f93\u51fa\u6570\u636e\u683c\u5f0f LOOP AT ct_fieldcat REFERENCE INTO DATA ( lr_fieldcat ). \" \u5b57\u6bb5\u663e\u793a\u5c5e\u6027\u8bbe\u7f6e CASE lr_fieldcat -> fieldname . WHEN 'ZSEL' . lr_fieldcat -> checkbox = abap_true . lr_fieldcat -> edit = abap_true . lr_fieldcat -> hotspot = abap_true . WHEN 'MENGE' . lr_fieldcat -> qfieldname = 'MEINS' . WHEN OTHERS . ENDCASE . ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_pf_status *&---------------------------------------------------------------------* *& \u8bbe\u7f6eGUI\u72b6\u6001 *&---------------------------------------------------------------------* FORM frm_pf_status USING ct_extab TYPE slis_t_extab . SET PF-STATUS 'STATUS' . SET TITLEBAR 'TITLE' . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_user_command *&---------------------------------------------------------------------* *& \u529f\u80fd\u54cd\u5e94 *&---------------------------------------------------------------------* FORM frm_user_command USING cv_ucomm LIKE sy - ucomm cs_selfield TYPE slis_selfield . \" \u5237\u65b0\u5c4f\u5e55\u6570\u636e\u5230\u5185\u8868 DATA : lo_grid TYPE REF TO cl_gui_alv_grid . CALL FUNCTION 'GET_GLOBALS_FROM_SLVC_FULLSCR' IMPORTING e_grid = lo_grid . CALL METHOD lo_grid -> check_changed_data . PERFORM frm_get_data_selection . \" \u6309\u94ae\u529f\u80fd\u5b9e\u73b0 CASE cv_ucomm . WHEN '&IC1' . \" \u53cc\u51fb WHEN OTHERS . ENDCASE . \" \u5237\u65b0ALV \u663e\u793a\u503c cs_selfield - refresh = abap_true . cs_selfield - row_stable = abap_true . cs_selfield - col_stable = abap_true . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_get_data_selection *&---------------------------------------------------------------------* *& text *&---------------------------------------------------------------------* *& --> p1 text *& <-- p2 text *&---------------------------------------------------------------------* FORM frm_get_data_selection . \" \u5237\u65b0\u5c4f\u5e55\u6570\u636e\u5230\u5185\u8868 DATA : lo_grid TYPE REF TO cl_gui_alv_grid . CALL FUNCTION 'GET_GLOBALS_FROM_SLVC_FULLSCR' IMPORTING e_grid = lo_grid . \" \u83b7\u53d6ALV\u9009\u53d6\u884c DATA lt_rows TYPE lvc_t_row . CALL METHOD lo_grid -> get_selected_rows IMPORTING et_index_rows = lt_rows . LOOP AT lt_rows INTO DATA ( ls_row ). READ TABLE gt_data REFERENCE INTO DATA ( lr_data ) INDEX ls_row - index . IF sy - subrc = 0 . lr_data -> zsel = abap_true . ENDIF . ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_reset_data_selection *&---------------------------------------------------------------------* *& text *&---------------------------------------------------------------------* *& --> p1 text *& <-- p2 text *&---------------------------------------------------------------------* FORM frm_reset_data_selection . LOOP AT gt_data REFERENCE INTO DATA ( lr_data ). CLEAR lr_data -> zsel . ENDLOOP . ENDFORM .","title":"LVC"},{"location":"others/alv/#alv-grid","text":"INCLUDE_ALV_GRID CLASS lcl_event_handler DEFINITION DEFERRED . DATA go_container TYPE REF TO cl_gui_container . DATA go_alv_grid TYPE REF TO cl_gui_alv_grid . DATA go_handler TYPE REF TO lcl_event_handler . *&---------------------------------------------------------------------* *& Form lcl_event_handler *&---------------------------------------------------------------------* CLASS lcl_event_handler DEFINITION . PUBLIC SECTION . \" \u6570\u636e\u53d8\u66f4\u4e8b\u4ef6 METHODS on_data_changed_finished FOR EVENT data_changed_finished OF cl_gui_alv_grid IMPORTING e_modified et_good_cells . \" \u5de5\u5177\u680f\u8c03\u6574 METHODS on_toolbar FOR EVENT toolbar OF cl_gui_alv_grid IMPORTING e_object e_interactive . \" \u54cd\u5e94\u5de5\u5177\u680f\u4e8b\u4ef6 \" \u70b9\u51fb\u6309\u94ae\u4e4b\u7c7b\u7684\u4e8b\u4ef6 METHODS on_user_command FOR EVENT user_command OF cl_gui_alv_grid IMPORTING e_ucomm . ENDCLASS . *&---------------------------------------------------------------------* *& Form lcl_event_handler *&---------------------------------------------------------------------* CLASS lcl_event_handler IMPLEMENTATION . *&---------------------------------------------------------------------* *& on_data_changed_finished *&---------------------------------------------------------------------* METHOD on_data_changed_finished . CHECK e_modified = abap_true . LOOP AT et_good_cells INTO DATA ( ls_cell ). READ TABLE gt_data REFERENCE INTO DATA ( lr_data ) INDEX ls_cell - row_id . IF sy - subrc = 0 . ENDIF . ENDLOOP . PERFORM frm_refresh_display . ENDMETHOD . *&---------------------------------------------------------------------* *& on_toolbar *&---------------------------------------------------------------------* METHOD on_toolbar . \" \u79fb\u9664\u7f16\u8f91\u76f8\u5173\u7684\u6309\u94ae DELETE e_object -> mt_toolbar WHERE function CS '&LOCAL&' . \" \u65b0\u589e\u6309\u94ae DATA ls_button LIKE LINE OF e_object -> mt_toolbar . CLEAR ls_button . ls_button - function = 'Z10' . ls_button - icon = icon_system_copy . ls_button - quickinfo = ls_button - text = '' . INSERT ls_button INTO TABLE e_object -> mt_toolbar . ENDMETHOD . *&---------------------------------------------------------------------* *& on_user_command *&---------------------------------------------------------------------* METHOD on_user_command . \" \u83b7\u53d6ALV\u9009\u53d6\u884c DATA lt_rows TYPE lvc_t_row . DATA ls_row TYPE lvc_s_row . CALL METHOD go_alv_grid -> get_selected_rows IMPORTING et_index_rows = lt_rows . CASE e_ucomm . WHEN 'Z10' . WHEN OTHERS . ENDCASE . PERFORM frm_refresh_display . ENDMETHOD . ENDCLASS . *&---------------------------------------------------------------------* *& Form frm_display *&---------------------------------------------------------------------* *& text *&---------------------------------------------------------------------* *& --> p1 text *& <-- p2 text *&---------------------------------------------------------------------* FORM frm_display TABLES ct_data TYPE STANDARD TABLE . IF go_container IS NOT BOUND . go_container = NEW cl_gui_custom_container ( 'CON_9000' ). ENDIF . IF go_alv_grid IS BOUND . PERFORM frm_refresh_display . RETURN . ENDIF . \" \u65b0\u5efa\u5bf9\u8c61 go_alv_grid = NEW cl_gui_alv_grid ( go_container ). DATA ls_layout TYPE lvc_s_layo . DATA lt_fieldcat TYPE STANDARD TABLE OF lvc_s_fcat . PERFORM frm_set_layout CHANGING ls_layout . PERFORM frm_set_fieldcat TABLES lt_fieldcat . PERFORM frm_set_event . PERFORM frm_set_style . PERFORM frm_set_color . \" \u5c55\u793a CALL METHOD go_alv_grid -> set_table_for_first_display EXPORTING is_layout = ls_layout CHANGING it_outtab = ct_data[] it_fieldcatalog = lt_fieldcat EXCEPTIONS invalid_parameter_combination = 1 program_error = 2 too_many_lines = 3 OTHERS = 4 . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_display *&---------------------------------------------------------------------* *& text *&---------------------------------------------------------------------* *& --> p1 text *& <-- p2 text *&---------------------------------------------------------------------* FORM frm_refresh_display . PERFORM frm_set_style . PERFORM frm_set_color . go_alv_grid -> refresh_table_display ( is_stable = CONV # ( 'XX' ) ). ENDFORM . *&---------------------------------------------------------------------* *& Form frm_set_layout *&---------------------------------------------------------------------* *& \u62a5\u8868\u5e03\u5c40\u8bbe\u7f6e *&---------------------------------------------------------------------* FORM frm_set_layout CHANGING cs_layout TYPE lvc_s_layo . CLEAR cs_layout . cs_layout - zebra = abap_true . \" \u6591\u9a6c\u7ebf cs_layout - cwidth_opt = abap_true . \" \u81ea\u52a8\u8c03\u6574ALVL\u5217\u5bbd cs_layout - sel_mode = 'A' . \" \u9009\u62e9\u6a21\u5f0f cs_layout - ctab_fname = 'T_SCOL' . \" \u5355\u5143\u683c\u989c\u8272\u8bbe\u7f6e cs_layout - stylefname = 'T_STYL' . \" \u5355\u5143\u683c\u63a7\u5236 ENDFORM . *&---------------------------------------------------------------------* *& Form frm_set_fieldcat *&---------------------------------------------------------------------* *& \u5b57\u6bb5\u76ee\u5f55\u8bbe\u7f6e *&---------------------------------------------------------------------* FORM frm_set_fieldcat TABLES ct_fieldcat TYPE lvc_t_fcat . DATA ls_fieldcat TYPE lvc_s_fcat . DEFINE _init_fieldcat . CLEAR ls_fieldcat . ls_fieldcat - fieldname = &1 . ls_fieldcat - tooltip = ls_fieldcat - coltext = ls_fieldcat - seltext = ls_fieldcat - scrtext_l = ls_fieldcat - scrtext_m = ls_fieldcat - scrtext_s = &2 . ls_fieldcat - ref_table = &3 . ls_fieldcat - ref_field = &4 . INSERT ls_fieldcat INTO TABLE ct_fieldcat . END-OF-DEFINITION . _init_fieldcat 'MTYPE' '\u68c0\u67e5\u72b6\u6001' '' '' . _init_fieldcat 'MSG ' '\u68c0\u67e5\u6d88\u606f' '' '' . \" \u4e2a\u6027\u5316\u81ea\u5df1\u8f93\u51fa\u6570\u636e\u683c\u5f0f LOOP AT ct_fieldcat REFERENCE INTO DATA ( lr_fieldcat ). \" \u7f16\u8f91\u72b6\u6001\uff0c\u9ed8\u8ba4\u53ef\u7f16\u8f91 lr_fieldcat -> edit = abap_true . CASE lr_fieldcat -> fieldname . WHEN 'MTYPE' OR 'MSG' . lr_fieldcat -> edit = abap_false . WHEN OTHERS . ENDCASE . ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_set_event *&---------------------------------------------------------------------* *& \u7ed1\u5b9aALV\u4e8b\u4ef6 *&---------------------------------------------------------------------* FORM frm_set_event . IF go_handler IS BOUND . RETURN . ENDIF . go_handler = NEW lcl_event_handler ( ). \" \u6570\u636e\u53d8\u66f4 go_alv_grid -> register_edit_event ( i_event_id = cl_gui_alv_grid => mc_evt_modified ). SET HANDLER go_handler -> on_data_changed_finished FOR go_alv_grid . \" \u5de5\u5177\u680f\u76f8\u5173 SET HANDLER go_handler -> on_toolbar FOR go_alv_grid . SET HANDLER go_handler -> on_user_command FOR go_alv_grid . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_set_style *&---------------------------------------------------------------------* *& text *&---------------------------------------------------------------------* *& --> p1 text *& <-- p2 text *&---------------------------------------------------------------------* FORM frm_set_style . DATA ls_styl TYPE lvc_s_styl . LOOP AT gt_data REFERENCE INTO DATA ( lr_data ). CLEAR lr_data -> t_styl . \" \u8bbe\u7f6eALV\u5b57\u6bb5\u6216\u884c\u7684\u72b6\u6001 \" \u5e38\u7528\u6709\u7981\u6b62\u7f16\u8f91CL_GUI_ALV_GRID=>MC_STYLE_DISABLED \" \u7981\u6b62\u5220\u9664\u884cCL_GUI_ALV_GRID=>MC_STYLE_NO_DELETE_ROW ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_set_color *&---------------------------------------------------------------------* *& text *&---------------------------------------------------------------------* *& --> p1 text *& <-- p2 text *&---------------------------------------------------------------------* FORM frm_set_color . DATA ls_scol TYPE lvc_s_scol . LOOP AT gt_data REFERENCE INTO DATA ( lr_data ). CLEAR lr_data -> t_scol . IF lr_data -> mtype = 'E' . CLEAR ls_scol . ls_scol - fname = 'MTYPE' . ls_scol - color = VALUE # ( col = '6' ). INSERT ls_scol INTO TABLE lr_data -> t_scol . CLEAR ls_scol . ls_scol - fname = 'MSG' . ls_scol - color = VALUE # ( col = '6' ). INSERT ls_scol INTO TABLE lr_data -> t_scol . ENDIF . ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Module STATUS_9000 OUTPUT *&---------------------------------------------------------------------* *& *&---------------------------------------------------------------------* MODULE status_9000 OUTPUT . PERFORM frm_display TABLES gt_data . SET PF-STATUS 'STATUS' . SET TITLEBAR 'TITLE' . ENDMODULE . *&---------------------------------------------------------------------* *& Module USER_COMMAND_9000 INPUT *&---------------------------------------------------------------------* * text *----------------------------------------------------------------------* MODULE user_command_9000 INPUT . CASE sy - ucomm . WHEN '&F03' OR '&F15' OR '&F12' . LEAVE TO SCREEN 0 . WHEN OTHERS . ENDCASE . CLEAR sy - ucomm . ENDMODULE .","title":"ALV GRID"},{"location":"others/cmod/","text":"CMOD\u589e\u5f3a \u00b6 \u67e5\u627eCMOD\u589e\u5f3a \u00b6 \u5728\u7a0b\u5e8f\u4e2d\u641c\u7d22 CUSTOMER-FUNCTION \u627e\u5230\u540e\u9762\u76843\u4f4d\u6570\u5b57\u7f16\u53f7\uff0c\u51fa\u53e3\u51fd\u6570\u540d\u7684\u89c4\u5219\u4e3aEXIT_< \u7a0b\u5e8f\u540d >_<3\u4f4d\u6570\u5b57>\uff0c\u7136\u540e\u901a\u8fc7\u627e\u5230\u7684\u51fa\u53e3\u51fd\u6570\u540d\u5230 MODSAP \u8868\u91cc\u67e5\u627e\u6240\u5bf9\u5e94\u7684\u51fa\u53e3\u5bf9\u8c61 \uff08\u5373\u589e\u5f3a\u70b9\uff09 \u901a\u8fc7\u8c03\u8bd5\u7cfb\u7edf\u76f8\u5173\u51fd\u6570\uff1aMODX_FUNCTION_ACTIVE_CHECK \u4ee3\u7801\u627e\u589e\u5f3a E\u7c7b\uff1a MODX_FUNCTION_ACTIVE_CHECK \uff08\u68c0\u67e5\u529f\u80fd\u51fa\u53e3\u7c7b\u7528\u6237\u51fa\u53e3\u662f\u5426\u88ab\u6fc0\u6d3b\uff09 C\u7c7b\uff1a MODX_MENUENTRY_ACTIVE_CHECK \uff08\u68c0\u67e5\u83dc\u5355\u5173\u952e\u5b57\u7c7b\u589e\u5f3a\u6fc0\u6d3b\u72b6\u51b5\uff09 S\u7c7b\uff1a MODX_SUBSCREEN_ACTIVE_CHECK \uff08\u68c0\u67e5\u5c4f\u5e55\u7c7b\u589e\u5f3a\u6fc0\u6d3b\u72b6\u51b5\uff09 SAP\u7684\u4efb\u4f55\u4e00\u4e2a\u4e8b\u52a1\u7801 \u5bf9\u5e94\u7684\u6807\u6ce8\u7a0b\u5e8f\u90fd\u7559\u4e0b\u4e86\u5927\u91cf\u7684\u7528\u6237\u51fa\u53e3\uff0c\u6b63\u662fSAP\u7075\u6d3b\u7684\u914d\u7f6e\u548c\u5f3a\u5927\u7684\u7528\u6237\u51fa\u53e3\uff0c\u624d\u4f7f\u5176\u4ea7\u54c1\u8f7b\u677e\u5e94\u5bf9\u5404\u79cd\u590d\u6742\u9700\u6c42\u6210\u4e3a\u53ef\u80fd\uff0c\u7cfb\u7edf\u8fd8\u4e3a\u80fd\u5feb\u901f\u627e\u5230\u548c\u6fc0\u6d3b\u8fd9\u4e9b\u589e\u5f3a\u8fdb\u884c\u4e86\u6709\u6548\u7ec4\u7ec7\uff0c\u5404\u7c7b\u589e\u5f3a\u88ab\u8bb0\u5f55\u5728table\u4e2d\u5e76\u4e14\u63d0\u4f9b\u4e86\u76f8\u5173\u68c0\u67e5\u51fd\u6570\uff0c\u4ece\u800c\u66f4\u65b9\u4fbf\u7cfb\u7edf\u5b9e\u65bd\u8fc7\u7a0b \u3002","title":"CMOD\u589e\u5f3a"},{"location":"others/cmod/#cmod","text":"","title":"CMOD\u589e\u5f3a"},{"location":"others/cmod/#cmod_1","text":"\u5728\u7a0b\u5e8f\u4e2d\u641c\u7d22 CUSTOMER-FUNCTION \u627e\u5230\u540e\u9762\u76843\u4f4d\u6570\u5b57\u7f16\u53f7\uff0c\u51fa\u53e3\u51fd\u6570\u540d\u7684\u89c4\u5219\u4e3aEXIT_< \u7a0b\u5e8f\u540d >_<3\u4f4d\u6570\u5b57>\uff0c\u7136\u540e\u901a\u8fc7\u627e\u5230\u7684\u51fa\u53e3\u51fd\u6570\u540d\u5230 MODSAP \u8868\u91cc\u67e5\u627e\u6240\u5bf9\u5e94\u7684\u51fa\u53e3\u5bf9\u8c61 \uff08\u5373\u589e\u5f3a\u70b9\uff09 \u901a\u8fc7\u8c03\u8bd5\u7cfb\u7edf\u76f8\u5173\u51fd\u6570\uff1aMODX_FUNCTION_ACTIVE_CHECK \u4ee3\u7801\u627e\u589e\u5f3a E\u7c7b\uff1a MODX_FUNCTION_ACTIVE_CHECK \uff08\u68c0\u67e5\u529f\u80fd\u51fa\u53e3\u7c7b\u7528\u6237\u51fa\u53e3\u662f\u5426\u88ab\u6fc0\u6d3b\uff09 C\u7c7b\uff1a MODX_MENUENTRY_ACTIVE_CHECK \uff08\u68c0\u67e5\u83dc\u5355\u5173\u952e\u5b57\u7c7b\u589e\u5f3a\u6fc0\u6d3b\u72b6\u51b5\uff09 S\u7c7b\uff1a MODX_SUBSCREEN_ACTIVE_CHECK \uff08\u68c0\u67e5\u5c4f\u5e55\u7c7b\u589e\u5f3a\u6fc0\u6d3b\u72b6\u51b5\uff09 SAP\u7684\u4efb\u4f55\u4e00\u4e2a\u4e8b\u52a1\u7801 \u5bf9\u5e94\u7684\u6807\u6ce8\u7a0b\u5e8f\u90fd\u7559\u4e0b\u4e86\u5927\u91cf\u7684\u7528\u6237\u51fa\u53e3\uff0c\u6b63\u662fSAP\u7075\u6d3b\u7684\u914d\u7f6e\u548c\u5f3a\u5927\u7684\u7528\u6237\u51fa\u53e3\uff0c\u624d\u4f7f\u5176\u4ea7\u54c1\u8f7b\u677e\u5e94\u5bf9\u5404\u79cd\u590d\u6742\u9700\u6c42\u6210\u4e3a\u53ef\u80fd\uff0c\u7cfb\u7edf\u8fd8\u4e3a\u80fd\u5feb\u901f\u627e\u5230\u548c\u6fc0\u6d3b\u8fd9\u4e9b\u589e\u5f3a\u8fdb\u884c\u4e86\u6709\u6548\u7ec4\u7ec7\uff0c\u5404\u7c7b\u589e\u5f3a\u88ab\u8bb0\u5f55\u5728table\u4e2d\u5e76\u4e14\u63d0\u4f9b\u4e86\u76f8\u5173\u68c0\u67e5\u51fd\u6570\uff0c\u4ece\u800c\u66f4\u65b9\u4fbf\u7cfb\u7edf\u5b9e\u65bd\u8fc7\u7a0b \u3002","title":"\u67e5\u627eCMOD\u589e\u5f3a"},{"location":"others/mdnote/","text":"Markdown\u8bed\u6cd5\u5907\u5fd8 \u00b6 \u8bb0\u5f55\u4e0bMarkdown\u7684\u8bed\u6cd5\uff0c\u540e\u9762\u5c31\u4e0d\u7528\u5230\u7f51\u4e0a\u67e5\u4e86\u3002 \u659c\u4f53 \u00b6 \u524d\u540e\u7528 * \u5305\u88f9 \u52a0\u7c97 \u00b6 \u524d\u540e\u7528 ** \u5305\u88f9 \u659c\u4f53\u52a0\u7c97 \u00b6 \u524d\u540e\u7528 *** \u5305\u88f9 \u5220\u9664\u7ebf \u00b6 \u524d\u540e\u7528 ~~ \u5305\u88f9 \u5f15\u7528 \u00b6 \u524d\u52a0\u5de6\u7bad\u5934 > \u5206\u9694\u7b26\u53f7 \u00b6 \u4e09\u4e2a\u4ee5\u4e0a\u6a2a\u6760 --- \u5217\u8868 \u00b6 \u524d\u7f00 - + * \u6d4b\u8bd5 \u6d4b\u8bd5 \u6d4b\u8bd5 \u5e8f\u53f7 \u00b6 123\u6d41\u6c34 \u6d4b\u8bd5 \u6d4b\u8bd5 \u4ee3\u7801 \u00b6 \u533a\u57df\u524d\u540e```\u5305\u88f9 DATA ( VAR ) = 'DEMO' . \u6298\u53e0 \u00b6 \u5185\u5d4cHTML\u5b9e\u73b0 <details> <summary>\u793a\u4f8b\u4ee3\u7801</summary> </details>","title":"MarkDown\u8bed\u6cd5"},{"location":"others/mdnote/#markdown","text":"\u8bb0\u5f55\u4e0bMarkdown\u7684\u8bed\u6cd5\uff0c\u540e\u9762\u5c31\u4e0d\u7528\u5230\u7f51\u4e0a\u67e5\u4e86\u3002","title":"Markdown\u8bed\u6cd5\u5907\u5fd8"},{"location":"others/mdnote/#_1","text":"\u524d\u540e\u7528 * \u5305\u88f9","title":"\u659c\u4f53"},{"location":"others/mdnote/#_2","text":"\u524d\u540e\u7528 ** \u5305\u88f9","title":"\u52a0\u7c97"},{"location":"others/mdnote/#_3","text":"\u524d\u540e\u7528 *** \u5305\u88f9","title":"\u659c\u4f53\u52a0\u7c97"},{"location":"others/mdnote/#_4","text":"\u524d\u540e\u7528 ~~ \u5305\u88f9","title":"\u5220\u9664\u7ebf"},{"location":"others/mdnote/#_5","text":"\u524d\u52a0\u5de6\u7bad\u5934 >","title":"\u5f15\u7528"},{"location":"others/mdnote/#_6","text":"\u4e09\u4e2a\u4ee5\u4e0a\u6a2a\u6760 ---","title":"\u5206\u9694\u7b26\u53f7"},{"location":"others/mdnote/#_7","text":"\u524d\u7f00 - + * \u6d4b\u8bd5 \u6d4b\u8bd5 \u6d4b\u8bd5","title":"\u5217\u8868"},{"location":"others/mdnote/#_8","text":"123\u6d41\u6c34 \u6d4b\u8bd5 \u6d4b\u8bd5","title":"\u5e8f\u53f7"},{"location":"others/mdnote/#_9","text":"\u533a\u57df\u524d\u540e```\u5305\u88f9 DATA ( VAR ) = 'DEMO' .","title":"\u4ee3\u7801"},{"location":"others/mdnote/#_10","text":"\u5185\u5d4cHTML\u5b9e\u73b0 <details> <summary>\u793a\u4f8b\u4ee3\u7801</summary> </details>","title":"\u6298\u53e0"},{"location":"others/nest_loop/","text":"\u5d4c\u5957\u5faa\u73af\u4f18\u5316 \u00b6 \u7f51\u4e0a\u5206\u6790\u633a\u591a\uff0c\u6211\u5c31\u4e0d\u91cd\u590d\u4e86\uff0c\u76f4\u63a5\u4e0a\u51e0\u4e2a\u6709\u6548\u7684\u4f18\u5316\u65b9\u6848\u3002 \u4e8c\u5206\u5faa\u73af \u00b6 \u5206\u7ec4 \u00b6 \u8fd9\u7b97\u4e00\u79cd\u5077\u61d2\u5199\u6cd5\uff0c \u8bf4\u5b9e\u8bdd\u6211\u4e5f\u4e0d\u61c2SAP\u600e\u4e48\u4f18\u5316\u7684\uff0c\u4e0d\u59a8\u5047\u8bbeSAP\u5728\u6bcf\u6b21\u8fd0\u884c\u5230LOOP AT GROUP BY\u7684\u8bed\u6cd5\u65f6\uff0c\u4f1a\u751f\u6210\u4e00\u5f20\u7d22\u5f15\u8868\uff0c\u800c\u6b64\u65f6\u518d\u8fdb\u884cWHERE\u5224\u65ad\u4e5f\u662f\u5148\u547d\u4e2d\u7d22\u5f15\uff0c\u518d\u5230\u5177\u4f53\u884c\uff0c\u4ece\u800c\u5b9e\u73b0\u4f18\u5316\u7684\u6548\u679c\u3002","title":"\u5d4c\u5957\u5faa\u73af"},{"location":"others/nest_loop/#_1","text":"\u7f51\u4e0a\u5206\u6790\u633a\u591a\uff0c\u6211\u5c31\u4e0d\u91cd\u590d\u4e86\uff0c\u76f4\u63a5\u4e0a\u51e0\u4e2a\u6709\u6548\u7684\u4f18\u5316\u65b9\u6848\u3002","title":"\u5d4c\u5957\u5faa\u73af\u4f18\u5316"},{"location":"others/nest_loop/#_2","text":"","title":"\u4e8c\u5206\u5faa\u73af"},{"location":"others/nest_loop/#_3","text":"\u8fd9\u7b97\u4e00\u79cd\u5077\u61d2\u5199\u6cd5\uff0c \u8bf4\u5b9e\u8bdd\u6211\u4e5f\u4e0d\u61c2SAP\u600e\u4e48\u4f18\u5316\u7684\uff0c\u4e0d\u59a8\u5047\u8bbeSAP\u5728\u6bcf\u6b21\u8fd0\u884c\u5230LOOP AT GROUP BY\u7684\u8bed\u6cd5\u65f6\uff0c\u4f1a\u751f\u6210\u4e00\u5f20\u7d22\u5f15\u8868\uff0c\u800c\u6b64\u65f6\u518d\u8fdb\u884cWHERE\u5224\u65ad\u4e5f\u662f\u5148\u547d\u4e2d\u7d22\u5f15\uff0c\u518d\u5230\u5177\u4f53\u884c\uff0c\u4ece\u800c\u5b9e\u73b0\u4f18\u5316\u7684\u6548\u679c\u3002","title":"\u5206\u7ec4"},{"location":"others/send_mail/","text":"\u90ae\u4ef6\u53d1\u9001 \u00b6 SBWP\uff0c\u53d1\u9001\u6d4b\u8bd5 SOST\uff0c\u90ae\u7bb1\u7ba1\u7406 SCOT\uff0c\u8282\u70b9\u914d\u7f6e \u90ae\u4ef6\u53d1\u9001\u4ee3\u7801 DATA : send_request TYPE REF TO cl_bcs , document TYPE REF TO cl_document_bcs , fail TYPE REF TO cx_bcs , recipient TYPE REF TO if_recipient_bcs . DATA : ls TYPE string , mailto TYPE ad_smtpadr , main_text TYPE bcsy_text , title TYPE so_obj_des . ls = '\u8be5\u90ae\u4ef6\u7528\u4e8e\u6d4b\u8bd5\u6f14\u793a\u7a0b\u5e8f' . APPEND ls TO main_text . title = '\u90ae\u4ef6\u53d1\u9001\u6d4b\u8bd5' . mailto = 'xxx@xxx.xx' . TRY . \" \u521b\u5efa\u53d1\u9001\u8bf7\u6c42 send_request = cl_bcs => create_persistent ( ). \" \u521b\u5efa\u6574\u7406\u53d1\u9001\u5185\u5bb9 document = cl_document_bcs => create_document ( i_type = 'RAW' i_text = main_text i_subject = title ). \" \u6dfb\u52a0\u90ae\u4ef6\u5185\u5bb9\u5230\u53d1\u9001\u8bf7\u6c42 send_request -> set_document ( document ). \" \u90ae\u4ef6\u5730\u5740\u8f6c\u6362 recipient = cl_cam_address_bcs => create_internet_address ( mailto ). \" \u6dfb\u52a0\u90ae\u4ef6\u5730\u5740\u5230\u53d1\u9001\u8bf7\u6c42 send_request -> add_recipient ( recipient ). \" \u6b63\u5f0f\u53d1\u9001\u5e76\u63d0\u4ea4\u4f5c\u4e1a send_request -> send ( i_with_error_screen = 'X' ). COMMIT WORK AND WAIT . CATCH cx_bcs INTO fail . ENDTRY .","title":"\u90ae\u4ef6\u53d1\u9001"},{"location":"others/send_mail/#_1","text":"SBWP\uff0c\u53d1\u9001\u6d4b\u8bd5 SOST\uff0c\u90ae\u7bb1\u7ba1\u7406 SCOT\uff0c\u8282\u70b9\u914d\u7f6e \u90ae\u4ef6\u53d1\u9001\u4ee3\u7801 DATA : send_request TYPE REF TO cl_bcs , document TYPE REF TO cl_document_bcs , fail TYPE REF TO cx_bcs , recipient TYPE REF TO if_recipient_bcs . DATA : ls TYPE string , mailto TYPE ad_smtpadr , main_text TYPE bcsy_text , title TYPE so_obj_des . ls = '\u8be5\u90ae\u4ef6\u7528\u4e8e\u6d4b\u8bd5\u6f14\u793a\u7a0b\u5e8f' . APPEND ls TO main_text . title = '\u90ae\u4ef6\u53d1\u9001\u6d4b\u8bd5' . mailto = 'xxx@xxx.xx' . TRY . \" \u521b\u5efa\u53d1\u9001\u8bf7\u6c42 send_request = cl_bcs => create_persistent ( ). \" \u521b\u5efa\u6574\u7406\u53d1\u9001\u5185\u5bb9 document = cl_document_bcs => create_document ( i_type = 'RAW' i_text = main_text i_subject = title ). \" \u6dfb\u52a0\u90ae\u4ef6\u5185\u5bb9\u5230\u53d1\u9001\u8bf7\u6c42 send_request -> set_document ( document ). \" \u90ae\u4ef6\u5730\u5740\u8f6c\u6362 recipient = cl_cam_address_bcs => create_internet_address ( mailto ). \" \u6dfb\u52a0\u90ae\u4ef6\u5730\u5740\u5230\u53d1\u9001\u8bf7\u6c42 send_request -> add_recipient ( recipient ). \" \u6b63\u5f0f\u53d1\u9001\u5e76\u63d0\u4ea4\u4f5c\u4e1a send_request -> send ( i_with_error_screen = 'X' ). COMMIT WORK AND WAIT . CATCH cx_bcs INTO fail . ENDTRY .","title":"\u90ae\u4ef6\u53d1\u9001"},{"location":"others/textproxy/","text":"\u6587\u672c\u53d6\u503c\u5de5\u5177 \u00b6 \u62a5\u8868\u90e8\u5206\u5b57\u6bb5\u9700\u8981\u53d6\u6587\u672c\uff0c\u8fd9\u91cc\u5c06\u9891\u7387\u8f83\u9ad8\u7684\u5b57\u6bb5\u6574\u7406\u51fa\u6765\uff0c\u4ee5\u540e\u5c31\u4e0d\u7528\u91cd\u590d\u5199SQL\u67e5\u8868\u4e86\u3002 ZCL_TEXT CLASS zcl_text DEFINITION PUBLIC FINAL CREATE PRIVATE . PUBLIC SECTION . CLASS-DATA bukrs TYPE REF TO zcl_text READ - ONLY . CLASS-DATA bp TYPE REF TO zcl_text READ - ONLY . CLASS-DATA matnr TYPE REF TO zcl_text READ - ONLY . CLASS-METHODS class_constructor . CLASS-METHODS create IMPORTING ! i_name TYPE string RETURNING VALUE ( ro_text ) TYPE REF TO zcl_text . CLASS-METHODS domain IMPORTING ! i_domname TYPE domname RETURNING VALUE ( ro_text ) TYPE REF TO zcl_text . CLASS-METHODS create_ausp IMPORTING ! i_objectkey TYPE bapi1003_key - object ! i_objecttable TYPE bapi1003_key - objecttable DEFAULT 'MARA' ! i_classnum TYPE bapi1003_key - classnum DEFAULT 'Z_BATCH' ! i_classtype TYPE bapi1003_key - classtype DEFAULT '023' RETURNING VALUE ( ro_text ) TYPE REF TO zcl_text . METHODS get IMPORTING ! i_key TYPE data RETURNING VALUE ( r_value ) TYPE string . CLASS-METHODS long_text IMPORTING ! i_id TYPE thead - tdid ! i_language TYPE thead - tdspras ! i_name TYPE thead - tdname ! i_object TYPE thead - tdobject EXPORTING ! et_tline TYPE tline_t ! e_value TYPE string RETURNING VALUE ( r_value ) TYPE string . PROTECTED SECTION . PRIVATE SECTION . TYPES : BEGIN OF ty_text , key TYPE string , value TYPE string , END OF ty_text . TYPES : tt_text TYPE SORTED TABLE OF ty_text WITH NON-UNIQUE KEY key . TYPES : BEGIN OF ty_text_instance , name TYPE string , o_text TYPE REF TO zcl_text , END OF ty_text_instance . TYPES : tt_text_instance TYPE SORTED TABLE OF ty_text_instance WITH NON-UNIQUE KEY name . TYPES : BEGIN OF ty_domains , domname TYPE domname , o_text TYPE REF TO zcl_text , END OF ty_domains . TYPES : tt_domnames TYPE SORTED TABLE OF ty_domains WITH NON-UNIQUE KEY domname . TYPES : BEGIN OF ty_ausp , objectkey TYPE bapi1003_key - object , objecttable TYPE bapi1003_key - objecttable , classnum TYPE bapi1003_key - classnum , classtype TYPE bapi1003_key - classtype , o_text TYPE REF TO zcl_text , END OF ty_ausp . TYPES : tt_ausp TYPE SORTED TABLE OF ty_ausp WITH NON-UNIQUE KEY objectkey objecttable classnum classtype . DATA mt_text TYPE tt_text . DATA m_name TYPE string . DATA m_method TYPE abap_methname . CLASS-DATA mt_text_instance TYPE tt_text_instance . CLASS-DATA mt_domains TYPE tt_domnames . CLASS-DATA mt_ausp TYPE tt_ausp . CLASS-DATA mo_objectdescr TYPE REF TO cl_abap_objectdescr . METHODS constructor IMPORTING ! i_name TYPE string . METHODS _bukrs IMPORTING ! i_key TYPE data RETURNING VALUE ( r_value ) TYPE string . METHODS _bp IMPORTING ! i_key TYPE data RETURNING VALUE ( r_value ) TYPE string . METHODS _matnr IMPORTING ! i_key TYPE data RETURNING VALUE ( r_value ) TYPE string . METHODS _werks IMPORTING ! i_key TYPE data RETURNING VALUE ( r_value ) TYPE string . METHODS _lgort IMPORTING ! i_key TYPE data RETURNING VALUE ( r_value ) TYPE string . METHODS _prctr IMPORTING ! i_key TYPE data RETURNING VALUE ( r_value ) TYPE string . METHODS _waers IMPORTING ! i_key TYPE data RETURNING VALUE ( r_value ) TYPE string . METHODS _domain IMPORTING ! i_key TYPE data RETURNING VALUE ( r_value ) TYPE string . METHODS _ausp IMPORTING ! i_key TYPE data RETURNING VALUE ( r_value ) TYPE string . METHODS _not_found IMPORTING ! i_key TYPE data RETURNING VALUE ( r_value ) TYPE string . ENDCLASS . CLASS zcl_text IMPLEMENTATION . METHOD class_constructor . \" \u5206\u6790\u81ea\u8eab\uff0c\u83b7\u53d6\u53ef\u4ee5\u63d0\u4f9b\u7684\u6587\u672c\u5904\u7406\u65b9\u6cd5 mo_objectdescr ?= cl_abap_typedescr => describe_by_name ( 'ZCL_TEXT' ). \" \u8bbe\u7f6e\u51e0\u4e2a\u5e38\u7528\u7684 bukrs = create ( 'BUKRS' ). bp = create ( 'BP' ). matnr = create ( 'MATNR' ). ENDMETHOD . METHOD constructor . m_name = i_name . m_method = | _ { m_name }|. ENDMETHOD . METHOD create . \" V3\uff0c\u76f8\u6bd4\u4e4b\u524d\uff0c\u7cbe\u7b80\u4e3a\u5355\u6587\u4ef6\uff0c\u65b9\u4fbf\u642c\u8fd0 DATA ( l_name ) = to_upper ( i_name ). \" \u68c0\u67e5\u7f13\u5b58\u8bb0\u5f55 READ TABLE mt_text_instance INTO DATA ( ls_text_instance ) WITH KEY name = l_name BINARY SEARCH . IF sy - subrc <> 0 . \" \u6ca1\u6709\u5c31\u65b0\u5efa\u4e00\u6761\u8bb0\u5f55\u7f13\u5b58 CLEAR ls_text_instance . ls_text_instance - name = l_name . \" \u68c0\u67e5\u662f\u5426\u5b58\u5728\u76f8\u5e94\u5904\u7406\u65b9\u6cd5 DATA l_method TYPE abap_methname . l_method = | _ { l_name }|. READ TABLE mo_objectdescr -> methods TRANSPORTING NO FIELDS WITH KEY name = l_method BINARY SEARCH . IF sy - subrc <> 0 . l_name = 'NOT_FOUND' . ENDIF . ls_text_instance - o_text = NEW zcl_text ( l_name ). INSERT ls_text_instance INTO TABLE mt_text_instance . ENDIF . ro_text = ls_text_instance - o_text . ENDMETHOD . METHOD create_ausp . DATA l_object_key TYPE ausp - objek . READ TABLE mt_ausp INTO DATA ( ls_ausp ) WITH KEY objectkey = i_objectkey objecttable = i_objecttable classnum = i_classnum classtype = i_classtype BINARY SEARCH . IF sy - subrc <> 0 . CLEAR ls_ausp . ls_ausp - objectkey = i_objectkey . ls_ausp - objecttable = i_objecttable . ls_ausp - classnum = i_classnum . ls_ausp - classtype = i_classtype . ls_ausp - o_text = NEW zcl_text ( 'AUSP' ). DATA : lt_allocvaluesnum TYPE STANDARD TABLE OF bapi1003_alloc_values_num , lt_allocvalueschar TYPE STANDARD TABLE OF bapi1003_alloc_values_char , lt_allocvaluescurr TYPE STANDARD TABLE OF bapi1003_alloc_values_curr , lt_return TYPE STANDARD TABLE OF bapiret2 . CALL FUNCTION 'BAPI_OBJCL_GETDETAIL' EXPORTING objectkey = ls_ausp - objectkey objecttable = ls_ausp - objecttable classnum = ls_ausp - classnum classtype = ls_ausp - classtype TABLES allocvaluesnum = lt_allocvaluesnum allocvalueschar = lt_allocvalueschar allocvaluescurr = lt_allocvaluescurr return = lt_return . LOOP AT lt_allocvalueschar INTO DATA ( ls_allocvalueschar ). INSERT VALUE # ( key = ls_allocvalueschar - charact value = ls_allocvalueschar - value_char_long ) INTO TABLE ls_ausp - o_text -> mt_text . ENDLOOP . INSERT ls_ausp INTO TABLE mt_ausp . ENDIF . ro_text = ls_ausp - o_text . ENDMETHOD . METHOD domain . READ TABLE mt_domains INTO DATA ( ls_domain ) WITH KEY domname = i_domname BINARY SEARCH . IF sy - subrc <> 0 . CLEAR ls_domain . ls_domain - domname = i_domname . ls_domain - o_text = NEW zcl_text ( 'DOMAIN' ). SELECT domvalue_l AS key , ddtext AS value FROM dd07t WHERE domname = @ i_domname AND ddlanguage = '1' AND as4local = 'A' INTO TABLE @ ls_domain - o_text -> mt_text . INSERT ls_domain INTO TABLE mt_domains . ENDIF . ro_text = ls_domain - o_text . ENDMETHOD . METHOD get . CHECK i_key IS NOT INITIAL . CHECK m_name <> 'NOT_FOUND' . \" \u7279\u5f81\u503c\u6709\u7279\u6b8a\u5904\u7406 IF m_name = 'AUSP' . CALL METHOD me -> _ausp EXPORTING i_key = i_key RECEIVING r_value = r_value . \" \u7b2c\u4e00\u6b21\u8bfb\u53d6\u7684\u65f6\u5019\u5c31\u5168\u90e8\u7f13\u5b58\u4e86\uff0c\u65e0\u9700\u4e8c\u6b21\u7f13\u5b58 RETURN . ENDIF . \" \u68c0\u67e5\u7f13\u5b58 READ TABLE mt_text INTO DATA ( ls_text ) WITH KEY key = i_key . IF sy - subrc = 0 . r_value = ls_text - value . RETURN . ENDIF . TRY . \" \u8df3\u8f6c\u5230\u5bf9\u5e94\u65b9\u6cd5\u5904\u7406 CALL METHOD me -> ( m_method ) EXPORTING i_key = i_key RECEIVING r_value = r_value . CATCH cx_root . ENDTRY . \" \u7f13\u5b58\u8bb0\u5f55 CLEAR ls_text . ls_text - key = i_key . ls_text - value = r_value . INSERT ls_text INTO TABLE mt_text . ENDMETHOD . METHOD _ausp . DATA l_atinn TYPE ausp - atinn . CALL FUNCTION 'CONVERSION_EXIT_ATINN_INPUT' EXPORTING input = i_key IMPORTING output = l_atinn . READ TABLE mt_text INTO DATA ( ls_text ) WITH KEY key = l_atinn . r_value = ls_text - value . ENDMETHOD . METHOD _bp . SELECT SINGLE concat ( name_org1 , name_org2 ) AS name FROM but000 WHERE partner = @ i_key INTO @ r_value . ENDMETHOD . METHOD _bukrs . SELECT SINGLE butxt FROM t001 WHERE bukrs = @ i_key INTO @ r_value . ENDMETHOD . METHOD _domain . ENDMETHOD . METHOD _lgort . SELECT SINGLE lgobe FROM t001l WHERE lgort = @ i_key INTO @ r_value . ENDMETHOD . METHOD _matnr . SELECT SINGLE maktx FROM makt WHERE matnr = @ i_key AND spras = '1' INTO @ r_value . ENDMETHOD . METHOD _not_found . ENDMETHOD . METHOD _prctr . SELECT SINGLE ltext FROM cepct WHERE spras = '1' AND prctr = @ i_key INTO @ r_value . ENDMETHOD . METHOD _waers . SELECT SINGLE ltext FROM tcurt WHERE spras = '1' AND waers = @ i_key INTO @ r_value . ENDMETHOD . METHOD _werks . SELECT SINGLE name1 FROM t001w WHERE werks = @ i_key INTO @ r_value . ENDMETHOD . METHOD long_text . \" \u60f3\u4e86\u4e0b\uff0c\u8fd8\u662f\u4e0d\u7f13\u5b58\u4e86 CALL FUNCTION 'READ_TEXT' EXPORTING id = i_id language = i_language name = i_name object = i_object TABLES lines = et_tline EXCEPTIONS id = 1 language = 2 name = 3 not_found = 4 object = 5 reference_check = 6 wrong_access_to_archive = 7 . IF sy - subrc = 0 . CALL FUNCTION 'IDMX_DI_TLINE_INTO_STRING' EXPORTING it_tline = et_tline IMPORTING ev_text_string = r_value . IF e_value IS SUPPLIED . e_value = r_value . ENDIF . ENDIF . ENDMETHOD . ENDCLASS . \u6d4b\u8bd5\u7528\u4f8b DATA l_value TYPE string . \" \u793a\u4f8b1\uff0c\u53d6\u9884\u7559\u9879 l_value = zcl_text => bukrs -> get ( '0001' ). \" \u793a\u4f8b2\uff0c\u901a\u5e38\u53d6\u503c l_value = zcl_text => create ( 'WERKS' ) -> get ( '0001' ). \" \u793a\u4f8b3\uff0c\u53d6\u57df\u503c l_value = zcl_text => domain ( 'XFELD' ) -> get ( 'X' ). \" \u793a\u4f8b4\uff0c\u53d6\u957f\u6587\u672c l_value = zcl_text => long_text ( i_id = 'Z001' i_name = '0010012345' i_object = 'VBBK' ). \" \u793a\u4f8b5\uff0c\u53d6\u7279\u5f81\u503c DATA ls_mara TYPE mara . DATA ( lo_ausp ) = zcl_text => create_ausp ( i_objectkey = |{ ls_mara - matnr }| i_objecttable = 'MARA' i_classnum = |{ ls_mara - matkl }| i_classtype = '001' ). \" \u7269\u6599\u5206\u7c7b l_value = lo_ausp -> get ( 'A0001' ). l_value = lo_ausp -> get ( 'A0002' ).","title":"\u6587\u672c\u53d6\u503c\u5de5\u5177"},{"location":"others/textproxy/#_1","text":"\u62a5\u8868\u90e8\u5206\u5b57\u6bb5\u9700\u8981\u53d6\u6587\u672c\uff0c\u8fd9\u91cc\u5c06\u9891\u7387\u8f83\u9ad8\u7684\u5b57\u6bb5\u6574\u7406\u51fa\u6765\uff0c\u4ee5\u540e\u5c31\u4e0d\u7528\u91cd\u590d\u5199SQL\u67e5\u8868\u4e86\u3002 ZCL_TEXT CLASS zcl_text DEFINITION PUBLIC FINAL CREATE PRIVATE . PUBLIC SECTION . CLASS-DATA bukrs TYPE REF TO zcl_text READ - ONLY . CLASS-DATA bp TYPE REF TO zcl_text READ - ONLY . CLASS-DATA matnr TYPE REF TO zcl_text READ - ONLY . CLASS-METHODS class_constructor . CLASS-METHODS create IMPORTING ! i_name TYPE string RETURNING VALUE ( ro_text ) TYPE REF TO zcl_text . CLASS-METHODS domain IMPORTING ! i_domname TYPE domname RETURNING VALUE ( ro_text ) TYPE REF TO zcl_text . CLASS-METHODS create_ausp IMPORTING ! i_objectkey TYPE bapi1003_key - object ! i_objecttable TYPE bapi1003_key - objecttable DEFAULT 'MARA' ! i_classnum TYPE bapi1003_key - classnum DEFAULT 'Z_BATCH' ! i_classtype TYPE bapi1003_key - classtype DEFAULT '023' RETURNING VALUE ( ro_text ) TYPE REF TO zcl_text . METHODS get IMPORTING ! i_key TYPE data RETURNING VALUE ( r_value ) TYPE string . CLASS-METHODS long_text IMPORTING ! i_id TYPE thead - tdid ! i_language TYPE thead - tdspras ! i_name TYPE thead - tdname ! i_object TYPE thead - tdobject EXPORTING ! et_tline TYPE tline_t ! e_value TYPE string RETURNING VALUE ( r_value ) TYPE string . PROTECTED SECTION . PRIVATE SECTION . TYPES : BEGIN OF ty_text , key TYPE string , value TYPE string , END OF ty_text . TYPES : tt_text TYPE SORTED TABLE OF ty_text WITH NON-UNIQUE KEY key . TYPES : BEGIN OF ty_text_instance , name TYPE string , o_text TYPE REF TO zcl_text , END OF ty_text_instance . TYPES : tt_text_instance TYPE SORTED TABLE OF ty_text_instance WITH NON-UNIQUE KEY name . TYPES : BEGIN OF ty_domains , domname TYPE domname , o_text TYPE REF TO zcl_text , END OF ty_domains . TYPES : tt_domnames TYPE SORTED TABLE OF ty_domains WITH NON-UNIQUE KEY domname . TYPES : BEGIN OF ty_ausp , objectkey TYPE bapi1003_key - object , objecttable TYPE bapi1003_key - objecttable , classnum TYPE bapi1003_key - classnum , classtype TYPE bapi1003_key - classtype , o_text TYPE REF TO zcl_text , END OF ty_ausp . TYPES : tt_ausp TYPE SORTED TABLE OF ty_ausp WITH NON-UNIQUE KEY objectkey objecttable classnum classtype . DATA mt_text TYPE tt_text . DATA m_name TYPE string . DATA m_method TYPE abap_methname . CLASS-DATA mt_text_instance TYPE tt_text_instance . CLASS-DATA mt_domains TYPE tt_domnames . CLASS-DATA mt_ausp TYPE tt_ausp . CLASS-DATA mo_objectdescr TYPE REF TO cl_abap_objectdescr . METHODS constructor IMPORTING ! i_name TYPE string . METHODS _bukrs IMPORTING ! i_key TYPE data RETURNING VALUE ( r_value ) TYPE string . METHODS _bp IMPORTING ! i_key TYPE data RETURNING VALUE ( r_value ) TYPE string . METHODS _matnr IMPORTING ! i_key TYPE data RETURNING VALUE ( r_value ) TYPE string . METHODS _werks IMPORTING ! i_key TYPE data RETURNING VALUE ( r_value ) TYPE string . METHODS _lgort IMPORTING ! i_key TYPE data RETURNING VALUE ( r_value ) TYPE string . METHODS _prctr IMPORTING ! i_key TYPE data RETURNING VALUE ( r_value ) TYPE string . METHODS _waers IMPORTING ! i_key TYPE data RETURNING VALUE ( r_value ) TYPE string . METHODS _domain IMPORTING ! i_key TYPE data RETURNING VALUE ( r_value ) TYPE string . METHODS _ausp IMPORTING ! i_key TYPE data RETURNING VALUE ( r_value ) TYPE string . METHODS _not_found IMPORTING ! i_key TYPE data RETURNING VALUE ( r_value ) TYPE string . ENDCLASS . CLASS zcl_text IMPLEMENTATION . METHOD class_constructor . \" \u5206\u6790\u81ea\u8eab\uff0c\u83b7\u53d6\u53ef\u4ee5\u63d0\u4f9b\u7684\u6587\u672c\u5904\u7406\u65b9\u6cd5 mo_objectdescr ?= cl_abap_typedescr => describe_by_name ( 'ZCL_TEXT' ). \" \u8bbe\u7f6e\u51e0\u4e2a\u5e38\u7528\u7684 bukrs = create ( 'BUKRS' ). bp = create ( 'BP' ). matnr = create ( 'MATNR' ). ENDMETHOD . METHOD constructor . m_name = i_name . m_method = | _ { m_name }|. ENDMETHOD . METHOD create . \" V3\uff0c\u76f8\u6bd4\u4e4b\u524d\uff0c\u7cbe\u7b80\u4e3a\u5355\u6587\u4ef6\uff0c\u65b9\u4fbf\u642c\u8fd0 DATA ( l_name ) = to_upper ( i_name ). \" \u68c0\u67e5\u7f13\u5b58\u8bb0\u5f55 READ TABLE mt_text_instance INTO DATA ( ls_text_instance ) WITH KEY name = l_name BINARY SEARCH . IF sy - subrc <> 0 . \" \u6ca1\u6709\u5c31\u65b0\u5efa\u4e00\u6761\u8bb0\u5f55\u7f13\u5b58 CLEAR ls_text_instance . ls_text_instance - name = l_name . \" \u68c0\u67e5\u662f\u5426\u5b58\u5728\u76f8\u5e94\u5904\u7406\u65b9\u6cd5 DATA l_method TYPE abap_methname . l_method = | _ { l_name }|. READ TABLE mo_objectdescr -> methods TRANSPORTING NO FIELDS WITH KEY name = l_method BINARY SEARCH . IF sy - subrc <> 0 . l_name = 'NOT_FOUND' . ENDIF . ls_text_instance - o_text = NEW zcl_text ( l_name ). INSERT ls_text_instance INTO TABLE mt_text_instance . ENDIF . ro_text = ls_text_instance - o_text . ENDMETHOD . METHOD create_ausp . DATA l_object_key TYPE ausp - objek . READ TABLE mt_ausp INTO DATA ( ls_ausp ) WITH KEY objectkey = i_objectkey objecttable = i_objecttable classnum = i_classnum classtype = i_classtype BINARY SEARCH . IF sy - subrc <> 0 . CLEAR ls_ausp . ls_ausp - objectkey = i_objectkey . ls_ausp - objecttable = i_objecttable . ls_ausp - classnum = i_classnum . ls_ausp - classtype = i_classtype . ls_ausp - o_text = NEW zcl_text ( 'AUSP' ). DATA : lt_allocvaluesnum TYPE STANDARD TABLE OF bapi1003_alloc_values_num , lt_allocvalueschar TYPE STANDARD TABLE OF bapi1003_alloc_values_char , lt_allocvaluescurr TYPE STANDARD TABLE OF bapi1003_alloc_values_curr , lt_return TYPE STANDARD TABLE OF bapiret2 . CALL FUNCTION 'BAPI_OBJCL_GETDETAIL' EXPORTING objectkey = ls_ausp - objectkey objecttable = ls_ausp - objecttable classnum = ls_ausp - classnum classtype = ls_ausp - classtype TABLES allocvaluesnum = lt_allocvaluesnum allocvalueschar = lt_allocvalueschar allocvaluescurr = lt_allocvaluescurr return = lt_return . LOOP AT lt_allocvalueschar INTO DATA ( ls_allocvalueschar ). INSERT VALUE # ( key = ls_allocvalueschar - charact value = ls_allocvalueschar - value_char_long ) INTO TABLE ls_ausp - o_text -> mt_text . ENDLOOP . INSERT ls_ausp INTO TABLE mt_ausp . ENDIF . ro_text = ls_ausp - o_text . ENDMETHOD . METHOD domain . READ TABLE mt_domains INTO DATA ( ls_domain ) WITH KEY domname = i_domname BINARY SEARCH . IF sy - subrc <> 0 . CLEAR ls_domain . ls_domain - domname = i_domname . ls_domain - o_text = NEW zcl_text ( 'DOMAIN' ). SELECT domvalue_l AS key , ddtext AS value FROM dd07t WHERE domname = @ i_domname AND ddlanguage = '1' AND as4local = 'A' INTO TABLE @ ls_domain - o_text -> mt_text . INSERT ls_domain INTO TABLE mt_domains . ENDIF . ro_text = ls_domain - o_text . ENDMETHOD . METHOD get . CHECK i_key IS NOT INITIAL . CHECK m_name <> 'NOT_FOUND' . \" \u7279\u5f81\u503c\u6709\u7279\u6b8a\u5904\u7406 IF m_name = 'AUSP' . CALL METHOD me -> _ausp EXPORTING i_key = i_key RECEIVING r_value = r_value . \" \u7b2c\u4e00\u6b21\u8bfb\u53d6\u7684\u65f6\u5019\u5c31\u5168\u90e8\u7f13\u5b58\u4e86\uff0c\u65e0\u9700\u4e8c\u6b21\u7f13\u5b58 RETURN . ENDIF . \" \u68c0\u67e5\u7f13\u5b58 READ TABLE mt_text INTO DATA ( ls_text ) WITH KEY key = i_key . IF sy - subrc = 0 . r_value = ls_text - value . RETURN . ENDIF . TRY . \" \u8df3\u8f6c\u5230\u5bf9\u5e94\u65b9\u6cd5\u5904\u7406 CALL METHOD me -> ( m_method ) EXPORTING i_key = i_key RECEIVING r_value = r_value . CATCH cx_root . ENDTRY . \" \u7f13\u5b58\u8bb0\u5f55 CLEAR ls_text . ls_text - key = i_key . ls_text - value = r_value . INSERT ls_text INTO TABLE mt_text . ENDMETHOD . METHOD _ausp . DATA l_atinn TYPE ausp - atinn . CALL FUNCTION 'CONVERSION_EXIT_ATINN_INPUT' EXPORTING input = i_key IMPORTING output = l_atinn . READ TABLE mt_text INTO DATA ( ls_text ) WITH KEY key = l_atinn . r_value = ls_text - value . ENDMETHOD . METHOD _bp . SELECT SINGLE concat ( name_org1 , name_org2 ) AS name FROM but000 WHERE partner = @ i_key INTO @ r_value . ENDMETHOD . METHOD _bukrs . SELECT SINGLE butxt FROM t001 WHERE bukrs = @ i_key INTO @ r_value . ENDMETHOD . METHOD _domain . ENDMETHOD . METHOD _lgort . SELECT SINGLE lgobe FROM t001l WHERE lgort = @ i_key INTO @ r_value . ENDMETHOD . METHOD _matnr . SELECT SINGLE maktx FROM makt WHERE matnr = @ i_key AND spras = '1' INTO @ r_value . ENDMETHOD . METHOD _not_found . ENDMETHOD . METHOD _prctr . SELECT SINGLE ltext FROM cepct WHERE spras = '1' AND prctr = @ i_key INTO @ r_value . ENDMETHOD . METHOD _waers . SELECT SINGLE ltext FROM tcurt WHERE spras = '1' AND waers = @ i_key INTO @ r_value . ENDMETHOD . METHOD _werks . SELECT SINGLE name1 FROM t001w WHERE werks = @ i_key INTO @ r_value . ENDMETHOD . METHOD long_text . \" \u60f3\u4e86\u4e0b\uff0c\u8fd8\u662f\u4e0d\u7f13\u5b58\u4e86 CALL FUNCTION 'READ_TEXT' EXPORTING id = i_id language = i_language name = i_name object = i_object TABLES lines = et_tline EXCEPTIONS id = 1 language = 2 name = 3 not_found = 4 object = 5 reference_check = 6 wrong_access_to_archive = 7 . IF sy - subrc = 0 . CALL FUNCTION 'IDMX_DI_TLINE_INTO_STRING' EXPORTING it_tline = et_tline IMPORTING ev_text_string = r_value . IF e_value IS SUPPLIED . e_value = r_value . ENDIF . ENDIF . ENDMETHOD . ENDCLASS . \u6d4b\u8bd5\u7528\u4f8b DATA l_value TYPE string . \" \u793a\u4f8b1\uff0c\u53d6\u9884\u7559\u9879 l_value = zcl_text => bukrs -> get ( '0001' ). \" \u793a\u4f8b2\uff0c\u901a\u5e38\u53d6\u503c l_value = zcl_text => create ( 'WERKS' ) -> get ( '0001' ). \" \u793a\u4f8b3\uff0c\u53d6\u57df\u503c l_value = zcl_text => domain ( 'XFELD' ) -> get ( 'X' ). \" \u793a\u4f8b4\uff0c\u53d6\u957f\u6587\u672c l_value = zcl_text => long_text ( i_id = 'Z001' i_name = '0010012345' i_object = 'VBBK' ). \" \u793a\u4f8b5\uff0c\u53d6\u7279\u5f81\u503c DATA ls_mara TYPE mara . DATA ( lo_ausp ) = zcl_text => create_ausp ( i_objectkey = |{ ls_mara - matnr }| i_objecttable = 'MARA' i_classnum = |{ ls_mara - matkl }| i_classtype = '001' ). \" \u7269\u6599\u5206\u7c7b l_value = lo_ausp -> get ( 'A0001' ). l_value = lo_ausp -> get ( 'A0002' ).","title":"\u6587\u672c\u53d6\u503c\u5de5\u5177"},{"location":"others/xlsx_io/","text":"XLSX\u4e0a\u4f20\u4e0b\u8f7d \u00b6 \u9879\u76ee\u5b9e\u65bd\u5c11\u4e0d\u4e86\u6279\u5bfc\uff0c\u8fd9\u91cc\u6574\u7406\u4e0b\u4e0a\u4f20\u4e0b\u8f7d\u4f1a\u7528\u5230\u7684\u5de5\u5177\u3002 OLE \u00b6 \u4e0a\u53e4\u5de5\u5177\uff0c\u5efa\u8bae\u653e\u5f03 DOI \u00b6 \u6ca1\u7528\u8fc7 TEXT_CONVERT_XLS_TO_SAP \u00b6 TODO ALSM_EXCEL_TO_INTERNAL_TABLE \u00b6 \u770b\u4ee3\u7801\u53ef\u4ee5\u770b\u51fa\uff0c\u662fOLE\u64cd\u4f5c\u590d\u5236\u4e0a\u4f20\u533a\u57df\uff0c\u7136\u540e\u52a8\u6001\u89e3\u6790\u526a\u5207\u677f\uff0c\u4f18\u70b9\u662f\u65b9\u4fbf\uff0c\u4f46\u53d7\u4e0a\u4f20\u6587\u4ef6\u683c\u5f0f\u5f71\u54cd\u8f83\u5927\u3002 TODO ABAP2XLSX \u00b6 \u7b2c\u4e09\u65b9\u5de5\u5177\uff0c\u4f7f\u7528ABAPGIT\u5b89\u88c5\u3002 \u901a\u8fc7\u89e3\u6790XLSX\u4e2d\u7684XML\u6587\u4ef6\uff0c\u5b9e\u73b0\u9ad8\u901f\u8bfb\u53d6\u6570\u636e\u3002\u76f8\u6bd4 CL_EHFND_XLSX \uff0c\u63d0\u4f9b\u4e86\u66f4\u9f50\u5168\u7684EXCEL\u8bbe\u7f6e\u3002 \u7a0b\u5e8f\u641c Z*ABAP2XLSX* \u53ef\u89c1\u5b98\u65b9\u793a\u4f8b\u3002 CL_EHFND_XLSX \u00b6 SAP\u63d0\u4f9b\u7684\u6807\u51c6\u65b9\u6cd5\uff0c\u901a\u8fc7\u89e3\u6790XLSX\u4e2d\u7684XML\u6587\u4ef6\uff0c\u5b9e\u73b0\u9ad8\u901f\u8bfb\u53d6\u6570\u636e\uff0c\u7b14\u8005\u9996\u63a8\u3002 TODO XLSX WORKBANCH \u00b6 \u7b2c\u4e09\u65b9\u5de5\u5177\uff0c\u9002\u5408\u5bfc\u51faEXCEL\u3002 \u7c7b\u4f3cSMARTFORMS\uff0c\u9884\u5148\u8bbe\u7f6e\u597dEXCEL\u6a21\u677f\uff0c\u5e76\u63d0\u4f9b\u8f93\u5165\u53c2\u6570\u3002","title":"Excel\u4e0a\u4f20\u4e0b\u8f7d"},{"location":"others/xlsx_io/#xlsx","text":"\u9879\u76ee\u5b9e\u65bd\u5c11\u4e0d\u4e86\u6279\u5bfc\uff0c\u8fd9\u91cc\u6574\u7406\u4e0b\u4e0a\u4f20\u4e0b\u8f7d\u4f1a\u7528\u5230\u7684\u5de5\u5177\u3002","title":"XLSX\u4e0a\u4f20\u4e0b\u8f7d"},{"location":"others/xlsx_io/#ole","text":"\u4e0a\u53e4\u5de5\u5177\uff0c\u5efa\u8bae\u653e\u5f03","title":"OLE"},{"location":"others/xlsx_io/#doi","text":"\u6ca1\u7528\u8fc7","title":"DOI"},{"location":"others/xlsx_io/#text_convert_xls_to_sap","text":"TODO","title":"TEXT_CONVERT_XLS_TO_SAP"},{"location":"others/xlsx_io/#alsm_excel_to_internal_table","text":"\u770b\u4ee3\u7801\u53ef\u4ee5\u770b\u51fa\uff0c\u662fOLE\u64cd\u4f5c\u590d\u5236\u4e0a\u4f20\u533a\u57df\uff0c\u7136\u540e\u52a8\u6001\u89e3\u6790\u526a\u5207\u677f\uff0c\u4f18\u70b9\u662f\u65b9\u4fbf\uff0c\u4f46\u53d7\u4e0a\u4f20\u6587\u4ef6\u683c\u5f0f\u5f71\u54cd\u8f83\u5927\u3002 TODO","title":"ALSM_EXCEL_TO_INTERNAL_TABLE"},{"location":"others/xlsx_io/#abap2xlsx","text":"\u7b2c\u4e09\u65b9\u5de5\u5177\uff0c\u4f7f\u7528ABAPGIT\u5b89\u88c5\u3002 \u901a\u8fc7\u89e3\u6790XLSX\u4e2d\u7684XML\u6587\u4ef6\uff0c\u5b9e\u73b0\u9ad8\u901f\u8bfb\u53d6\u6570\u636e\u3002\u76f8\u6bd4 CL_EHFND_XLSX \uff0c\u63d0\u4f9b\u4e86\u66f4\u9f50\u5168\u7684EXCEL\u8bbe\u7f6e\u3002 \u7a0b\u5e8f\u641c Z*ABAP2XLSX* \u53ef\u89c1\u5b98\u65b9\u793a\u4f8b\u3002","title":"ABAP2XLSX"},{"location":"others/xlsx_io/#cl_ehfnd_xlsx","text":"SAP\u63d0\u4f9b\u7684\u6807\u51c6\u65b9\u6cd5\uff0c\u901a\u8fc7\u89e3\u6790XLSX\u4e2d\u7684XML\u6587\u4ef6\uff0c\u5b9e\u73b0\u9ad8\u901f\u8bfb\u53d6\u6570\u636e\uff0c\u7b14\u8005\u9996\u63a8\u3002 TODO","title":"CL_EHFND_XLSX"},{"location":"others/xlsx_io/#xlsx-workbanch","text":"\u7b2c\u4e09\u65b9\u5de5\u5177\uff0c\u9002\u5408\u5bfc\u51faEXCEL\u3002 \u7c7b\u4f3cSMARTFORMS\uff0c\u9884\u5148\u8bbe\u7f6e\u597dEXCEL\u6a21\u677f\uff0c\u5e76\u63d0\u4f9b\u8f93\u5165\u53c2\u6570\u3002","title":"XLSX WORKBANCH"},{"location":"pp/","text":"\u751f\u4ea7\u6a21\u5757\u6982\u8ff0 \u00b6 \u6309\u6d41\u7a0b \u72ec\u7acb\u9700\u6c42\u8ba1\u5212\uff08PIR\uff09 MRP\u8fd0\u884c\uff08MRP\uff09 \u751f\u4ea7\u8ba1\u5212\uff08Planning\uff09 \u9886\u9000\u6599\uff08MIGO\uff09 \u62a5\u5de5\uff08Confirmation\uff09 \u5de5\u5355\u5173\u95ed\uff08Close\uff09","title":"PP\u6a21\u5757\u6982\u8ff0"},{"location":"pp/#_1","text":"\u6309\u6d41\u7a0b \u72ec\u7acb\u9700\u6c42\u8ba1\u5212\uff08PIR\uff09 MRP\u8fd0\u884c\uff08MRP\uff09 \u751f\u4ea7\u8ba1\u5212\uff08Planning\uff09 \u9886\u9000\u6599\uff08MIGO\uff09 \u62a5\u5de5\uff08Confirmation\uff09 \u5de5\u5355\u5173\u95ed\uff08Close\uff09","title":"\u751f\u4ea7\u6a21\u5757\u6982\u8ff0"},{"location":"pp/mrp/","text":"\u7269\u6599\u9700\u6c42\u8ba1\u5212\uff08MRP\uff09 \u00b6","title":"MRP"},{"location":"pp/mrp/#mrp","text":"","title":"\u7269\u6599\u9700\u6c42\u8ba1\u5212\uff08MRP\uff09"},{"location":"pp/pir/","text":"\u8ba1\u5212\u72ec\u7acb\u9700\u6c42\uff08PIR\uff09 \u00b6 Planned Independent Requirement","title":"PIR"},{"location":"pp/pir/#pir","text":"Planned Independent Requirement","title":"\u8ba1\u5212\u72ec\u7acb\u9700\u6c42\uff08PIR\uff09"},{"location":"pp/pp_confirmation/","text":"\u751f\u4ea7\u62a5\u5de5 \u00b6 \u793a\u4f8b\u4ee3\u7801 \u00b6 \u4f7f\u7528 BAPI_PRODORDCONF_GET_TT_PROP \u67e5\u8be2\u5de5\u5355\u4fe1\u606f\uff0c\u4f7f\u7528 BAPI_PRODORDCONF_CREATE_TT \u521b\u5efa\u6216\u7ef4\u62a4\u62a5\u5de5\u3002 \u65b0\u5efa \u00b6 \u65b0\u5efa\u751f\u4ea7\u62a5\u5de5 \" \u5904\u7406\u72b6\u6001 DATA l_mtype TYPE bapi_mtype . DATA l_msg TYPE bapi_msg . DATA : lt_timetickets TYPE STANDARD TABLE OF bapi_pp_timeticket , ls_timetickets TYPE bapi_pp_timeticket , ls_bapiret1 TYPE bapiret1 . CLEAR lt_timetickets . LOOP AT lt_input INTO ls_input . CLEAR ls_timetickets . ls_timetickets - orderid = ls_input - aufnr . \" \u751f\u4ea7\u8ba2\u5355\u53f7 ls_timetickets - operation = ls_input - posnr . \" \u5de5\u5e8f ls_timetickets - postg_date = ls_input - budat . \" \u65e5\u671f ls_timetickets - yield = ls_input - gmnga . \" \u751f\u4ea7\u6570\u91cf APPEND ls_timetickets TO lt_timetickets . ENDLOOP . \" \u62a5\u5de5 CLEAR ls_bapiret1 . CALL FUNCTION 'BAPI_PRODORDCONF_CREATE_TT' IMPORTING return = ls_bapiret1 TABLES timetickets = lt_timetickets . IF ls_bapiret1 - type CA 'AEX' . l_mtype = 'E' . MESSAGE ID ls_bapiret1 - id TYPE ls_bapiret1 - type NUMBER ls_bapiret1 - number WITH ls_bapiret1 - message_v1 ls_bapiret1 - message_v2 ls_bapiret1 - message_v3 ls_bapiret1 - message_v4 INTO l_msg . CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK' . ELSE . l_mtype = 'S' . l_msg = | \u62a5\u5de5\u5df2\u5904\u7406 |. CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = 'X' . ENDIF . \u4fee\u6539 \u00b6 \u4fee\u6539\u751f\u4ea7\u62a5\u5de5","title":"\u62a5\u5de5\u786e\u8ba4"},{"location":"pp/pp_confirmation/#_1","text":"","title":"\u751f\u4ea7\u62a5\u5de5"},{"location":"pp/pp_confirmation/#_2","text":"\u4f7f\u7528 BAPI_PRODORDCONF_GET_TT_PROP \u67e5\u8be2\u5de5\u5355\u4fe1\u606f\uff0c\u4f7f\u7528 BAPI_PRODORDCONF_CREATE_TT \u521b\u5efa\u6216\u7ef4\u62a4\u62a5\u5de5\u3002","title":"\u793a\u4f8b\u4ee3\u7801"},{"location":"pp/pp_confirmation/#_3","text":"\u65b0\u5efa\u751f\u4ea7\u62a5\u5de5 \" \u5904\u7406\u72b6\u6001 DATA l_mtype TYPE bapi_mtype . DATA l_msg TYPE bapi_msg . DATA : lt_timetickets TYPE STANDARD TABLE OF bapi_pp_timeticket , ls_timetickets TYPE bapi_pp_timeticket , ls_bapiret1 TYPE bapiret1 . CLEAR lt_timetickets . LOOP AT lt_input INTO ls_input . CLEAR ls_timetickets . ls_timetickets - orderid = ls_input - aufnr . \" \u751f\u4ea7\u8ba2\u5355\u53f7 ls_timetickets - operation = ls_input - posnr . \" \u5de5\u5e8f ls_timetickets - postg_date = ls_input - budat . \" \u65e5\u671f ls_timetickets - yield = ls_input - gmnga . \" \u751f\u4ea7\u6570\u91cf APPEND ls_timetickets TO lt_timetickets . ENDLOOP . \" \u62a5\u5de5 CLEAR ls_bapiret1 . CALL FUNCTION 'BAPI_PRODORDCONF_CREATE_TT' IMPORTING return = ls_bapiret1 TABLES timetickets = lt_timetickets . IF ls_bapiret1 - type CA 'AEX' . l_mtype = 'E' . MESSAGE ID ls_bapiret1 - id TYPE ls_bapiret1 - type NUMBER ls_bapiret1 - number WITH ls_bapiret1 - message_v1 ls_bapiret1 - message_v2 ls_bapiret1 - message_v3 ls_bapiret1 - message_v4 INTO l_msg . CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK' . ELSE . l_mtype = 'S' . l_msg = | \u62a5\u5de5\u5df2\u5904\u7406 |. CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = 'X' . ENDIF .","title":"\u65b0\u5efa"},{"location":"pp/pp_confirmation/#_4","text":"\u4fee\u6539\u751f\u4ea7\u62a5\u5de5","title":"\u4fee\u6539"},{"location":"pp/pp_gi/","text":"\u751f\u4ea7\u53d1\u8d27 \u00b6 \u53c2\u8003","title":"\u751f\u4ea7\u8ba2\u5355\u6536\u8d27"},{"location":"pp/pp_gi/#_1","text":"\u53c2\u8003","title":"\u751f\u4ea7\u53d1\u8d27"},{"location":"pp/pp_gr/","text":"\u9000\u6599 \u00b6","title":"\u9886\u9000\u6599"},{"location":"pp/pp_gr/#_1","text":"","title":"\u9000\u6599"},{"location":"pp/pp_order/","text":"\u751f\u4ea7\u8ba2\u5355 \u00b6","title":"\u751f\u4ea7\u5de5\u5355"},{"location":"pp/pp_order/#_1","text":"","title":"\u751f\u4ea7\u8ba2\u5355"},{"location":"pp/pp_order_close/","text":"\u5de5\u5355\u5173\u95ed \u00b6 \u6280\u672f\u6027\u5b8c\u6210\uff08TECO\uff09\u751f\u4ea7\u8ba2\u5355 \u00b6 \u793a\u4f8b\u4ee3\u7801 DATA : lt_orders TYPE STANDARD TABLE OF bapi_order_key , lt_detail_return TYPE STANDARD TABLE OF bapi_order_return , ls_return TYPE bapiret2 . CLEAR lt_orders . CLEAR lt_detail_return . CLEAR ls_return . INSERT VALUE # ( order_number = ls_input - aufnr ) INTO TABLE lt_orders . \" \u6280\u672f\u6027\u5b8c\u6210\u751f\u4ea7\u8ba2\u5355 CALL FUNCTION 'BAPI_PRODORD_COMPLETE_TECH' IMPORTING return = ls_return TABLES orders = lt_orders detail_return = lt_detail_return . IF ls_return - type = 'E' . l_mtype = 'E' . MESSAGE ID ls_return - id TYPE ls_return - type NUMBER ls_return - number WITH ls_return - message_v1 ls_return - message_v2 ls_return - message_v3 ls_return - message_v4 INTO l_msg . CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK' . ELSE . l_mtype = 'S' . l_msg = | \u5df2\u5904\u7406 |. CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = 'X' . ENDIF .","title":"\u5de5\u5355\u5173\u95ed"},{"location":"pp/pp_order_close/#_1","text":"","title":"\u5de5\u5355\u5173\u95ed"},{"location":"pp/pp_order_close/#teco","text":"\u793a\u4f8b\u4ee3\u7801 DATA : lt_orders TYPE STANDARD TABLE OF bapi_order_key , lt_detail_return TYPE STANDARD TABLE OF bapi_order_return , ls_return TYPE bapiret2 . CLEAR lt_orders . CLEAR lt_detail_return . CLEAR ls_return . INSERT VALUE # ( order_number = ls_input - aufnr ) INTO TABLE lt_orders . \" \u6280\u672f\u6027\u5b8c\u6210\u751f\u4ea7\u8ba2\u5355 CALL FUNCTION 'BAPI_PRODORD_COMPLETE_TECH' IMPORTING return = ls_return TABLES orders = lt_orders detail_return = lt_detail_return . IF ls_return - type = 'E' . l_mtype = 'E' . MESSAGE ID ls_return - id TYPE ls_return - type NUMBER ls_return - number WITH ls_return - message_v1 ls_return - message_v2 ls_return - message_v3 ls_return - message_v4 INTO l_msg . CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK' . ELSE . l_mtype = 'S' . l_msg = | \u5df2\u5904\u7406 |. CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = 'X' . ENDIF .","title":"\u6280\u672f\u6027\u5b8c\u6210\uff08TECO\uff09\u751f\u4ea7\u8ba2\u5355"},{"location":"pp/pp_planning/","text":"\u751f\u4ea7\u8ba1\u5212 \u00b6","title":"\u751f\u4ea7\u8ba1\u5212"},{"location":"pp/pp_planning/#_1","text":"","title":"\u751f\u4ea7\u8ba1\u5212"},{"location":"pp/pp_version/","text":"\u751f\u4ea7\u62a5\u5de5 \u00b6","title":"\u751f\u4ea7\u7248\u672c"},{"location":"pp/pp_version/#_1","text":"","title":"\u751f\u4ea7\u62a5\u5de5"},{"location":"ref/","text":"\u7279\u6b8a\u6982\u8ff0 \u00b6 \u65e0\u6cd5\u5f52\u7c7b\u5230\u5177\u4f53\u6a21\u5757\u6216\u8005\u6a2a\u8de8\u591a\u4e2a\u6a21\u5757\u7684\u573a\u666f\uff0c\u90fd\u4f1a\u5199\u5230\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u7136\u540e\u63d0\u4f9b\u5176\u4ed6\u5730\u65b9\u5f15\u7528","title":"\u53c2\u8003\u5f15\u7528\u6982\u8ff0"},{"location":"ref/#_1","text":"\u65e0\u6cd5\u5f52\u7c7b\u5230\u5177\u4f53\u6a21\u5757\u6216\u8005\u6a2a\u8de8\u591a\u4e2a\u6a21\u5757\u7684\u573a\u666f\uff0c\u90fd\u4f1a\u5199\u5230\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u7136\u540e\u63d0\u4f9b\u5176\u4ed6\u5730\u65b9\u5f15\u7528","title":"\u7279\u6b8a\u6982\u8ff0"},{"location":"ref/migo/","text":"MIGO \u00b6 MIGO\u529f\u80fd\u5f3a\u5927\uff0c\u5728\u524d\u53f0\u6839\u636e\u64cd\u4f5c\u7c7b\u578b\u3001\u51ed\u8bc1\u7c7b\u578b\u3001\u79fb\u52a8\u7c7b\u578b\uff0c\u53ef\u5b9e\u73b0\u4e0d\u540c\u6548\u679c\u7684\u5e93\u5b58\u7ba1\u7406\u3002\u5176\u5bf9\u5e94BAPI\uff0c BAPI_GOODSMVT_CREATE \uff0c\u4e5f\u6709\u7740\u5f3a\u5927\u7684\u4f5c\u7528\uff0c\u6211\u5c3d\u53ef\u80fd\u628a\u5404\u79cd\u573a\u666f\u7684\u4ee3\u7801\u90fd\u5217\u793a\u3002 \u53c2\u6570\u8bf4\u660e \u00b6 GM_CODE \u00b6 \u5173\u4e8eGM_CODE\u4f20\u503c\u4f5c\u7528\uff0c\u53ef\u53c2\u8003\u4e0b\u56fe\uff1a GM_CODE \u4e8b\u52a1\u4ee3\u7801 \u8bf4\u660e1 \u8bf4\u660e2 01 MB01 Goods receipt for purchase order \u91c7\u8d2d\u8ba2\u5355\u6536\u8d27 02 MB31 Goods receipt for production order \u751f\u4ea7\u8ba2\u5355\u6536\u8d27 03 MB1A Goods issue \u53d1\u8d27 04 MB1B Transfer posting \u8f6c\u50a8 05 MB1C Other goods receipt \u5176\u4ed6\u6536\u8d27 06 MB11 Goods movement \u8d27\u7269\u79fb\u52a8 07 MB04 Subsequent adjustment to a subcontract order \u5206\u5305\u540e\u7eed\u8c03\u6574\uff0c\u4e0d\u61c2 \u8868 T158G \uff0cGM_CODE\u5bf9\u5e94\u7684\u4e8b\u52a1\u4ee3\u7801 \u8868 T158B \uff0c\u4e8b\u52a1\u4ee3\u7801\u5bf9\u5e94\u79fb\u52a8\u7c7b\u578b \u5982\u679c\u4e0d\u786e\u5b9a\u8981\u4f20\u4ec0\u4e48\u503c\uff0c\u53ef\u4ee5\u5148\u5230T158B\uff0c\u6839\u636e\u79fb\u52a8\u7c7b\u578b\u67e5\u627e\u4e8b\u52a1\u4ee3\u7801\uff0c\u518d\u5230T158G\u67e5\u627e\u5bf9\u5e94GM_CODE \u5b9e\u5728\u4e0d\u884c\uff0c\u5c31\u4e00\u4e2a\u4e00\u4e2a\u8bd5\u9519\u5427\uff0c\u53cd\u6b63\u4e5f\u4e0d\u591a MVT_IND \u00b6 \u79fb\u52a8\u6807\u8bc6\uff0c\u5927\u6982\u662f\u9488\u5bf9\u8d27\u7269\u79fb\u52a8\uff08GM_CODE=06\uff09\u6765\u8bbe\u7f6e\u7684\uff0c\u53c2\u8003\u4e0b\u56fe\uff08\u57df\u503c\uff09\uff1a MVT_IND \u8bf4\u660e1 \u8bf4\u660e2 \u7a7a Goods movement w/o reference \u65e0\u53c2\u8003\u7684\u8d27\u7269\u79fb\u52a8 B Goods movement for purchase order \u6309\u91c7\u8d2d\u8ba2\u5355\u7684\u8d27\u7269\u79fb\u52a8 F Goods movement for production order \u6709\u5173\u751f\u4ea7\u5355\u7684\u8d27\u7269\u79fb\u52a8 L Goods movement for delivery note \u6709\u5173\u4ea4\u8d27\u901a\u77e5\u7684\u8d27\u7269\u79fb\u52a8 K Goods movement for kanban requirement (WM - internal only) \u770b\u677f\u9700\u6c42\u7684\u8d27\u7269\u79fb\u52a8\uff08WM\uff0d\u4ec5\u9650\u5185\u90e8\uff09 O Subsequent adjustment of \"material-provided\" consumption \"\u63d0\u4f9b\u7269\u6599\"\u6d88\u8017\u7684\u540e\u7eed\u8c03\u6574 W Subsequent adjustment of proportion/product unit material \u6bd4\u4f8b\u7684\u540e\u7eed\u8c03\u6574/\u4ea7\u54c1\u5355\u4f4d\u7269\u6599 \u573a\u666f \u00b6 \u6f14\u793a \u00b6 \u793a\u4f8b\u4ee3\u7801 DATA l_mtype TYPE bapi_mtype . DATA l_msg TYPE bapi_msg . DATA : ls_goodsmvt_header TYPE bapi2017_gm_head_01 , ls_goodsmvt_code TYPE bapi2017_gm_code , lt_goodsmvt_item TYPE STANDARD TABLE OF bapi2017_gm_item_create , ls_goodsmvt_item TYPE bapi2017_gm_item_create , ls_goodsmvt_headret TYPE bapi2017_gm_head_ret , lt_return TYPE STANDARD TABLE OF bapiret2 , ls_return TYPE bapiret2 . CLEAR ls_goodsmvt_header . ls_goodsmvt_header - pstng_date = ls_input - budat . ls_goodsmvt_header - doc_date = ls_input - budat . CLEAR ls_goodsmvt_code . ls_goodsmvt_code - gm_code = ls_input - gm_code . CLEAR lt_goodsmvt_item . CLEAR ls_goodsmvt_item . ls_goodsmvt_item - move_type = ls_input - bwart . ls_goodsmvt_item - material = ls_input - matnr . ls_goodsmvt_item - plant = ls_input - werks . ls_goodsmvt_item - stge_loc = ls_input - lgort . ls_goodsmvt_item - batch = ls_input - charg . ls_goodsmvt_item - spec_stock = ls_input - sobkz . ls_goodsmvt_item - entry_qnt = ls_input - menge . INSERT ls_goodsmvt_item INTO TABLE lt_goodsmvt_item . CLEAR ls_goodsmvt_headret . CLEAR lt_return . CLEAR ls_return . CALL FUNCTION 'BAPI_GOODSMVT_CREATE' EXPORTING goodsmvt_header = ls_goodsmvt_header goodsmvt_code = ls_goodsmvt_code IMPORTING goodsmvt_headret = ls_goodsmvt_headret TABLES goodsmvt_item = lt_goodsmvt_item return = lt_return . IF ls_goodsmvt_headret - mat_doc IS INITIAL . l_mtype = 'E' . LOOP AT lt_return INTO ls_return WHERE type CA 'AEX' . MESSAGE ID ls_return - id TYPE ls_return - type NUMBER ls_return - number WITH ls_return - message_v1 ls_return - message_v2 ls_return - message_v3 ls_return - message_v4 INTO ls_return - message . l_msg = |{ l_msg }{ ls_return - message } ; |. ENDLOOP . CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK' . ELSE . l_mtype = 'S' . l_msg = | \u7269\u6599\u51ed\u8bc1 { ls_goodsmvt_headret - mat_doc } \u5df2\u5904\u7406 |. CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = 'X' . ENDIF . \u91c7\u8d2d\u8ba2\u5355\u6536\u8d27 \u00b6 \u793a\u4f8b\u4ee3\u7801 \u751f\u4ea7\u8ba2\u5355\u6536\u8d27 \u00b6 \u793a\u4f8b\u4ee3\u7801 \u53d1\u8d27 \u00b6 \u793a\u4f8b\u4ee3\u7801 DATA : ls_goodsmvt_header TYPE bapi2017_gm_head_01 , ls_goodsmvt_code TYPE bapi2017_gm_code , ls_goodsmvt_headret TYPE bapi2017_gm_head_ret , lt_goodsmvt_item TYPE STANDARD TABLE OF bapi2017_gm_item_create , ls_goodsmvt_item TYPE bapi2017_gm_item_create , lt_return TYPE STANDARD TABLE OF bapiret2 , ls_return TYPE bapiret2 . CLEAR ls_goodsmvt_header . ls_goodsmvt_header - pstng_date = ls_input - budat . ls_goodsmvt_header - doc_date = ls_input - budat . CLEAR ls_goodsmvt_code . ls_goodsmvt_code - gm_code = '03' . \" \u53d1\u8d27 CLEAR lt_goodsmvt_item . CLEAR ls_goodsmvt_item . ls_goodsmvt_item - material = ls_input - matnr . ls_goodsmvt_item - plant = ls_input - werks . ls_goodsmvt_item - stge_loc = ls_input - lgort . ls_goodsmvt_item - batch = ls_input - charg . ls_goodsmvt_item - spec_stock = ls_input - sobkz . \" \u7279\u6b8a\u5e93\u5b58\u6807\u8bc6 ls_goodsmvt_item - entry_qnt = ls_input - menge . \" \u6570\u91cf \" \u64a4\u9500\u6807\u8bb0 ls_goodsmvt_item - move_type = '261' . IF ls_input - zcancel IS NOT INITIAL . ls_goodsmvt_item - move_type = '262' . ENDIF . \" WBS\u5143\u7d20 IF ls_input - pspnr IS NOT INITIAL . ls_goodsmvt_item - wbs_elem = ls_input - pspnr . ENDIF . \" \u751f\u4ea7\u8ba2\u5355 ls_goodsmvt_item - orderid = ls_input - aufnr . INSERT ls_goodsmvt_item INTO TABLE lt_goodsmvt_item . \" \u9884\u7559\u5355 ls_goodsmvt_item - reserv_no = ls_input - rsnum . ls_goodsmvt_item - res_item = ls_input - rspos . \" \u53d1\u8d27\u8fc7\u8d26 CLEAR ls_goodsmvt_headret . CLEAR lt_return . CLEAR ls_return . CALL FUNCTION 'BAPI_GOODSMVT_CREATE' EXPORTING goodsmvt_header = ls_goodsmvt_header goodsmvt_code = ls_goodsmvt_code IMPORTING goodsmvt_headret = ls_goodsmvt_headret TABLES goodsmvt_item = lt_goodsmvt_item return = lt_return . IF ls_goodsmvt_headret - mat_doc IS INITIAL . l_mtype = 'E' . LOOP AT lt_return INTO ls_return WHERE type CA 'AEX' . MESSAGE ID ls_return - id TYPE ls_return - type NUMBER ls_return - number WITH ls_return - message_v1 ls_return - message_v2 ls_return - message_v3 ls_return - message_v4 INTO ls_return - message . l_msg = |{ l_msg }{ ls_return - message } ; |. ENDLOOP . CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK' . ELSE . l_mtype = 'S' . l_msg = | \u7269\u6599\u51ed\u8bc1 { ls_goodsmvt_headret - mat_doc } \u5df2\u5904\u7406 |. CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = 'X' . ENDIF . \u8f6c\u50a8 \u00b6 \u793a\u4f8b\u4ee3\u7801 \u5176\u4ed6\u6536\u8d27 \u00b6 \u793a\u4f8b\u4ee3\u7801 \u8d27\u7269\u79fb\u52a8 \u00b6 \u793a\u4f8b\u4ee3\u7801 \u9500\u552e\u8ba2\u5355\u51fa\u5e93 \u00b6 \u793a\u4f8b\u4ee3\u7801","title":"MIGO"},{"location":"ref/migo/#migo","text":"MIGO\u529f\u80fd\u5f3a\u5927\uff0c\u5728\u524d\u53f0\u6839\u636e\u64cd\u4f5c\u7c7b\u578b\u3001\u51ed\u8bc1\u7c7b\u578b\u3001\u79fb\u52a8\u7c7b\u578b\uff0c\u53ef\u5b9e\u73b0\u4e0d\u540c\u6548\u679c\u7684\u5e93\u5b58\u7ba1\u7406\u3002\u5176\u5bf9\u5e94BAPI\uff0c BAPI_GOODSMVT_CREATE \uff0c\u4e5f\u6709\u7740\u5f3a\u5927\u7684\u4f5c\u7528\uff0c\u6211\u5c3d\u53ef\u80fd\u628a\u5404\u79cd\u573a\u666f\u7684\u4ee3\u7801\u90fd\u5217\u793a\u3002","title":"MIGO"},{"location":"ref/migo/#_1","text":"","title":"\u53c2\u6570\u8bf4\u660e"},{"location":"ref/migo/#gm_code","text":"\u5173\u4e8eGM_CODE\u4f20\u503c\u4f5c\u7528\uff0c\u53ef\u53c2\u8003\u4e0b\u56fe\uff1a GM_CODE \u4e8b\u52a1\u4ee3\u7801 \u8bf4\u660e1 \u8bf4\u660e2 01 MB01 Goods receipt for purchase order \u91c7\u8d2d\u8ba2\u5355\u6536\u8d27 02 MB31 Goods receipt for production order \u751f\u4ea7\u8ba2\u5355\u6536\u8d27 03 MB1A Goods issue \u53d1\u8d27 04 MB1B Transfer posting \u8f6c\u50a8 05 MB1C Other goods receipt \u5176\u4ed6\u6536\u8d27 06 MB11 Goods movement \u8d27\u7269\u79fb\u52a8 07 MB04 Subsequent adjustment to a subcontract order \u5206\u5305\u540e\u7eed\u8c03\u6574\uff0c\u4e0d\u61c2 \u8868 T158G \uff0cGM_CODE\u5bf9\u5e94\u7684\u4e8b\u52a1\u4ee3\u7801 \u8868 T158B \uff0c\u4e8b\u52a1\u4ee3\u7801\u5bf9\u5e94\u79fb\u52a8\u7c7b\u578b \u5982\u679c\u4e0d\u786e\u5b9a\u8981\u4f20\u4ec0\u4e48\u503c\uff0c\u53ef\u4ee5\u5148\u5230T158B\uff0c\u6839\u636e\u79fb\u52a8\u7c7b\u578b\u67e5\u627e\u4e8b\u52a1\u4ee3\u7801\uff0c\u518d\u5230T158G\u67e5\u627e\u5bf9\u5e94GM_CODE \u5b9e\u5728\u4e0d\u884c\uff0c\u5c31\u4e00\u4e2a\u4e00\u4e2a\u8bd5\u9519\u5427\uff0c\u53cd\u6b63\u4e5f\u4e0d\u591a","title":"GM_CODE"},{"location":"ref/migo/#mvt_ind","text":"\u79fb\u52a8\u6807\u8bc6\uff0c\u5927\u6982\u662f\u9488\u5bf9\u8d27\u7269\u79fb\u52a8\uff08GM_CODE=06\uff09\u6765\u8bbe\u7f6e\u7684\uff0c\u53c2\u8003\u4e0b\u56fe\uff08\u57df\u503c\uff09\uff1a MVT_IND \u8bf4\u660e1 \u8bf4\u660e2 \u7a7a Goods movement w/o reference \u65e0\u53c2\u8003\u7684\u8d27\u7269\u79fb\u52a8 B Goods movement for purchase order \u6309\u91c7\u8d2d\u8ba2\u5355\u7684\u8d27\u7269\u79fb\u52a8 F Goods movement for production order \u6709\u5173\u751f\u4ea7\u5355\u7684\u8d27\u7269\u79fb\u52a8 L Goods movement for delivery note \u6709\u5173\u4ea4\u8d27\u901a\u77e5\u7684\u8d27\u7269\u79fb\u52a8 K Goods movement for kanban requirement (WM - internal only) \u770b\u677f\u9700\u6c42\u7684\u8d27\u7269\u79fb\u52a8\uff08WM\uff0d\u4ec5\u9650\u5185\u90e8\uff09 O Subsequent adjustment of \"material-provided\" consumption \"\u63d0\u4f9b\u7269\u6599\"\u6d88\u8017\u7684\u540e\u7eed\u8c03\u6574 W Subsequent adjustment of proportion/product unit material \u6bd4\u4f8b\u7684\u540e\u7eed\u8c03\u6574/\u4ea7\u54c1\u5355\u4f4d\u7269\u6599","title":"MVT_IND"},{"location":"ref/migo/#_2","text":"","title":"\u573a\u666f"},{"location":"ref/migo/#_3","text":"\u793a\u4f8b\u4ee3\u7801 DATA l_mtype TYPE bapi_mtype . DATA l_msg TYPE bapi_msg . DATA : ls_goodsmvt_header TYPE bapi2017_gm_head_01 , ls_goodsmvt_code TYPE bapi2017_gm_code , lt_goodsmvt_item TYPE STANDARD TABLE OF bapi2017_gm_item_create , ls_goodsmvt_item TYPE bapi2017_gm_item_create , ls_goodsmvt_headret TYPE bapi2017_gm_head_ret , lt_return TYPE STANDARD TABLE OF bapiret2 , ls_return TYPE bapiret2 . CLEAR ls_goodsmvt_header . ls_goodsmvt_header - pstng_date = ls_input - budat . ls_goodsmvt_header - doc_date = ls_input - budat . CLEAR ls_goodsmvt_code . ls_goodsmvt_code - gm_code = ls_input - gm_code . CLEAR lt_goodsmvt_item . CLEAR ls_goodsmvt_item . ls_goodsmvt_item - move_type = ls_input - bwart . ls_goodsmvt_item - material = ls_input - matnr . ls_goodsmvt_item - plant = ls_input - werks . ls_goodsmvt_item - stge_loc = ls_input - lgort . ls_goodsmvt_item - batch = ls_input - charg . ls_goodsmvt_item - spec_stock = ls_input - sobkz . ls_goodsmvt_item - entry_qnt = ls_input - menge . INSERT ls_goodsmvt_item INTO TABLE lt_goodsmvt_item . CLEAR ls_goodsmvt_headret . CLEAR lt_return . CLEAR ls_return . CALL FUNCTION 'BAPI_GOODSMVT_CREATE' EXPORTING goodsmvt_header = ls_goodsmvt_header goodsmvt_code = ls_goodsmvt_code IMPORTING goodsmvt_headret = ls_goodsmvt_headret TABLES goodsmvt_item = lt_goodsmvt_item return = lt_return . IF ls_goodsmvt_headret - mat_doc IS INITIAL . l_mtype = 'E' . LOOP AT lt_return INTO ls_return WHERE type CA 'AEX' . MESSAGE ID ls_return - id TYPE ls_return - type NUMBER ls_return - number WITH ls_return - message_v1 ls_return - message_v2 ls_return - message_v3 ls_return - message_v4 INTO ls_return - message . l_msg = |{ l_msg }{ ls_return - message } ; |. ENDLOOP . CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK' . ELSE . l_mtype = 'S' . l_msg = | \u7269\u6599\u51ed\u8bc1 { ls_goodsmvt_headret - mat_doc } \u5df2\u5904\u7406 |. CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = 'X' . ENDIF .","title":"\u6f14\u793a"},{"location":"ref/migo/#_4","text":"\u793a\u4f8b\u4ee3\u7801","title":"\u91c7\u8d2d\u8ba2\u5355\u6536\u8d27"},{"location":"ref/migo/#_5","text":"\u793a\u4f8b\u4ee3\u7801","title":"\u751f\u4ea7\u8ba2\u5355\u6536\u8d27"},{"location":"ref/migo/#_6","text":"\u793a\u4f8b\u4ee3\u7801 DATA : ls_goodsmvt_header TYPE bapi2017_gm_head_01 , ls_goodsmvt_code TYPE bapi2017_gm_code , ls_goodsmvt_headret TYPE bapi2017_gm_head_ret , lt_goodsmvt_item TYPE STANDARD TABLE OF bapi2017_gm_item_create , ls_goodsmvt_item TYPE bapi2017_gm_item_create , lt_return TYPE STANDARD TABLE OF bapiret2 , ls_return TYPE bapiret2 . CLEAR ls_goodsmvt_header . ls_goodsmvt_header - pstng_date = ls_input - budat . ls_goodsmvt_header - doc_date = ls_input - budat . CLEAR ls_goodsmvt_code . ls_goodsmvt_code - gm_code = '03' . \" \u53d1\u8d27 CLEAR lt_goodsmvt_item . CLEAR ls_goodsmvt_item . ls_goodsmvt_item - material = ls_input - matnr . ls_goodsmvt_item - plant = ls_input - werks . ls_goodsmvt_item - stge_loc = ls_input - lgort . ls_goodsmvt_item - batch = ls_input - charg . ls_goodsmvt_item - spec_stock = ls_input - sobkz . \" \u7279\u6b8a\u5e93\u5b58\u6807\u8bc6 ls_goodsmvt_item - entry_qnt = ls_input - menge . \" \u6570\u91cf \" \u64a4\u9500\u6807\u8bb0 ls_goodsmvt_item - move_type = '261' . IF ls_input - zcancel IS NOT INITIAL . ls_goodsmvt_item - move_type = '262' . ENDIF . \" WBS\u5143\u7d20 IF ls_input - pspnr IS NOT INITIAL . ls_goodsmvt_item - wbs_elem = ls_input - pspnr . ENDIF . \" \u751f\u4ea7\u8ba2\u5355 ls_goodsmvt_item - orderid = ls_input - aufnr . INSERT ls_goodsmvt_item INTO TABLE lt_goodsmvt_item . \" \u9884\u7559\u5355 ls_goodsmvt_item - reserv_no = ls_input - rsnum . ls_goodsmvt_item - res_item = ls_input - rspos . \" \u53d1\u8d27\u8fc7\u8d26 CLEAR ls_goodsmvt_headret . CLEAR lt_return . CLEAR ls_return . CALL FUNCTION 'BAPI_GOODSMVT_CREATE' EXPORTING goodsmvt_header = ls_goodsmvt_header goodsmvt_code = ls_goodsmvt_code IMPORTING goodsmvt_headret = ls_goodsmvt_headret TABLES goodsmvt_item = lt_goodsmvt_item return = lt_return . IF ls_goodsmvt_headret - mat_doc IS INITIAL . l_mtype = 'E' . LOOP AT lt_return INTO ls_return WHERE type CA 'AEX' . MESSAGE ID ls_return - id TYPE ls_return - type NUMBER ls_return - number WITH ls_return - message_v1 ls_return - message_v2 ls_return - message_v3 ls_return - message_v4 INTO ls_return - message . l_msg = |{ l_msg }{ ls_return - message } ; |. ENDLOOP . CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK' . ELSE . l_mtype = 'S' . l_msg = | \u7269\u6599\u51ed\u8bc1 { ls_goodsmvt_headret - mat_doc } \u5df2\u5904\u7406 |. CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = 'X' . ENDIF .","title":"\u53d1\u8d27"},{"location":"ref/migo/#_7","text":"\u793a\u4f8b\u4ee3\u7801","title":"\u8f6c\u50a8"},{"location":"ref/migo/#_8","text":"\u793a\u4f8b\u4ee3\u7801","title":"\u5176\u4ed6\u6536\u8d27"},{"location":"ref/migo/#_9","text":"\u793a\u4f8b\u4ee3\u7801","title":"\u8d27\u7269\u79fb\u52a8"},{"location":"ref/migo/#_10","text":"\u793a\u4f8b\u4ee3\u7801","title":"\u9500\u552e\u8ba2\u5355\u51fa\u5e93"},{"location":"report/","text":"\u5e38\u7528\u62a5\u8868 \u00b6 \u6bd4\u8d77\u4e1a\u52a1\u6d41\u7a0b\uff0cSAP\u62a5\u8868\u53ef\u8c13\u591a\u4e0d\u80dc\u6570\uff0c\u6211\u53ea\u80fd\u628a\u5e38\u7528\u7684\u62a5\u8868\u6574\u7406\u4e00\u4e0b","title":"\u62a5\u8868\u6982\u8ff0"},{"location":"report/#_1","text":"\u6bd4\u8d77\u4e1a\u52a1\u6d41\u7a0b\uff0cSAP\u62a5\u8868\u53ef\u8c13\u591a\u4e0d\u80dc\u6570\uff0c\u6211\u53ea\u80fd\u628a\u5e38\u7528\u7684\u62a5\u8868\u6574\u7406\u4e00\u4e0b","title":"\u5e38\u7528\u62a5\u8868"},{"location":"sd/","text":"SD\u6a21\u5757\u6982\u8ff0 \u00b6 \u6211\u7406\u89e3\u7684SD\uff08\uff09\uff0c\u9500\u552e\u548c\u5206\u9500\u6a21\u5757\uff0c\u5305\u62ec\u91c7\u8d2d\u6536\u8d27\uff0c\u9500\u552e\u5355\uff0c\u9500\u552e\u53d1\u8d27\uff0c\u6536\u8d27\u548c\u53d1\u8d27\u8fc7\u8d26\uff0cMIGO\u7b49\u3002","title":"SD\u6a21\u5757\u6982\u8ff0"},{"location":"sd/#sd","text":"\u6211\u7406\u89e3\u7684SD\uff08\uff09\uff0c\u9500\u552e\u548c\u5206\u9500\u6a21\u5757\uff0c\u5305\u62ec\u91c7\u8d2d\u6536\u8d27\uff0c\u9500\u552e\u5355\uff0c\u9500\u552e\u53d1\u8d27\uff0c\u6536\u8d27\u548c\u53d1\u8d27\u8fc7\u8d26\uff0cMIGO\u7b49\u3002","title":"SD\u6a21\u5757\u6982\u8ff0"},{"location":"sd/outbound_delivery/","text":"\u4ea4\u8d27\u5355 \u00b6","title":"\uff08\u5916\u5411\uff09\u4ea4\u8d27\u5355"},{"location":"sd/outbound_delivery/#_1","text":"","title":"\u4ea4\u8d27\u5355"},{"location":"sd/outbound_delivery_post/","text":"\u53d1\u8d27\u8fc7\u8d26 \u00b6","title":"\u53d1\u8d27\u8fc7\u8d26"},{"location":"sd/outbound_delivery_post/#_1","text":"","title":"\u53d1\u8d27\u8fc7\u8d26"},{"location":"sd/sale_document/","text":"\u9500\u552e\u8ba2\u5355 \u00b6","title":"\u9500\u552e\u8ba2\u5355"},{"location":"sd/sale_document/#_1","text":"","title":"\u9500\u552e\u8ba2\u5355"}]}