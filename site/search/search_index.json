{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ABAP\u5f00\u53d1\u6587\u6863 \u00b6 \u603b\u7ed3\u4e0b\u5f00\u53d1\u7ecf\u9a8c\uff0c\u6574\u7406\u7684\u65b9\u5411\u6709\u4e0b\u9762\u51e0\u70b9 \u5b9e\u65bd\u6d41\u7a0b \u6587\u6863\u4f1a\u6309\u7167ERP\u6807\u51c6\u5b9e\u65bd\u6d41\u7a0b\u6765\u6574\u7406\uff0c\u4ece\u5404\u7c7b\u4e3b\u6570\u636e\u5f55\u5165\uff0c\u5230\u4e1a\u52a1\u8fc7\u7a0b\u5b9e\u65bd\uff0c\u518d\u5230\u8d22\u52a1\u7ed3\u7b97\uff0c\u6700\u7ec8\u5b8c\u6210\u54c1\u4f1a\u662f\u4e00\u4efd\u5b9e\u65bd\u7684\u5f00\u53d1\u6307\u5bfc\u3002 \u5f02\u5e38\u8bf4\u660e \u5bf9\u4ee3\u7801\u4e2d\u53ef\u80fd\u4f1a\u51fa\u73b0\u7684\u95ee\u9898\uff0c\u63d0\u4f9b\u8bf4\u660e\u4e0e\u89e3\u51b3\u65b9\u6cd5\u3002","title":"\u6982\u8ff0"},{"location":"#abap","text":"\u603b\u7ed3\u4e0b\u5f00\u53d1\u7ecf\u9a8c\uff0c\u6574\u7406\u7684\u65b9\u5411\u6709\u4e0b\u9762\u51e0\u70b9 \u5b9e\u65bd\u6d41\u7a0b \u6587\u6863\u4f1a\u6309\u7167ERP\u6807\u51c6\u5b9e\u65bd\u6d41\u7a0b\u6765\u6574\u7406\uff0c\u4ece\u5404\u7c7b\u4e3b\u6570\u636e\u5f55\u5165\uff0c\u5230\u4e1a\u52a1\u8fc7\u7a0b\u5b9e\u65bd\uff0c\u518d\u5230\u8d22\u52a1\u7ed3\u7b97\uff0c\u6700\u7ec8\u5b8c\u6210\u54c1\u4f1a\u662f\u4e00\u4efd\u5b9e\u65bd\u7684\u5f00\u53d1\u6307\u5bfc\u3002 \u5f02\u5e38\u8bf4\u660e \u5bf9\u4ee3\u7801\u4e2d\u53ef\u80fd\u4f1a\u51fa\u73b0\u7684\u95ee\u9898\uff0c\u63d0\u4f9b\u8bf4\u660e\u4e0e\u89e3\u51b3\u65b9\u6cd5\u3002","title":"ABAP\u5f00\u53d1\u6587\u6863"},{"location":"fico/","text":"FICO\u6a21\u5757\u6982\u8ff0 \u00b6 \u8d22\u52a1\u7684\u5185\u5bb9\u5f88\u591a\uff0c\u5927\u90e8\u5206\u662f\u62a5\u8868\uff0c\u4e00\u65f6\u534a\u4f1a\u60f3\u4e0d\u8d77\u6765\uff0c\u9047\u5230\u518d\u8865\u5145","title":"FICO\u6a21\u5757\u6982\u8ff0"},{"location":"fico/#fico","text":"\u8d22\u52a1\u7684\u5185\u5bb9\u5f88\u591a\uff0c\u5927\u90e8\u5206\u662f\u62a5\u8868\uff0c\u4e00\u65f6\u534a\u4f1a\u60f3\u4e0d\u8d77\u6765\uff0c\u9047\u5230\u518d\u8865\u5145","title":"FICO\u6a21\u5757\u6982\u8ff0"},{"location":"fico/balance/","text":"\u8d44\u4ea7\u8d1f\u503a\u8868 \u00b6","title":"\u8d44\u4ea7\u8d1f\u503a\u8868"},{"location":"fico/balance/#_1","text":"","title":"\u8d44\u4ea7\u8d1f\u503a\u8868"},{"location":"fico/cash_flow/","text":"\u73b0\u91d1\u6d41\u91cf\u8868 \u00b6","title":"\u73b0\u91d1\u6d41\u91cf\u8868"},{"location":"fico/cash_flow/#_1","text":"","title":"\u73b0\u91d1\u6d41\u91cf\u8868"},{"location":"fico/income/","text":"\u5229\u6da6\u8868 \u00b6","title":"\u5229\u6da6\u8868"},{"location":"fico/income/#_1","text":"","title":"\u5229\u6da6\u8868"},{"location":"fico/invoice_check/","text":"\u53d1\u7968\u6821\u9a8c \u00b6","title":"\u53d1\u7968\u6821\u9a8c"},{"location":"fico/invoice_check/#_1","text":"","title":"\u53d1\u7968\u6821\u9a8c"},{"location":"fico/invoice_park/","text":"\u53d1\u7968\u9884\u5236 \u00b6","title":"\u53d1\u7968\u9884\u5236"},{"location":"fico/invoice_park/#_1","text":"","title":"\u53d1\u7968\u9884\u5236"},{"location":"fico/invoice_post/","text":"\u53d1\u7968\u8fc7\u8d26 \u00b6","title":"\u53d1\u7968\u8fc7\u8d26"},{"location":"fico/invoice_post/#_1","text":"","title":"\u53d1\u7968\u8fc7\u8d26"},{"location":"gtm/","text":"\u8d38\u6613\u7ba1\u7406\u6a21\u5757 \u00b6 \u4e3b\u8981\u662fWTEW\u5de5\u4f5c\u53f0\u914d\u7f6e\uff0c\u5408\u540c\u3001\u5408\u540c\u5173\u8054\u3001\u5408\u540c\u5ba1\u6279\u7b49","title":"GTM\u6a21\u5757\u6982\u8ff0"},{"location":"gtm/#_1","text":"\u4e3b\u8981\u662fWTEW\u5de5\u4f5c\u53f0\u914d\u7f6e\uff0c\u5408\u540c\u3001\u5408\u540c\u5173\u8054\u3001\u5408\u540c\u5ba1\u6279\u7b49","title":"\u8d38\u6613\u7ba1\u7406\u6a21\u5757"},{"location":"gtm/contract/","text":"\u5408\u540c \u00b6","title":"\u5408\u540c"},{"location":"gtm/contract/#_1","text":"","title":"\u5408\u540c"},{"location":"gtm/contract_approval/","text":"\u5408\u540c\u5ba1\u6279 \u00b6","title":"\u5408\u540c\u5ba1\u6279"},{"location":"gtm/contract_approval/#_1","text":"","title":"\u5408\u540c\u5ba1\u6279"},{"location":"gtm/contract_assoc/","text":"\u5408\u540c\u5173\u8054 \u00b6","title":"\u5408\u540c\u5173\u8054"},{"location":"gtm/contract_assoc/#_1","text":"","title":"\u5408\u540c\u5173\u8054"},{"location":"gtm/wtew/","text":"WTEW\u5de5\u4f5c\u53f0 \u00b6","title":"WTEW"},{"location":"gtm/wtew/#wtew","text":"","title":"WTEW\u5de5\u4f5c\u53f0"},{"location":"master_data/","text":"\u4e3b\u6570\u636e\u6982\u8ff0 \u00b6","title":"\u4e3b\u6570\u636e\u6982\u8ff0"},{"location":"master_data/#_1","text":"","title":"\u4e3b\u6570\u636e\u6982\u8ff0"},{"location":"master_data/bom/","text":"BOM \u00b6 \u89c1\u7269\u6599\u6e05\u5355\u7c7b\u522b STLTY \u503c\u57df\uff0c\u6709\u4e0d\u5c11\u7c7b\u578b\uff0c\u6211\u76ee\u524d\u53ea\u7528\u5230\u4e24\u79cd\u3002 \u53d8\u66f4\u53f7 \u00b6 \u4f7f\u7528 CCAP_ECN_CREATE \u521b\u5efa\u53d8\u66f4\u53f7\u3002 \u53d8\u66f4\u53f7\u521b\u5efa\u51fd\u6570 FUNCTION zfm_ecn_check IMPORTING i_datuv TYPE datuv i_verid TYPE verid EXPORTING e_change_no TYPE aennr e_mtype TYPE bapi_mtype e_msg TYPE bapi_msg . IF i_datuv IS INITIAL OR i_datuv = '' . e_mtype = 'E' . e_msg = | [\u7248\u672c\u542f\u7528\u65f6\u95f4]\u4e3a\u7a7a |. RETURN . ENDIF . IF i_verid IS INITIAL . e_mtype = 'E' . e_msg = | [\u751f\u4ea7\u7248\u672c]\u4e3a\u7a7a |. RETURN . ENDIF . \" \u66f4\u6539\u53f7\u53ef\u4ee5\u968f\u610f\u7f16\u5199\uff0c\u4e00\u822c\u7528\u65e5\u671f+\u7248\u672c\u751f\u6210 DATA l_change_no TYPE aenr_api01 - change_no . l_change_no = |{ i_datuv }{ i_verid }|. CALL FUNCTION 'CONVERSION_EXIT_AENNR_INPUT' EXPORTING input = l_change_no IMPORTING output = l_change_no EXCEPTIONS length_error = 1 . \" \u68c0\u67e5\u66f4\u6539\u53f7\u662f\u5426\u5b58\u5728 SELECT SINGLE COUNT ( * ) FROM aenr WHERE aennr = @ l_change_no . IF sy - subrc = 0 . e_change_no = l_change_no . e_mtype = 'S' . RETURN . ENDIF . \" \u4e0d\u5b58\u5728\u5219\u521b\u5efa DATA : ls_header TYPE aenr_api01 , ls_object_bom TYPE aenv_api01 , ls_object_bom_mat TYPE aenv_api01 , ls_object_bom_psp TYPE aenv_api01 , ls_object_tlist_n TYPE aenv_api01 , ls_object_tlist_q TYPE aenv_api01 , ls_object_char TYPE aenv_api01 , ls_object_cls TYPE aenv_api01 , lv_number TYPE aenrb - aennr . ls_header - change_no = l_change_no . ls_header - status = '01' . ls_header - valid_from = |{ i_datuv DATE = USER }|. \" \u4e0b\u9762FM\u9700\u8981\u5916\u90e8\u683c\u5f0f ls_header - descript = | BOM/\u5de5\u827a\u6570\u636e\u7ef4\u62a4 |. ls_object_bom - active = 'X' . ls_object_bom_mat - active = 'X' . ls_object_bom_mat - obj_requ = 'X' . ls_object_bom_mat - mgtrec_gen = 'X' . ls_object_bom_psp - active = 'X' . ls_object_bom_psp - obj_requ = 'X' . ls_object_bom_psp - mgtrec_gen = 'X' . ls_object_tlist_n - active = 'X' . ls_object_tlist_n - obj_requ = 'X' . ls_object_tlist_n - mgtrec_gen = 'X' . ls_object_tlist_q - active = 'X' . ls_object_tlist_q - obj_requ = 'X' . ls_object_tlist_q - mgtrec_gen = 'X' . ls_object_char - active = 'X' . ls_object_cls - active = 'X' . SET UPDATE TASK LOCAL . \" \u521b\u5efaECN CLEAR l_change_no . CALL FUNCTION 'CCAP_ECN_CREATE' EXPORTING change_header = ls_header object_bom = ls_object_bom object_bom_mat = ls_object_bom_mat object_bom_psp = ls_object_bom_psp object_tlist_n = ls_object_tlist_n object_tlist_q = ls_object_tlist_q object_char = ls_object_char object_cls = ls_object_cls fl_commit_and_wait = 'X' IMPORTING change_no = l_change_no EXCEPTIONS change_no_already_exists = 1 error = 2 OTHERS = 3 . IF sy - subrc <> 0 . e_mtype = 'E' . MESSAGE ID sy - msgid TYPE sy - msgty NUMBER sy - msgno WITH sy - msgv1 sy - msgv2 sy - msgv3 sy - msgv4 INTO e_msg . RETURN . ENDIF . CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = 'X' . e_change_no = l_change_no . e_mtype = 'S' . ENDFUNCTION . (M) \u7269\u6599BOM \u00b6 \u7269\u6599BOM\u7528 CSAP_MAT_BOM_READ \u8bfb\u53d6\uff0c CSAP_MAT_BOM_CREATE \u521b\u5efa\uff0c CSAP_MAT_BOM_MAINTAIN \u7ef4\u62a4\u3002 \u5b9e\u8df5\u53d1\u73b0\uff0c\u521b\u5efa\u548c\u7ef4\u62a4\u7684\u51fd\u6570\u7686\u4e0d\u652f\u6301\u5907\u9009\u6e05\u5355(STLAL)\u6269\u5c55\uff0c\u5982\u9700\u6269\u5c55\uff0c\u4f7f\u7528 BAPI_MATERIAL_BOM_GROUP_CREATE \u3002 \u7269\u6599BOM\u7ef4\u62a4\u51fd\u6570 FUNCTION zfm_mat_bom_maintain IMPORTING i_mast TYPE mast i_stko TYPE stko EXPORTING e_mtype TYPE bapi_mtype e_msg TYPE bapi_msg et_bapiret2 TYPE bapiret2_t TABLES it_stpo LIKE stpo . \" \u9700\u8981\u6ce8\u610f\uff0cCSAP_MAT_BOM_MAINTAIN\u8981\u6c42\u53c2\u6570\u90fd\u662f\u5916\u90e8\u683c\u5f0f DATA l_mtype TYPE bapi_mtype . DATA l_msg TYPE bapi_msg . DATA : ls_csap_mbom TYPE csap_mbom , ls_stko_api01 TYPE stko_api01 , ls_stko_api02 TYPE stko_api02 , lt_stpo_api01 TYPE STANDARD TABLE OF stpo_api01 , ls_stpo_api01 TYPE stpo_api01 . CLEAR ls_csap_mbom . ls_csap_mbom - matnr = i_mast - matnr . ls_csap_mbom - werks = i_mast - werks . ls_csap_mbom - stlan = i_mast - stlan . ls_csap_mbom - stlal = i_mast - stlal . ls_csap_mbom - datuv = |{ i_stko - datuv DATE = USER }|. \" \u5916\u90e8\u65e5\u671f\u683c\u5f0f ls_csap_mbom - aennr = i_stko - aennr . CLEAR ls_stko_api01 . IF i_stko - bmeng IS NOT INITIAL . ls_stko_api01 - base_quan = |{ i_stko - bmeng NUMBER = USER }|. ELSE . ls_stko_api01 - base_quan = 1 . ENDIF . ls_stko_api01 - alt_text = i_stko - stktx . ls_stko_api01 - bom_status = i_stko - stlst . LOOP AT it_stpo INTO DATA ( ls_stpo ). CLEAR ls_stpo_api01 . ls_stpo_api01 - item_no = ls_stpo - posnr . \" \u884c\u53f7 ls_stpo_api01 - item_categ = 'L' . ls_stpo_api01 - component = ls_stpo - idnrk . \" \u7ec4\u4ef6\u7269\u6599 ls_stpo_api01 - comp_qty = ls_stpo - menge . \" \u7ec4\u4ef6\u6570\u91cf * ls_stpo_api03-comp_unit = ls_stpo-meins. \" \u7ec4\u4ef6\u8ba1\u91cf\u5355\u4f4d CALL FUNCTION 'CONVERSION_EXIT_CUNIT_OUTPUT' EXPORTING input = ls_stpo - meins IMPORTING output = ls_stpo_api01 - comp_unit EXCEPTIONS unit_not_found = 1 . ls_stpo_api01 - valid_from = ls_stpo - datuv . \" \u6709\u6548\u671f\u4ece ls_stpo_api01 - change_no = ls_stpo - aennr . \" \u53d8\u66f4\u53f7 ls_stpo_api01 - sortstring = ls_stpo - sortf . \" \u5de5\u5e8f\uff08\u6392\u5e8f\u5b57\u6bb5\uff09 ls_stpo_api01 - rel_prod = 'X' . ls_stpo_api01 - rel_cost = 'X' . \" \u589e\u5f3a\u5b57\u6bb5 ls_stpo_api01 - zspec1 = ls_stpo - zspec1 . ls_stpo_api01 - zspec3 = ls_stpo - zspec2 . ls_stpo_api01 - zspec2 = ls_stpo - zspec3 . INSERT ls_stpo_api01 INTO TABLE lt_stpo_api01 . ENDLOOP . * \" CSAP_MAT_BOM_MAINTAIN\u9650\u5236\uff0c\u65e0\u6cd5\u6269\u5c55\u5907\u9009BOM * \" \u8df3\u8f6c\u5230\u53e6\u4e00\u4e2a\u65b9\u6cd5\uff0c\u901a\u8fc7BAPI_MATERIAL_BOM_GROUP_CREATE\u521b\u5efa * IF ls_csap_mbom-stlal <> '01'. * CALL FUNCTION 'ZFM_MAT_BGR_CREATE' * EXPORTING * i_mast = i_mast * i_stko = i_stko * IMPORTING * e_mtype = e_mtype * e_msg = e_msg * TABLES * it_stpo = it_stpo[]. * IF e_mtype = 'E'. * RETURN. * ENDIF. * ENDIF. \" \u68c0\u67e5\u662f\u5426\u5df2\u5b58\u5728 DATA : lt_stko_api02_old TYPE STANDARD TABLE OF stko_api02 , lt_stpo_api02_old TYPE STANDARD TABLE OF stpo_api02 . CALL FUNCTION 'CSAP_MAT_BOM_READ' EXPORTING material = ls_csap_mbom - matnr plant = ls_csap_mbom - werks bom_usage = ls_csap_mbom - stlan alternative = ls_csap_mbom - stlal valid_from = ls_csap_mbom - datuv change_no = ls_csap_mbom - aennr TABLES t_stpo = lt_stpo_api02_old t_stko = lt_stko_api02_old EXCEPTIONS error = 1 OTHERS = 2 . IF sy - subrc = 0 . READ TABLE lt_stko_api02_old INTO DATA ( ls_stko_api02_upd ) INDEX 1 . \" \u89c1LCSDIFEH\u4e2d\u7684rc29k_stko_compare\u5b50\u4f8b\u7a0b\uff0c\u62ac\u5934\u53ea\u6709\u90e8\u5206\u5b57\u6bb5\u53ef\u4fee\u6539 \" \u6570\u91cf\u3001\u5355\u4f4d\u3001\u62ac\u5934\u6587\u672c\u90fd\u4e0d\u5728\u4fee\u6539\u8303\u56f4\u5185 * ls_stko_api02_upd-alt_text = ls_stko_api01-alt_text. ls_stko_api01 = CORRESPONDING # ( ls_stko_api02_upd ). DATA lt_stpo_api03 TYPE STANDARD TABLE OF stpo_api03 . SORT lt_stpo_api01 BY item_no . SORT lt_stpo_api02_old BY item_no . \" \u4fee\u6539 LOOP AT lt_stpo_api01 INTO ls_stpo_api01 . READ TABLE lt_stpo_api02_old INTO DATA ( ls_stpo_api02_upd ) WITH KEY item_no = ls_stpo_api01 - item_no BINARY SEARCH . IF sy - subrc = 0 . DELETE lt_stpo_api02_old INDEX sy - tabix . ls_stpo_api02_upd - item_no = ls_stpo_api01 - item_no . ls_stpo_api02_upd - item_categ = ls_stpo_api01 - item_categ . ls_stpo_api02_upd - component = ls_stpo_api01 - component . ls_stpo_api02_upd - comp_qty = ls_stpo_api01 - comp_qty . ls_stpo_api02_upd - comp_unit = ls_stpo_api01 - comp_unit . ls_stpo_api02_upd - valid_from = ls_stpo_api01 - valid_from . ls_stpo_api02_upd - change_no = ls_stpo_api01 - change_no . ls_stpo_api02_upd - rel_prod = ls_stpo_api01 - rel_prod . ls_stpo_api02_upd - rel_cost = ls_stpo_api01 - rel_cost . ls_stpo_api02_upd - zspec1 = ls_stpo_api01 - zspec1 . ls_stpo_api02_upd - zspec2 = ls_stpo_api01 - zspec2 . ls_stpo_api02_upd - zspec3 = ls_stpo_api01 - zspec3 . INSERT CORRESPONDING # ( ls_stpo_api02_upd ) INTO TABLE lt_stpo_api03 . ELSE . INSERT CORRESPONDING # ( ls_stpo_api01 ) INTO TABLE lt_stpo_api03 . ENDIF . ENDLOOP . \" \u5220\u9664\u591a\u4f59\u7684\u65e7\u9879\u76ee LOOP AT lt_stpo_api02_old INTO DATA ( ls_stpo_api02_del ). ls_stpo_api02_del - fldelete = abap_true . INSERT CORRESPONDING # ( ls_stpo_api02_del ) INTO TABLE lt_stpo_api03 . ENDLOOP . SORT lt_stpo_api03 BY item_no . SET UPDATE TASK LOCAL . CALL FUNCTION 'CSAP_MAT_BOM_MAINTAIN' EXPORTING material = ls_csap_mbom - matnr plant = ls_csap_mbom - werks bom_usage = ls_csap_mbom - stlan alternative = ls_csap_mbom - stlal valid_from = ls_csap_mbom - datuv change_no = ls_csap_mbom - aennr i_stko = ls_stko_api01 fl_bom_create = 'X' fl_new_item = 'X' IMPORTING o_stko = ls_stko_api02 TABLES t_stpo = lt_stpo_api03 EXCEPTIONS error = 1 OTHERS = 2 . ELSE . SET UPDATE TASK LOCAL . CALL FUNCTION 'CSAP_MAT_BOM_CREATE' EXPORTING material = ls_csap_mbom - matnr plant = ls_csap_mbom - werks bom_usage = ls_csap_mbom - stlan alternative = ls_csap_mbom - stlal valid_from = ls_csap_mbom - datuv change_no = ls_csap_mbom - aennr i_stko = ls_stko_api01 IMPORTING bom_no = ls_stko_api02 - bom_no TABLES t_stpo = lt_stpo_api01 EXCEPTIONS error = 1 OTHERS = 2 . ENDIF . IF sy - subrc <> 0 . e_mtype = 'E' . MESSAGE ID sy - msgid TYPE sy - msgty NUMBER sy - msgno WITH sy - msgv1 sy - msgv2 sy - msgv3 sy - msgv4 INTO e_msg . MESSAGE e_msg TYPE 'S' DISPLAY LIKE 'E' . CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK' . ELSE . e_mtype = 'S' . e_msg = | \u5df2\u5904\u7406 |. MESSAGE e_msg TYPE 'S' . CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = 'X' . ENDIF . ENDFUNCTION . (M) \u7269\u6599BOM\u7ec4 \u00b6 \u901a\u8fc7 BAPI_MATERIAL_BOM_GROUP_CREATE \u5b9e\u73b0\u591a\u4e2a\u5907\u9009BOM\u7684\u521b\u5efa\u3002 \u7269\u6599BOM\u7ec4\u521b\u5efa\u51fd\u6570 FUNCTION zfm_mat_bgr_create IMPORTING i_mast TYPE mast i_stko TYPE stko EXPORTING e_mtype TYPE bapi_mtype e_msg TYPE bapi_msg et_bapiret2 TYPE bapiret2_t TABLES it_stpo LIKE stpo . DATA l_mtype TYPE bapi_mtype . DATA l_msg TYPE bapi_msg . DATA : testrun TYPE bapiflag , lt_bomgroup TYPE STANDARD TABLE OF bapi1080_bgr_c , ls_bomgroup TYPE bapi1080_bgr_c , lt_variants TYPE STANDARD TABLE OF bapi1080_bom_c , ls_variants TYPE bapi1080_bom_c , lt_materialrelations TYPE STANDARD TABLE OF bapi1080_mbm_c , ls_materialrelations TYPE bapi1080_mbm_c , lt_items TYPE STANDARD TABLE OF bapi1080_itm_c , ls_items TYPE bapi1080_itm_c , lt_itemassignments TYPE STANDARD TABLE OF bapi1080_rel_itm_bom_c , ls_itemassignments TYPE bapi1080_rel_itm_bom_c , lt_bomsubitems TYPE STANDARD TABLE OF bapi1080_sui_c , lt_bomsubitemas TYPE STANDARD TABLE OF bapi1080_rel_sui_itm_c , lt_texts TYPE STANDARD TABLE OF bapi1080_txt_c . \" \u6807\u8bc6 DATA l_uuid TYPE sysuuid_c32 . TRY . l_uuid = cl_system_uuid => create_uuid_c32_static ( ). CATCH cx_uuid_error . l_uuid = sy - datum && sy - uzeit && sy - uname . ENDTRY . \" \u65b0\u589e/\u7ef4\u62a4 DATA l_funciton TYPE cs_function . SELECT SINGLE COUNT ( * ) FROM mast WHERE matnr = @ i_mast - matnr AND werks = @ i_mast - werks AND stlan = @ i_mast - stlan AND stlal = @ i_mast - stlal . IF sy - subrc = 0 . \" \u4fee\u6539\u7528CSAP_MAT_BOM_MAINTAIN\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u662f\u4e3a\u4e86\u6269\u5c55\u5907\u9009BOM e_mtype = 'S' . e_msg = '\u5df2\u5904\u7406' . RETURN . ELSE . l_funciton = 'NEW' . ENDIF . \" OBJECT_TYPE\u7684\u57df\u503c\uff0c\u4e5f\u5907\u6ce8\u4e0b\uff0c\u514d\u5f97\u770b\u4e0d\u61c2 \" BGR - Bill of material group \" BOM - Material BOM assembly variant/alternative \" ITM - BOM item \" SUI - BOM Sub-Item \" OBJECT ID DATA l_head_object_id TYPE cs_object_id . l_head_object_id = 'HEAD' . CLEAR ls_bomgroup . ls_bomgroup - bom_group_identification = l_uuid . ls_bomgroup - object_type = 'BGR' . ls_bomgroup - object_id = l_head_object_id . ls_bomgroup - bom_usage = i_mast - stlan . \" BOM\u7528\u9014 ls_bomgroup - created_in_plant = i_mast - werks . \" \u5de5\u5382 INSERT ls_bomgroup INTO TABLE lt_bomgroup . \" \uff1f\uff1f\uff1f\u4e3a\u4ec0\u4e48\u6ca1\u6709STLTY\u53c2\u6570 CLEAR ls_variants . ls_variants - bom_group_identification = l_uuid . ls_variants - object_type = 'BOM' . ls_variants - object_id = l_head_object_id . ls_variants - alternative_bom = i_mast - stlal . \" \u5907\u9009\u7269\u6599\u6e05\u5355 ls_variants - alt_text = i_stko - stktx . \" \u6587\u672c ls_variants - bom_status = i_stko - stlst . \" BOM\u72b6\u6001 ls_variants - change_no = i_stko - aennr . \" \u53d8\u66f4\u53f7 ls_variants - valid_from_date = i_stko - datuv . ls_variants - function = l_funciton . INSERT ls_variants INTO TABLE lt_variants . CLEAR ls_materialrelations . ls_materialrelations - bom_group_identification = l_uuid . ls_materialrelations - material = ls_materialrelations - material_guid = ls_materialrelations - material_external = ls_materialrelations - material_long = i_mast - matnr . \" \u7269\u6599\u7f16\u7801 ls_materialrelations - plant = i_mast - werks . \" \u5de5\u5382 ls_materialrelations - bom_usage = i_mast - stlan . \" BOM\u7528\u9014 ls_materialrelations - alternative_bom = i_mast - stlal . \" \u5907\u9009\u7269\u6599\u6e05\u5355 INSERT ls_materialrelations INTO TABLE lt_materialrelations . LOOP AT it_stpo INTO DATA ( ls_stpo ). DATA ( l_tabix ) = sy - tabix * 10 . \" OBJECT ID DATA l_item_object_id TYPE cs_object_id . l_item_object_id = | ITEM { l_tabix }|. CLEAR ls_items . ls_items - bom_group_identification = l_uuid . ls_items - object_type = 'ITM' . ls_items - object_id = l_item_object_id . ls_items - item_no = |{ ls_stpo - posnr ALPHA = IN }|. \" \u884c\u53f7 ls_items - component = ls_stpo - idnrk . \" \u7ec4\u4ef6\u7269\u6599 ls_items - comp_qty = ls_stpo - menge . \" \u7ec4\u4ef6\u6570\u91cf ls_items - comp_unit = ls_stpo - meins . \" \u7ec4\u4ef6\u8ba1\u91cf\u5355\u4f4d ls_items - ltxt_lang = '1' . ls_items - valid_from_date = ls_stpo - datuv . \" \u6709\u6548\u8d77\u59cb\u65e5\u671f ls_items - change_no = ls_stpo - aennr . \" \u53d8\u66f4\u53f7 INSERT ls_items INTO TABLE lt_items . CLEAR ls_itemassignments . ls_itemassignments - bom_group_identification = l_uuid . ls_itemassignments - sub_object_type = 'ITM' . ls_itemassignments - sub_object_id = l_item_object_id . ls_itemassignments - super_object_type = 'BOM' . ls_itemassignments - super_object_id = l_head_object_id . ls_itemassignments - valid_from_date = sy - datum . ls_itemassignments - function = l_funciton . INSERT ls_itemassignments INTO TABLE lt_itemassignments . ENDLOOP . CALL FUNCTION 'BAPI_MATERIAL_BOM_GROUP_CREATE' EXPORTING all_error = 'X' TABLES bomgroup = lt_bomgroup variants = lt_variants items = lt_items materialrelations = lt_materialrelations itemassignments = lt_itemassignments return = et_bapiret2[] . CLEAR l_mtype . CLEAR l_msg . LOOP AT et_bapiret2 INTO DATA ( ls_return ) WHERE type CA 'AXE' . MESSAGE ID ls_return - id TYPE ls_return - type NUMBER ls_return - number WITH ls_return - message_v1 ls_return - message_v2 ls_return - message_v3 ls_return - message_v4 INTO l_msg . e_msg = |{ e_msg }{ l_msg } ; |. ENDLOOP . IF sy - subrc = 0 . e_mtype = 'E' . MESSAGE ID sy - msgid TYPE sy - msgty NUMBER sy - msgno WITH sy - msgv1 sy - msgv2 sy - msgv3 sy - msgv4 INTO e_msg . MESSAGE e_msg TYPE 'S' DISPLAY LIKE 'E' . CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK' . ELSE . e_mtype = 'S' . e_msg = | \u5df2\u5904\u7406 |. MESSAGE e_msg TYPE 'S' . CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = 'X' . ENDIF . ENDFUNCTION . (P) WBS BOM \u00b6 WBS BOM\u7528 CSAP_BOM_READ \u8bfb\u53d6\uff0c CSAP_BOM_CREATE \u521b\u5efa\uff0c CSAP_BOM_MAINTAIN \u7ef4\u62a4 WBS BOM\u7ef4\u62a4\u51fd\u6570 FUNCTION zfm_wbs_bom_maintain IMPORTING i_prps TYPE prps i_prst TYPE prst i_stko TYPE stko EXPORTING e_mtype TYPE bapi_mtype e_msg TYPE bapi_msg et_bapiret2 TYPE bapiret2_t TABLES it_stpo LIKE stpo . DATA : ls_ecsin TYPE csin , ls_stzub TYPE stzub , lt_stkob TYPE STANDARD TABLE OF stkob , ls_stkob TYPE stkob , lt_stpob TYPE STANDARD TABLE OF stpob , ls_stpob TYPE stpob . CLEAR ls_ecsin . ls_ecsin - matnr = i_prst - matnr . ls_ecsin - werks = i_prst - werks . ls_ecsin - pspnr = i_prps - pspnr . \" WBS\u7f16\u53f7 ls_ecsin - stlty = i_stko - stlty . \" BOM\u7c7b\u578b ls_ecsin - stlan = i_prst - stlan . \" BOM\u7528\u9014 \" \u6570\u91cf IF i_stko - bmeng IS NOT INITIAL . ls_ecsin - emeng = i_stko - bmeng . ELSE . ls_ecsin - emeng = 1 . ENDIF . ls_ecsin - aennr = i_prps - aennr . \" \u53d8\u66f4\u53f7 CLEAR ls_stkob . ls_stkob - stlty = i_stko - stlty . \" BOM\u7c7b\u578b ls_stkob - bmeng = i_stko - bmeng . ls_stkob - stktx = i_stko - stktx . CLEAR lt_stpob . LOOP AT it_stpo INTO DATA ( ls_stpo ). CLEAR ls_stpob . ls_stpob - posnr = ls_stpo - posnr . ls_stpob - datuv = ls_stpo - datuv . ls_stpob - stlty = ls_stpo - stlty . ls_stpob - postp = 'L' . ls_stpob - idnrk = ls_stpo - idnrk . ls_stpob - menge = ls_stpo - menge . ls_stpob - meins = ls_stpo - meins . ls_stpob - aennr = ls_stpo - aennr . ls_stpob - sortf = ls_stpo - sortf . \" \u5de5\u5e8f ls_stpob - zspec1 = ls_stpo - zspec1 . ls_stpob - zspec2 = ls_stpo - zspec2 . ls_stpob - zspec3 = ls_stpo - zspec3 . \" \u4f9b\u5e94\u5546/\u724c\u53f7/\u4ea7\u5730\u4e0d\u4e3a\u7a7a\u7684\u65f6\u5019 IF ls_stpo - zspec1 IS NOT INITIAL OR ls_stpo - zspec2 IS NOT INITIAL OR ls_stpo - zspec3 IS NOT INITIAL . ls_stpob - dspst = '1' . ENDIF . INSERT ls_stpob INTO TABLE lt_stpob . ENDLOOP . \" \u68c0\u67e5\u662f\u5426\u5df2\u5b58\u5728 DATA : lt_stkob_old TYPE STANDARD TABLE OF stkob , lt_stpob_old TYPE STANDARD TABLE OF stpob . CALL FUNCTION 'CSAI_BOM_READ' EXPORTING ecsin = ls_ecsin TABLES t_stkob = lt_stkob_old t_stpob = lt_stpob_old EXCEPTIONS error = 1 OTHERS = 2 . IF sy - subrc = 0 . \" \u62ac\u5934\u53ea\u6709\u63cf\u8ff0\u5141\u8bb8\u88ab\u4fee\u6539 READ TABLE lt_stkob_old INTO DATA ( ls_stkob_old ) INDEX 1 . ls_stkob_old - stktx = ls_stkob - stktx . ls_stkob = ls_stkob_old . SORT lt_stpob BY posnr . SORT lt_stpob_old BY posnr . \" \u4fee\u6539 LOOP AT lt_stpob REFERENCE INTO DATA ( lr_stpob ). lr_stpob -> vbkz = lr_stpob -> mvbkz = 'I' . \" \u65b0\u589e READ TABLE lt_stpob_old INTO DATA ( ls_stpob_upd ) WITH KEY posnr = lr_stpob -> posnr BINARY SEARCH . IF sy - subrc = 0 . DELETE lt_stpob_old INDEX sy - tabix . ls_stpob_upd - vbkz = ls_stpob_upd - mvbkz = 'U' . \" \u4fee\u6539 ls_stpob_upd - posnr = lr_stpob -> posnr . ls_stpob_upd - stlty = lr_stpob -> stlty . ls_stpob_upd - datuv = lr_stpob -> datuv . ls_stpob_upd - postp = lr_stpob -> postp . ls_stpob_upd - idnrk = lr_stpob -> idnrk . ls_stpob_upd - menge = lr_stpob -> menge . ls_stpob_upd - meins = lr_stpob -> meins . ls_stpob_upd - aennr = lr_stpob -> aennr . ls_stpob_upd - sortf = lr_stpob -> sortf . ls_stpob_upd - zspec1 = lr_stpob -> zspec1 . ls_stpob_upd - zspec2 = lr_stpob -> zspec2 . ls_stpob_upd - zspec3 = lr_stpob -> zspec3 . ls_stpob_upd - dspst = lr_stpob -> dspst . lr_stpob->* = ls_stpob_upd . * \" \u7528\u5b50\u9879\u76ee\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u4fee\u6539 * ls_stpob_upd-vgknt = ls_stpob_upd-stlkn. * ls_stpob_upd-vgpzl = ls_stpob_upd-stpoz. * CLEAR ls_stpob_upd-stlkn. * CLEAR ls_stpob_upd-stpoz. ENDIF . ENDLOOP . \" \u5220\u9664\u591a\u4f59\u7684\u65e7\u9879\u76ee LOOP AT lt_stpob_old INTO DATA ( ls_stpob_del ). ls_stpob_del - lkenz = abap_true . ls_stpob_del - vbkz = ls_stpob_upd - mvbkz = 'D' . \" \u5220\u9664\u6807\u8bc6 INSERT ls_stpob_del INTO TABLE lt_stpob . ENDLOOP . SORT lt_stpob BY posnr . \" \u7ef4\u62a4BOM CALL FUNCTION 'CSAI_BOM_MAINTAIN' EXPORTING ecsin = ls_ecsin estkob = ls_stkob estzub = ls_stzub IMPORTING astzub = ls_stzub TABLES t_stpob = lt_stpob EXCEPTIONS error = 1 OTHERS = 2 . ELSE . \" \u65b0\u589eBOM CALL FUNCTION 'CSAI_BOM_CREATE' EXPORTING ecsin = ls_ecsin estkob = ls_stkob estzub = ls_stzub IMPORTING astlnr = ls_stzub - stlnr TABLES t_stpob = lt_stpob EXCEPTIONS error = 1 OTHERS = 2 . ENDIF . IF sy - subrc <> 0 OR sy - msgty = 'E' . e_mtype = 'E' . MESSAGE ID sy - msgid TYPE sy - msgty NUMBER sy - msgno INTO e_msg WITH sy - msgv1 sy - msgv2 sy - msgv3 sy - msgv4 . CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK' . ELSE . e_mtype = 'S' . e_msg = | \u5df2\u5904\u7406 |. MESSAGE e_msg TYPE 'S' . CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = 'X' . ENDIF . ENDFUNCTION .","title":"BOM"},{"location":"master_data/bom/#bom","text":"\u89c1\u7269\u6599\u6e05\u5355\u7c7b\u522b STLTY \u503c\u57df\uff0c\u6709\u4e0d\u5c11\u7c7b\u578b\uff0c\u6211\u76ee\u524d\u53ea\u7528\u5230\u4e24\u79cd\u3002","title":"BOM"},{"location":"master_data/bom/#_1","text":"\u4f7f\u7528 CCAP_ECN_CREATE \u521b\u5efa\u53d8\u66f4\u53f7\u3002 \u53d8\u66f4\u53f7\u521b\u5efa\u51fd\u6570 FUNCTION zfm_ecn_check IMPORTING i_datuv TYPE datuv i_verid TYPE verid EXPORTING e_change_no TYPE aennr e_mtype TYPE bapi_mtype e_msg TYPE bapi_msg . IF i_datuv IS INITIAL OR i_datuv = '' . e_mtype = 'E' . e_msg = | [\u7248\u672c\u542f\u7528\u65f6\u95f4]\u4e3a\u7a7a |. RETURN . ENDIF . IF i_verid IS INITIAL . e_mtype = 'E' . e_msg = | [\u751f\u4ea7\u7248\u672c]\u4e3a\u7a7a |. RETURN . ENDIF . \" \u66f4\u6539\u53f7\u53ef\u4ee5\u968f\u610f\u7f16\u5199\uff0c\u4e00\u822c\u7528\u65e5\u671f+\u7248\u672c\u751f\u6210 DATA l_change_no TYPE aenr_api01 - change_no . l_change_no = |{ i_datuv }{ i_verid }|. CALL FUNCTION 'CONVERSION_EXIT_AENNR_INPUT' EXPORTING input = l_change_no IMPORTING output = l_change_no EXCEPTIONS length_error = 1 . \" \u68c0\u67e5\u66f4\u6539\u53f7\u662f\u5426\u5b58\u5728 SELECT SINGLE COUNT ( * ) FROM aenr WHERE aennr = @ l_change_no . IF sy - subrc = 0 . e_change_no = l_change_no . e_mtype = 'S' . RETURN . ENDIF . \" \u4e0d\u5b58\u5728\u5219\u521b\u5efa DATA : ls_header TYPE aenr_api01 , ls_object_bom TYPE aenv_api01 , ls_object_bom_mat TYPE aenv_api01 , ls_object_bom_psp TYPE aenv_api01 , ls_object_tlist_n TYPE aenv_api01 , ls_object_tlist_q TYPE aenv_api01 , ls_object_char TYPE aenv_api01 , ls_object_cls TYPE aenv_api01 , lv_number TYPE aenrb - aennr . ls_header - change_no = l_change_no . ls_header - status = '01' . ls_header - valid_from = |{ i_datuv DATE = USER }|. \" \u4e0b\u9762FM\u9700\u8981\u5916\u90e8\u683c\u5f0f ls_header - descript = | BOM/\u5de5\u827a\u6570\u636e\u7ef4\u62a4 |. ls_object_bom - active = 'X' . ls_object_bom_mat - active = 'X' . ls_object_bom_mat - obj_requ = 'X' . ls_object_bom_mat - mgtrec_gen = 'X' . ls_object_bom_psp - active = 'X' . ls_object_bom_psp - obj_requ = 'X' . ls_object_bom_psp - mgtrec_gen = 'X' . ls_object_tlist_n - active = 'X' . ls_object_tlist_n - obj_requ = 'X' . ls_object_tlist_n - mgtrec_gen = 'X' . ls_object_tlist_q - active = 'X' . ls_object_tlist_q - obj_requ = 'X' . ls_object_tlist_q - mgtrec_gen = 'X' . ls_object_char - active = 'X' . ls_object_cls - active = 'X' . SET UPDATE TASK LOCAL . \" \u521b\u5efaECN CLEAR l_change_no . CALL FUNCTION 'CCAP_ECN_CREATE' EXPORTING change_header = ls_header object_bom = ls_object_bom object_bom_mat = ls_object_bom_mat object_bom_psp = ls_object_bom_psp object_tlist_n = ls_object_tlist_n object_tlist_q = ls_object_tlist_q object_char = ls_object_char object_cls = ls_object_cls fl_commit_and_wait = 'X' IMPORTING change_no = l_change_no EXCEPTIONS change_no_already_exists = 1 error = 2 OTHERS = 3 . IF sy - subrc <> 0 . e_mtype = 'E' . MESSAGE ID sy - msgid TYPE sy - msgty NUMBER sy - msgno WITH sy - msgv1 sy - msgv2 sy - msgv3 sy - msgv4 INTO e_msg . RETURN . ENDIF . CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = 'X' . e_change_no = l_change_no . e_mtype = 'S' . ENDFUNCTION .","title":"\u53d8\u66f4\u53f7"},{"location":"master_data/bom/#m-bom","text":"\u7269\u6599BOM\u7528 CSAP_MAT_BOM_READ \u8bfb\u53d6\uff0c CSAP_MAT_BOM_CREATE \u521b\u5efa\uff0c CSAP_MAT_BOM_MAINTAIN \u7ef4\u62a4\u3002 \u5b9e\u8df5\u53d1\u73b0\uff0c\u521b\u5efa\u548c\u7ef4\u62a4\u7684\u51fd\u6570\u7686\u4e0d\u652f\u6301\u5907\u9009\u6e05\u5355(STLAL)\u6269\u5c55\uff0c\u5982\u9700\u6269\u5c55\uff0c\u4f7f\u7528 BAPI_MATERIAL_BOM_GROUP_CREATE \u3002 \u7269\u6599BOM\u7ef4\u62a4\u51fd\u6570 FUNCTION zfm_mat_bom_maintain IMPORTING i_mast TYPE mast i_stko TYPE stko EXPORTING e_mtype TYPE bapi_mtype e_msg TYPE bapi_msg et_bapiret2 TYPE bapiret2_t TABLES it_stpo LIKE stpo . \" \u9700\u8981\u6ce8\u610f\uff0cCSAP_MAT_BOM_MAINTAIN\u8981\u6c42\u53c2\u6570\u90fd\u662f\u5916\u90e8\u683c\u5f0f DATA l_mtype TYPE bapi_mtype . DATA l_msg TYPE bapi_msg . DATA : ls_csap_mbom TYPE csap_mbom , ls_stko_api01 TYPE stko_api01 , ls_stko_api02 TYPE stko_api02 , lt_stpo_api01 TYPE STANDARD TABLE OF stpo_api01 , ls_stpo_api01 TYPE stpo_api01 . CLEAR ls_csap_mbom . ls_csap_mbom - matnr = i_mast - matnr . ls_csap_mbom - werks = i_mast - werks . ls_csap_mbom - stlan = i_mast - stlan . ls_csap_mbom - stlal = i_mast - stlal . ls_csap_mbom - datuv = |{ i_stko - datuv DATE = USER }|. \" \u5916\u90e8\u65e5\u671f\u683c\u5f0f ls_csap_mbom - aennr = i_stko - aennr . CLEAR ls_stko_api01 . IF i_stko - bmeng IS NOT INITIAL . ls_stko_api01 - base_quan = |{ i_stko - bmeng NUMBER = USER }|. ELSE . ls_stko_api01 - base_quan = 1 . ENDIF . ls_stko_api01 - alt_text = i_stko - stktx . ls_stko_api01 - bom_status = i_stko - stlst . LOOP AT it_stpo INTO DATA ( ls_stpo ). CLEAR ls_stpo_api01 . ls_stpo_api01 - item_no = ls_stpo - posnr . \" \u884c\u53f7 ls_stpo_api01 - item_categ = 'L' . ls_stpo_api01 - component = ls_stpo - idnrk . \" \u7ec4\u4ef6\u7269\u6599 ls_stpo_api01 - comp_qty = ls_stpo - menge . \" \u7ec4\u4ef6\u6570\u91cf * ls_stpo_api03-comp_unit = ls_stpo-meins. \" \u7ec4\u4ef6\u8ba1\u91cf\u5355\u4f4d CALL FUNCTION 'CONVERSION_EXIT_CUNIT_OUTPUT' EXPORTING input = ls_stpo - meins IMPORTING output = ls_stpo_api01 - comp_unit EXCEPTIONS unit_not_found = 1 . ls_stpo_api01 - valid_from = ls_stpo - datuv . \" \u6709\u6548\u671f\u4ece ls_stpo_api01 - change_no = ls_stpo - aennr . \" \u53d8\u66f4\u53f7 ls_stpo_api01 - sortstring = ls_stpo - sortf . \" \u5de5\u5e8f\uff08\u6392\u5e8f\u5b57\u6bb5\uff09 ls_stpo_api01 - rel_prod = 'X' . ls_stpo_api01 - rel_cost = 'X' . \" \u589e\u5f3a\u5b57\u6bb5 ls_stpo_api01 - zspec1 = ls_stpo - zspec1 . ls_stpo_api01 - zspec3 = ls_stpo - zspec2 . ls_stpo_api01 - zspec2 = ls_stpo - zspec3 . INSERT ls_stpo_api01 INTO TABLE lt_stpo_api01 . ENDLOOP . * \" CSAP_MAT_BOM_MAINTAIN\u9650\u5236\uff0c\u65e0\u6cd5\u6269\u5c55\u5907\u9009BOM * \" \u8df3\u8f6c\u5230\u53e6\u4e00\u4e2a\u65b9\u6cd5\uff0c\u901a\u8fc7BAPI_MATERIAL_BOM_GROUP_CREATE\u521b\u5efa * IF ls_csap_mbom-stlal <> '01'. * CALL FUNCTION 'ZFM_MAT_BGR_CREATE' * EXPORTING * i_mast = i_mast * i_stko = i_stko * IMPORTING * e_mtype = e_mtype * e_msg = e_msg * TABLES * it_stpo = it_stpo[]. * IF e_mtype = 'E'. * RETURN. * ENDIF. * ENDIF. \" \u68c0\u67e5\u662f\u5426\u5df2\u5b58\u5728 DATA : lt_stko_api02_old TYPE STANDARD TABLE OF stko_api02 , lt_stpo_api02_old TYPE STANDARD TABLE OF stpo_api02 . CALL FUNCTION 'CSAP_MAT_BOM_READ' EXPORTING material = ls_csap_mbom - matnr plant = ls_csap_mbom - werks bom_usage = ls_csap_mbom - stlan alternative = ls_csap_mbom - stlal valid_from = ls_csap_mbom - datuv change_no = ls_csap_mbom - aennr TABLES t_stpo = lt_stpo_api02_old t_stko = lt_stko_api02_old EXCEPTIONS error = 1 OTHERS = 2 . IF sy - subrc = 0 . READ TABLE lt_stko_api02_old INTO DATA ( ls_stko_api02_upd ) INDEX 1 . \" \u89c1LCSDIFEH\u4e2d\u7684rc29k_stko_compare\u5b50\u4f8b\u7a0b\uff0c\u62ac\u5934\u53ea\u6709\u90e8\u5206\u5b57\u6bb5\u53ef\u4fee\u6539 \" \u6570\u91cf\u3001\u5355\u4f4d\u3001\u62ac\u5934\u6587\u672c\u90fd\u4e0d\u5728\u4fee\u6539\u8303\u56f4\u5185 * ls_stko_api02_upd-alt_text = ls_stko_api01-alt_text. ls_stko_api01 = CORRESPONDING # ( ls_stko_api02_upd ). DATA lt_stpo_api03 TYPE STANDARD TABLE OF stpo_api03 . SORT lt_stpo_api01 BY item_no . SORT lt_stpo_api02_old BY item_no . \" \u4fee\u6539 LOOP AT lt_stpo_api01 INTO ls_stpo_api01 . READ TABLE lt_stpo_api02_old INTO DATA ( ls_stpo_api02_upd ) WITH KEY item_no = ls_stpo_api01 - item_no BINARY SEARCH . IF sy - subrc = 0 . DELETE lt_stpo_api02_old INDEX sy - tabix . ls_stpo_api02_upd - item_no = ls_stpo_api01 - item_no . ls_stpo_api02_upd - item_categ = ls_stpo_api01 - item_categ . ls_stpo_api02_upd - component = ls_stpo_api01 - component . ls_stpo_api02_upd - comp_qty = ls_stpo_api01 - comp_qty . ls_stpo_api02_upd - comp_unit = ls_stpo_api01 - comp_unit . ls_stpo_api02_upd - valid_from = ls_stpo_api01 - valid_from . ls_stpo_api02_upd - change_no = ls_stpo_api01 - change_no . ls_stpo_api02_upd - rel_prod = ls_stpo_api01 - rel_prod . ls_stpo_api02_upd - rel_cost = ls_stpo_api01 - rel_cost . ls_stpo_api02_upd - zspec1 = ls_stpo_api01 - zspec1 . ls_stpo_api02_upd - zspec2 = ls_stpo_api01 - zspec2 . ls_stpo_api02_upd - zspec3 = ls_stpo_api01 - zspec3 . INSERT CORRESPONDING # ( ls_stpo_api02_upd ) INTO TABLE lt_stpo_api03 . ELSE . INSERT CORRESPONDING # ( ls_stpo_api01 ) INTO TABLE lt_stpo_api03 . ENDIF . ENDLOOP . \" \u5220\u9664\u591a\u4f59\u7684\u65e7\u9879\u76ee LOOP AT lt_stpo_api02_old INTO DATA ( ls_stpo_api02_del ). ls_stpo_api02_del - fldelete = abap_true . INSERT CORRESPONDING # ( ls_stpo_api02_del ) INTO TABLE lt_stpo_api03 . ENDLOOP . SORT lt_stpo_api03 BY item_no . SET UPDATE TASK LOCAL . CALL FUNCTION 'CSAP_MAT_BOM_MAINTAIN' EXPORTING material = ls_csap_mbom - matnr plant = ls_csap_mbom - werks bom_usage = ls_csap_mbom - stlan alternative = ls_csap_mbom - stlal valid_from = ls_csap_mbom - datuv change_no = ls_csap_mbom - aennr i_stko = ls_stko_api01 fl_bom_create = 'X' fl_new_item = 'X' IMPORTING o_stko = ls_stko_api02 TABLES t_stpo = lt_stpo_api03 EXCEPTIONS error = 1 OTHERS = 2 . ELSE . SET UPDATE TASK LOCAL . CALL FUNCTION 'CSAP_MAT_BOM_CREATE' EXPORTING material = ls_csap_mbom - matnr plant = ls_csap_mbom - werks bom_usage = ls_csap_mbom - stlan alternative = ls_csap_mbom - stlal valid_from = ls_csap_mbom - datuv change_no = ls_csap_mbom - aennr i_stko = ls_stko_api01 IMPORTING bom_no = ls_stko_api02 - bom_no TABLES t_stpo = lt_stpo_api01 EXCEPTIONS error = 1 OTHERS = 2 . ENDIF . IF sy - subrc <> 0 . e_mtype = 'E' . MESSAGE ID sy - msgid TYPE sy - msgty NUMBER sy - msgno WITH sy - msgv1 sy - msgv2 sy - msgv3 sy - msgv4 INTO e_msg . MESSAGE e_msg TYPE 'S' DISPLAY LIKE 'E' . CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK' . ELSE . e_mtype = 'S' . e_msg = | \u5df2\u5904\u7406 |. MESSAGE e_msg TYPE 'S' . CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = 'X' . ENDIF . ENDFUNCTION .","title":"(M) \u7269\u6599BOM"},{"location":"master_data/bom/#m-bom_1","text":"\u901a\u8fc7 BAPI_MATERIAL_BOM_GROUP_CREATE \u5b9e\u73b0\u591a\u4e2a\u5907\u9009BOM\u7684\u521b\u5efa\u3002 \u7269\u6599BOM\u7ec4\u521b\u5efa\u51fd\u6570 FUNCTION zfm_mat_bgr_create IMPORTING i_mast TYPE mast i_stko TYPE stko EXPORTING e_mtype TYPE bapi_mtype e_msg TYPE bapi_msg et_bapiret2 TYPE bapiret2_t TABLES it_stpo LIKE stpo . DATA l_mtype TYPE bapi_mtype . DATA l_msg TYPE bapi_msg . DATA : testrun TYPE bapiflag , lt_bomgroup TYPE STANDARD TABLE OF bapi1080_bgr_c , ls_bomgroup TYPE bapi1080_bgr_c , lt_variants TYPE STANDARD TABLE OF bapi1080_bom_c , ls_variants TYPE bapi1080_bom_c , lt_materialrelations TYPE STANDARD TABLE OF bapi1080_mbm_c , ls_materialrelations TYPE bapi1080_mbm_c , lt_items TYPE STANDARD TABLE OF bapi1080_itm_c , ls_items TYPE bapi1080_itm_c , lt_itemassignments TYPE STANDARD TABLE OF bapi1080_rel_itm_bom_c , ls_itemassignments TYPE bapi1080_rel_itm_bom_c , lt_bomsubitems TYPE STANDARD TABLE OF bapi1080_sui_c , lt_bomsubitemas TYPE STANDARD TABLE OF bapi1080_rel_sui_itm_c , lt_texts TYPE STANDARD TABLE OF bapi1080_txt_c . \" \u6807\u8bc6 DATA l_uuid TYPE sysuuid_c32 . TRY . l_uuid = cl_system_uuid => create_uuid_c32_static ( ). CATCH cx_uuid_error . l_uuid = sy - datum && sy - uzeit && sy - uname . ENDTRY . \" \u65b0\u589e/\u7ef4\u62a4 DATA l_funciton TYPE cs_function . SELECT SINGLE COUNT ( * ) FROM mast WHERE matnr = @ i_mast - matnr AND werks = @ i_mast - werks AND stlan = @ i_mast - stlan AND stlal = @ i_mast - stlal . IF sy - subrc = 0 . \" \u4fee\u6539\u7528CSAP_MAT_BOM_MAINTAIN\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u662f\u4e3a\u4e86\u6269\u5c55\u5907\u9009BOM e_mtype = 'S' . e_msg = '\u5df2\u5904\u7406' . RETURN . ELSE . l_funciton = 'NEW' . ENDIF . \" OBJECT_TYPE\u7684\u57df\u503c\uff0c\u4e5f\u5907\u6ce8\u4e0b\uff0c\u514d\u5f97\u770b\u4e0d\u61c2 \" BGR - Bill of material group \" BOM - Material BOM assembly variant/alternative \" ITM - BOM item \" SUI - BOM Sub-Item \" OBJECT ID DATA l_head_object_id TYPE cs_object_id . l_head_object_id = 'HEAD' . CLEAR ls_bomgroup . ls_bomgroup - bom_group_identification = l_uuid . ls_bomgroup - object_type = 'BGR' . ls_bomgroup - object_id = l_head_object_id . ls_bomgroup - bom_usage = i_mast - stlan . \" BOM\u7528\u9014 ls_bomgroup - created_in_plant = i_mast - werks . \" \u5de5\u5382 INSERT ls_bomgroup INTO TABLE lt_bomgroup . \" \uff1f\uff1f\uff1f\u4e3a\u4ec0\u4e48\u6ca1\u6709STLTY\u53c2\u6570 CLEAR ls_variants . ls_variants - bom_group_identification = l_uuid . ls_variants - object_type = 'BOM' . ls_variants - object_id = l_head_object_id . ls_variants - alternative_bom = i_mast - stlal . \" \u5907\u9009\u7269\u6599\u6e05\u5355 ls_variants - alt_text = i_stko - stktx . \" \u6587\u672c ls_variants - bom_status = i_stko - stlst . \" BOM\u72b6\u6001 ls_variants - change_no = i_stko - aennr . \" \u53d8\u66f4\u53f7 ls_variants - valid_from_date = i_stko - datuv . ls_variants - function = l_funciton . INSERT ls_variants INTO TABLE lt_variants . CLEAR ls_materialrelations . ls_materialrelations - bom_group_identification = l_uuid . ls_materialrelations - material = ls_materialrelations - material_guid = ls_materialrelations - material_external = ls_materialrelations - material_long = i_mast - matnr . \" \u7269\u6599\u7f16\u7801 ls_materialrelations - plant = i_mast - werks . \" \u5de5\u5382 ls_materialrelations - bom_usage = i_mast - stlan . \" BOM\u7528\u9014 ls_materialrelations - alternative_bom = i_mast - stlal . \" \u5907\u9009\u7269\u6599\u6e05\u5355 INSERT ls_materialrelations INTO TABLE lt_materialrelations . LOOP AT it_stpo INTO DATA ( ls_stpo ). DATA ( l_tabix ) = sy - tabix * 10 . \" OBJECT ID DATA l_item_object_id TYPE cs_object_id . l_item_object_id = | ITEM { l_tabix }|. CLEAR ls_items . ls_items - bom_group_identification = l_uuid . ls_items - object_type = 'ITM' . ls_items - object_id = l_item_object_id . ls_items - item_no = |{ ls_stpo - posnr ALPHA = IN }|. \" \u884c\u53f7 ls_items - component = ls_stpo - idnrk . \" \u7ec4\u4ef6\u7269\u6599 ls_items - comp_qty = ls_stpo - menge . \" \u7ec4\u4ef6\u6570\u91cf ls_items - comp_unit = ls_stpo - meins . \" \u7ec4\u4ef6\u8ba1\u91cf\u5355\u4f4d ls_items - ltxt_lang = '1' . ls_items - valid_from_date = ls_stpo - datuv . \" \u6709\u6548\u8d77\u59cb\u65e5\u671f ls_items - change_no = ls_stpo - aennr . \" \u53d8\u66f4\u53f7 INSERT ls_items INTO TABLE lt_items . CLEAR ls_itemassignments . ls_itemassignments - bom_group_identification = l_uuid . ls_itemassignments - sub_object_type = 'ITM' . ls_itemassignments - sub_object_id = l_item_object_id . ls_itemassignments - super_object_type = 'BOM' . ls_itemassignments - super_object_id = l_head_object_id . ls_itemassignments - valid_from_date = sy - datum . ls_itemassignments - function = l_funciton . INSERT ls_itemassignments INTO TABLE lt_itemassignments . ENDLOOP . CALL FUNCTION 'BAPI_MATERIAL_BOM_GROUP_CREATE' EXPORTING all_error = 'X' TABLES bomgroup = lt_bomgroup variants = lt_variants items = lt_items materialrelations = lt_materialrelations itemassignments = lt_itemassignments return = et_bapiret2[] . CLEAR l_mtype . CLEAR l_msg . LOOP AT et_bapiret2 INTO DATA ( ls_return ) WHERE type CA 'AXE' . MESSAGE ID ls_return - id TYPE ls_return - type NUMBER ls_return - number WITH ls_return - message_v1 ls_return - message_v2 ls_return - message_v3 ls_return - message_v4 INTO l_msg . e_msg = |{ e_msg }{ l_msg } ; |. ENDLOOP . IF sy - subrc = 0 . e_mtype = 'E' . MESSAGE ID sy - msgid TYPE sy - msgty NUMBER sy - msgno WITH sy - msgv1 sy - msgv2 sy - msgv3 sy - msgv4 INTO e_msg . MESSAGE e_msg TYPE 'S' DISPLAY LIKE 'E' . CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK' . ELSE . e_mtype = 'S' . e_msg = | \u5df2\u5904\u7406 |. MESSAGE e_msg TYPE 'S' . CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = 'X' . ENDIF . ENDFUNCTION .","title":"(M) \u7269\u6599BOM\u7ec4"},{"location":"master_data/bom/#p-wbs-bom","text":"WBS BOM\u7528 CSAP_BOM_READ \u8bfb\u53d6\uff0c CSAP_BOM_CREATE \u521b\u5efa\uff0c CSAP_BOM_MAINTAIN \u7ef4\u62a4 WBS BOM\u7ef4\u62a4\u51fd\u6570 FUNCTION zfm_wbs_bom_maintain IMPORTING i_prps TYPE prps i_prst TYPE prst i_stko TYPE stko EXPORTING e_mtype TYPE bapi_mtype e_msg TYPE bapi_msg et_bapiret2 TYPE bapiret2_t TABLES it_stpo LIKE stpo . DATA : ls_ecsin TYPE csin , ls_stzub TYPE stzub , lt_stkob TYPE STANDARD TABLE OF stkob , ls_stkob TYPE stkob , lt_stpob TYPE STANDARD TABLE OF stpob , ls_stpob TYPE stpob . CLEAR ls_ecsin . ls_ecsin - matnr = i_prst - matnr . ls_ecsin - werks = i_prst - werks . ls_ecsin - pspnr = i_prps - pspnr . \" WBS\u7f16\u53f7 ls_ecsin - stlty = i_stko - stlty . \" BOM\u7c7b\u578b ls_ecsin - stlan = i_prst - stlan . \" BOM\u7528\u9014 \" \u6570\u91cf IF i_stko - bmeng IS NOT INITIAL . ls_ecsin - emeng = i_stko - bmeng . ELSE . ls_ecsin - emeng = 1 . ENDIF . ls_ecsin - aennr = i_prps - aennr . \" \u53d8\u66f4\u53f7 CLEAR ls_stkob . ls_stkob - stlty = i_stko - stlty . \" BOM\u7c7b\u578b ls_stkob - bmeng = i_stko - bmeng . ls_stkob - stktx = i_stko - stktx . CLEAR lt_stpob . LOOP AT it_stpo INTO DATA ( ls_stpo ). CLEAR ls_stpob . ls_stpob - posnr = ls_stpo - posnr . ls_stpob - datuv = ls_stpo - datuv . ls_stpob - stlty = ls_stpo - stlty . ls_stpob - postp = 'L' . ls_stpob - idnrk = ls_stpo - idnrk . ls_stpob - menge = ls_stpo - menge . ls_stpob - meins = ls_stpo - meins . ls_stpob - aennr = ls_stpo - aennr . ls_stpob - sortf = ls_stpo - sortf . \" \u5de5\u5e8f ls_stpob - zspec1 = ls_stpo - zspec1 . ls_stpob - zspec2 = ls_stpo - zspec2 . ls_stpob - zspec3 = ls_stpo - zspec3 . \" \u4f9b\u5e94\u5546/\u724c\u53f7/\u4ea7\u5730\u4e0d\u4e3a\u7a7a\u7684\u65f6\u5019 IF ls_stpo - zspec1 IS NOT INITIAL OR ls_stpo - zspec2 IS NOT INITIAL OR ls_stpo - zspec3 IS NOT INITIAL . ls_stpob - dspst = '1' . ENDIF . INSERT ls_stpob INTO TABLE lt_stpob . ENDLOOP . \" \u68c0\u67e5\u662f\u5426\u5df2\u5b58\u5728 DATA : lt_stkob_old TYPE STANDARD TABLE OF stkob , lt_stpob_old TYPE STANDARD TABLE OF stpob . CALL FUNCTION 'CSAI_BOM_READ' EXPORTING ecsin = ls_ecsin TABLES t_stkob = lt_stkob_old t_stpob = lt_stpob_old EXCEPTIONS error = 1 OTHERS = 2 . IF sy - subrc = 0 . \" \u62ac\u5934\u53ea\u6709\u63cf\u8ff0\u5141\u8bb8\u88ab\u4fee\u6539 READ TABLE lt_stkob_old INTO DATA ( ls_stkob_old ) INDEX 1 . ls_stkob_old - stktx = ls_stkob - stktx . ls_stkob = ls_stkob_old . SORT lt_stpob BY posnr . SORT lt_stpob_old BY posnr . \" \u4fee\u6539 LOOP AT lt_stpob REFERENCE INTO DATA ( lr_stpob ). lr_stpob -> vbkz = lr_stpob -> mvbkz = 'I' . \" \u65b0\u589e READ TABLE lt_stpob_old INTO DATA ( ls_stpob_upd ) WITH KEY posnr = lr_stpob -> posnr BINARY SEARCH . IF sy - subrc = 0 . DELETE lt_stpob_old INDEX sy - tabix . ls_stpob_upd - vbkz = ls_stpob_upd - mvbkz = 'U' . \" \u4fee\u6539 ls_stpob_upd - posnr = lr_stpob -> posnr . ls_stpob_upd - stlty = lr_stpob -> stlty . ls_stpob_upd - datuv = lr_stpob -> datuv . ls_stpob_upd - postp = lr_stpob -> postp . ls_stpob_upd - idnrk = lr_stpob -> idnrk . ls_stpob_upd - menge = lr_stpob -> menge . ls_stpob_upd - meins = lr_stpob -> meins . ls_stpob_upd - aennr = lr_stpob -> aennr . ls_stpob_upd - sortf = lr_stpob -> sortf . ls_stpob_upd - zspec1 = lr_stpob -> zspec1 . ls_stpob_upd - zspec2 = lr_stpob -> zspec2 . ls_stpob_upd - zspec3 = lr_stpob -> zspec3 . ls_stpob_upd - dspst = lr_stpob -> dspst . lr_stpob->* = ls_stpob_upd . * \" \u7528\u5b50\u9879\u76ee\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u4fee\u6539 * ls_stpob_upd-vgknt = ls_stpob_upd-stlkn. * ls_stpob_upd-vgpzl = ls_stpob_upd-stpoz. * CLEAR ls_stpob_upd-stlkn. * CLEAR ls_stpob_upd-stpoz. ENDIF . ENDLOOP . \" \u5220\u9664\u591a\u4f59\u7684\u65e7\u9879\u76ee LOOP AT lt_stpob_old INTO DATA ( ls_stpob_del ). ls_stpob_del - lkenz = abap_true . ls_stpob_del - vbkz = ls_stpob_upd - mvbkz = 'D' . \" \u5220\u9664\u6807\u8bc6 INSERT ls_stpob_del INTO TABLE lt_stpob . ENDLOOP . SORT lt_stpob BY posnr . \" \u7ef4\u62a4BOM CALL FUNCTION 'CSAI_BOM_MAINTAIN' EXPORTING ecsin = ls_ecsin estkob = ls_stkob estzub = ls_stzub IMPORTING astzub = ls_stzub TABLES t_stpob = lt_stpob EXCEPTIONS error = 1 OTHERS = 2 . ELSE . \" \u65b0\u589eBOM CALL FUNCTION 'CSAI_BOM_CREATE' EXPORTING ecsin = ls_ecsin estkob = ls_stkob estzub = ls_stzub IMPORTING astlnr = ls_stzub - stlnr TABLES t_stpob = lt_stpob EXCEPTIONS error = 1 OTHERS = 2 . ENDIF . IF sy - subrc <> 0 OR sy - msgty = 'E' . e_mtype = 'E' . MESSAGE ID sy - msgid TYPE sy - msgty NUMBER sy - msgno INTO e_msg WITH sy - msgv1 sy - msgv2 sy - msgv3 sy - msgv4 . CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK' . ELSE . e_mtype = 'S' . e_msg = | \u5df2\u5904\u7406 |. MESSAGE e_msg TYPE 'S' . CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = 'X' . ENDIF . ENDFUNCTION .","title":"(P) WBS BOM"},{"location":"master_data/bp/","text":"\u4e1a\u52a1\u4f19\u4f34 \u00b6","title":"\u4e1a\u52a1\u4f19\u4f34"},{"location":"master_data/bp/#_1","text":"","title":"\u4e1a\u52a1\u4f19\u4f34"},{"location":"master_data/material/","text":"\u7269\u6599 \u00b6","title":"\u7269\u6599"},{"location":"master_data/material/#_1","text":"","title":"\u7269\u6599"},{"location":"master_data/work_center/","text":"\u5de5\u4f5c\u4e2d\u5fc3 \u00b6 \u4f7f\u7528 CL_PP_WORK_CENTER_BO \u5bfc\u5165\u5de5\u4f5c\u4e2d\u5fc3 \u4e0a\u9762\u7c7b\u901a\u8fc7\u5c01\u88c5 CRAP_WORKCENTER_CREATE \u5b9e\u73b0\uff0c\u5e76\u591a\u4e86\u8fd4\u56de\u4fe1\u606f \u5de5\u4f5c\u4e2d\u5fc3\u5bfc\u5165 TYPES : BEGIN OF ty_data , \" \u521b\u5efa\u5de5\u4f5c\u4e2d\u5fc3\u5fc5\u586b\u5b57\u6bb5 arbpl TYPE crhd - arbpl , \" \u5de5\u4f5c\u4e2d\u5fc3 werks TYPE crhd - werks , \" \u5de5\u5382 kostl TYPE crco - kostl , \" \u6210\u672c\u4e2d\u5fc3 \" \u5904\u7406\u8fd4\u56de mtype TYPE bapi_mtype , msg TYPE bapi_msg , END OF ty_data . DATA lt_data TYPE STANDARD TABLE OF ty_data . DATA ls_crhd_api01 TYPE crhd_api01 . DATA ls_crhd_api02 TYPE crhd_api02 . DATA ls_crhd_api03 TYPE crhd_api03 . DATA ls_crhd_api05 TYPE crhd_api05 . DATA lt_kapa_api01 TYPE STANDARD TABLE OF kapa_api01 . DATA lt_kapa_api02 TYPE STANDARD TABLE OF kapa_api02 . DATA lt_crhd_api04 TYPE STANDARD TABLE OF crhd_api04 . DATA lt_crco_api01 TYPE STANDARD TABLE OF crco_api01 . DATA ls_kapa_api01 TYPE kapa_api01 . DATA ls_kapa_api02 TYPE kapa_api02 . DATA ls_crhd_api04 TYPE crhd_api04 . DATA ls_crco_api01 TYPE crco_api01 . DATA lt_return TYPE bapiret2_tab . DATA l_mtype TYPE bapi_mtype . DATA l_msg TYPE bapi_msg . \" \u67e5\u627e\u5de5\u5382\u5bf9\u5e94\u65e5\u5386 IF lt_data[] IS NOT INITIAL . SELECT werks , fabkl FROM t001w FOR ALL ENTRIES IN @ lt_data[] WHERE werks = @ lt_data - werks INTO TABLE @ DATA ( lt_t001w ). SORT lt_t001w BY werks . DELETE ADJACENT DUPLICATES FROM lt_t001w COMPARING werks . ENDIF . \" \u5206\u7ec4\u5904\u7406 LOOP AT lt_data INTO DATA ( ls_data ) WHERE mtype <> 'E' GROUP BY ( arbpl = ls_data - arbpl werks = ls_data - werks group_size = GROUP SIZE ) INTO DATA ( ls_data_grp ). \" \u91cd\u590d\u4ee3\u7801\uff0c\u9000\u51fa\u65f6\u5199\u5165\u5904\u7406\u7ed3\u679c DATA lr_data LIKE REF TO ls_data . DEFINE _contiune . CLEAR l_mtype . CLEAR l_msg . l_mtype = &1 . l_msg = &2 . LOOP AT GROUP ls_data_grp REFERENCE INTO lr_data . lr_data -> mtype = l_mtype . lr_data -> msg = l_msg . ENDLOOP . CONTINUE . END-OF-DEFINITION . \" \u53d6\u5de5\u5382\u76f8\u5173\u6570\u636e READ TABLE lt_t001w INTO DATA ( ls_t001w ) WITH KEY werks = ls_data_grp - werks BINARY SEARCH . IF sy - subrc <> 0 . l_msg = | \u5de5\u5382 { ls_data_grp - werks } \u4e0d\u5b58\u5728 |. _contiune 'E' l_msg . ENDIF . CLEAR ls_crhd_api01 . ls_crhd_api01 - arbpl = ls_data_grp - arbpl . ls_crhd_api01 - werks = ls_data_grp - werks . ls_crhd_api01 - verwe = '0001' . ls_crhd_api01 - ktext = |{ ls_data_grp - arbpl } - { ls_data_grp - werks }|. \" \u5de5\u4f5c\u4e2d\u5fc3\u6587\u672c CLEAR ls_crhd_api02 . ls_crhd_api02 - planv = '009' . ls_crhd_api02 - veran = 'DF' . ls_crhd_api02 - vgwts = 'DFDL' . CLEAR ls_crhd_api03 . ls_crhd_api03 - steus = 'DF01' . ls_crhd_api03 - vge01 = 'STD' . \" h - \u5185\u7801 ls_crhd_api03 - vge02 = 'STD' . \" h - \u5185\u7801 ls_crhd_api03 - vge03 = 'STD' . \" h - \u5185\u7801 ls_crhd_api03 - vge04 = 'KG' . \" kg - \u5185\u7801 ls_crhd_api03 - vge05 = 'STD' . \" h - \u5185\u7801 ls_crhd_api03 - vge06 = 'KG' . \" kg - \u5185\u7801 CLEAR ls_crhd_api05 . ls_crhd_api05 - kapart = '001' . ls_crhd_api05 - fort2 = 'DF_PP' . CLEAR lt_kapa_api01 . CLEAR ls_kapa_api01 . ls_kapa_api01 - canum = '1' . ls_kapa_api01 - kapart = '001' . \" \u8fd9\u4e2a\u4e0d\u586b\uff0c\u4e0b\u9762FM\u624d\u4f1a\u4f1a\u81ea\u52a8\u521b\u5efa\u80fd\u529b \" \u6216\u8005\u624b\u5de5\u8c03\u7528CRAP_CAPACITY_CREATE\u521b\u5efa\u80fd\u529b \" ls_kapa_api01-kapname = '\u673a\u5668'. ls_kapa_api01 - werks = ls_data_grp - werks . ls_kapa_api01 - ktext = '\u673a\u5668' . ls_kapa_api01 - kapid = ls_t001w - fabkl . \" \u4f7f\u7528\u5de5\u5382\u65e5\u5386 INSERT ls_kapa_api01 INTO TABLE lt_kapa_api01 . CLEAR lt_kapa_api02 . CLEAR ls_kapa_api02 . ls_kapa_api02 - canum = '1' . ls_kapa_api02 - planr = 'DF' . ls_kapa_api02 - kalid = ls_t001w - fabkl . ls_kapa_api02 - meins = 'STD' . \" h - \u5185\u7801 ls_kapa_api02 - begzt = '000000' . ls_kapa_api02 - endzt = '240000' . ls_kapa_api02 - ngrad = '100' . ls_kapa_api02 - aznor = ls_data_grp - group_size . \" \u6709\u591a\u5c11\u884c\u9879\u76ee INSERT ls_kapa_api02 INTO TABLE lt_kapa_api02 . CLEAR lt_crhd_api04 . CLEAR ls_crhd_api04 . ls_crhd_api04 - canum = '1' . ls_crhd_api04 - fork2 = 'DF_PP' . INSERT ls_crhd_api04 INTO TABLE lt_crhd_api04 . CLEAR lt_crco_api01 . LOOP AT GROUP ls_data_grp INTO ls_data . CLEAR ls_crco_api01 . ls_crco_api01 - kostl = ls_data - kostl . ls_crco_api01 - begda = sy - datum . ls_crco_api01 - endda = '99991231' . ls_crco_api01 - lstar1 = '1000' . ls_crco_api01 - lstar_ref1 = 'X' . ls_crco_api01 - leinh1 = 'STD' . \" h - \u5185\u7801 ls_crco_api01 - forml1 = 'DF_CO1' . ls_crco_api01 - lstar2 = '2000' . ls_crco_api01 - lstar_ref2 = 'X' . ls_crco_api01 - leinh2 = 'STD' . \" h - \u5185\u7801 ls_crco_api01 - forml2 = 'DF_CO2' . ls_crco_api01 - lstar3 = '3000' . ls_crco_api01 - lstar_ref3 = 'X' . ls_crco_api01 - leinh3 = 'STD' . \" h - \u5185\u7801 ls_crco_api01 - forml3 = 'DF_CO3' . ls_crco_api01 - lstar4 = '4000' . ls_crco_api01 - lstar_ref4 = 'X' . ls_crco_api01 - leinh4 = 'KG' . \" kg - \u5185\u7801 ls_crco_api01 - forml4 = 'DF_CO4' . ls_crco_api01 - lstar5 = '5000' . ls_crco_api01 - lstar_ref5 = 'X' . ls_crco_api01 - leinh5 = 'STD' . \" h - \u5185\u7801 ls_crco_api01 - forml5 = 'DF_CO5' . ls_crco_api01 - lstar6 = '6000' . ls_crco_api01 - lstar_ref6 = 'X' . ls_crco_api01 - leinh6 = 'KG' . \" kg - \u5185\u7801 ls_crco_api01 - forml6 = 'DF_CO6' . INSERT ls_crco_api01 INTO TABLE lt_crco_api01 . ENDLOOP . \" \u53ef\u80fd\u4e0d\u540c\u884c\u53ea\u662f\u8bbe\u5907\u7801\u4e0d\u4e00\u6837\uff0c\u800c\u6210\u672c\u4e2d\u5fc3\u662f\u4e00\u81f4\u7684 SORT lt_crco_api01 BY kostl . DELETE ADJACENT DUPLICATES FROM lt_crco_api01 COMPARING kostl . * CALL FUNCTION 'CRAP_WORKCENTER_CREATE' * EXPORTING * in_crhd_api01 = ls_crhd_api01 * in_crhd_api02 = ls_crhd_api02 * in_crhd_api03 = ls_crhd_api03 * in_crhd_api05 = ls_crhd_api05 * test = i_test * TABLES * in_kapa_api01 = lt_kapa_api01 * in_kapa_api02 = lt_kapa_api02 * in_crhd_api04 = lt_crhd_api04 * in_crco_api01 = lt_crco_api01. \" \u6362\u4e2a\u6807\u51c6\u5e26\u8fd4\u56de\u7684\uff0c\u65b9\u4fbf\u5c55\u793a\u6d88\u606f DATA ( lo_work_center ) = cl_pp_work_center_bo => get_instance ( ). CLEAR lt_return . lo_work_center -> create_work_center ( EXPORTING is_crhd_api01 = ls_crhd_api01 is_crhd_api02 = ls_crhd_api02 is_crhd_api03 = ls_crhd_api03 it_crhd_api04 = lt_crhd_api04 is_crhd_api05 = ls_crhd_api05 it_kapa_api01 = lt_kapa_api01 it_kapa_api02 = lt_kapa_api02 it_crco_api01 = lt_crco_api01 IMPORTING et_return = lt_return ). CLEAR l_mtype . CLEAR l_msg . LOOP AT lt_return INTO DATA ( ls_return ) WHERE type CA 'EA' . l_msg = |{ l_msg }{ ls_return - message } ; |. ENDLOOP . IF sy - subrc = 0 . _contiune 'E' l_msg . ELSE . _contiune 'S' '\u5de5\u4f5c\u4e2d\u5fc3\u5bfc\u5165\u6210\u529f' . ENDIF . ENDLOOP .","title":"\u5de5\u4f5c\u4e2d\u5fc3"},{"location":"master_data/work_center/#_1","text":"\u4f7f\u7528 CL_PP_WORK_CENTER_BO \u5bfc\u5165\u5de5\u4f5c\u4e2d\u5fc3 \u4e0a\u9762\u7c7b\u901a\u8fc7\u5c01\u88c5 CRAP_WORKCENTER_CREATE \u5b9e\u73b0\uff0c\u5e76\u591a\u4e86\u8fd4\u56de\u4fe1\u606f \u5de5\u4f5c\u4e2d\u5fc3\u5bfc\u5165 TYPES : BEGIN OF ty_data , \" \u521b\u5efa\u5de5\u4f5c\u4e2d\u5fc3\u5fc5\u586b\u5b57\u6bb5 arbpl TYPE crhd - arbpl , \" \u5de5\u4f5c\u4e2d\u5fc3 werks TYPE crhd - werks , \" \u5de5\u5382 kostl TYPE crco - kostl , \" \u6210\u672c\u4e2d\u5fc3 \" \u5904\u7406\u8fd4\u56de mtype TYPE bapi_mtype , msg TYPE bapi_msg , END OF ty_data . DATA lt_data TYPE STANDARD TABLE OF ty_data . DATA ls_crhd_api01 TYPE crhd_api01 . DATA ls_crhd_api02 TYPE crhd_api02 . DATA ls_crhd_api03 TYPE crhd_api03 . DATA ls_crhd_api05 TYPE crhd_api05 . DATA lt_kapa_api01 TYPE STANDARD TABLE OF kapa_api01 . DATA lt_kapa_api02 TYPE STANDARD TABLE OF kapa_api02 . DATA lt_crhd_api04 TYPE STANDARD TABLE OF crhd_api04 . DATA lt_crco_api01 TYPE STANDARD TABLE OF crco_api01 . DATA ls_kapa_api01 TYPE kapa_api01 . DATA ls_kapa_api02 TYPE kapa_api02 . DATA ls_crhd_api04 TYPE crhd_api04 . DATA ls_crco_api01 TYPE crco_api01 . DATA lt_return TYPE bapiret2_tab . DATA l_mtype TYPE bapi_mtype . DATA l_msg TYPE bapi_msg . \" \u67e5\u627e\u5de5\u5382\u5bf9\u5e94\u65e5\u5386 IF lt_data[] IS NOT INITIAL . SELECT werks , fabkl FROM t001w FOR ALL ENTRIES IN @ lt_data[] WHERE werks = @ lt_data - werks INTO TABLE @ DATA ( lt_t001w ). SORT lt_t001w BY werks . DELETE ADJACENT DUPLICATES FROM lt_t001w COMPARING werks . ENDIF . \" \u5206\u7ec4\u5904\u7406 LOOP AT lt_data INTO DATA ( ls_data ) WHERE mtype <> 'E' GROUP BY ( arbpl = ls_data - arbpl werks = ls_data - werks group_size = GROUP SIZE ) INTO DATA ( ls_data_grp ). \" \u91cd\u590d\u4ee3\u7801\uff0c\u9000\u51fa\u65f6\u5199\u5165\u5904\u7406\u7ed3\u679c DATA lr_data LIKE REF TO ls_data . DEFINE _contiune . CLEAR l_mtype . CLEAR l_msg . l_mtype = &1 . l_msg = &2 . LOOP AT GROUP ls_data_grp REFERENCE INTO lr_data . lr_data -> mtype = l_mtype . lr_data -> msg = l_msg . ENDLOOP . CONTINUE . END-OF-DEFINITION . \" \u53d6\u5de5\u5382\u76f8\u5173\u6570\u636e READ TABLE lt_t001w INTO DATA ( ls_t001w ) WITH KEY werks = ls_data_grp - werks BINARY SEARCH . IF sy - subrc <> 0 . l_msg = | \u5de5\u5382 { ls_data_grp - werks } \u4e0d\u5b58\u5728 |. _contiune 'E' l_msg . ENDIF . CLEAR ls_crhd_api01 . ls_crhd_api01 - arbpl = ls_data_grp - arbpl . ls_crhd_api01 - werks = ls_data_grp - werks . ls_crhd_api01 - verwe = '0001' . ls_crhd_api01 - ktext = |{ ls_data_grp - arbpl } - { ls_data_grp - werks }|. \" \u5de5\u4f5c\u4e2d\u5fc3\u6587\u672c CLEAR ls_crhd_api02 . ls_crhd_api02 - planv = '009' . ls_crhd_api02 - veran = 'DF' . ls_crhd_api02 - vgwts = 'DFDL' . CLEAR ls_crhd_api03 . ls_crhd_api03 - steus = 'DF01' . ls_crhd_api03 - vge01 = 'STD' . \" h - \u5185\u7801 ls_crhd_api03 - vge02 = 'STD' . \" h - \u5185\u7801 ls_crhd_api03 - vge03 = 'STD' . \" h - \u5185\u7801 ls_crhd_api03 - vge04 = 'KG' . \" kg - \u5185\u7801 ls_crhd_api03 - vge05 = 'STD' . \" h - \u5185\u7801 ls_crhd_api03 - vge06 = 'KG' . \" kg - \u5185\u7801 CLEAR ls_crhd_api05 . ls_crhd_api05 - kapart = '001' . ls_crhd_api05 - fort2 = 'DF_PP' . CLEAR lt_kapa_api01 . CLEAR ls_kapa_api01 . ls_kapa_api01 - canum = '1' . ls_kapa_api01 - kapart = '001' . \" \u8fd9\u4e2a\u4e0d\u586b\uff0c\u4e0b\u9762FM\u624d\u4f1a\u4f1a\u81ea\u52a8\u521b\u5efa\u80fd\u529b \" \u6216\u8005\u624b\u5de5\u8c03\u7528CRAP_CAPACITY_CREATE\u521b\u5efa\u80fd\u529b \" ls_kapa_api01-kapname = '\u673a\u5668'. ls_kapa_api01 - werks = ls_data_grp - werks . ls_kapa_api01 - ktext = '\u673a\u5668' . ls_kapa_api01 - kapid = ls_t001w - fabkl . \" \u4f7f\u7528\u5de5\u5382\u65e5\u5386 INSERT ls_kapa_api01 INTO TABLE lt_kapa_api01 . CLEAR lt_kapa_api02 . CLEAR ls_kapa_api02 . ls_kapa_api02 - canum = '1' . ls_kapa_api02 - planr = 'DF' . ls_kapa_api02 - kalid = ls_t001w - fabkl . ls_kapa_api02 - meins = 'STD' . \" h - \u5185\u7801 ls_kapa_api02 - begzt = '000000' . ls_kapa_api02 - endzt = '240000' . ls_kapa_api02 - ngrad = '100' . ls_kapa_api02 - aznor = ls_data_grp - group_size . \" \u6709\u591a\u5c11\u884c\u9879\u76ee INSERT ls_kapa_api02 INTO TABLE lt_kapa_api02 . CLEAR lt_crhd_api04 . CLEAR ls_crhd_api04 . ls_crhd_api04 - canum = '1' . ls_crhd_api04 - fork2 = 'DF_PP' . INSERT ls_crhd_api04 INTO TABLE lt_crhd_api04 . CLEAR lt_crco_api01 . LOOP AT GROUP ls_data_grp INTO ls_data . CLEAR ls_crco_api01 . ls_crco_api01 - kostl = ls_data - kostl . ls_crco_api01 - begda = sy - datum . ls_crco_api01 - endda = '99991231' . ls_crco_api01 - lstar1 = '1000' . ls_crco_api01 - lstar_ref1 = 'X' . ls_crco_api01 - leinh1 = 'STD' . \" h - \u5185\u7801 ls_crco_api01 - forml1 = 'DF_CO1' . ls_crco_api01 - lstar2 = '2000' . ls_crco_api01 - lstar_ref2 = 'X' . ls_crco_api01 - leinh2 = 'STD' . \" h - \u5185\u7801 ls_crco_api01 - forml2 = 'DF_CO2' . ls_crco_api01 - lstar3 = '3000' . ls_crco_api01 - lstar_ref3 = 'X' . ls_crco_api01 - leinh3 = 'STD' . \" h - \u5185\u7801 ls_crco_api01 - forml3 = 'DF_CO3' . ls_crco_api01 - lstar4 = '4000' . ls_crco_api01 - lstar_ref4 = 'X' . ls_crco_api01 - leinh4 = 'KG' . \" kg - \u5185\u7801 ls_crco_api01 - forml4 = 'DF_CO4' . ls_crco_api01 - lstar5 = '5000' . ls_crco_api01 - lstar_ref5 = 'X' . ls_crco_api01 - leinh5 = 'STD' . \" h - \u5185\u7801 ls_crco_api01 - forml5 = 'DF_CO5' . ls_crco_api01 - lstar6 = '6000' . ls_crco_api01 - lstar_ref6 = 'X' . ls_crco_api01 - leinh6 = 'KG' . \" kg - \u5185\u7801 ls_crco_api01 - forml6 = 'DF_CO6' . INSERT ls_crco_api01 INTO TABLE lt_crco_api01 . ENDLOOP . \" \u53ef\u80fd\u4e0d\u540c\u884c\u53ea\u662f\u8bbe\u5907\u7801\u4e0d\u4e00\u6837\uff0c\u800c\u6210\u672c\u4e2d\u5fc3\u662f\u4e00\u81f4\u7684 SORT lt_crco_api01 BY kostl . DELETE ADJACENT DUPLICATES FROM lt_crco_api01 COMPARING kostl . * CALL FUNCTION 'CRAP_WORKCENTER_CREATE' * EXPORTING * in_crhd_api01 = ls_crhd_api01 * in_crhd_api02 = ls_crhd_api02 * in_crhd_api03 = ls_crhd_api03 * in_crhd_api05 = ls_crhd_api05 * test = i_test * TABLES * in_kapa_api01 = lt_kapa_api01 * in_kapa_api02 = lt_kapa_api02 * in_crhd_api04 = lt_crhd_api04 * in_crco_api01 = lt_crco_api01. \" \u6362\u4e2a\u6807\u51c6\u5e26\u8fd4\u56de\u7684\uff0c\u65b9\u4fbf\u5c55\u793a\u6d88\u606f DATA ( lo_work_center ) = cl_pp_work_center_bo => get_instance ( ). CLEAR lt_return . lo_work_center -> create_work_center ( EXPORTING is_crhd_api01 = ls_crhd_api01 is_crhd_api02 = ls_crhd_api02 is_crhd_api03 = ls_crhd_api03 it_crhd_api04 = lt_crhd_api04 is_crhd_api05 = ls_crhd_api05 it_kapa_api01 = lt_kapa_api01 it_kapa_api02 = lt_kapa_api02 it_crco_api01 = lt_crco_api01 IMPORTING et_return = lt_return ). CLEAR l_mtype . CLEAR l_msg . LOOP AT lt_return INTO DATA ( ls_return ) WHERE type CA 'EA' . l_msg = |{ l_msg }{ ls_return - message } ; |. ENDLOOP . IF sy - subrc = 0 . _contiune 'E' l_msg . ELSE . _contiune 'S' '\u5de5\u4f5c\u4e2d\u5fc3\u5bfc\u5165\u6210\u529f' . ENDIF . ENDLOOP .","title":"\u5de5\u4f5c\u4e2d\u5fc3"},{"location":"mm/","text":"MM\u6a21\u5757\u6982\u8ff0 \u00b6 \u6211\u7406\u89e3\u7684MM\uff08Material Management\uff09\uff0c\u7269\u6599\u7ba1\u7406\u6a21\u5757\uff0c\u5305\u62ec\u4e86\u7269\u6599\u4e3b\u6570\u636e\uff0c\u91c7\u8d2d\u7ba1\u7406\uff0c\u5e93\u5b58\u7ba1\u7406\uff0c\u5171\u4e09\u4e2a\u90e8\u5206\u3002","title":"MM\u6a21\u5757\u6982\u8ff0"},{"location":"mm/#mm","text":"\u6211\u7406\u89e3\u7684MM\uff08Material Management\uff09\uff0c\u7269\u6599\u7ba1\u7406\u6a21\u5757\uff0c\u5305\u62ec\u4e86\u7269\u6599\u4e3b\u6570\u636e\uff0c\u91c7\u8d2d\u7ba1\u7406\uff0c\u5e93\u5b58\u7ba1\u7406\uff0c\u5171\u4e09\u4e2a\u90e8\u5206\u3002","title":"MM\u6a21\u5757\u6982\u8ff0"},{"location":"mm/inbound_delivery/","text":"\u5185\u5411\u4ea4\u8d27\u5355 \u00b6","title":"\u5185\u5411\u4ea4\u8d27\u5355"},{"location":"mm/inbound_delivery/#_1","text":"","title":"\u5185\u5411\u4ea4\u8d27\u5355"},{"location":"mm/inbound_delivery_post/","text":"\u91c7\u8d2d\u6536\u8d27\u8fc7\u8d26 \u00b6","title":"\u6536\u8d27\u8fc7\u8d26"},{"location":"mm/inbound_delivery_post/#_1","text":"","title":"\u91c7\u8d2d\u6536\u8d27\u8fc7\u8d26"},{"location":"mm/purchase/","text":"\u91c7\u8d2d\u8ba2\u5355 \u00b6","title":"\u91c7\u8d2d\u8ba2\u5355"},{"location":"mm/purchase/#_1","text":"","title":"\u91c7\u8d2d\u8ba2\u5355"},{"location":"others/","text":"\u5176\u4ed6\u6982\u8ff0 \u00b6 \u6682\u65f6\u6ca1\u60f3\u5230\u5206\u54ea\u4e2a\u6a21\u5757\u7684\uff0c\u90fd\u4f1a\u5199\u5230\u8fd9\u4e0b\u9762","title":"\u5176\u4ed6\u6982\u8ff0"},{"location":"others/#_1","text":"\u6682\u65f6\u6ca1\u60f3\u5230\u5206\u54ea\u4e2a\u6a21\u5757\u7684\uff0c\u90fd\u4f1a\u5199\u5230\u8fd9\u4e0b\u9762","title":"\u5176\u4ed6\u6982\u8ff0"},{"location":"others/alv/","text":"ALV \u00b6 \u6574\u7406\u4e0bALV\u7528\u5230\u7684\u4e24\u79cd\u65b9\u6cd5\uff0c\u4ee5\u53ca\u53ef\u80fd\u9047\u5230\u7684\u95ee\u9898 LVC \u00b6 LVC\u597d\u5728\u4e0d\u7528\u753b\u5c4f\u5e55\uff0c\u76f4\u63a5\u8c03\u7528\u5373\u53ef\u3002 INCLUDE_LVC *&---------------------------------------------------------------------* *& Form frm_display *&---------------------------------------------------------------------* *& text *&---------------------------------------------------------------------* *& --> p1 text *& <-- p2 text *&---------------------------------------------------------------------* FORM frm_display TABLES ct_data TYPE STANDARD TABLE . DATA ls_layout TYPE lvc_s_layo . DATA lt_fieldcat TYPE STANDARD TABLE OF lvc_s_fcat . PERFORM frm_set_layout CHANGING ls_layout . PERFORM frm_set_fieldcat TABLES lt_fieldcat . CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY_LVC' EXPORTING i_callback_program = sy - repid i_callback_pf_status_set = 'FRM_PF_STATUS' i_callback_user_command = 'FRM_USER_COMMAND' is_layout_lvc = ls_layout it_fieldcat_lvc = lt_fieldcat i_default = abap_true i_save = 'A' TABLES t_outtab = ct_data[] EXCEPTIONS program_error = 1 OTHERS = 2 . IF sy - subrc <> 0 . MESSAGE ID sy - msgid TYPE sy - msgty NUMBER sy - msgno WITH sy - msgv1 sy - msgv2 sy - msgv3 sy - msgv4 . ENDIF . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_set_layout *&---------------------------------------------------------------------* *& \u62a5\u8868\u5e03\u5c40\u8bbe\u7f6e *&---------------------------------------------------------------------* FORM frm_set_layout CHANGING cs_layout TYPE lvc_s_layo . CLEAR cs_layout . cs_layout - zebra = abap_true . \" \u6591\u9a6c\u7ebf cs_layout - cwidth_opt = abap_true . \" \u81ea\u52a8\u8c03\u6574ALVL\u5217\u5bbd cs_layout - sel_mode = 'A' . \" \u9009\u62e9\u6a21\u5f0f * CS_LAYOUT - box_fname = 'CHECKBOX' . \" \u9009\u62e9\u6846 * CS_LAYOUT - ctab_fname = 'COLTAB' . \" \u5355\u5143\u683c\u989c\u8272\u8bbe\u7f6e ENDFORM . *&---------------------------------------------------------------------* *& Form frm_set_fieldcat *&---------------------------------------------------------------------* *& \u5b57\u6bb5\u76ee\u5f55\u8bbe\u7f6e *&---------------------------------------------------------------------* FORM frm_set_fieldcat TABLES ct_fieldcat TYPE lvc_t_fcat . DATA ls_fieldcat TYPE lvc_s_fcat . DEFINE _init_fieldcat . CLEAR ls_fieldcat . ls_fieldcat - fieldname = &1 . ls_fieldcat - tooltip = ls_fieldcat - coltext = ls_fieldcat - seltext = ls_fieldcat - scrtext_l = ls_fieldcat - scrtext_m = ls_fieldcat - scrtext_s = &2 . ls_fieldcat - ref_table = &3 . ls_fieldcat - ref_field = &4 . INSERT ls_fieldcat INTO TABLE ct_fieldcat . END-OF-DEFINITION . _init_fieldcat 'ZSEL' '\u9009\u62e9\u9879' '' '' . _init_fieldcat 'MTYPE ' '\u5904\u7406\u72b6\u6001' '' '' . _init_fieldcat 'MSG ' '\u5904\u7406\u6d88\u606f' '' '' . \" \u4e2a\u6027\u5316\u81ea\u5df1\u8f93\u51fa\u6570\u636e\u683c\u5f0f LOOP AT ct_fieldcat REFERENCE INTO DATA ( lr_fieldcat ). \" \u5b57\u6bb5\u663e\u793a\u5c5e\u6027\u8bbe\u7f6e CASE lr_fieldcat -> fieldname . WHEN 'ZSEL' . lr_fieldcat -> checkbox = abap_true . lr_fieldcat -> edit = abap_true . lr_fieldcat -> hotspot = abap_true . WHEN 'MENGE' . lr_fieldcat -> qfieldname = 'MEINS' . WHEN OTHERS . ENDCASE . ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_pf_status *&---------------------------------------------------------------------* *& \u8bbe\u7f6eGUI\u72b6\u6001 *&---------------------------------------------------------------------* FORM frm_pf_status USING ct_extab TYPE slis_t_extab . SET PF-STATUS 'STATUS' . SET TITLEBAR 'TITLE' . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_user_command *&---------------------------------------------------------------------* *& \u529f\u80fd\u54cd\u5e94 *&---------------------------------------------------------------------* FORM frm_user_command USING cv_ucomm LIKE sy - ucomm cs_selfield TYPE slis_selfield . \" \u5237\u65b0\u5c4f\u5e55\u6570\u636e\u5230\u5185\u8868 DATA : lo_grid TYPE REF TO cl_gui_alv_grid . CALL FUNCTION 'GET_GLOBALS_FROM_SLVC_FULLSCR' IMPORTING e_grid = lo_grid . CALL METHOD lo_grid -> check_changed_data . PERFORM frm_get_data_selection . \" \u6309\u94ae\u529f\u80fd\u5b9e\u73b0 CASE cv_ucomm . WHEN '&IC1' . \" \u53cc\u51fb WHEN OTHERS . ENDCASE . \" \u5237\u65b0ALV \u663e\u793a\u503c cs_selfield - refresh = abap_true . cs_selfield - row_stable = abap_true . cs_selfield - col_stable = abap_true . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_get_data_selection *&---------------------------------------------------------------------* *& text *&---------------------------------------------------------------------* *& --> p1 text *& <-- p2 text *&---------------------------------------------------------------------* FORM frm_get_data_selection . \" \u5237\u65b0\u5c4f\u5e55\u6570\u636e\u5230\u5185\u8868 DATA : lo_grid TYPE REF TO cl_gui_alv_grid . CALL FUNCTION 'GET_GLOBALS_FROM_SLVC_FULLSCR' IMPORTING e_grid = lo_grid . \" \u83b7\u53d6ALV\u9009\u53d6\u884c DATA lt_rows TYPE lvc_t_row . CALL METHOD lo_grid -> get_selected_rows IMPORTING et_index_rows = lt_rows . LOOP AT lt_rows INTO DATA ( ls_row ). READ TABLE gt_data REFERENCE INTO DATA ( lr_data ) INDEX ls_row - index . IF sy - subrc = 0 . lr_data -> zsel = abap_true . ENDIF . ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_reset_data_selection *&---------------------------------------------------------------------* *& text *&---------------------------------------------------------------------* *& --> p1 text *& <-- p2 text *&---------------------------------------------------------------------* FORM frm_reset_data_selection . LOOP AT gt_data REFERENCE INTO DATA ( lr_data ). CLEAR lr_data -> zsel . ENDLOOP . ENDFORM . ALV GRID \u00b6 INCLUDE_ALV_GRID CLASS lcl_event_handler DEFINITION DEFERRED . DATA go_container TYPE REF TO cl_gui_container . DATA go_alv_grid TYPE REF TO cl_gui_alv_grid . DATA go_handler TYPE REF TO lcl_event_handler . *&---------------------------------------------------------------------* *& Form lcl_event_handler *&---------------------------------------------------------------------* CLASS lcl_event_handler DEFINITION . PUBLIC SECTION . \" \u6570\u636e\u53d8\u66f4\u4e8b\u4ef6 METHODS on_data_changed_finished FOR EVENT data_changed_finished OF cl_gui_alv_grid IMPORTING e_modified et_good_cells . \" \u5de5\u5177\u680f\u8c03\u6574 METHODS on_toolbar FOR EVENT toolbar OF cl_gui_alv_grid IMPORTING e_object e_interactive . \" \u54cd\u5e94\u5de5\u5177\u680f\u4e8b\u4ef6 \" \u70b9\u51fb\u6309\u94ae\u4e4b\u7c7b\u7684\u4e8b\u4ef6 METHODS on_user_command FOR EVENT user_command OF cl_gui_alv_grid IMPORTING e_ucomm . ENDCLASS . *&---------------------------------------------------------------------* *& Form lcl_event_handler *&---------------------------------------------------------------------* CLASS lcl_event_handler IMPLEMENTATION . *&---------------------------------------------------------------------* *& on_data_changed_finished *&---------------------------------------------------------------------* METHOD on_data_changed_finished . CHECK e_modified = abap_true . LOOP AT et_good_cells INTO DATA ( ls_cell ). READ TABLE gt_data REFERENCE INTO DATA ( lr_data ) INDEX ls_cell - row_id . IF sy - subrc = 0 . ENDIF . ENDLOOP . PERFORM frm_refresh_display . ENDMETHOD . *&---------------------------------------------------------------------* *& on_toolbar *&---------------------------------------------------------------------* METHOD on_toolbar . \" \u79fb\u9664\u7f16\u8f91\u76f8\u5173\u7684\u6309\u94ae DELETE e_object -> mt_toolbar WHERE function CS '&LOCAL&' . \" \u65b0\u589e\u6309\u94ae DATA ls_button LIKE LINE OF e_object -> mt_toolbar . CLEAR ls_button . ls_button - function = 'Z10' . ls_button - icon = icon_system_copy . ls_button - quickinfo = ls_button - text = '' . INSERT ls_button INTO TABLE e_object -> mt_toolbar . ENDMETHOD . *&---------------------------------------------------------------------* *& on_user_command *&---------------------------------------------------------------------* METHOD on_user_command . \" \u83b7\u53d6ALV\u9009\u53d6\u884c DATA lt_rows TYPE lvc_t_row . DATA ls_row TYPE lvc_s_row . CALL METHOD go_alv_grid -> get_selected_rows IMPORTING et_index_rows = lt_rows . CASE e_ucomm . WHEN 'Z10' . WHEN OTHERS . ENDCASE . PERFORM frm_refresh_display . ENDMETHOD . ENDCLASS . *&---------------------------------------------------------------------* *& Form frm_display *&---------------------------------------------------------------------* *& text *&---------------------------------------------------------------------* *& --> p1 text *& <-- p2 text *&---------------------------------------------------------------------* FORM frm_display TABLES ct_data TYPE STANDARD TABLE . IF go_container IS NOT BOUND . go_container = NEW cl_gui_custom_container ( 'CON_9000' ). ENDIF . IF go_alv_grid IS BOUND . PERFORM frm_refresh_display . RETURN . ENDIF . \" \u65b0\u5efa\u5bf9\u8c61 go_alv_grid = NEW cl_gui_alv_grid ( go_container ). DATA ls_layout TYPE lvc_s_layo . DATA lt_fieldcat TYPE STANDARD TABLE OF lvc_s_fcat . PERFORM frm_set_layout CHANGING ls_layout . PERFORM frm_set_fieldcat TABLES lt_fieldcat . PERFORM frm_set_event . PERFORM frm_set_style . PERFORM frm_set_color . \" \u5c55\u793a CALL METHOD go_alv_grid -> set_table_for_first_display EXPORTING is_layout = ls_layout CHANGING it_outtab = ct_data[] it_fieldcatalog = lt_fieldcat EXCEPTIONS invalid_parameter_combination = 1 program_error = 2 too_many_lines = 3 OTHERS = 4 . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_display *&---------------------------------------------------------------------* *& text *&---------------------------------------------------------------------* *& --> p1 text *& <-- p2 text *&---------------------------------------------------------------------* FORM frm_refresh_display . PERFORM frm_set_style . PERFORM frm_set_color . go_alv_grid -> refresh_table_display ( is_stable = CONV # ( 'XX' ) ). ENDFORM . *&---------------------------------------------------------------------* *& Form frm_set_layout *&---------------------------------------------------------------------* *& \u62a5\u8868\u5e03\u5c40\u8bbe\u7f6e *&---------------------------------------------------------------------* FORM frm_set_layout CHANGING cs_layout TYPE lvc_s_layo . CLEAR cs_layout . cs_layout - zebra = abap_true . \" \u6591\u9a6c\u7ebf cs_layout - cwidth_opt = abap_true . \" \u81ea\u52a8\u8c03\u6574ALVL\u5217\u5bbd cs_layout - sel_mode = 'A' . \" \u9009\u62e9\u6a21\u5f0f cs_layout - ctab_fname = 'T_SCOL' . \" \u5355\u5143\u683c\u989c\u8272\u8bbe\u7f6e cs_layout - stylefname = 'T_STYL' . \" \u5355\u5143\u683c\u63a7\u5236 ENDFORM . *&---------------------------------------------------------------------* *& Form frm_set_fieldcat *&---------------------------------------------------------------------* *& \u5b57\u6bb5\u76ee\u5f55\u8bbe\u7f6e *&---------------------------------------------------------------------* FORM frm_set_fieldcat TABLES ct_fieldcat TYPE lvc_t_fcat . DATA ls_fieldcat TYPE lvc_s_fcat . DEFINE _init_fieldcat . CLEAR ls_fieldcat . ls_fieldcat - fieldname = &1 . ls_fieldcat - tooltip = ls_fieldcat - coltext = ls_fieldcat - seltext = ls_fieldcat - scrtext_l = ls_fieldcat - scrtext_m = ls_fieldcat - scrtext_s = &2 . ls_fieldcat - ref_table = &3 . ls_fieldcat - ref_field = &4 . INSERT ls_fieldcat INTO TABLE ct_fieldcat . END-OF-DEFINITION . _init_fieldcat 'MTYPE' '\u68c0\u67e5\u72b6\u6001' '' '' . _init_fieldcat 'MSG ' '\u68c0\u67e5\u6d88\u606f' '' '' . \" \u4e2a\u6027\u5316\u81ea\u5df1\u8f93\u51fa\u6570\u636e\u683c\u5f0f LOOP AT ct_fieldcat REFERENCE INTO DATA ( lr_fieldcat ). \" \u7f16\u8f91\u72b6\u6001\uff0c\u9ed8\u8ba4\u53ef\u7f16\u8f91 lr_fieldcat -> edit = abap_true . CASE lr_fieldcat -> fieldname . WHEN 'MTYPE' OR 'MSG' . lr_fieldcat -> edit = abap_false . WHEN OTHERS . ENDCASE . ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_set_event *&---------------------------------------------------------------------* *& \u7ed1\u5b9aALV\u4e8b\u4ef6 *&---------------------------------------------------------------------* FORM frm_set_event . IF go_handler IS BOUND . RETURN . ENDIF . go_handler = NEW lcl_event_handler ( ). \" \u6570\u636e\u53d8\u66f4 go_alv_grid -> register_edit_event ( i_event_id = cl_gui_alv_grid => mc_evt_modified ). SET HANDLER go_handler -> on_data_changed_finished FOR go_alv_grid . \" \u5de5\u5177\u680f\u76f8\u5173 SET HANDLER go_handler -> on_toolbar FOR go_alv_grid . SET HANDLER go_handler -> on_user_command FOR go_alv_grid . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_set_style *&---------------------------------------------------------------------* *& text *&---------------------------------------------------------------------* *& --> p1 text *& <-- p2 text *&---------------------------------------------------------------------* FORM frm_set_style . DATA ls_styl TYPE lvc_s_styl . LOOP AT gt_data REFERENCE INTO DATA ( lr_data ). CLEAR lr_data -> t_styl . \" \u8bbe\u7f6eALV\u5b57\u6bb5\u6216\u884c\u7684\u72b6\u6001 \" \u5e38\u7528\u6709\u7981\u6b62\u7f16\u8f91CL_GUI_ALV_GRID=>MC_STYLE_DISABLED \" \u7981\u6b62\u5220\u9664\u884cCL_GUI_ALV_GRID=>MC_STYLE_NO_DELETE_ROW ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_set_color *&---------------------------------------------------------------------* *& text *&---------------------------------------------------------------------* *& --> p1 text *& <-- p2 text *&---------------------------------------------------------------------* FORM frm_set_color . DATA ls_scol TYPE lvc_s_scol . LOOP AT gt_data REFERENCE INTO DATA ( lr_data ). CLEAR lr_data -> t_scol . IF lr_data -> mtype = 'E' . CLEAR ls_scol . ls_scol - fname = 'MTYPE' . ls_scol - color = VALUE # ( col = '6' ). INSERT ls_scol INTO TABLE lr_data -> t_scol . CLEAR ls_scol . ls_scol - fname = 'MSG' . ls_scol - color = VALUE # ( col = '6' ). INSERT ls_scol INTO TABLE lr_data -> t_scol . ENDIF . ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Module STATUS_9000 OUTPUT *&---------------------------------------------------------------------* *& *&---------------------------------------------------------------------* MODULE status_9000 OUTPUT . PERFORM frm_display TABLES gt_data . SET PF-STATUS 'STATUS' . SET TITLEBAR 'TITLE' . ENDMODULE . *&---------------------------------------------------------------------* *& Module USER_COMMAND_9000 INPUT *&---------------------------------------------------------------------* * text *----------------------------------------------------------------------* MODULE user_command_9000 INPUT . CASE sy - ucomm . WHEN '&F03' OR '&F15' OR '&F12' . LEAVE TO SCREEN 0 . WHEN OTHERS . ENDCASE . CLEAR sy - ucomm . ENDMODULE .","title":"ALV\u76f8\u5173"},{"location":"others/alv/#alv","text":"\u6574\u7406\u4e0bALV\u7528\u5230\u7684\u4e24\u79cd\u65b9\u6cd5\uff0c\u4ee5\u53ca\u53ef\u80fd\u9047\u5230\u7684\u95ee\u9898","title":"ALV"},{"location":"others/alv/#lvc","text":"LVC\u597d\u5728\u4e0d\u7528\u753b\u5c4f\u5e55\uff0c\u76f4\u63a5\u8c03\u7528\u5373\u53ef\u3002 INCLUDE_LVC *&---------------------------------------------------------------------* *& Form frm_display *&---------------------------------------------------------------------* *& text *&---------------------------------------------------------------------* *& --> p1 text *& <-- p2 text *&---------------------------------------------------------------------* FORM frm_display TABLES ct_data TYPE STANDARD TABLE . DATA ls_layout TYPE lvc_s_layo . DATA lt_fieldcat TYPE STANDARD TABLE OF lvc_s_fcat . PERFORM frm_set_layout CHANGING ls_layout . PERFORM frm_set_fieldcat TABLES lt_fieldcat . CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY_LVC' EXPORTING i_callback_program = sy - repid i_callback_pf_status_set = 'FRM_PF_STATUS' i_callback_user_command = 'FRM_USER_COMMAND' is_layout_lvc = ls_layout it_fieldcat_lvc = lt_fieldcat i_default = abap_true i_save = 'A' TABLES t_outtab = ct_data[] EXCEPTIONS program_error = 1 OTHERS = 2 . IF sy - subrc <> 0 . MESSAGE ID sy - msgid TYPE sy - msgty NUMBER sy - msgno WITH sy - msgv1 sy - msgv2 sy - msgv3 sy - msgv4 . ENDIF . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_set_layout *&---------------------------------------------------------------------* *& \u62a5\u8868\u5e03\u5c40\u8bbe\u7f6e *&---------------------------------------------------------------------* FORM frm_set_layout CHANGING cs_layout TYPE lvc_s_layo . CLEAR cs_layout . cs_layout - zebra = abap_true . \" \u6591\u9a6c\u7ebf cs_layout - cwidth_opt = abap_true . \" \u81ea\u52a8\u8c03\u6574ALVL\u5217\u5bbd cs_layout - sel_mode = 'A' . \" \u9009\u62e9\u6a21\u5f0f * CS_LAYOUT - box_fname = 'CHECKBOX' . \" \u9009\u62e9\u6846 * CS_LAYOUT - ctab_fname = 'COLTAB' . \" \u5355\u5143\u683c\u989c\u8272\u8bbe\u7f6e ENDFORM . *&---------------------------------------------------------------------* *& Form frm_set_fieldcat *&---------------------------------------------------------------------* *& \u5b57\u6bb5\u76ee\u5f55\u8bbe\u7f6e *&---------------------------------------------------------------------* FORM frm_set_fieldcat TABLES ct_fieldcat TYPE lvc_t_fcat . DATA ls_fieldcat TYPE lvc_s_fcat . DEFINE _init_fieldcat . CLEAR ls_fieldcat . ls_fieldcat - fieldname = &1 . ls_fieldcat - tooltip = ls_fieldcat - coltext = ls_fieldcat - seltext = ls_fieldcat - scrtext_l = ls_fieldcat - scrtext_m = ls_fieldcat - scrtext_s = &2 . ls_fieldcat - ref_table = &3 . ls_fieldcat - ref_field = &4 . INSERT ls_fieldcat INTO TABLE ct_fieldcat . END-OF-DEFINITION . _init_fieldcat 'ZSEL' '\u9009\u62e9\u9879' '' '' . _init_fieldcat 'MTYPE ' '\u5904\u7406\u72b6\u6001' '' '' . _init_fieldcat 'MSG ' '\u5904\u7406\u6d88\u606f' '' '' . \" \u4e2a\u6027\u5316\u81ea\u5df1\u8f93\u51fa\u6570\u636e\u683c\u5f0f LOOP AT ct_fieldcat REFERENCE INTO DATA ( lr_fieldcat ). \" \u5b57\u6bb5\u663e\u793a\u5c5e\u6027\u8bbe\u7f6e CASE lr_fieldcat -> fieldname . WHEN 'ZSEL' . lr_fieldcat -> checkbox = abap_true . lr_fieldcat -> edit = abap_true . lr_fieldcat -> hotspot = abap_true . WHEN 'MENGE' . lr_fieldcat -> qfieldname = 'MEINS' . WHEN OTHERS . ENDCASE . ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_pf_status *&---------------------------------------------------------------------* *& \u8bbe\u7f6eGUI\u72b6\u6001 *&---------------------------------------------------------------------* FORM frm_pf_status USING ct_extab TYPE slis_t_extab . SET PF-STATUS 'STATUS' . SET TITLEBAR 'TITLE' . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_user_command *&---------------------------------------------------------------------* *& \u529f\u80fd\u54cd\u5e94 *&---------------------------------------------------------------------* FORM frm_user_command USING cv_ucomm LIKE sy - ucomm cs_selfield TYPE slis_selfield . \" \u5237\u65b0\u5c4f\u5e55\u6570\u636e\u5230\u5185\u8868 DATA : lo_grid TYPE REF TO cl_gui_alv_grid . CALL FUNCTION 'GET_GLOBALS_FROM_SLVC_FULLSCR' IMPORTING e_grid = lo_grid . CALL METHOD lo_grid -> check_changed_data . PERFORM frm_get_data_selection . \" \u6309\u94ae\u529f\u80fd\u5b9e\u73b0 CASE cv_ucomm . WHEN '&IC1' . \" \u53cc\u51fb WHEN OTHERS . ENDCASE . \" \u5237\u65b0ALV \u663e\u793a\u503c cs_selfield - refresh = abap_true . cs_selfield - row_stable = abap_true . cs_selfield - col_stable = abap_true . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_get_data_selection *&---------------------------------------------------------------------* *& text *&---------------------------------------------------------------------* *& --> p1 text *& <-- p2 text *&---------------------------------------------------------------------* FORM frm_get_data_selection . \" \u5237\u65b0\u5c4f\u5e55\u6570\u636e\u5230\u5185\u8868 DATA : lo_grid TYPE REF TO cl_gui_alv_grid . CALL FUNCTION 'GET_GLOBALS_FROM_SLVC_FULLSCR' IMPORTING e_grid = lo_grid . \" \u83b7\u53d6ALV\u9009\u53d6\u884c DATA lt_rows TYPE lvc_t_row . CALL METHOD lo_grid -> get_selected_rows IMPORTING et_index_rows = lt_rows . LOOP AT lt_rows INTO DATA ( ls_row ). READ TABLE gt_data REFERENCE INTO DATA ( lr_data ) INDEX ls_row - index . IF sy - subrc = 0 . lr_data -> zsel = abap_true . ENDIF . ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_reset_data_selection *&---------------------------------------------------------------------* *& text *&---------------------------------------------------------------------* *& --> p1 text *& <-- p2 text *&---------------------------------------------------------------------* FORM frm_reset_data_selection . LOOP AT gt_data REFERENCE INTO DATA ( lr_data ). CLEAR lr_data -> zsel . ENDLOOP . ENDFORM .","title":"LVC"},{"location":"others/alv/#alv-grid","text":"INCLUDE_ALV_GRID CLASS lcl_event_handler DEFINITION DEFERRED . DATA go_container TYPE REF TO cl_gui_container . DATA go_alv_grid TYPE REF TO cl_gui_alv_grid . DATA go_handler TYPE REF TO lcl_event_handler . *&---------------------------------------------------------------------* *& Form lcl_event_handler *&---------------------------------------------------------------------* CLASS lcl_event_handler DEFINITION . PUBLIC SECTION . \" \u6570\u636e\u53d8\u66f4\u4e8b\u4ef6 METHODS on_data_changed_finished FOR EVENT data_changed_finished OF cl_gui_alv_grid IMPORTING e_modified et_good_cells . \" \u5de5\u5177\u680f\u8c03\u6574 METHODS on_toolbar FOR EVENT toolbar OF cl_gui_alv_grid IMPORTING e_object e_interactive . \" \u54cd\u5e94\u5de5\u5177\u680f\u4e8b\u4ef6 \" \u70b9\u51fb\u6309\u94ae\u4e4b\u7c7b\u7684\u4e8b\u4ef6 METHODS on_user_command FOR EVENT user_command OF cl_gui_alv_grid IMPORTING e_ucomm . ENDCLASS . *&---------------------------------------------------------------------* *& Form lcl_event_handler *&---------------------------------------------------------------------* CLASS lcl_event_handler IMPLEMENTATION . *&---------------------------------------------------------------------* *& on_data_changed_finished *&---------------------------------------------------------------------* METHOD on_data_changed_finished . CHECK e_modified = abap_true . LOOP AT et_good_cells INTO DATA ( ls_cell ). READ TABLE gt_data REFERENCE INTO DATA ( lr_data ) INDEX ls_cell - row_id . IF sy - subrc = 0 . ENDIF . ENDLOOP . PERFORM frm_refresh_display . ENDMETHOD . *&---------------------------------------------------------------------* *& on_toolbar *&---------------------------------------------------------------------* METHOD on_toolbar . \" \u79fb\u9664\u7f16\u8f91\u76f8\u5173\u7684\u6309\u94ae DELETE e_object -> mt_toolbar WHERE function CS '&LOCAL&' . \" \u65b0\u589e\u6309\u94ae DATA ls_button LIKE LINE OF e_object -> mt_toolbar . CLEAR ls_button . ls_button - function = 'Z10' . ls_button - icon = icon_system_copy . ls_button - quickinfo = ls_button - text = '' . INSERT ls_button INTO TABLE e_object -> mt_toolbar . ENDMETHOD . *&---------------------------------------------------------------------* *& on_user_command *&---------------------------------------------------------------------* METHOD on_user_command . \" \u83b7\u53d6ALV\u9009\u53d6\u884c DATA lt_rows TYPE lvc_t_row . DATA ls_row TYPE lvc_s_row . CALL METHOD go_alv_grid -> get_selected_rows IMPORTING et_index_rows = lt_rows . CASE e_ucomm . WHEN 'Z10' . WHEN OTHERS . ENDCASE . PERFORM frm_refresh_display . ENDMETHOD . ENDCLASS . *&---------------------------------------------------------------------* *& Form frm_display *&---------------------------------------------------------------------* *& text *&---------------------------------------------------------------------* *& --> p1 text *& <-- p2 text *&---------------------------------------------------------------------* FORM frm_display TABLES ct_data TYPE STANDARD TABLE . IF go_container IS NOT BOUND . go_container = NEW cl_gui_custom_container ( 'CON_9000' ). ENDIF . IF go_alv_grid IS BOUND . PERFORM frm_refresh_display . RETURN . ENDIF . \" \u65b0\u5efa\u5bf9\u8c61 go_alv_grid = NEW cl_gui_alv_grid ( go_container ). DATA ls_layout TYPE lvc_s_layo . DATA lt_fieldcat TYPE STANDARD TABLE OF lvc_s_fcat . PERFORM frm_set_layout CHANGING ls_layout . PERFORM frm_set_fieldcat TABLES lt_fieldcat . PERFORM frm_set_event . PERFORM frm_set_style . PERFORM frm_set_color . \" \u5c55\u793a CALL METHOD go_alv_grid -> set_table_for_first_display EXPORTING is_layout = ls_layout CHANGING it_outtab = ct_data[] it_fieldcatalog = lt_fieldcat EXCEPTIONS invalid_parameter_combination = 1 program_error = 2 too_many_lines = 3 OTHERS = 4 . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_display *&---------------------------------------------------------------------* *& text *&---------------------------------------------------------------------* *& --> p1 text *& <-- p2 text *&---------------------------------------------------------------------* FORM frm_refresh_display . PERFORM frm_set_style . PERFORM frm_set_color . go_alv_grid -> refresh_table_display ( is_stable = CONV # ( 'XX' ) ). ENDFORM . *&---------------------------------------------------------------------* *& Form frm_set_layout *&---------------------------------------------------------------------* *& \u62a5\u8868\u5e03\u5c40\u8bbe\u7f6e *&---------------------------------------------------------------------* FORM frm_set_layout CHANGING cs_layout TYPE lvc_s_layo . CLEAR cs_layout . cs_layout - zebra = abap_true . \" \u6591\u9a6c\u7ebf cs_layout - cwidth_opt = abap_true . \" \u81ea\u52a8\u8c03\u6574ALVL\u5217\u5bbd cs_layout - sel_mode = 'A' . \" \u9009\u62e9\u6a21\u5f0f cs_layout - ctab_fname = 'T_SCOL' . \" \u5355\u5143\u683c\u989c\u8272\u8bbe\u7f6e cs_layout - stylefname = 'T_STYL' . \" \u5355\u5143\u683c\u63a7\u5236 ENDFORM . *&---------------------------------------------------------------------* *& Form frm_set_fieldcat *&---------------------------------------------------------------------* *& \u5b57\u6bb5\u76ee\u5f55\u8bbe\u7f6e *&---------------------------------------------------------------------* FORM frm_set_fieldcat TABLES ct_fieldcat TYPE lvc_t_fcat . DATA ls_fieldcat TYPE lvc_s_fcat . DEFINE _init_fieldcat . CLEAR ls_fieldcat . ls_fieldcat - fieldname = &1 . ls_fieldcat - tooltip = ls_fieldcat - coltext = ls_fieldcat - seltext = ls_fieldcat - scrtext_l = ls_fieldcat - scrtext_m = ls_fieldcat - scrtext_s = &2 . ls_fieldcat - ref_table = &3 . ls_fieldcat - ref_field = &4 . INSERT ls_fieldcat INTO TABLE ct_fieldcat . END-OF-DEFINITION . _init_fieldcat 'MTYPE' '\u68c0\u67e5\u72b6\u6001' '' '' . _init_fieldcat 'MSG ' '\u68c0\u67e5\u6d88\u606f' '' '' . \" \u4e2a\u6027\u5316\u81ea\u5df1\u8f93\u51fa\u6570\u636e\u683c\u5f0f LOOP AT ct_fieldcat REFERENCE INTO DATA ( lr_fieldcat ). \" \u7f16\u8f91\u72b6\u6001\uff0c\u9ed8\u8ba4\u53ef\u7f16\u8f91 lr_fieldcat -> edit = abap_true . CASE lr_fieldcat -> fieldname . WHEN 'MTYPE' OR 'MSG' . lr_fieldcat -> edit = abap_false . WHEN OTHERS . ENDCASE . ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_set_event *&---------------------------------------------------------------------* *& \u7ed1\u5b9aALV\u4e8b\u4ef6 *&---------------------------------------------------------------------* FORM frm_set_event . IF go_handler IS BOUND . RETURN . ENDIF . go_handler = NEW lcl_event_handler ( ). \" \u6570\u636e\u53d8\u66f4 go_alv_grid -> register_edit_event ( i_event_id = cl_gui_alv_grid => mc_evt_modified ). SET HANDLER go_handler -> on_data_changed_finished FOR go_alv_grid . \" \u5de5\u5177\u680f\u76f8\u5173 SET HANDLER go_handler -> on_toolbar FOR go_alv_grid . SET HANDLER go_handler -> on_user_command FOR go_alv_grid . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_set_style *&---------------------------------------------------------------------* *& text *&---------------------------------------------------------------------* *& --> p1 text *& <-- p2 text *&---------------------------------------------------------------------* FORM frm_set_style . DATA ls_styl TYPE lvc_s_styl . LOOP AT gt_data REFERENCE INTO DATA ( lr_data ). CLEAR lr_data -> t_styl . \" \u8bbe\u7f6eALV\u5b57\u6bb5\u6216\u884c\u7684\u72b6\u6001 \" \u5e38\u7528\u6709\u7981\u6b62\u7f16\u8f91CL_GUI_ALV_GRID=>MC_STYLE_DISABLED \" \u7981\u6b62\u5220\u9664\u884cCL_GUI_ALV_GRID=>MC_STYLE_NO_DELETE_ROW ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Form frm_set_color *&---------------------------------------------------------------------* *& text *&---------------------------------------------------------------------* *& --> p1 text *& <-- p2 text *&---------------------------------------------------------------------* FORM frm_set_color . DATA ls_scol TYPE lvc_s_scol . LOOP AT gt_data REFERENCE INTO DATA ( lr_data ). CLEAR lr_data -> t_scol . IF lr_data -> mtype = 'E' . CLEAR ls_scol . ls_scol - fname = 'MTYPE' . ls_scol - color = VALUE # ( col = '6' ). INSERT ls_scol INTO TABLE lr_data -> t_scol . CLEAR ls_scol . ls_scol - fname = 'MSG' . ls_scol - color = VALUE # ( col = '6' ). INSERT ls_scol INTO TABLE lr_data -> t_scol . ENDIF . ENDLOOP . ENDFORM . *&---------------------------------------------------------------------* *& Module STATUS_9000 OUTPUT *&---------------------------------------------------------------------* *& *&---------------------------------------------------------------------* MODULE status_9000 OUTPUT . PERFORM frm_display TABLES gt_data . SET PF-STATUS 'STATUS' . SET TITLEBAR 'TITLE' . ENDMODULE . *&---------------------------------------------------------------------* *& Module USER_COMMAND_9000 INPUT *&---------------------------------------------------------------------* * text *----------------------------------------------------------------------* MODULE user_command_9000 INPUT . CASE sy - ucomm . WHEN '&F03' OR '&F15' OR '&F12' . LEAVE TO SCREEN 0 . WHEN OTHERS . ENDCASE . CLEAR sy - ucomm . ENDMODULE .","title":"ALV GRID"},{"location":"others/cmod/","text":"CMOD\u589e\u5f3a \u00b6 \u67e5\u627eCMOD\u589e\u5f3a \u00b6 \u5728\u7a0b\u5e8f\u4e2d\u641c\u7d22 CUSTOMER-FUNCTION \u627e\u5230\u540e\u9762\u76843\u4f4d\u6570\u5b57\u7f16\u53f7\uff0c\u51fa\u53e3\u51fd\u6570\u540d\u7684\u89c4\u5219\u4e3aEXIT_< \u7a0b\u5e8f\u540d >_<3\u4f4d\u6570\u5b57>\uff0c\u7136\u540e\u901a\u8fc7\u627e\u5230\u7684\u51fa\u53e3\u51fd\u6570\u540d\u5230 MODSAP \u8868\u91cc\u67e5\u627e\u6240\u5bf9\u5e94\u7684\u51fa\u53e3\u5bf9\u8c61 \uff08\u5373\u589e\u5f3a\u70b9\uff09 \u901a\u8fc7\u8c03\u8bd5\u7cfb\u7edf\u76f8\u5173\u51fd\u6570\uff1aMODX_FUNCTION_ACTIVE_CHECK \u4ee3\u7801\u627e\u589e\u5f3a E\u7c7b\uff1a MODX_FUNCTION_ACTIVE_CHECK \uff08\u68c0\u67e5\u529f\u80fd\u51fa\u53e3\u7c7b\u7528\u6237\u51fa\u53e3\u662f\u5426\u88ab\u6fc0\u6d3b\uff09 C\u7c7b\uff1a MODX_MENUENTRY_ACTIVE_CHECK \uff08\u68c0\u67e5\u83dc\u5355\u5173\u952e\u5b57\u7c7b\u589e\u5f3a\u6fc0\u6d3b\u72b6\u51b5\uff09 S\u7c7b\uff1a MODX_SUBSCREEN_ACTIVE_CHECK \uff08\u68c0\u67e5\u5c4f\u5e55\u7c7b\u589e\u5f3a\u6fc0\u6d3b\u72b6\u51b5\uff09 SAP\u7684\u4efb\u4f55\u4e00\u4e2a\u4e8b\u52a1\u7801 \u5bf9\u5e94\u7684\u6807\u6ce8\u7a0b\u5e8f\u90fd\u7559\u4e0b\u4e86\u5927\u91cf\u7684\u7528\u6237\u51fa\u53e3\uff0c\u6b63\u662fSAP\u7075\u6d3b\u7684\u914d\u7f6e\u548c\u5f3a\u5927\u7684\u7528\u6237\u51fa\u53e3\uff0c\u624d\u4f7f\u5176\u4ea7\u54c1\u8f7b\u677e\u5e94\u5bf9\u5404\u79cd\u590d\u6742\u9700\u6c42\u6210\u4e3a\u53ef\u80fd\uff0c\u7cfb\u7edf\u8fd8\u4e3a\u80fd\u5feb\u901f\u627e\u5230\u548c\u6fc0\u6d3b\u8fd9\u4e9b\u589e\u5f3a\u8fdb\u884c\u4e86\u6709\u6548\u7ec4\u7ec7\uff0c\u5404\u7c7b\u589e\u5f3a\u88ab\u8bb0\u5f55\u5728table\u4e2d\u5e76\u4e14\u63d0\u4f9b\u4e86\u76f8\u5173\u68c0\u67e5\u51fd\u6570\uff0c\u4ece\u800c\u66f4\u65b9\u4fbf\u7cfb\u7edf\u5b9e\u65bd\u8fc7\u7a0b \u3002","title":"CMOD\u589e\u5f3a"},{"location":"others/cmod/#cmod","text":"","title":"CMOD\u589e\u5f3a"},{"location":"others/cmod/#cmod_1","text":"\u5728\u7a0b\u5e8f\u4e2d\u641c\u7d22 CUSTOMER-FUNCTION \u627e\u5230\u540e\u9762\u76843\u4f4d\u6570\u5b57\u7f16\u53f7\uff0c\u51fa\u53e3\u51fd\u6570\u540d\u7684\u89c4\u5219\u4e3aEXIT_< \u7a0b\u5e8f\u540d >_<3\u4f4d\u6570\u5b57>\uff0c\u7136\u540e\u901a\u8fc7\u627e\u5230\u7684\u51fa\u53e3\u51fd\u6570\u540d\u5230 MODSAP \u8868\u91cc\u67e5\u627e\u6240\u5bf9\u5e94\u7684\u51fa\u53e3\u5bf9\u8c61 \uff08\u5373\u589e\u5f3a\u70b9\uff09 \u901a\u8fc7\u8c03\u8bd5\u7cfb\u7edf\u76f8\u5173\u51fd\u6570\uff1aMODX_FUNCTION_ACTIVE_CHECK \u4ee3\u7801\u627e\u589e\u5f3a E\u7c7b\uff1a MODX_FUNCTION_ACTIVE_CHECK \uff08\u68c0\u67e5\u529f\u80fd\u51fa\u53e3\u7c7b\u7528\u6237\u51fa\u53e3\u662f\u5426\u88ab\u6fc0\u6d3b\uff09 C\u7c7b\uff1a MODX_MENUENTRY_ACTIVE_CHECK \uff08\u68c0\u67e5\u83dc\u5355\u5173\u952e\u5b57\u7c7b\u589e\u5f3a\u6fc0\u6d3b\u72b6\u51b5\uff09 S\u7c7b\uff1a MODX_SUBSCREEN_ACTIVE_CHECK \uff08\u68c0\u67e5\u5c4f\u5e55\u7c7b\u589e\u5f3a\u6fc0\u6d3b\u72b6\u51b5\uff09 SAP\u7684\u4efb\u4f55\u4e00\u4e2a\u4e8b\u52a1\u7801 \u5bf9\u5e94\u7684\u6807\u6ce8\u7a0b\u5e8f\u90fd\u7559\u4e0b\u4e86\u5927\u91cf\u7684\u7528\u6237\u51fa\u53e3\uff0c\u6b63\u662fSAP\u7075\u6d3b\u7684\u914d\u7f6e\u548c\u5f3a\u5927\u7684\u7528\u6237\u51fa\u53e3\uff0c\u624d\u4f7f\u5176\u4ea7\u54c1\u8f7b\u677e\u5e94\u5bf9\u5404\u79cd\u590d\u6742\u9700\u6c42\u6210\u4e3a\u53ef\u80fd\uff0c\u7cfb\u7edf\u8fd8\u4e3a\u80fd\u5feb\u901f\u627e\u5230\u548c\u6fc0\u6d3b\u8fd9\u4e9b\u589e\u5f3a\u8fdb\u884c\u4e86\u6709\u6548\u7ec4\u7ec7\uff0c\u5404\u7c7b\u589e\u5f3a\u88ab\u8bb0\u5f55\u5728table\u4e2d\u5e76\u4e14\u63d0\u4f9b\u4e86\u76f8\u5173\u68c0\u67e5\u51fd\u6570\uff0c\u4ece\u800c\u66f4\u65b9\u4fbf\u7cfb\u7edf\u5b9e\u65bd\u8fc7\u7a0b \u3002","title":"\u67e5\u627eCMOD\u589e\u5f3a"},{"location":"others/mdnote/","text":"Markdown\u8bed\u6cd5\u5907\u5fd8 \u00b6 \u8bb0\u5f55\u4e0bMarkdown\u7684\u8bed\u6cd5\uff0c\u540e\u9762\u5c31\u4e0d\u7528\u5230\u7f51\u4e0a\u67e5\u4e86\u3002 \u659c\u4f53 \u00b6 \u524d\u540e\u7528 * \u5305\u88f9 \u52a0\u7c97 \u00b6 \u524d\u540e\u7528 ** \u5305\u88f9 \u659c\u4f53\u52a0\u7c97 \u00b6 \u524d\u540e\u7528 *** \u5305\u88f9 \u5220\u9664\u7ebf \u00b6 \u524d\u540e\u7528 ~~ \u5305\u88f9 \u5f15\u7528 \u00b6 \u524d\u52a0\u5de6\u7bad\u5934 > \u5206\u9694\u7b26\u53f7 \u00b6 \u4e09\u4e2a\u4ee5\u4e0a\u6a2a\u6760 --- \u5217\u8868 \u00b6 \u524d\u7f00 - + * \u6d4b\u8bd5 \u6d4b\u8bd5 \u6d4b\u8bd5 \u5e8f\u53f7 \u00b6 123\u6d41\u6c34 \u6d4b\u8bd5 \u6d4b\u8bd5 \u4ee3\u7801 \u00b6 \u533a\u57df\u524d\u540e```\u5305\u88f9 DATA ( VAR ) = 'DEMO' . \u6298\u53e0 \u00b6 \u5185\u5d4cHTML\u5b9e\u73b0 < details > < summary > \u63cf\u8ff0 </ summary > </ details >","title":"MarkDown\u8bed\u6cd5"},{"location":"others/mdnote/#markdown","text":"\u8bb0\u5f55\u4e0bMarkdown\u7684\u8bed\u6cd5\uff0c\u540e\u9762\u5c31\u4e0d\u7528\u5230\u7f51\u4e0a\u67e5\u4e86\u3002","title":"Markdown\u8bed\u6cd5\u5907\u5fd8"},{"location":"others/mdnote/#_1","text":"\u524d\u540e\u7528 * \u5305\u88f9","title":"\u659c\u4f53"},{"location":"others/mdnote/#_2","text":"\u524d\u540e\u7528 ** \u5305\u88f9","title":"\u52a0\u7c97"},{"location":"others/mdnote/#_3","text":"\u524d\u540e\u7528 *** \u5305\u88f9","title":"\u659c\u4f53\u52a0\u7c97"},{"location":"others/mdnote/#_4","text":"\u524d\u540e\u7528 ~~ \u5305\u88f9","title":"\u5220\u9664\u7ebf"},{"location":"others/mdnote/#_5","text":"\u524d\u52a0\u5de6\u7bad\u5934 >","title":"\u5f15\u7528"},{"location":"others/mdnote/#_6","text":"\u4e09\u4e2a\u4ee5\u4e0a\u6a2a\u6760 ---","title":"\u5206\u9694\u7b26\u53f7"},{"location":"others/mdnote/#_7","text":"\u524d\u7f00 - + * \u6d4b\u8bd5 \u6d4b\u8bd5 \u6d4b\u8bd5","title":"\u5217\u8868"},{"location":"others/mdnote/#_8","text":"123\u6d41\u6c34 \u6d4b\u8bd5 \u6d4b\u8bd5","title":"\u5e8f\u53f7"},{"location":"others/mdnote/#_9","text":"\u533a\u57df\u524d\u540e```\u5305\u88f9 DATA ( VAR ) = 'DEMO' .","title":"\u4ee3\u7801"},{"location":"others/mdnote/#_10","text":"\u5185\u5d4cHTML\u5b9e\u73b0 < details > < summary > \u63cf\u8ff0 </ summary > </ details >","title":"\u6298\u53e0"},{"location":"others/send_mail/","text":"\u90ae\u4ef6\u53d1\u9001 \u00b6 SBWP\uff0c\u53d1\u9001\u6d4b\u8bd5 SOST\uff0c\u90ae\u7bb1\u7ba1\u7406 SCOT\uff0c\u8282\u70b9\u914d\u7f6e \u90ae\u4ef6\u53d1\u9001\u4ee3\u7801 DATA : send_request TYPE REF TO cl_bcs , document TYPE REF TO cl_document_bcs , fail TYPE REF TO cx_bcs , recipient TYPE REF TO if_recipient_bcs . DATA : ls TYPE string , mailto TYPE ad_smtpadr , main_text TYPE bcsy_text , title TYPE so_obj_des . ls = '\u8be5\u90ae\u4ef6\u7528\u4e8e\u6d4b\u8bd5\u6f14\u793a\u7a0b\u5e8f' . APPEND ls TO main_text . title = '\u90ae\u4ef6\u53d1\u9001\u6d4b\u8bd5' . mailto = 'xxx@xxx.xx' . TRY . \" \u521b\u5efa\u53d1\u9001\u8bf7\u6c42 send_request = cl_bcs => create_persistent ( ). \" \u521b\u5efa\u6574\u7406\u53d1\u9001\u5185\u5bb9 document = cl_document_bcs => create_document ( i_type = 'RAW' i_text = main_text i_subject = title ). \" \u6dfb\u52a0\u90ae\u4ef6\u5185\u5bb9\u5230\u53d1\u9001\u8bf7\u6c42 send_request -> set_document ( document ). \" \u90ae\u4ef6\u5730\u5740\u8f6c\u6362 recipient = cl_cam_address_bcs => create_internet_address ( mailto ). \" \u6dfb\u52a0\u90ae\u4ef6\u5730\u5740\u5230\u53d1\u9001\u8bf7\u6c42 send_request -> add_recipient ( recipient ). \" \u6b63\u5f0f\u53d1\u9001\u5e76\u63d0\u4ea4\u4f5c\u4e1a send_request -> send ( i_with_error_screen = 'X' ). COMMIT WORK AND WAIT . CATCH cx_bcs INTO fail . ENDTRY .","title":"\u90ae\u4ef6\u53d1\u9001"},{"location":"others/send_mail/#_1","text":"SBWP\uff0c\u53d1\u9001\u6d4b\u8bd5 SOST\uff0c\u90ae\u7bb1\u7ba1\u7406 SCOT\uff0c\u8282\u70b9\u914d\u7f6e \u90ae\u4ef6\u53d1\u9001\u4ee3\u7801 DATA : send_request TYPE REF TO cl_bcs , document TYPE REF TO cl_document_bcs , fail TYPE REF TO cx_bcs , recipient TYPE REF TO if_recipient_bcs . DATA : ls TYPE string , mailto TYPE ad_smtpadr , main_text TYPE bcsy_text , title TYPE so_obj_des . ls = '\u8be5\u90ae\u4ef6\u7528\u4e8e\u6d4b\u8bd5\u6f14\u793a\u7a0b\u5e8f' . APPEND ls TO main_text . title = '\u90ae\u4ef6\u53d1\u9001\u6d4b\u8bd5' . mailto = 'xxx@xxx.xx' . TRY . \" \u521b\u5efa\u53d1\u9001\u8bf7\u6c42 send_request = cl_bcs => create_persistent ( ). \" \u521b\u5efa\u6574\u7406\u53d1\u9001\u5185\u5bb9 document = cl_document_bcs => create_document ( i_type = 'RAW' i_text = main_text i_subject = title ). \" \u6dfb\u52a0\u90ae\u4ef6\u5185\u5bb9\u5230\u53d1\u9001\u8bf7\u6c42 send_request -> set_document ( document ). \" \u90ae\u4ef6\u5730\u5740\u8f6c\u6362 recipient = cl_cam_address_bcs => create_internet_address ( mailto ). \" \u6dfb\u52a0\u90ae\u4ef6\u5730\u5740\u5230\u53d1\u9001\u8bf7\u6c42 send_request -> add_recipient ( recipient ). \" \u6b63\u5f0f\u53d1\u9001\u5e76\u63d0\u4ea4\u4f5c\u4e1a send_request -> send ( i_with_error_screen = 'X' ). COMMIT WORK AND WAIT . CATCH cx_bcs INTO fail . ENDTRY .","title":"\u90ae\u4ef6\u53d1\u9001"},{"location":"others/textproxy/","text":"\u6587\u672c\u53d6\u503c\u5de5\u5177 \u00b6 \u62a5\u8868\u90e8\u5206\u5b57\u6bb5\u9700\u8981\u53d6\u6587\u672c\uff0c\u8fd9\u91cc\u5c06\u9891\u7387\u8f83\u9ad8\u7684\u5b57\u6bb5\u6574\u7406\u51fa\u6765\uff0c\u4ee5\u540e\u5c31\u4e0d\u7528\u91cd\u590d\u5199SQL\u67e5\u8868\u4e86\u3002 ZCL_TEXT class ZCL_TEXT definition public final create private . public section . class-data BUKRS type ref to ZCL_TEXT read - only . class-data BP type ref to ZCL_TEXT read - only . class-data MATNR type ref to ZCL_TEXT read - only . class-methods CLASS_CONSTRUCTOR . class-methods CREATE importing ! I_NAME type STRING returning value ( RO_TEXT ) type ref to ZCL_TEXT . class-methods CREATE_DOMAIN importing ! I_DOMNAME type DOMNAME returning value ( RO_TEXT ) type ref to ZCL_TEXT . class-methods CREATE_AUSP importing ! I_CUOBJ type INOB - CUOBJ optional ! I_KLART type INOB - KLART default '023' ! I_OBTAB type INOB - OBTAB default 'MARA' ! I_OBJEK type INOB - OBJEK returning value ( RO_TEXT ) type ref to ZCL_TEXT . methods GET importing ! I_KEY type DATA returning value ( R_VALUE ) type STRING . PROTECTED SECTION . private section . types : BEGIN OF ty_text , key TYPE string , value TYPE string , END OF ty_text . types : tt_text TYPE SORTED TABLE OF ty_text WITH NON-UNIQUE KEY key . types : BEGIN OF ty_text_instance , name TYPE string , o_text TYPE REF TO zcl_text , END OF ty_text_instance . types : tt_text_instance TYPE SORTED TABLE OF ty_text_instance WITH NON-UNIQUE KEY name . types : BEGIN OF ty_domains , domname TYPE domname , o_text TYPE REF TO zcl_text , END OF ty_domains . types : tt_domnames TYPE SORTED TABLE OF ty_domains WITH NON-UNIQUE KEY domname . types : BEGIN OF ty_ausp , object_key TYPE ausp - objek , o_text TYPE REF TO zcl_text , END OF ty_ausp . types : tt_ausp TYPE SORTED TABLE OF ty_ausp WITH NON-UNIQUE KEY object_key . data MT_TEXT type TT_TEXT . data M_NAME type STRING . data M_METHOD type ABAP_METHNAME . class-data MT_TEXT_INSTANCE type TT_TEXT_INSTANCE . class-data MT_DOMAINS type TT_DOMNAMES . class-data MT_AUSP type TT_AUSP . class-data MO_OBJECTDESCR type ref to CL_ABAP_OBJECTDESCR . methods CONSTRUCTOR importing ! I_NAME type STRING . methods _BUKRS importing ! I_KEY type DATA returning value ( R_VALUE ) type STRING . methods _BP importing ! I_KEY type DATA returning value ( R_VALUE ) type STRING . methods _MATNR importing ! I_KEY type DATA returning value ( R_VALUE ) type STRING . methods _WERKS importing ! I_KEY type DATA returning value ( R_VALUE ) type STRING . methods _LGORT importing ! I_KEY type DATA returning value ( R_VALUE ) type STRING . methods _PRCTR importing ! I_KEY type DATA returning value ( R_VALUE ) type STRING . methods _WAERS importing ! I_KEY type DATA returning value ( R_VALUE ) type STRING . methods _DOMAIN importing ! I_KEY type DATA returning value ( R_VALUE ) type STRING . methods _AUSP importing ! I_KEY type DATA returning value ( R_VALUE ) type STRING . methods _NOT_FOUND importing ! I_KEY type DATA returning value ( R_VALUE ) type STRING . ENDCLASS . CLASS ZCL_TEXT IMPLEMENTATION . * <SIGNATURE>---------------------------------------------------------------------------------------+ * | Static Public Method ZCL_TEXT=>CLASS_CONSTRUCTOR * +-------------------------------------------------------------------------------------------------+ * +--------------------------------------------------------------------------------------</SIGNATURE> METHOD class_constructor . \" \u5206\u6790\u81ea\u8eab\uff0c\u83b7\u53d6\u53ef\u4ee5\u63d0\u4f9b\u7684\u6587\u672c\u5904\u7406\u65b9\u6cd5 mo_objectdescr ?= cl_abap_typedescr => describe_by_name ( 'ZCL_TEXT' ). \" \u8bbe\u7f6e\u51e0\u4e2a\u5e38\u7528\u7684 bukrs = create ( 'BUKRS' ). bp = create ( 'BP' ). matnr = create ( 'MATNR' ). ENDMETHOD . * <SIGNATURE>---------------------------------------------------------------------------------------+ * | Instance Private Method ZCL_TEXT->CONSTRUCTOR * +-------------------------------------------------------------------------------------------------+ * | [--->] I_NAME TYPE STRING * +--------------------------------------------------------------------------------------</SIGNATURE> METHOD constructor . m_name = i_name . m_method = | _ { m_name }|. ENDMETHOD . * <SIGNATURE>---------------------------------------------------------------------------------------+ * | Static Public Method ZCL_TEXT=>CREATE * +-------------------------------------------------------------------------------------------------+ * | [--->] I_NAME TYPE STRING * | [<-()] RO_TEXT TYPE REF TO ZCL_TEXT * +--------------------------------------------------------------------------------------</SIGNATURE> METHOD create . \" V3\uff0c\u76f8\u6bd4\u4e4b\u524d\uff0c\u7cbe\u7b80\u4e3a\u5355\u6587\u4ef6\uff0c\u65b9\u4fbf\u642c\u8fd0 DATA ( l_name ) = to_upper ( i_name ). \" \u68c0\u67e5\u7f13\u5b58\u8bb0\u5f55 READ TABLE mt_text_instance INTO DATA ( ls_text_instance ) WITH KEY name = l_name BINARY SEARCH . IF sy - subrc <> 0 . \" \u6ca1\u6709\u5c31\u65b0\u5efa\u4e00\u6761\u8bb0\u5f55\u7f13\u5b58 CLEAR ls_text_instance . ls_text_instance - name = l_name . \" \u68c0\u67e5\u662f\u5426\u5b58\u5728\u76f8\u5e94\u5904\u7406\u65b9\u6cd5 DATA l_method TYPE abap_methname . l_method = | _ { l_name }|. READ TABLE mo_objectdescr -> methods TRANSPORTING NO FIELDS WITH KEY name = l_method BINARY SEARCH . IF sy - subrc <> 0 . l_name = 'NOT_FOUND' . ENDIF . ls_text_instance - o_text = NEW zcl_text ( l_name ). INSERT ls_text_instance INTO TABLE mt_text_instance . ENDIF . ro_text = ls_text_instance - o_text . ENDMETHOD . * <SIGNATURE>---------------------------------------------------------------------------------------+ * | Static Public Method ZCL_TEXT=>CREATE_AUSP * +-------------------------------------------------------------------------------------------------+ * | [--->] I_CUOBJ TYPE INOB-CUOBJ(optional) * | [--->] I_KLART TYPE INOB-KLART (default ='023') * | [--->] I_OBTAB TYPE INOB-OBTAB (default ='MARA') * | [--->] I_OBJEK TYPE INOB-OBJEK * | [<-()] RO_TEXT TYPE REF TO ZCL_TEXT * +--------------------------------------------------------------------------------------</SIGNATURE> METHOD CREATE_AUSP . DATA l_object_key TYPE ausp - objek . IF i_cuobj IS NOT INITIAL . l_object_key = i_cuobj . ELSE . SELECT SINGLE cuobj FROM inob WHERE klart = @ i_klart AND obtab = @ i_obtab AND objek = @ i_objek INTO @ l_object_key . ENDIF . READ TABLE mt_ausp INTO DATA ( ls_ausp ) WITH KEY object_key = l_object_key BINARY SEARCH . IF sy - subrc <> 0 . CLEAR ls_ausp . ls_ausp - object_key = l_object_key . ls_ausp - o_text = NEW zcl_text ( 'AUSP' ). SELECT atinn AS key , atwrt AS value FROM ausp WHERE objek = @ i_objek INTO TABLE @ ls_ausp - o_text -> mt_text . INSERT ls_ausp INTO TABLE mt_ausp . ENDIF . ro_text = ls_ausp - o_text . ENDMETHOD . * <SIGNATURE>---------------------------------------------------------------------------------------+ * | Static Public Method ZCL_TEXT=>CREATE_DOMAIN * +-------------------------------------------------------------------------------------------------+ * | [--->] I_DOMNAME TYPE DOMNAME * | [<-()] RO_TEXT TYPE REF TO ZCL_TEXT * +--------------------------------------------------------------------------------------</SIGNATURE> METHOD CREATE_DOMAIN . READ TABLE mt_domains INTO DATA ( ls_domain ) WITH KEY domname = i_domname BINARY SEARCH . IF sy - subrc <> 0 . CLEAR ls_domain . ls_domain - domname = i_domname . ls_domain - o_text = NEW zcl_text ( 'DOMAIN' ). SELECT domvalue_l AS key , ddtext AS value FROM dd07t WHERE domname = @ i_domname AND ddlanguage = '1' AND as4local = 'A' INTO TABLE @ ls_domain - o_text -> mt_text . INSERT ls_domain INTO TABLE mt_domains . ENDIF . ro_text = ls_domain - o_text . ENDMETHOD . * <SIGNATURE>---------------------------------------------------------------------------------------+ * | Instance Public Method ZCL_TEXT->GET * +-------------------------------------------------------------------------------------------------+ * | [--->] I_KEY TYPE DATA * | [<-()] R_VALUE TYPE STRING * +--------------------------------------------------------------------------------------</SIGNATURE> METHOD get . CHECK i_key IS NOT INITIAL . CHECK m_name <> 'NOT_FOUND' . \" \u7279\u5f81\u503c\u7279\u6b8a\u5904\u7406\uff0c\u65e0\u9700\u7f13\u5b58 IF m_name = 'AUSP' . CALL METHOD me -> _ausp EXPORTING i_key = i_key RECEIVING r_value = r_value . RETURN . ENDIF . \" \u68c0\u67e5\u7f13\u5b58 READ TABLE mt_text INTO DATA ( ls_text ) WITH KEY key = i_key . IF sy - subrc = 0 . r_value = ls_text - value . RETURN . ENDIF . TRY . \" \u8df3\u8f6c\u5230\u5bf9\u5e94\u65b9\u6cd5\u5904\u7406 CALL METHOD me -> ( m_method ) EXPORTING i_key = i_key RECEIVING r_value = r_value . CATCH cx_root . ENDTRY . \" \u7f13\u5b58\u8bb0\u5f55 CLEAR ls_text . ls_text - key = i_key . ls_text - value = r_value . INSERT ls_text INTO TABLE mt_text . ENDMETHOD . * <SIGNATURE>---------------------------------------------------------------------------------------+ * | Instance Private Method ZCL_TEXT->_AUSP * +-------------------------------------------------------------------------------------------------+ * | [--->] I_KEY TYPE DATA * | [<-()] R_VALUE TYPE STRING * +--------------------------------------------------------------------------------------</SIGNATURE> METHOD _ausp . DATA l_atinn TYPE ausp - atinn . CALL FUNCTION 'CONVERSION_EXIT_ATINN_INPUT' EXPORTING input = i_key IMPORTING output = l_atinn . READ TABLE mt_text INTO DATA ( ls_text ) WITH KEY key = l_atinn . r_value = ls_text - value . ENDMETHOD . * <SIGNATURE>---------------------------------------------------------------------------------------+ * | Instance Private Method ZCL_TEXT->_BP * +-------------------------------------------------------------------------------------------------+ * | [--->] I_KEY TYPE DATA * | [<-()] R_VALUE TYPE STRING * +--------------------------------------------------------------------------------------</SIGNATURE> METHOD _bp . SELECT SINGLE concat ( name_org1 , name_org2 ) AS name FROM but000 WHERE partner = @ i_key INTO @ r_value . ENDMETHOD . * <SIGNATURE>---------------------------------------------------------------------------------------+ * | Instance Private Method ZCL_TEXT->_BUKRS * +-------------------------------------------------------------------------------------------------+ * | [--->] I_KEY TYPE DATA * | [<-()] R_VALUE TYPE STRING * +--------------------------------------------------------------------------------------</SIGNATURE> METHOD _bukrs . SELECT SINGLE butxt FROM t001 WHERE bukrs = @ i_key INTO @ r_value . ENDMETHOD . * <SIGNATURE>---------------------------------------------------------------------------------------+ * | Instance Private Method ZCL_TEXT->_DOMAIN * +-------------------------------------------------------------------------------------------------+ * | [--->] I_KEY TYPE DATA * | [<-()] R_VALUE TYPE STRING * +--------------------------------------------------------------------------------------</SIGNATURE> METHOD _DOMAIN . ENDMETHOD . * <SIGNATURE>---------------------------------------------------------------------------------------+ * | Instance Private Method ZCL_TEXT->_LGORT * +-------------------------------------------------------------------------------------------------+ * | [--->] I_KEY TYPE DATA * | [<-()] R_VALUE TYPE STRING * +--------------------------------------------------------------------------------------</SIGNATURE> METHOD _lgort . SELECT SINGLE lgobe FROM t001l WHERE lgort = @ i_key INTO @ r_value . ENDMETHOD . * <SIGNATURE>---------------------------------------------------------------------------------------+ * | Instance Private Method ZCL_TEXT->_MATNR * +-------------------------------------------------------------------------------------------------+ * | [--->] I_KEY TYPE DATA * | [<-()] R_VALUE TYPE STRING * +--------------------------------------------------------------------------------------</SIGNATURE> METHOD _matnr . SELECT SINGLE maktx FROM makt WHERE matnr = @ i_key AND spras = '1' INTO @ r_value . ENDMETHOD . * <SIGNATURE>---------------------------------------------------------------------------------------+ * | Instance Private Method ZCL_TEXT->_NOT_FOUND * +-------------------------------------------------------------------------------------------------+ * | [--->] I_KEY TYPE DATA * | [<-()] R_VALUE TYPE STRING * +--------------------------------------------------------------------------------------</SIGNATURE> METHOD _not_found . ENDMETHOD . * <SIGNATURE>---------------------------------------------------------------------------------------+ * | Instance Private Method ZCL_TEXT->_PRCTR * +-------------------------------------------------------------------------------------------------+ * | [--->] I_KEY TYPE DATA * | [<-()] R_VALUE TYPE STRING * +--------------------------------------------------------------------------------------</SIGNATURE> METHOD _prctr . SELECT SINGLE ltext FROM cepct WHERE spras = '1' AND prctr = @ i_key INTO @ r_value . ENDMETHOD . * <SIGNATURE>---------------------------------------------------------------------------------------+ * | Instance Private Method ZCL_TEXT->_WAERS * +-------------------------------------------------------------------------------------------------+ * | [--->] I_KEY TYPE DATA * | [<-()] R_VALUE TYPE STRING * +--------------------------------------------------------------------------------------</SIGNATURE> METHOD _waers . SELECT SINGLE ltext FROM tcurt WHERE spras = '1' AND waers = @ i_key INTO @ r_value . ENDMETHOD . * <SIGNATURE>---------------------------------------------------------------------------------------+ * | Instance Private Method ZCL_TEXT->_WERKS * +-------------------------------------------------------------------------------------------------+ * | [--->] I_KEY TYPE DATA * | [<-()] R_VALUE TYPE STRING * +--------------------------------------------------------------------------------------</SIGNATURE> METHOD _werks . SELECT SINGLE name1 FROM t001w WHERE werks = @ i_key INTO @ r_value . ENDMETHOD . ENDCLASS .","title":"\u6587\u672c\u53d6\u503c\u5de5\u5177"},{"location":"others/textproxy/#_1","text":"\u62a5\u8868\u90e8\u5206\u5b57\u6bb5\u9700\u8981\u53d6\u6587\u672c\uff0c\u8fd9\u91cc\u5c06\u9891\u7387\u8f83\u9ad8\u7684\u5b57\u6bb5\u6574\u7406\u51fa\u6765\uff0c\u4ee5\u540e\u5c31\u4e0d\u7528\u91cd\u590d\u5199SQL\u67e5\u8868\u4e86\u3002 ZCL_TEXT class ZCL_TEXT definition public final create private . public section . class-data BUKRS type ref to ZCL_TEXT read - only . class-data BP type ref to ZCL_TEXT read - only . class-data MATNR type ref to ZCL_TEXT read - only . class-methods CLASS_CONSTRUCTOR . class-methods CREATE importing ! I_NAME type STRING returning value ( RO_TEXT ) type ref to ZCL_TEXT . class-methods CREATE_DOMAIN importing ! I_DOMNAME type DOMNAME returning value ( RO_TEXT ) type ref to ZCL_TEXT . class-methods CREATE_AUSP importing ! I_CUOBJ type INOB - CUOBJ optional ! I_KLART type INOB - KLART default '023' ! I_OBTAB type INOB - OBTAB default 'MARA' ! I_OBJEK type INOB - OBJEK returning value ( RO_TEXT ) type ref to ZCL_TEXT . methods GET importing ! I_KEY type DATA returning value ( R_VALUE ) type STRING . PROTECTED SECTION . private section . types : BEGIN OF ty_text , key TYPE string , value TYPE string , END OF ty_text . types : tt_text TYPE SORTED TABLE OF ty_text WITH NON-UNIQUE KEY key . types : BEGIN OF ty_text_instance , name TYPE string , o_text TYPE REF TO zcl_text , END OF ty_text_instance . types : tt_text_instance TYPE SORTED TABLE OF ty_text_instance WITH NON-UNIQUE KEY name . types : BEGIN OF ty_domains , domname TYPE domname , o_text TYPE REF TO zcl_text , END OF ty_domains . types : tt_domnames TYPE SORTED TABLE OF ty_domains WITH NON-UNIQUE KEY domname . types : BEGIN OF ty_ausp , object_key TYPE ausp - objek , o_text TYPE REF TO zcl_text , END OF ty_ausp . types : tt_ausp TYPE SORTED TABLE OF ty_ausp WITH NON-UNIQUE KEY object_key . data MT_TEXT type TT_TEXT . data M_NAME type STRING . data M_METHOD type ABAP_METHNAME . class-data MT_TEXT_INSTANCE type TT_TEXT_INSTANCE . class-data MT_DOMAINS type TT_DOMNAMES . class-data MT_AUSP type TT_AUSP . class-data MO_OBJECTDESCR type ref to CL_ABAP_OBJECTDESCR . methods CONSTRUCTOR importing ! I_NAME type STRING . methods _BUKRS importing ! I_KEY type DATA returning value ( R_VALUE ) type STRING . methods _BP importing ! I_KEY type DATA returning value ( R_VALUE ) type STRING . methods _MATNR importing ! I_KEY type DATA returning value ( R_VALUE ) type STRING . methods _WERKS importing ! I_KEY type DATA returning value ( R_VALUE ) type STRING . methods _LGORT importing ! I_KEY type DATA returning value ( R_VALUE ) type STRING . methods _PRCTR importing ! I_KEY type DATA returning value ( R_VALUE ) type STRING . methods _WAERS importing ! I_KEY type DATA returning value ( R_VALUE ) type STRING . methods _DOMAIN importing ! I_KEY type DATA returning value ( R_VALUE ) type STRING . methods _AUSP importing ! I_KEY type DATA returning value ( R_VALUE ) type STRING . methods _NOT_FOUND importing ! I_KEY type DATA returning value ( R_VALUE ) type STRING . ENDCLASS . CLASS ZCL_TEXT IMPLEMENTATION . * <SIGNATURE>---------------------------------------------------------------------------------------+ * | Static Public Method ZCL_TEXT=>CLASS_CONSTRUCTOR * +-------------------------------------------------------------------------------------------------+ * +--------------------------------------------------------------------------------------</SIGNATURE> METHOD class_constructor . \" \u5206\u6790\u81ea\u8eab\uff0c\u83b7\u53d6\u53ef\u4ee5\u63d0\u4f9b\u7684\u6587\u672c\u5904\u7406\u65b9\u6cd5 mo_objectdescr ?= cl_abap_typedescr => describe_by_name ( 'ZCL_TEXT' ). \" \u8bbe\u7f6e\u51e0\u4e2a\u5e38\u7528\u7684 bukrs = create ( 'BUKRS' ). bp = create ( 'BP' ). matnr = create ( 'MATNR' ). ENDMETHOD . * <SIGNATURE>---------------------------------------------------------------------------------------+ * | Instance Private Method ZCL_TEXT->CONSTRUCTOR * +-------------------------------------------------------------------------------------------------+ * | [--->] I_NAME TYPE STRING * +--------------------------------------------------------------------------------------</SIGNATURE> METHOD constructor . m_name = i_name . m_method = | _ { m_name }|. ENDMETHOD . * <SIGNATURE>---------------------------------------------------------------------------------------+ * | Static Public Method ZCL_TEXT=>CREATE * +-------------------------------------------------------------------------------------------------+ * | [--->] I_NAME TYPE STRING * | [<-()] RO_TEXT TYPE REF TO ZCL_TEXT * +--------------------------------------------------------------------------------------</SIGNATURE> METHOD create . \" V3\uff0c\u76f8\u6bd4\u4e4b\u524d\uff0c\u7cbe\u7b80\u4e3a\u5355\u6587\u4ef6\uff0c\u65b9\u4fbf\u642c\u8fd0 DATA ( l_name ) = to_upper ( i_name ). \" \u68c0\u67e5\u7f13\u5b58\u8bb0\u5f55 READ TABLE mt_text_instance INTO DATA ( ls_text_instance ) WITH KEY name = l_name BINARY SEARCH . IF sy - subrc <> 0 . \" \u6ca1\u6709\u5c31\u65b0\u5efa\u4e00\u6761\u8bb0\u5f55\u7f13\u5b58 CLEAR ls_text_instance . ls_text_instance - name = l_name . \" \u68c0\u67e5\u662f\u5426\u5b58\u5728\u76f8\u5e94\u5904\u7406\u65b9\u6cd5 DATA l_method TYPE abap_methname . l_method = | _ { l_name }|. READ TABLE mo_objectdescr -> methods TRANSPORTING NO FIELDS WITH KEY name = l_method BINARY SEARCH . IF sy - subrc <> 0 . l_name = 'NOT_FOUND' . ENDIF . ls_text_instance - o_text = NEW zcl_text ( l_name ). INSERT ls_text_instance INTO TABLE mt_text_instance . ENDIF . ro_text = ls_text_instance - o_text . ENDMETHOD . * <SIGNATURE>---------------------------------------------------------------------------------------+ * | Static Public Method ZCL_TEXT=>CREATE_AUSP * +-------------------------------------------------------------------------------------------------+ * | [--->] I_CUOBJ TYPE INOB-CUOBJ(optional) * | [--->] I_KLART TYPE INOB-KLART (default ='023') * | [--->] I_OBTAB TYPE INOB-OBTAB (default ='MARA') * | [--->] I_OBJEK TYPE INOB-OBJEK * | [<-()] RO_TEXT TYPE REF TO ZCL_TEXT * +--------------------------------------------------------------------------------------</SIGNATURE> METHOD CREATE_AUSP . DATA l_object_key TYPE ausp - objek . IF i_cuobj IS NOT INITIAL . l_object_key = i_cuobj . ELSE . SELECT SINGLE cuobj FROM inob WHERE klart = @ i_klart AND obtab = @ i_obtab AND objek = @ i_objek INTO @ l_object_key . ENDIF . READ TABLE mt_ausp INTO DATA ( ls_ausp ) WITH KEY object_key = l_object_key BINARY SEARCH . IF sy - subrc <> 0 . CLEAR ls_ausp . ls_ausp - object_key = l_object_key . ls_ausp - o_text = NEW zcl_text ( 'AUSP' ). SELECT atinn AS key , atwrt AS value FROM ausp WHERE objek = @ i_objek INTO TABLE @ ls_ausp - o_text -> mt_text . INSERT ls_ausp INTO TABLE mt_ausp . ENDIF . ro_text = ls_ausp - o_text . ENDMETHOD . * <SIGNATURE>---------------------------------------------------------------------------------------+ * | Static Public Method ZCL_TEXT=>CREATE_DOMAIN * +-------------------------------------------------------------------------------------------------+ * | [--->] I_DOMNAME TYPE DOMNAME * | [<-()] RO_TEXT TYPE REF TO ZCL_TEXT * +--------------------------------------------------------------------------------------</SIGNATURE> METHOD CREATE_DOMAIN . READ TABLE mt_domains INTO DATA ( ls_domain ) WITH KEY domname = i_domname BINARY SEARCH . IF sy - subrc <> 0 . CLEAR ls_domain . ls_domain - domname = i_domname . ls_domain - o_text = NEW zcl_text ( 'DOMAIN' ). SELECT domvalue_l AS key , ddtext AS value FROM dd07t WHERE domname = @ i_domname AND ddlanguage = '1' AND as4local = 'A' INTO TABLE @ ls_domain - o_text -> mt_text . INSERT ls_domain INTO TABLE mt_domains . ENDIF . ro_text = ls_domain - o_text . ENDMETHOD . * <SIGNATURE>---------------------------------------------------------------------------------------+ * | Instance Public Method ZCL_TEXT->GET * +-------------------------------------------------------------------------------------------------+ * | [--->] I_KEY TYPE DATA * | [<-()] R_VALUE TYPE STRING * +--------------------------------------------------------------------------------------</SIGNATURE> METHOD get . CHECK i_key IS NOT INITIAL . CHECK m_name <> 'NOT_FOUND' . \" \u7279\u5f81\u503c\u7279\u6b8a\u5904\u7406\uff0c\u65e0\u9700\u7f13\u5b58 IF m_name = 'AUSP' . CALL METHOD me -> _ausp EXPORTING i_key = i_key RECEIVING r_value = r_value . RETURN . ENDIF . \" \u68c0\u67e5\u7f13\u5b58 READ TABLE mt_text INTO DATA ( ls_text ) WITH KEY key = i_key . IF sy - subrc = 0 . r_value = ls_text - value . RETURN . ENDIF . TRY . \" \u8df3\u8f6c\u5230\u5bf9\u5e94\u65b9\u6cd5\u5904\u7406 CALL METHOD me -> ( m_method ) EXPORTING i_key = i_key RECEIVING r_value = r_value . CATCH cx_root . ENDTRY . \" \u7f13\u5b58\u8bb0\u5f55 CLEAR ls_text . ls_text - key = i_key . ls_text - value = r_value . INSERT ls_text INTO TABLE mt_text . ENDMETHOD . * <SIGNATURE>---------------------------------------------------------------------------------------+ * | Instance Private Method ZCL_TEXT->_AUSP * +-------------------------------------------------------------------------------------------------+ * | [--->] I_KEY TYPE DATA * | [<-()] R_VALUE TYPE STRING * +--------------------------------------------------------------------------------------</SIGNATURE> METHOD _ausp . DATA l_atinn TYPE ausp - atinn . CALL FUNCTION 'CONVERSION_EXIT_ATINN_INPUT' EXPORTING input = i_key IMPORTING output = l_atinn . READ TABLE mt_text INTO DATA ( ls_text ) WITH KEY key = l_atinn . r_value = ls_text - value . ENDMETHOD . * <SIGNATURE>---------------------------------------------------------------------------------------+ * | Instance Private Method ZCL_TEXT->_BP * +-------------------------------------------------------------------------------------------------+ * | [--->] I_KEY TYPE DATA * | [<-()] R_VALUE TYPE STRING * +--------------------------------------------------------------------------------------</SIGNATURE> METHOD _bp . SELECT SINGLE concat ( name_org1 , name_org2 ) AS name FROM but000 WHERE partner = @ i_key INTO @ r_value . ENDMETHOD . * <SIGNATURE>---------------------------------------------------------------------------------------+ * | Instance Private Method ZCL_TEXT->_BUKRS * +-------------------------------------------------------------------------------------------------+ * | [--->] I_KEY TYPE DATA * | [<-()] R_VALUE TYPE STRING * +--------------------------------------------------------------------------------------</SIGNATURE> METHOD _bukrs . SELECT SINGLE butxt FROM t001 WHERE bukrs = @ i_key INTO @ r_value . ENDMETHOD . * <SIGNATURE>---------------------------------------------------------------------------------------+ * | Instance Private Method ZCL_TEXT->_DOMAIN * +-------------------------------------------------------------------------------------------------+ * | [--->] I_KEY TYPE DATA * | [<-()] R_VALUE TYPE STRING * +--------------------------------------------------------------------------------------</SIGNATURE> METHOD _DOMAIN . ENDMETHOD . * <SIGNATURE>---------------------------------------------------------------------------------------+ * | Instance Private Method ZCL_TEXT->_LGORT * +-------------------------------------------------------------------------------------------------+ * | [--->] I_KEY TYPE DATA * | [<-()] R_VALUE TYPE STRING * +--------------------------------------------------------------------------------------</SIGNATURE> METHOD _lgort . SELECT SINGLE lgobe FROM t001l WHERE lgort = @ i_key INTO @ r_value . ENDMETHOD . * <SIGNATURE>---------------------------------------------------------------------------------------+ * | Instance Private Method ZCL_TEXT->_MATNR * +-------------------------------------------------------------------------------------------------+ * | [--->] I_KEY TYPE DATA * | [<-()] R_VALUE TYPE STRING * +--------------------------------------------------------------------------------------</SIGNATURE> METHOD _matnr . SELECT SINGLE maktx FROM makt WHERE matnr = @ i_key AND spras = '1' INTO @ r_value . ENDMETHOD . * <SIGNATURE>---------------------------------------------------------------------------------------+ * | Instance Private Method ZCL_TEXT->_NOT_FOUND * +-------------------------------------------------------------------------------------------------+ * | [--->] I_KEY TYPE DATA * | [<-()] R_VALUE TYPE STRING * +--------------------------------------------------------------------------------------</SIGNATURE> METHOD _not_found . ENDMETHOD . * <SIGNATURE>---------------------------------------------------------------------------------------+ * | Instance Private Method ZCL_TEXT->_PRCTR * +-------------------------------------------------------------------------------------------------+ * | [--->] I_KEY TYPE DATA * | [<-()] R_VALUE TYPE STRING * +--------------------------------------------------------------------------------------</SIGNATURE> METHOD _prctr . SELECT SINGLE ltext FROM cepct WHERE spras = '1' AND prctr = @ i_key INTO @ r_value . ENDMETHOD . * <SIGNATURE>---------------------------------------------------------------------------------------+ * | Instance Private Method ZCL_TEXT->_WAERS * +-------------------------------------------------------------------------------------------------+ * | [--->] I_KEY TYPE DATA * | [<-()] R_VALUE TYPE STRING * +--------------------------------------------------------------------------------------</SIGNATURE> METHOD _waers . SELECT SINGLE ltext FROM tcurt WHERE spras = '1' AND waers = @ i_key INTO @ r_value . ENDMETHOD . * <SIGNATURE>---------------------------------------------------------------------------------------+ * | Instance Private Method ZCL_TEXT->_WERKS * +-------------------------------------------------------------------------------------------------+ * | [--->] I_KEY TYPE DATA * | [<-()] R_VALUE TYPE STRING * +--------------------------------------------------------------------------------------</SIGNATURE> METHOD _werks . SELECT SINGLE name1 FROM t001w WHERE werks = @ i_key INTO @ r_value . ENDMETHOD . ENDCLASS .","title":"\u6587\u672c\u53d6\u503c\u5de5\u5177"},{"location":"others/xlsx_io/","text":"XLSX\u4e0a\u4f20\u4e0b\u8f7d \u00b6 \u9879\u76ee\u5b9e\u65bd\u5c11\u4e0d\u4e86\u6279\u5bfc\uff0c\u8fd9\u91cc\u6574\u7406\u4e0b\u4e0a\u4f20\u4e0b\u8f7d\u4f1a\u7528\u5230\u7684\u5de5\u5177\u3002 OLE \u00b6 \u4e0a\u53e4\u5de5\u5177\uff0c\u5efa\u8bae\u653e\u5f03 DOI \u00b6 \u6ca1\u7528\u8fc7 TEXT_CONVERT_XLS_TO_SAP \u00b6 TODO ALSM_EXCEL_TO_INTERNAL_TABLE \u00b6 \u770b\u4ee3\u7801\u53ef\u4ee5\u770b\u51fa\uff0c\u662fOLE\u64cd\u4f5c\u590d\u5236\u4e0a\u4f20\u533a\u57df\uff0c\u7136\u540e\u52a8\u6001\u89e3\u6790\u526a\u5207\u677f\uff0c\u4f18\u70b9\u662f\u65b9\u4fbf\uff0c\u4f46\u53d7\u4e0a\u4f20\u6587\u4ef6\u683c\u5f0f\u5f71\u54cd\u8f83\u5927\u3002 TODO ABAP2XLSX \u00b6 \u7b2c\u4e09\u65b9\u5de5\u5177\uff0c\u4f7f\u7528ABAPGIT\u5b89\u88c5\u3002 \u901a\u8fc7\u89e3\u6790XLSX\u4e2d\u7684XML\u6587\u4ef6\uff0c\u5b9e\u73b0\u9ad8\u901f\u8bfb\u53d6\u6570\u636e\u3002\u76f8\u6bd4 CL_EHFND_XLSX \uff0c\u63d0\u4f9b\u4e86\u66f4\u9f50\u5168\u7684EXCEL\u8bbe\u7f6e\u3002 \u6f14\u793a\u7a0b\u5e8f\u89c1\u5b98\u65b9\u63d0\u8fc7\u7684\u4ee3\u7801\uff0c\u8fd9\u91cc\u7565\u8fc7\u3002 CL_EHFND_XLSX \u00b6 SAP\u63d0\u4f9b\u7684\u6807\u51c6\u65b9\u6cd5\uff0c\u901a\u8fc7\u89e3\u6790XLSX\u4e2d\u7684XML\u6587\u4ef6\uff0c\u5b9e\u73b0\u9ad8\u901f\u8bfb\u53d6\u6570\u636e\uff0c\u7b14\u8005\u9996\u63a8\u3002 TODO XLSX WORKBANCH \u00b6 \u7b2c\u4e09\u65b9\u5de5\u5177\uff0c\u9002\u5408\u5bfc\u51faEXCEL\u3002 \u7c7b\u4f3cSMARTFORMS\uff0c\u9884\u5148\u8bbe\u7f6e\u597dEXCEL\u6a21\u677f\uff0c\u5e76\u63d0\u4f9b\u8f93\u5165\u53c2\u6570\u3002","title":"Excel\u4e0a\u4f20\u4e0b\u8f7d"},{"location":"others/xlsx_io/#xlsx","text":"\u9879\u76ee\u5b9e\u65bd\u5c11\u4e0d\u4e86\u6279\u5bfc\uff0c\u8fd9\u91cc\u6574\u7406\u4e0b\u4e0a\u4f20\u4e0b\u8f7d\u4f1a\u7528\u5230\u7684\u5de5\u5177\u3002","title":"XLSX\u4e0a\u4f20\u4e0b\u8f7d"},{"location":"others/xlsx_io/#ole","text":"\u4e0a\u53e4\u5de5\u5177\uff0c\u5efa\u8bae\u653e\u5f03","title":"OLE"},{"location":"others/xlsx_io/#doi","text":"\u6ca1\u7528\u8fc7","title":"DOI"},{"location":"others/xlsx_io/#text_convert_xls_to_sap","text":"TODO","title":"TEXT_CONVERT_XLS_TO_SAP"},{"location":"others/xlsx_io/#alsm_excel_to_internal_table","text":"\u770b\u4ee3\u7801\u53ef\u4ee5\u770b\u51fa\uff0c\u662fOLE\u64cd\u4f5c\u590d\u5236\u4e0a\u4f20\u533a\u57df\uff0c\u7136\u540e\u52a8\u6001\u89e3\u6790\u526a\u5207\u677f\uff0c\u4f18\u70b9\u662f\u65b9\u4fbf\uff0c\u4f46\u53d7\u4e0a\u4f20\u6587\u4ef6\u683c\u5f0f\u5f71\u54cd\u8f83\u5927\u3002 TODO","title":"ALSM_EXCEL_TO_INTERNAL_TABLE"},{"location":"others/xlsx_io/#abap2xlsx","text":"\u7b2c\u4e09\u65b9\u5de5\u5177\uff0c\u4f7f\u7528ABAPGIT\u5b89\u88c5\u3002 \u901a\u8fc7\u89e3\u6790XLSX\u4e2d\u7684XML\u6587\u4ef6\uff0c\u5b9e\u73b0\u9ad8\u901f\u8bfb\u53d6\u6570\u636e\u3002\u76f8\u6bd4 CL_EHFND_XLSX \uff0c\u63d0\u4f9b\u4e86\u66f4\u9f50\u5168\u7684EXCEL\u8bbe\u7f6e\u3002 \u6f14\u793a\u7a0b\u5e8f\u89c1\u5b98\u65b9\u63d0\u8fc7\u7684\u4ee3\u7801\uff0c\u8fd9\u91cc\u7565\u8fc7\u3002","title":"ABAP2XLSX"},{"location":"others/xlsx_io/#cl_ehfnd_xlsx","text":"SAP\u63d0\u4f9b\u7684\u6807\u51c6\u65b9\u6cd5\uff0c\u901a\u8fc7\u89e3\u6790XLSX\u4e2d\u7684XML\u6587\u4ef6\uff0c\u5b9e\u73b0\u9ad8\u901f\u8bfb\u53d6\u6570\u636e\uff0c\u7b14\u8005\u9996\u63a8\u3002 TODO","title":"CL_EHFND_XLSX"},{"location":"others/xlsx_io/#xlsx-workbanch","text":"\u7b2c\u4e09\u65b9\u5de5\u5177\uff0c\u9002\u5408\u5bfc\u51faEXCEL\u3002 \u7c7b\u4f3cSMARTFORMS\uff0c\u9884\u5148\u8bbe\u7f6e\u597dEXCEL\u6a21\u677f\uff0c\u5e76\u63d0\u4f9b\u8f93\u5165\u53c2\u6570\u3002","title":"XLSX WORKBANCH"},{"location":"pp/","text":"\u751f\u4ea7\u6a21\u5757\u6982\u8ff0 \u00b6 \u6309\u6d41\u7a0b \u72ec\u7acb\u9700\u6c42\u8ba1\u5212\uff08PIR\uff09 MRP\u8fd0\u884c\uff08MRP\uff09 \u751f\u4ea7\u8ba1\u5212\uff08Planning\uff09 \u9886\u9000\u6599\uff08MIGO\uff09 \u62a5\u5de5\uff08Confirmation\uff09 \u5de5\u5355\u5173\u95ed\uff08Close\uff09","title":"PP\u6a21\u5757\u6982\u8ff0"},{"location":"pp/#_1","text":"\u6309\u6d41\u7a0b \u72ec\u7acb\u9700\u6c42\u8ba1\u5212\uff08PIR\uff09 MRP\u8fd0\u884c\uff08MRP\uff09 \u751f\u4ea7\u8ba1\u5212\uff08Planning\uff09 \u9886\u9000\u6599\uff08MIGO\uff09 \u62a5\u5de5\uff08Confirmation\uff09 \u5de5\u5355\u5173\u95ed\uff08Close\uff09","title":"\u751f\u4ea7\u6a21\u5757\u6982\u8ff0"},{"location":"pp/auto_goods_issue/","text":"\u9886\u6599 \u00b6","title":"GI"},{"location":"pp/auto_goods_issue/#_1","text":"","title":"\u9886\u6599"},{"location":"pp/auto_goods_receipt/","text":"\u9000\u6599 \u00b6","title":"GR"},{"location":"pp/auto_goods_receipt/#_1","text":"","title":"\u9000\u6599"},{"location":"pp/mrp/","text":"\u7269\u6599\u9700\u6c42\u8ba1\u5212\uff08MRP\uff09 \u00b6","title":"MRP"},{"location":"pp/mrp/#mrp","text":"","title":"\u7269\u6599\u9700\u6c42\u8ba1\u5212\uff08MRP\uff09"},{"location":"pp/pir/","text":"\u8ba1\u5212\u72ec\u7acb\u9700\u6c42\uff08PIR\uff09 \u00b6 Planned Independent Requirement","title":"PIR"},{"location":"pp/pir/#pir","text":"Planned Independent Requirement","title":"\u8ba1\u5212\u72ec\u7acb\u9700\u6c42\uff08PIR\uff09"},{"location":"pp/pp_migo/","text":"\u751f\u4ea7\u8ba2\u5355 \u00b6","title":"\u9886\u9000\u6599"},{"location":"pp/pp_migo/#_1","text":"","title":"\u751f\u4ea7\u8ba2\u5355"},{"location":"pp/production_confirmation/","text":"\u751f\u4ea7\u62a5\u5de5 \u00b6","title":"\u5de5\u5355\u786e\u8ba4"},{"location":"pp/production_confirmation/#_1","text":"","title":"\u751f\u4ea7\u62a5\u5de5"},{"location":"pp/production_order/","text":"\u751f\u4ea7\u8ba2\u5355 \u00b6","title":"\u751f\u4ea7\u5de5\u5355"},{"location":"pp/production_order/#_1","text":"","title":"\u751f\u4ea7\u8ba2\u5355"},{"location":"pp/production_order_close/","text":"\u5de5\u5355\u5173\u95ed \u00b6","title":"\u5de5\u5355\u5173\u95ed"},{"location":"pp/production_order_close/#_1","text":"","title":"\u5de5\u5355\u5173\u95ed"},{"location":"pp/production_planning/","text":"\u751f\u4ea7\u8ba1\u5212 \u00b6","title":"\u751f\u4ea7\u8ba1\u5212"},{"location":"pp/production_planning/#_1","text":"","title":"\u751f\u4ea7\u8ba1\u5212"},{"location":"pp/production_version/","text":"\u751f\u4ea7\u62a5\u5de5 \u00b6","title":"\u751f\u4ea7\u7248\u672c"},{"location":"pp/production_version/#_1","text":"","title":"\u751f\u4ea7\u62a5\u5de5"},{"location":"report/","text":"\u5e38\u7528\u62a5\u8868 \u00b6 \u6bd4\u8d77\u4e1a\u52a1\u6d41\u7a0b\uff0cSAP\u62a5\u8868\u53ef\u8c13\u591a\u4e0d\u80dc\u6570\uff0c\u6211\u53ea\u80fd\u628a\u5e38\u7528\u7684\u62a5\u8868\u6574\u7406\u4e00\u4e0b","title":"\u62a5\u8868\u6982\u8ff0"},{"location":"report/#_1","text":"\u6bd4\u8d77\u4e1a\u52a1\u6d41\u7a0b\uff0cSAP\u62a5\u8868\u53ef\u8c13\u591a\u4e0d\u80dc\u6570\uff0c\u6211\u53ea\u80fd\u628a\u5e38\u7528\u7684\u62a5\u8868\u6574\u7406\u4e00\u4e0b","title":"\u5e38\u7528\u62a5\u8868"},{"location":"sd/","text":"SD\u6a21\u5757\u6982\u8ff0 \u00b6 \u6211\u7406\u89e3\u7684SD\uff08\uff09\uff0c\u9500\u552e\u548c\u5206\u9500\u6a21\u5757\uff0c\u5305\u62ec\u91c7\u8d2d\u6536\u8d27\uff0c\u9500\u552e\u5355\uff0c\u9500\u552e\u53d1\u8d27\uff0c\u6536\u8d27\u548c\u53d1\u8d27\u8fc7\u8d26\uff0cMIGO\u7b49\u3002","title":"SD\u6a21\u5757\u6982\u8ff0"},{"location":"sd/#sd","text":"\u6211\u7406\u89e3\u7684SD\uff08\uff09\uff0c\u9500\u552e\u548c\u5206\u9500\u6a21\u5757\uff0c\u5305\u62ec\u91c7\u8d2d\u6536\u8d27\uff0c\u9500\u552e\u5355\uff0c\u9500\u552e\u53d1\u8d27\uff0c\u6536\u8d27\u548c\u53d1\u8d27\u8fc7\u8d26\uff0cMIGO\u7b49\u3002","title":"SD\u6a21\u5757\u6982\u8ff0"},{"location":"sd/outbound_delivery/","text":"\u4ea4\u8d27\u5355 \u00b6","title":"\uff08\u5916\u5411\uff09\u4ea4\u8d27\u5355"},{"location":"sd/outbound_delivery/#_1","text":"","title":"\u4ea4\u8d27\u5355"},{"location":"sd/outbound_delivery_post/","text":"\u53d1\u8d27\u8fc7\u8d26 \u00b6","title":"\u53d1\u8d27\u8fc7\u8d26"},{"location":"sd/outbound_delivery_post/#_1","text":"","title":"\u53d1\u8d27\u8fc7\u8d26"},{"location":"sd/sale_document/","text":"\u9500\u552e\u8ba2\u5355 \u00b6","title":"\u9500\u552e\u8ba2\u5355"},{"location":"sd/sale_document/#_1","text":"","title":"\u9500\u552e\u8ba2\u5355"}]}